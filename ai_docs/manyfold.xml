This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where security check has been disabled.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.devcontainer/
  devcontainer.json
.github/
  actions/
    setup/
      action.yml
  ISSUE_TEMPLATE/
    bug_report.md
    config.yml
    feature_request.md
  workflows/
    auto_merge.yml
    codeql.yml
    docker.yml
    push.yml
  CONTRIBUTING.md
  dependabot.yml
  FUNDING.yml
  PULL_REQUEST_TEMPLATE.md
  release.yml
.husky/
  .gitignore
  pre-push
app/
  admin/
    collections.rb
    creators.rb
    dashboard.rb
    libraries.rb
    link.rb
    model_files.rb
    models.rb
    problem.rb
    tags.rb
    users.rb
  api/
    v0/
      openapi.json
  assets/
    images/
      roundel.svg
      square.svg
    javascripts/
      active_admin.js
    stylesheets/
      entrypoints/
        themes/
          brite.scss
          cerulean.scss
          cosmo.scss
          cyborg.scss
          darkly.scss
          default.scss
          flatly.scss
          journal.scss
          litera.scss
          lumen.scss
          lux.scss
          materia.scss
          minty.scss
          morph.scss
          pulse.scss
          quartz.scss
          sandstone.scss
          simplex.scss
          sketchy.scss
          slate.scss
          solar.scss
          spacelab.scss
          superhero.scss
          united.scss
          vapor.scss
          yeti.scss
          zephyr.scss
        active_admin.scss
      src/
        altcha.scss
        effects.scss
        layout.scss
        libraries.scss
        links.scss
        model_files.scss
        models.scss
      application.scss
  components/
    access_indicator.rb
    altcha_widget.rb
    base_button.rb
    base.rb
    burger_menu.rb
    copy_button.rb
    display_user_quota.rb
    do_button.rb
    download_button.rb
    dropdown_item.rb
    follow_button.rb
    go_button.rb
    icon.rb
    link_list.rb
    modal.rb
    model_card.rb
    preview_frame.rb
    renderer.rb
    report_button.rb
    resolve_button.rb
    search_help.rb
    stat_block.rb
    tag.rb
  controllers/
    concerns/
      filterable.rb
      model_listable.rb
      permittable.rb
      tag_listable.rb
    settings/
      domain_blocks_controller.rb
      reports_controller.rb
      users_controller.rb
    users/
      omniauth_callbacks_controller.rb
      passwords_controller.rb
      registrations_controller.rb
      sessions_controller.rb
    activity_controller.rb
    altcha_controller.rb
    application_controller.rb
    benchmark_controller.rb
    collections_controller.rb
    comments_controller.rb
    creators_controller.rb
    doorkeeper_applications_controller.rb
    follows_controller.rb
    home_controller.rb
    libraries_controller.rb
    model_files_controller.rb
    models_controller.rb
    problems_controller.rb
    reports_controller.rb
    robots_controller.rb
    settings_controller.rb
  deserializers/
    activity_pub/
      application_deserializer.rb
      base_deserializer.rb
      collection_deserializer.rb
      creator_deserializer.rb
      model_deserializer.rb
    data_package/
      base_deserializer.rb
      collection_deserializer.rb
      creator_deserializer.rb
      link_deserializer.rb
      model_deserializer.rb
      model_file_deserializer.rb
    form/
      base_deserializer.rb
      collection_deserializer.rb
      creator_deserializer.rb
      model_deserializer.rb
      model_file_deserializer.rb
      uploaded_file_deserializer.rb
      uploaded_model_deserializer.rb
    manyfold_api/
      v0/
        base_deserializer.rb
        collection_deserializer.rb
        creator_deserializer.rb
        link_deserializer.rb
        model_deserializer.rb
        model_file_deserializer.rb
        uploaded_file_deserializer.rb
        uploaded_model_deserializer.rb
  helpers/
    activity_helper.rb
    application_helper.rb
    collections_helper.rb
    comments_helper.rb
    creators_helper.rb
    home_helper.rb
    layouts_helper.rb
    libraries_helper.rb
    model_files_helper.rb
    models_helper.rb
    problems_helper.rb
    settings_helper.rb
    uploads_helper.rb
  javascript/
    controllers/
      application.ts
      bulk_edit_controller.ts
      carousel_controller.ts
      cocooned_controller.ts
      copy_text_controller.ts
      editable_controller.ts
      i18n_controller.ts
      index.ts
      renderer_controller.ts
      storage_service_controller.ts
      tag_input_controller.ts
      tag_section_controller.ts
      upload_controller.ts
      zxcvbn_controller.ts
    src/
      canvas_proxy.ts
      comlink_event_handler.ts
      object_preview.ts
      orbit_controls.js
      window_extensions.d.ts
    altcha_worker.ts
    application.ts
    offscreen_renderer.ts
  jobs/
    activity/
      collection_published_job.rb
      model_collected_job.rb
      model_published_job.rb
      model_updated_job.rb
    analysis/
      analyse_model_file_job.rb
      file_conversion_job.rb
      geometric_analysis_job.rb
    scan/
      library/
        create_model_from_path_job.rb
        detect_filesystem_changes_job.rb
      model/
        add_new_files_job.rb
        check_for_problems_job.rb
        parse_metadata_job.rb
      model_file/
        parse_metadata_job.rb
      check_all_job.rb
      check_model_job.rb
    upgrade/
      backfill_data_packages.rb
      disambiguate_usernames_job.rb
      fix_nil_file_size_values.rb
      fix_parent_collections.rb
      update_actors_job.rb
    application_job.rb
    cache_sweep_job.rb
    downloads_sweep_job.rb
    organize_model_job.rb
    prepare_download_job.rb
    process_uploaded_file_job.rb
    README.md
    update_datapackage_job.rb
    usage_reporting_job.rb
  lib/
    auth_failure_app.rb
    careful_titleize.rb
    client_credentials_strategy.rb
    locale_awareness.rb
    public_url.rb
    supported_mime_types.rb
    trim_path_separators.rb
    usage_report.rb
  mailers/
    application_mailer.rb
    moderator_mailer.rb
    user_mailer.rb
  models/
    concerns/
      caber_object.rb
      caber_subject.rb
      commentable.rb
      federails_common.rb
      followable.rb
      follower.rb
      indexable.rb
      linkable.rb
      listable.rb
      lister.rb
      path_builder.rb
      problematic.rb
      public_i_dable.rb
      sluggable.rb
    altcha_solution.rb
    application_record.rb
    collection.rb
    comment.rb
    creator.rb
    favorite.rb
    library.rb
    link.rb
    model_file.rb
    model.rb
    problem.rb
    role.rb
    site_settings.rb
    user.rb
  policies/
    active_admin/
      page_policy.rb
    acts_as_taggable_on/
      tag_policy.rb
      tagging_policy.rb
    doorkeeper/
      application_policy.rb
    federails/
      moderation/
        domain_block_policy.rb
        report_policy.rb
      actor_policy.rb
      following_policy.rb
    users/
      passwords_policy.rb
      registrations_policy.rb
      sessions_policy.rb
    activity_policy.rb
    application_policy.rb
    collection_policy.rb
    creator_policy.rb
    library_policy.rb
    link_policy.rb
    model_file_policy.rb
    model_policy.rb
    problem_policy.rb
    role_policy.rb
    settings_policy.rb
    upload_policy.rb
    user_policy.rb
  serializers/
    activity_pub/
      application_serializer.rb
      base_serializer.rb
      collection_serializer.rb
      comment_serializer.rb
      creator_serializer.rb
      model_serializer.rb
      user_serializer.rb
    data_package/
      base_serializer.rb
      collection_serializer.rb
      creator_serializer.rb
      link_serializer.rb
      model_file_serializer.rb
      model_serializer.rb
    manyfold_api/
      v0/
        application_serializer.rb
        collection_list_serializer.rb
        collection_serializer.rb
        creator_list_serializer.rb
        creator_serializer.rb
        link_serializer.rb
        model_file_serializer.rb
        model_list_serializer.rb
        model_serializer.rb
    o_embed/
      application_serializer.rb
      collection_serializer.rb
      creator_serializer.rb
      model_serializer.rb
  services/
    activity_pub/
      actor_activity_handler.rb
    search/
      model_search_service.rb
    archive_download_service.rb
    path_parser_service.rb
    report_handler.rb
  uploaders/
    library_uploader.rb
  validators/
    change_case_only_validator.rb
    disjoint_library_folder_validator.rb
    existing_path_validator.rb
    multimodel_uniqueness_validator.rb
    regex_array_validator.rb
    safe_path_validator.rb
    spdx_validator.rb
    stable_mime_type_validator.rb
    writable_validator.rb
  views/
    activity/
      index.html.erb
    application/
      _caber_relation_fields.html.erb
      _caber_relations_form.html.erb
      _filters_card.html.erb
      _footer.html.erb
      _link_fields.html.erb
      _links_card.html.erb
      _links_form.html.erb
      _navbar.html.erb
      _order_buttons.html.erb
      _tag_list.html.erb
      _tags_card.html.erb
    collections/
      _collection.html.erb
      _form.html.erb
      _unassigned.html.erb
      edit.html.erb
      index.html.erb
      new.html.erb
      show.html.erb
    comments/
      show.activitypub.jbuilder
    creators/
      _creator.html.erb
      _form.html.erb
      _unassigned.html.erb
      edit.html.erb
      index.html.erb
      new.html.erb
      show.html.erb
    devise/
      confirmations/
        new.html.erb
      mailer/
        confirmation_instructions.html.erb
        email_changed.html.erb
        password_change.html.erb
        reset_password_instructions.html.erb
        unlock_instructions.html.erb
      passwords/
        edit.html.erb
        new.html.erb
      registrations/
        _file_list_settings.html.erb
        _general_settings.html.erb
        _pagination_settings.html.erb
        _problem_settings.html.erb
        _renderer_settings.html.erb
        _tag_cloud_settings.html.erb
        edit.html.erb
        first_use.html.erb
        new.html.erb
      sessions/
        new.html.erb
      shared/
        _error_messages.html.erb
        _links.html.erb
      unlocks/
        new.html.erb
    doorkeeper_applications/
      _breadcrumb.html.erb
      _form.html.erb
      edit.html.erb
      index.html.erb
      new.html.erb
      show.html.erb
    follows/
      _actor_table.html.erb
      _search_form.html.erb
      index.html.erb
      new.html.erb
      remote_follow.html.erb
    home/
      _activity.html.erb
      _browsing.html.erb
      _federation.html.erb
      _publishing.html.erb
      _support.html.erb
      _uploading.html.erb
      about.html.erb
      index.html.erb
      welcome.html.erb
    kaminari/
      _first_page.html.erb
      _gap.html.erb
      _last_page.html.erb
      _next_page.html.erb
      _page.html.erb
      _paginator.html.erb
      _prev_page.html.erb
    layouts/
      application.html.erb
      card_list_page.html.erb
      embed.html.erb
      mailer.html.erb
      mailer.text.erb
      settings.html.erb
    libraries/
      _form.html.erb
      edit.html.erb
      index.html.erb
      new.html.erb
    model_files/
      _breadcrumb.html.erb
      _form.html.erb
      _problem.html.erb
      bulk_edit.html.erb
      edit.html.erb
      embedded.html.erb
      show.html.erb
    models/
      _bulk_fields.html.erb
      _file.html.erb
      _form.html.erb
      _image_carousel.html.erb
      _list.html.erb
      _problem.html.erb
      _tags_edit.html.erb
      bulk_edit.html.erb
      edit.html.erb
      index.html.erb
      new.html.erb
      show.html.erb
    moderator_mailer/
      new_approval.text.erb
      new_report.text.erb
    problems/
      _filters.html.erb
      index.html.erb
    reports/
      new.html.erb
    robots/
      index.text.erb
      sitemap.xml.builder
    settings/
      domain_blocks/
        index.html.erb
        new.html.erb
      reports/
        index.html.erb
        show.html.erb
      users/
        _form.html.erb
        edit.html.erb
        index.html.erb
        new.html.erb
        show.html.erb
      _file_settings.html.erb
      _folder_settings.html.erb
      _submit.html.erb
      _tag_settings.html.erb
      analysis.html.erb
      appearance.html.erb
      discovery.html.erb
      downloads.html.erb
      multiuser.html.erb
      reporting.html.erb
      show.html.erb
    user_mailer/
      account_approved.text.erb
      test_email.text.erb
    base.rb
bin/
  brakeman
  bundle
  dev
  docker-entrypoint.sh
  manyfold
  rails
  rake
  rubocop
  setup
  spring
  yarn
config/
  credentials/
    test.yml.enc
  environments/
    development.rb
    production.rb
    test.rb
  initializers/
    active_admin.rb
    active_job_status.rb
    active_job_uniqueness.rb
    acts_as_favoritor.rb
    acts_as_taggable_on.rb
    altcha.rb
    api.rb
    app_version.rb
    application_controller_renderer.rb
    assets.rb
    backtrace_silencers.rb
    bullet.rb
    caber.rb
    content_security_policy.rb
    cookies_serializer.rb
    core_extensions.rb
    cors.rb
    devise.rb
    doorkeeper.rb
    federails.rb
    field_with_errors.rb
    filter_parameter_logging.rb
    i18n.rb
    inflections.rb
    libarchive_security.rb
    lograge.rb
    mime_types.rb
    openssl.rb
    parameter_parsers.rb
    permissions_policy.rb
    phlex.rb
    rails_performance.rb
    rolify.rb
    rswag_api.rb
    rswag_ui.rb
    session_storage.rb
    shrine.rb
    translation.rb
    turbo_streams.rb
    upgrade.rb
    usage_reports.rb
    user_agent.rb
    warnings.rb
    wrap_parameters.rb
  locales/
    active_admin/
      en.yml
      nl.yml
    collections/
      cs.yml
      de.yml
      en.yml
      es.yml
      fr.yml
      ja.yml
      nl.yml
      pl.yml
    creators/
      cs.yml
      de.yml
      en.yml
      es.yml
      fr.yml
      ja.yml
      nl.yml
      pl.yml
    devise/
      cs.yml
      de.yml
      en.yml
      es.yml
      fr.yml
      ja.yml
      nl.yml
      pl.yml
    libraries/
      cs.yml
      de.yml
      en.yml
      es.yml
      fr.yml
      ja.yml
      nl.yml
      pl.yml
    model_files/
      cs.yml
      de.yml
      en.yml
      es.yml
      fr.yml
      ja.yml
      nl.yml
      pl.yml
    models/
      cs.yml
      de.yml
      en.yml
      es.yml
      fr.yml
      ja.yml
      nl.yml
      pl.yml
    problems/
      cs.yml
      de.yml
      en.yml
      es.yml
      fr.yml
      ja.yml
      nl.yml
      pl.yml
    settings/
      cs.yml
      de.yml
      en.yml
      es.yml
      fr.yml
      ja.yml
      nl.yml
      pl.yml
    cs.yml
    de.yml
    en.yml
    es.yml
    fr.yml
    ja.yml
    nl.yml
    pl.yml
  workers/
    default.yml
    performance.yml
  application.rb
  boot.rb
  brakeman.ignore
  brakeman.yml
  cable.yml
  credentials.yml.enc
  database.yml
  environment.rb
  i18n-js.yml
  i18n-tasks.yml
  puma.rb
  routes.rb
  spring.rb
  storage.yml
db/
  data/
    20221214230757_add_new_defaults_to_renderer_settings.rb
    20221220223040_move_printed_to_favorites.rb
    20230221174212_move_scale_factor_into_note.rb
    20230308006000_move_collection_tag_into_object.rb
    20230612080306_remove_destination_exists_problems.rb
    20230613134254_remove_leading_separators_from_model_filenames.rb
    20230617222353_generate_slugs.rb
    20230628194944_make_names_unique.rb
    20240319155526_convert_admin_flag_to_role.rb
    20240322150022_set_admin_password_reset_token.rb
    20240615085913_move_file_data_into_shrine.rb
    20240731165647_create_federails_actors.rb
    20240802094448_create_more_federails_actors.rb
    20240805111500_backfill_activities.rb
    20240830121749_add_default_access_controls.rb
    20240830151650_rename_default_roles.rb
    20240904152358_generate_public_i_ds_for_models.rb
    20240909100000_backfill_activities_after_permissions.rb
    20240923114515_deduplicate_roles.rb
    20241013215000_backfill_activities_after_uuids.rb
    20241021125322_create_public_i_ds_for_users.rb
    20241118155027_clear_stuck_problems.rb
    20250121164452_make_public_i_ds_lowercase.rb
  migrate/
    20210130201037_create_libraries.rb
    20210130203243_create_models.rb
    20210205230918_create_parts.rb
    20210210153744_add_fields_to_parts.rb
    20210212143001_acts_as_taggable_on_migration.acts_as_taggable_on_engine.rb
    20210212143002_add_missing_unique_indices.acts_as_taggable_on_engine.rb
    20210212143003_add_taggings_counter_cache_to_tags.acts_as_taggable_on_engine.rb
    20210212143004_add_missing_taggable_index.acts_as_taggable_on_engine.rb
    20210212143005_change_collation_for_tag_names.acts_as_taggable_on_engine.rb
    20210212143006_add_missing_indexes_on_taggings.acts_as_taggable_on_engine.rb
    20210220204055_add_preview_part_to_model.rb
    20210225232756_create_creators.rb
    20210225232841_add_creator_to_models.rb
    20210301230017_create_links.rb
    20210302161202_drop_link_fields_from_creators.rb
    20210314185822_remove_fk_constraint_from_model_preview_part.rb
    20210318202638_add_y_up_to_parts.rb
    20210321164508_create_images.rb
    20210330215825_create_delayed_jobs.rb
    20220105233138_rename_parts_to_model_files.rb
    20220106220519_remove_images_table.rb
    20220612220115_add_service_name_to_active_storage_blobs.active_storage.rb
    20220612220116_create_active_storage_variant_records.active_storage.rb
    20220612220117_remove_not_null_on_active_storage_blobs_checksum.active_storage.rb
    20220614210023_devise_create_users.rb
    20220614211256_add_username_to_users.rb
    20220614213902_add_admin_to_users.rb
    20220617122809_add_pagination_settings_to_user.rb
    20220619174307_create_settings.rb
    20220626152444_add_scale_factor_to_models.rb
    20220702202932_add_digest_to_model_files.rb
    20221128165903_add_renderer_settings_to_users.rb
    20221210001132_create_problems.rb
    20221219204414_acts_as_favoritor_migration.rb
    20221220223340_drop_printed_from_model_files.rb
    20230202210000_add_notes_excerpt_to_models.rb
    20230202210001_add_notes_excerpt_to_creators.rb
    20230203150000_add_notes_excerpt_to_model_files.rb
    20230221180921_remove_scale_factor_from_models.rb
    20230222155910_rename_excerpt_to_caption.rb
    20230303150029_add_notes_name_caption_to_library.rb
    20230305180823_add_tagregex_to_library.rb
    20230307215826_add_icon_to_library.rb
    20230308004237_create_collection.rb
    20230308005021_add_collection_to_models.rb
    20230313000000_rename_collection_excerpt_to_caption.rb
    20230313000001_change_pagination_settings_on_user.rb
    20230316184012_add_tag_cloud_settings_to_user.rb
    20230324000000_add_collection_to_collections.rb
    20230615135601_add_slugs.rb
    20230628195018_add_unique_constraint_to_names_and_slugs.rb
    20230707082403_add_size_to_model_files.rb
    20230710102250_change_file_size_to_big_int.rb
    20230711111009_add_note_to_problems.rb
    20240122114207_add_problem_settings_to_user.rb
    20240127143358_add_license_to_model.rb
    20240131134832_add_ignored_to_problems.rb
    20240208143319_add_presupported_version_to_model_files.rb
    20240209125409_add_file_list_settings_to_user.rb
    20240228130246_add_missing_unique_indexes.rb
    20240306095646_create_flipper_tables.rb
    20240319155251_rolify_create_roles.rb
    20240319155903_remove_admin_from_users.rb
    20240322143621_add_reset_password_token_to_users.rb
    20240410221112_add_rememberable_to_users.rb
    20240410222922_add_reset_password_sent_at_to_users.rb
    20240418112821_drop_delayed_jobs.rb
    20240423102250_add_interface_language_to_users.rb
    20240610120318_add_lockable_to_users.rb
    20240614085913_add_attachment_data_to_model_files.rb
    20240701142651_add_storage_service_to_libraries.rb
    20240703103707_add_s3_fields_to_library.rb
    20240703160732_change_index_on_library_path.rb
    20240727113215_create_federails_actors.federails.rb
    20240727113216_create_federails_followings.federails.rb
    20240727113217_create_federails_activities.federails.rb
    20240731165646_change_actor_entity_rel_to_polymorphic.federails.rb
    20240827155630_create_caber_relations.rb
    20240904151944_add_public_i_ds_to_models.rb
    20240924122004_add_virtual_columns_for_sorting.rb
    20240926162407_add_keypair_to_actors.federails.rb
    20241004194445_add_uuids.federails.rb
    20241007182824_create_comments.rb
    20241009122540_add_system_to_comments.rb
    20241015090803_add_omniauth_to_users.rb
    20241017093301_add_sensitive_flag_to_models_and_comments.rb
    20241017113112_add_sensitive_content_handling_to_users.rb
    20241021124608_add_public_i_ds_to_users.rb
    20241025110218_remove_unneeded_indexes.rb
    20241105121830_add_in_progress_to_problems.rb
    20241122121621_add_approved_to_user.rb
    20241128162213_create_federails_moderation_reports.federails_moderation.rb
    20241128162214_create_federails_moderation_domain_blocks.federails_moderation.rb
    20250114105808_add_federation_attributes_to_comments.rb
    20250121105010_add_s3_path_style_to_library.rb
    20250122171731_add_extensions_to_federails_actors.federails.rb
    20250222000000_add_creator_to_collections.rb
    20250305171530_add_local_to_actors.federails.rb
    20250407160721_add_actor_type_to_actors.federails.rb
    20250407160722_add_tombstoned_at_to_actors.federails.rb
    20250408111644_create_doorkeeper_tables.rb
    20250408145956_add_owner_to_application.rb
    20250409120155_remove_default_actor_entity_type.rb
    20250409125753_add_quota_to_users.rb
    20250423094525_add_lowercase_filename_virtual_field_to_model_files.rb
    20250425104619_add_unique_index_to_links.rb
    20250520111046_add_preview_to_model_file.rb
    20250609210440_create_altcha_solutions.rb
    20250620141805_add_indexable_fields.rb
    20250621223410_change_indexable_from_integer_to_string.rb
    20250629212656_add_order_indexes_to_tables.rb
  data_schema.rb
  schema.rb
  seeds.rb
docker/
  s6-rc.d/
    manyfold/
      manyfold/
        run
        type
    redis/
      redis/
        run
        type
  base.dockerfile
  build.dockerfile
  manyfold.dockerfile
  runtime.dockerfile
  solo.dockerfile
public/
  400.html
  404.html
  406-unsupported-browser.html
  422.html
  500.html
spec/
  components/
    follow_button_spec.rb
    model_card_spec.rb
  deserializers/
    activity_pub/
      collection_deserializer_spec.rb
      creator_deserializer_spec.rb
      generic_deserializer_shared.rb
      model_deserializer_spec.rb
    data_package/
      collection_deserializer_spec.rb
      creator_deserializer_spec.rb
      link_deserializer_spec.rb
      model_deserializer_spec.rb
      model_file_deserializer_spec.rb
  factories/
    doorkeeper/
      access_token.rb
      application.rb
    federails/
      actor.rb
    collection.rb
    comment.rb
    creator.rb
    library.rb
    link.rb
    model_file.rb
    model.rb
    problem.rb
    report.rb
    role.rb
    tag.rb
    traits.rb
    user.rb
  fixtures/
    fix_nil_file_size_values_spec/
      example.obj
    model_file_spec/
      example.obj
  helpers/
    application_helper_spec.rb
    model_files_helper_spec.rb
    models_helper_spec.rb
    problems_helper_spec.rb
  jobs/
    activity/
      model_published_job_spec.rb
    analysis/
      analyse_model_file_job_spec.rb
      file_conversion_job_spec.rb
      geometric_analysis_job_spec.rb
    scan/
      library/
        create_model_from_path_job_spec.rb
        detect_filesystem_changes_job_spec.rb
      model/
        add_new_files_job_spec.rb
        check_for_problems_job_spec.rb
        parse_metadata_job_spec.rb
      model_file/
        parse_metadata_job_spec.rb
      check_all_job_spec.rb
      check_model_job_spec.rb
    upgrade/
      disambiguate_usernames_job_spec.rb
      fix_nil_file_size_values_spec.rb
    application_job_spec.rb
    organize_model_job_spec.rb
    process_uploaded_file_job_spec.rb
    update_datapackage_job_spec.rb
  lib/
    careful_titleize_spec.rb
    public_url_spec.rb
    supported_mime_types_spec.rb
    usage_report_spec.rb
  mailers/
    moderator_mailer_spec.rb
    user_mailer_spec.rb
  models/
    concerns/
      caber_object_shared.rb
      caber_subject_shared.rb
      commentable_shared.rb
      followable_shared.rb
      follower_shared.rb
      indexable_shared.rb
      listable_shared.rb
      path_builder_spec.rb
      sluggable_shared.rb
    collection_spec.rb
    comment_spec.rb
    creator_spec.rb
    library_spec.rb
    link_spec.rb
    model_file_spec.rb
    model_spec.rb
    problem_spec.rb
    role_spec.rb
    site_settings_spec.rb
    user_spec.rb
  policies/
    application_policy/
      owner_scope_spec.rb
      scope_spec.rb
      update_scope_spec.rb
    model_file_policy/
      scope_spec.rb
    model_policy/
      scope_spec.rb
    shared/
      application_policy_shared.rb
    collection_policy_spec.rb
    creator_policy_spec.rb
    model_file_policy_spec.rb
    model_policy_spec.rb
  requests/
    admin/
      collections_spec.rb
      creators_spec.rb
      dashboard_spec.rb
      link_spec.rb
      models_spec.rb
      problem_spec.rb
      tags_spec.rb
    api/
      oembed/
        api_endpoint_spec.rb
        collections_spec.rb
        creators_spec.rb
        models_spec.rb
      v0/
        collections_spec.rb
        creators_spec.rb
        model_files_spec.rb
        models_spec.rb
        uploads_spec.rb
      nodeinfo_spec.rb
    settings/
      users_spec.rb
    users/
      passwords_spec.rb
      registrations_spec.rb
      sessions_spec.rb
    activity_spec.rb
    collections_spec.rb
    comments_spec.rb
    creators_spec.rb
    follows_spec.rb
    home_spec.rb
    libraries_spec.rb
    model_files_spec.rb
    models_spec.rb
    problems_spec.rb
    robots_spec.rb
    settings_spec.rb
    uploads_spec.rb
    webfinger_spec.rb
  serializers/
    activity_pub/
      collection_serializer_spec.rb
      comment_serializer_spec.rb
      creator_serializer_spec.rb
      generic_activity_pub_serializer_shared.rb
      model_serializer_spec.rb
      user_serializer_spec.rb
    data_package/
      collection_serializer_spec.rb
      creator_serializer_spec.rb
      link_serializer_spec.rb
      model_file_serializer_spec.rb
      model_serializer_spec.rb
    manyfold_api/
      v0/
        collection_list_serializer_spec.rb
        creator_list_serializer_spec.rb
        model_list_serializer_spec.rb
    o_embed/
      collection_serializer_spec.rb
      creator_serializer_spec.rb
      generic_o_embed_serializer_shared.rb
      model_serializer_spec.rb
  services/
    search/
      model_search_service_spec.rb
    path_parser_service_spec.rb
  support/
    database_cleaner.rb
    devise.rb
    error_handling.rb
    factory_bot.rb
    features.rb
    maintain_test_assets.rb
    mock_directory.rb
    parsed_body.rb
    phlex.rb
    pundit.rb
    screenshot_helpers.rb
    shared_examples.rb
    sidekiq.rb
    sign_in_role.rb
    with_model.rb
  system/
    documentation_screenshots_spec.rb
  validators/
    multimodel_uniqueness_validator_spec.rb
    regex_array_validator_spec.rb
  rails_helper.rb
  spec_helper.rb
  swagger_helper.rb
.codeclimate.yml
.dockerignore
.erb_lint.yml
.eslintignore
.gitattributes
.gitignore
.node-version
.rspec
.rubocop.yml
.ruby-version
.yarnrc.yml
babel.config.js
config.ru
docker-compose.example.yml
env.example
FEDERATION.md
Gemfile
Guardfile
LICENSE.md
package.json
postcss.config.js
Procfile
Procfile.dev
Rakefile
README.md
SECURITY.md
sweep.yaml
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".devcontainer/devcontainer.json">
{
    "name": "manyfold Development Container",
    "image": "ghcr.io/rails/devcontainer/images/ruby:3.4.1",
    "features": {
        "ghcr.io/devcontainers/features/node:1": {
            "version": "22"
        },
         "ghcr.io/rails/devcontainer/features/activestorage": {},
         "ghcr.io/itsmechlark/features/redis-server:1": {}
    },
    "postCreateCommand": "sudo apt-get update && sudo apt-get upgrade -y && sudo apt-get install libpq-dev libmariadb-dev libarchive13 -y && export COREPACK_ENABLE_DOWNLOAD_PROMPT=0 && corepack enable && bundle install && yarn install",
    "postStartCommand": "bash ./bin/dev",
    "customizations": {
        "vscode": {
            "extensions": [
                "dbaeumer.vscode-eslint",
                "esbenp.prettier-vscode",
                "Shopify.ruby-lsp"
            ]
        }
    },
    "containerEnv": {
        "SHELL": "/bin/bash",
        "RAILS_ENV": "development",
        "NODE_ENV": "development"
    },
    "forwardPorts": [5000],
    "portsAttributes": {
        "5000": {
            "label": "Rails Server",
            "onAutoForward": "notify"
        }
    }
}
</file>

<file path=".github/actions/setup/action.yml">
# Inspired by https://github.com/Energy-Sparks/energy-sparks/blob/master/.github/actions/setup/action.yml
name: Setup
description: Set up Manyfold build environment
runs:
  using: composite
  steps:
    - uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true
    - name: Enable Corepack
      run: corepack enable
      shell: bash
    - name: Set up Node
      uses: actions/setup-node@v4
      with:
        node-version-file: ".node-version"
        cache: yarn
    - name: Install yarn packages
      run: yarn install
      shell: bash
</file>

<file path=".github/ISSUE_TEMPLATE/bug_report.md">
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: bug
assignees: ''

---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.
</file>

<file path=".github/ISSUE_TEMPLATE/config.yml">
blank_issues_enabled: true
contact_links:
  - name: Support Discussions
    url: https://github.com/manyfold3d/manyfold/discussions/new?category=support
    about: Having trouble, but can't pin it down to a specific bug? Ask the community for help!
  - name: Matrix Chat
    url: https://matrix.to/#/#manyfold:matrix.org
    about: Come and talk to us live with problems, ideas, questions, anything!
  - name: Social Media
    url: https://3dp.chat/@manyfold
    about: Talk to us on Mastodon!
</file>

<file path=".github/ISSUE_TEMPLATE/feature_request.md">
---
name: Feature request
about: Suggest an idea for this project
title: ''
labels: feature
assignees: ''

---

<!--
Before submitting a feature request, please take a look at our list of existing requests, to see if anyone has suggested the same thing! We might already be working on it :) https://github.com/manyfold3d/manyfold/labels/feature

You can also come and discuss ideas in our Feature Requests channel on Matrix: https://matrix.to/#/#manyfold:matrix.org
-->

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
</file>

<file path=".github/workflows/auto_merge.yml">
name: auto-merge

on:
  pull_request:

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ahmadnassri/action-dependabot-auto-merge@v2
        with:
          target: minor
          github-token: ${{ secrets.AUTO_MERGE_TOKEN }}
</file>

<file path=".github/workflows/codeql.yml">
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '29 7 * * 0'

jobs:
  analyze:
    name: Analyze
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners
    # Consider using larger runners for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      # required for all workflows
      security-events: write

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript-typescript', 'ruby' ]
        # CodeQL supports [ 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift' ]
        # Use only 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use only 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality


    # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #     echo "Run, Build Application using script"
    #     ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
</file>

<file path=".github/workflows/docker.yml">
name: Docker

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
    tags:
      - v*
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker tag for build results'
        type: string
        default: manual
        required: true
  schedule:
    - cron: "0 0 * * *"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read # for checkout
      id-token: write # for OIDC token, used for Depot
      packages: write # to upload build to GHCR
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Work out Docker tags
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ inputs.tag }},event=workflow_dispatch
            type=schedule,pattern=nightly
            type=semver,pattern={{version}}
            type=ref,event=pr
            type=edge

      - name: Depot setup
        uses: depot/setup-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: depot
        uses: depot/build-push-action@v1
        with:
          project: bsbhgkfhgc
          context: .
          file: ./docker/manyfold.dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          build-args: |
            APP_VERSION=${{ steps.docker_meta.outputs.version }}
            GIT_SHA=${{ github.sha }}
            DOCKER_TAG=${{ steps.docker_meta.outputs.tags }}

  solo:
    runs-on: ubuntu-latest
    permissions:
      contents: read # for checkout
      id-token: write # for OIDC token, used for Depot
      packages: write # to upload build to GHCR
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Work out Docker tags
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-solo
          tags: |
            type=raw,value=${{ inputs.tag }},event=workflow_dispatch
            type=schedule,pattern=nightly
            type=semver,pattern={{version}}
            type=ref,event=pr
            type=edge

      - name: Depot setup
        uses: depot/setup-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: depot
        uses: depot/build-push-action@v1
        with:
          project: bsbhgkfhgc
          context: .
          file: ./docker/solo.dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          build-args: |
            APP_VERSION=${{ steps.docker_meta.outputs.version }}
            GIT_SHA=${{ github.sha }}
</file>

<file path=".github/workflows/push.yml">
name: Ruby

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - name: Remove data schema so we bootstrap from zero with data migrations
        run: rm db/data_schema.rb
      - name: Set up database with prepare command so we catch any migration explosions
        run: bundle exec rails db:prepare:with_data
        env:
          RAILS_ENV: test
      - name: Check typescript
        run: yarn typecheck
      - name: Compile assets
        run: bundle exec rails assets:precompile
      - name: Run tests
        run: bundle exec rake
      - name: Upload Coverage
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage/coverage.xml
    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - name: Lint Ruby code
        run: bundle exec rake rubocop
      - name: Lint ERB templates
        run: bundle exec erb_lint --lint-all
      - name: Lint Typescript code
        run: yarn run lint:ts
  i18n:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - name: Check translations
        run: bundle exec i18n-tasks health -l en
</file>

<file path=".github/CONTRIBUTING.md">
# Contributing

We love pull requests from everyone. By participating in this project, you
agree to abide by our [code of conduct](https://github.com/manyfold3d/manyfold?tab=coc-ov-file#coc-ov-file).

Fork, then clone the repo:

    git clone git@github.com:your-username/manyfold.git

Get the app running locally by following these [instructions](https://github.com/manyfold3d/manyfold?tab=readme-ov-file#running-locally):

Then make sure the tests pass:

    rake

Make your change. Add tests for your change. Make sure the old and new tests both pass!

Push to your fork and [submit a pull request](https://github.com/manyfold3d/manyfold/compare/).

We try to at least comment on pull requests within a few days (and normally much
quicker). We may suggest some changes, improvements, or alternatives.

Some things that will increase the chance that your pull request is accepted:

* Sign our simple [Contributor License Agreement](https://cla-assistant.io/manyfold3d/manyfold) agreeing to license your code as MIT
* Write tests.
* Check that your code passes our [linter](https://github.com/manyfold3d/manyfold?tab=readme-ov-file#coding-standards).
* Write a [good commit message](https://www.freecodecamp.org/news/how-to-write-better-git-commit-messages/).
</file>

<file path=".github/dependabot.yml">
version: 2
updates:
- package-ecosystem: bundler
  directory: "/"
  schedule:
    interval: daily
  open-pull-requests-limit: 10
- package-ecosystem: npm
  directory: "/"
  schedule:
    interval: daily
  open-pull-requests-limit: 10
- package-ecosystem: "github-actions"
  directory: "/"
  schedule:
    interval: "daily"
</file>

<file path=".github/FUNDING.yml">
open_collective: manyfold
</file>

<file path=".github/PULL_REQUEST_TEMPLATE.md">
## Checklist

🚨 Please review the [guidelines for contributing](../CONTRIBUTING.md) to this repository. 🚨

- [ ] Make sure you are making a pull request against our **main branch** (left side)
- [ ] Check that that your branch is up to date with our main.
- [ ] Make sure you are requesting to **pull a topic/feature/bugfix branch** (right side). Don't request *your* main!
- [ ] Check that the tests and code linter both pass.
- [ ] If you're a new contributor, please sign our [contributor license agreement](https://cla-assistant.io/manyfold3d/manyfold).

## Warnings

- [ ] This PR will change existing database contents.
- [ ] This PR introduces a breaking change to existing installations.

## Summary

<!--
What does this PR do? Why did you open it?
-->

## Linked issues

<!--
Does this PR resolve an issue? If so, please state "resolves #{number}" here.
Mention any other linked issues or PRs as well, even if this PR doesn't resolve them completely.
-->

## Description of changes

<!--
Please add details of what's been added, removed or fixed.
Describe any choices made, why you did things a certain way.
Are there any expected consequences of this PR?
Include screenshots if applicable.
-->
</file>

<file path=".github/release.yml">
changelog:
  categories:
    - title: 💥 Breaking Changes 💥
      labels:
        - breaking change
    - title: ✨ New Features ✨
      labels:
        - feature
    - title: 🔒 Security 🔒
      labels:
        - security
    - title: 🐛 Bug Fixes 🐛
      labels:
        - bug
    - title: 🧑 Accessibility 🧑
      labels:
        - accessibility
    - title: ⛑️ Trust & Safety ⛑️
      labels:
        - trust+safety
    - title: 🌍 Sustainability & Performance 🌍
      labels:
        - sustainability
        - performance
    - title: 🛠️ Other Improvements 🛠️
      labels:
        - "*"
      exclude:
        labels:
          - dependencies
</file>

<file path=".husky/.gitignore">
_
</file>

<file path=".husky/pre-push">
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

bundle exec rake rubocop:autocorrect
bundle exec erb_lint --lint-all
yarn run lint:ts
</file>

<file path="app/admin/collections.rb">
ActiveAdmin.register Collection do
  actions :all, except: [:new]
  permit_params :name, :notes, :caption

  Collection.ransackable_symbols.each { |it| filter it }

  controller do
    def find_resource
      scoped_collection.find_param(params[:id])
    end
  end
end
</file>

<file path="app/admin/creators.rb">
ActiveAdmin.register Creator do
  actions :all, except: [:new]

  Creator.ransackable_symbols.each { |it| filter it }

  # See permitted parameters documentation:
  # https://github.com/activeadmin/activeadmin/blob/master/docs/2-resource-customization.md#setting-up-strong-parameters
  #
  # Uncomment all parameters which should be permitted for assignment
  #
  # permit_params :name
  #
  # or
  #
  # permit_params do
  #   permitted = [:name]
  #   permitted << :other if params[:action] == 'create' && current_user.is_administrator?
  #   permitted
  # end

  controller do
    def find_resource
      scoped_collection.find_param(params[:id])
    end
  end
end
</file>

<file path="app/admin/dashboard.rb">
# frozen_string_literal: true

ActiveAdmin.register_page I18n.t("active_admin.dashboard") do
  menu priority: 1, label: proc { I18n.t("active_admin.dashboard") }

  content title: proc { I18n.t("active_admin.dashboard") } do
    columns do
      column do
        panel I18n.t("active_admin.recent_models") do
          table do
            tbody do
              Model.recent.limit(20).map do |model|
                tr do
                  td { link_to(model.name, admin_model_path(model)) }
                  td { "#{time_ago_in_words(model.created_at)} ago" }
                end
              end
            end
          end
        end
      end
    end
  end
end
</file>

<file path="app/admin/libraries.rb">
ActiveAdmin.register Library do
  config.batch_actions = false

  actions :all, except: [:new]
  permit_params :path, :name, :notes, :caption, :icon, :storage_service,
    :s3_endpoint, :s3_bucket, :s3_access_key_id, :s3_secret_access_key, :s3_region, :s3_path_style, tag_regex: []

  Library.ransackable_symbols.each { |it| filter it }

  # See permitted parameters documentation:
  # https://github.com/activeadmin/activeadmin/blob/master/docs/2-resource-customization.md#setting-up-strong-parameters
  #
  # Uncomment all parameters which should be permitted for assignment
  #
  # permit_params :path
  #
  # or
  #
  # permit_params do
  #   permitted = [:path]
  #   permitted << :other if params[:action] == 'create' && current_user.is_administrator?
  #   permitted
  # end

  controller do
    def find_resource
      scoped_collection.find_param(params[:id])
    end
  end
end
</file>

<file path="app/admin/link.rb">
ActiveAdmin.register Link do
  actions :all
end
</file>

<file path="app/admin/model_files.rb">
ActiveAdmin.register ModelFile do
  actions :all, except: [:new]
  ModelFile.ransackable_symbols.each { |it| filter it }

  # See permitted parameters documentation:
  # https://github.com/activeadmin/activeadmin/blob/master/docs/2-resource-customization.md#setting-up-strong-parameters
  #
  # Uncomment all parameters which should be permitted for assignment
  #
  # permit_params :filename, :model_id, :presupported, :y_up
  #
  # or
  #
  # permit_params do
  #   permitted = [:filename, :model_id, :presupported, :y_up]
  #   permitted << :other if params[:action] == 'create' && current_user.is_administrator?
  #   permitted
  # end

  controller do
    def find_resource
      scoped_collection.find_param(params[:id])
    end
  end
end
</file>

<file path="app/admin/models.rb">
ActiveAdmin.register Model do
  actions :all, except: [:new]
  Model.ransackable_symbols.each { |it| filter it }

  # See permitted parameters documentation:
  # https://github.com/activeadmin/activeadmin/blob/master/docs/2-resource-customization.md#setting-up-strong-parameters
  #
  # Uncomment all parameters which should be permitted for assignment
  #
  # permit_params :name, :path, :library_id, :preview_file_id, :creator_id, :thingiverse_id, :cgtrader_path, :cults3d_path, :mmf_slug, :tag_list
  #
  # or
  #
  # permit_params do
  #   permitted = [:name, :path, :library_id, :preview_file_id, :creator_id, :thingiverse_id, :cgtrader_path, :cults3d_path, :mmf_slug, :tag_list]
  #   permitted << :other if params[:action] == 'create' && current_user.is_administrator?
  #   permitted
  # end

  controller do
    def find_resource
      scoped_collection.find_param(params[:id])
    end
  end
end
</file>

<file path="app/admin/problem.rb">
ActiveAdmin.register Problem do
  actions :all, except: [:new]

  controller do
    def find_resource
      scoped_collection.find_param(params[:id])
    end
  end
end
</file>

<file path="app/admin/tags.rb">
ActiveAdmin.register ActsAsTaggableOn::Tag do
  controller do
    def scoped_collection
      end_of_association_chain.for_context(:tags)
    end
  end
  permit_params :name
end
</file>

<file path="app/admin/users.rb">
ActiveAdmin.register User do
  config.batch_actions = false

  permit_params :email, :password, :password_confirmation, :username, role_ids: []
  User.ransackable_symbols.each { |it| filter it }

  controller do
    defaults finder: :find_by_username

    # Allow form to be submitted without a password
    def update
      if params[:user][:password].blank?
        params[:user].delete "password"
        params[:user].delete "password_confirmation"
      end
      super
    end
  end

  show do
    attributes_table do
      row :username
      row :email
      row :roles
      row :created_at
      row :updated_at
    end
    attributes_table title: "Settings" do
      row :pagination_settings
      row :renderer_settings
      row :tag_cloud_settings
      row :problem_settings
      row :file_list_settings
    end
  end

  index do
    selectable_column
    id_column
    column :username
    column :email
    column :current_sign_in_at
    column :sign_in_count
    column :created_at
    actions
  end

  filter :username
  filter :email
  filter :current_sign_in_at
  filter :sign_in_count
  filter :created_at

  form do |f|
    f.inputs "Basics" do
      f.input :username
      f.input :email
      f.input :password
      f.input :password_confirmation
    end
    f.inputs "Permissions" do
      f.input :roles, as: :check_boxes
    end
    f.inputs "Settings" do
      f.input :pagination_settings
      f.input :renderer_settings
      f.input :tag_cloud_settings
      f.input :problem_settings
      f.input :file_list_settings
    end
    f.actions
  end

  controller do
    def find_resource
      scoped_collection.find_param(params[:id])
    end
  end
end
</file>

<file path="app/api/v0/openapi.json">
{
  "openapi": "3.0.1",
  "info": {
    "title": "Manyfold API",
    "version": "0",
    "description": "This document describes the REST API for this [Manyfold](https://manyfold.app) instance.\n\nWarning! This API...\n\n* ... is not complete! Functionality is limited for now, but future releases will add more capabilities.\n* ... is not yet at v1! It's subject to breaking changes at any time.\n* ... is only valid for this host! Other Manyfold instances running different software versions may expose a different set of API functionality.\n"
  },
  "paths": {
    "/.well-known/nodeinfo": {
      "get": {
        "summary": "Discovery URL for NodeInfo protocol",
        "tags": [
          "NodeInfo"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json; profile=\"http://nodeinfo.diaspora.software/ns/schema/2.0#\"": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "links": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "rel": {
                            "type": "string",
                            "example": "https://nodeinfo.diaspora.software/ns/schema/2.0"
                          },
                          "href": {
                            "type": "string",
                            "example": "/nodeinfo/2.0",
                            "description": "The URL to the full NodeInfo document"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "links"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/nodeinfo/2.0": {
      "get": {
        "summary": "Get server metadata in NodeInfo 2.0 format",
        "tags": [
          "NodeInfo"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json; profile=\"http://nodeinfo.diaspora.software/ns/schema/2.0#\"": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string",
                      "example": "2.0"
                    },
                    "software": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "Manyfold"
                        },
                        "version": {
                          "type": "string",
                          "example": "v0.103.0"
                        }
                      }
                    },
                    "protocols": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "activitypub"
                      }
                    },
                    "services": {
                      "type": "object",
                      "properties": {
                        "inbound": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": []
                        },
                        "outbound": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": []
                        }
                      }
                    },
                    "openRegistrations": {
                      "type": "boolean"
                    },
                    "usage": {
                      "type": "object",
                      "properties": {
                        "users": {
                          "type": "object",
                          "properties": {
                            "total": {
                              "type": "integer"
                            },
                            "activeMonth": {
                              "type": "integer"
                            },
                            "activeHalfyear": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "metadata": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "version",
                    "software",
                    "protocols",
                    "openRegistrations"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/oembed": {
      "get": {
        "summary": "generic oEmbed API endpoint",
        "tags": [
          "oEmbed"
        ],
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxwidth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "maxheight",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "303": {
            "description": "Redirect to oembed version of the provided URL"
          }
        }
      }
    },
    "/collections/{id}.oembed": {
      "get": {
        "summary": "oEmbed response for Collections",
        "tags": [
          "oEmbed"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxwidth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "maxheight",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json+oembed": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/oembed_rich"
                    },
                    {
                      "$ref": "#/components/schemas/oembed_photo"
                    },
                    {
                      "$ref": "#/components/schemas/oembed_video"
                    },
                    {
                      "$ref": "#/components/schemas/oembed_link"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "rich": "#/components/schemas/oembed_rich",
                      "photo": "#/components/schemas/oembed_photo",
                      "video": "#/components/schemas/oembed_video",
                      "link": "#/components/schemas/oembed_link"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found or Unauthorized"
          }
        }
      }
    },
    "/creators/{id}.oembed": {
      "get": {
        "summary": "oEmbed response for Creators",
        "tags": [
          "oEmbed"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxwidth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "maxheight",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json+oembed": {
                "schema": {
                  "$ref": "#/components/schemas/oembed_link"
                }
              }
            }
          },
          "404": {
            "description": "Not Found or Unauthorized"
          }
        }
      }
    },
    "/models/{id}.oembed": {
      "get": {
        "summary": "oEmbed response for Models",
        "tags": [
          "oEmbed"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxwidth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "maxheight",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json+oembed": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/oembed_rich"
                    },
                    {
                      "$ref": "#/components/schemas/oembed_photo"
                    },
                    {
                      "$ref": "#/components/schemas/oembed_video"
                    },
                    {
                      "$ref": "#/components/schemas/oembed_link"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "rich": "#/components/schemas/oembed_rich",
                      "photo": "#/components/schemas/oembed_photo",
                      "video": "#/components/schemas/oembed_video",
                      "link": "#/components/schemas/oembed_link"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found, or Unauthorized"
          }
        }
      }
    },
    "/collections": {
      "get": {
        "summary": "A list of collections",
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "description": "Specify which page of results to retrieve.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "enum": [
              "name",
              "recent"
            ],
            "description": "Specify order of results; either by name or creation time:\n * `name` \n * `recent` \n ",
            "example": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "client_credentials": [
              "public",
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.manyfold.v0+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "$ref": "#/components/schemas/jsonld_context"
                    },
                    "@id": {
                      "type": "string",
                      "example": "https://example.com/collections"
                    },
                    "@type": {
                      "type": "string",
                      "example": "hydra:Collection"
                    },
                    "totalItems": {
                      "type": "integer",
                      "example": 42
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "@id": {
                            "type": "string",
                            "example": "/collections/abc123",
                            "description": "The URL of the collection"
                          },
                          "name": {
                            "type": "string",
                            "example": "Printer Parts",
                            "description": "The human name of the collection"
                          }
                        },
                        "required": [
                          "@id",
                          "name"
                        ]
                      }
                    },
                    "view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "example": "https://example.com/collections?page=2"
                        },
                        "@type": {
                          "type": "string",
                          "example": "hydra:PartialCollectionView"
                        },
                        "first": {
                          "type": "string",
                          "example": "https://example.com/collections?page=1"
                        },
                        "prev": {
                          "type": "string",
                          "example": "https://example.com/collections?page=1"
                        },
                        "next": {
                          "type": "string",
                          "example": "https://example.com/collections?page=3"
                        },
                        "last": {
                          "type": "string",
                          "example": "https://example.com/collections?page=10"
                        }
                      },
                      "required": [
                        "@id",
                        "@type",
                        "first",
                        "last"
                      ]
                    }
                  },
                  "required": [
                    "@context",
                    "@id",
                    "@type",
                    "totalItems",
                    "member",
                    "view"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized; the request did not provide valid authentication details"
          },
          "403": {
            "description": "Forbidden; the provided credentials do not have permission to perform the requested action"
          }
        }
      },
      "post": {
        "summary": "Create a new collection",
        "tags": [
          "Collections"
        ],
        "security": [
          {
            "client_credentials": [
              "write"
            ]
          }
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "Collection created",
            "content": {
              "application/vnd.manyfold.v0+json": {
                "schema": {
                  "$ref": "#/components/schemas/collection_response"
                }
              }
            }
          },
          "400": {
            "description": "The request structure was incorrect"
          },
          "422": {
            "description": "Creation failed due to invalid data"
          },
          "401": {
            "description": "Unauthorized; the request did not provide valid authentication details"
          },
          "403": {
            "description": "Forbidden; the provided credentials do not have permission to perform the requested action"
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.manyfold.v0+json": {
              "schema": {
                "$ref": "#/components/schemas/collection_request"
              }
            }
          }
        }
      }
    },
    "/collections/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "example": "abc123",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Details of a single collection",
        "tags": [
          "Collections"
        ],
        "security": [
          {
            "client_credentials": [
              "public",
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.manyfold.v0+json": {
                "schema": {
                  "$ref": "#/components/schemas/collection_response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized; the request did not provide valid authentication details"
          },
          "403": {
            "description": "Forbidden; the provided credentials do not have permission to perform the requested action"
          }
        }
      },
      "patch": {
        "summary": "Update a collection",
        "tags": [
          "Collections"
        ],
        "security": [
          {
            "client_credentials": [
              "write"
            ]
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Collection updated",
            "content": {
              "application/vnd.manyfold.v0+json": {
                "schema": {
                  "$ref": "#/components/schemas/collection_response"
                }
              }
            }
          },
          "400": {
            "description": "The request structure was incorrect"
          },
          "422": {
            "description": "Creation failed due to invalid data"
          },
          "401": {
            "description": "Unauthorized; the request did not provide valid authentication details"
          },
          "403": {
            "description": "Forbidden; the provided credentials do not have permission to perform the requested action"
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.manyfold.v0+json": {
              "schema": {
                "$ref": "#/components/schemas/collection_request"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove a collection",
        "tags": [
          "Collections"
        ],
        "security": [
          {
            "client_credentials": [
              "delete"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "content": {
              "application/vnd.manyfold.v0+json": {
                "schema": {
                  "type": null
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized; the request did not provide valid authentication details"
          },
          "403": {
            "description": "Forbidden; the provided credentials do not have permission to perform the requested action"
          }
        }
      }
    },
    "/creators": {
      "get": {
        "summary": "A list of creators",
        "tags": [
          "Creators"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "description": "Specify which page of results to retrieve.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "enum": [
              "name",
              "recent"
            ],
            "description": "Specify order of results; either by name or creation time:\n * `name` \n * `recent` \n ",
            "example": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "client_credentials": [
              "public",
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.manyfold.v0+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "$ref": "#/components/schemas/jsonld_context"
                    },
                    "@id": {
                      "type": "string",
                      "example": "https://example.com/creators"
                    },
                    "@type": {
                      "type": "string",
                      "example": "hydra:Collection"
                    },
                    "totalItems": {
                      "type": "integer",
                      "example": 42
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "@id": {
                            "type": "string",
                            "example": "/creators/abc123",
                            "description": "The URL of the creator"
                          },
                          "name": {
                            "type": "string",
                            "example": "Fred",
                            "description": "The human name of the creator"
                          }
                        },
                        "required": [
                          "@id",
                          "name"
                        ]
                      }
                    },
                    "view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "example": "https://example.com/creators?page=2"
                        },
                        "@type": {
                          "type": "string",
                          "example": "hydra:PartialCollectionView"
                        },
                        "first": {
                          "type": "string",
                          "example": "https://example.com/creators?page=1"
                        },
                        "prev": {
                          "type": "string",
                          "example": "https://example.com/creators?page=1"
                        },
                        "next": {
                          "type": "string",
                          "example": "https://example.com/creators?page=3"
                        },
                        "last": {
                          "type": "string",
                          "example": "https://example.com/creators?page=10"
                        }
                      },
                      "required": [
                        "@id",
                        "@type",
                        "first",
                        "last"
                      ]
                    }
                  },
                  "required": [
                    "@context",
                    "@id",
                    "@type",
                    "totalItems",
                    "member",
                    "view"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized; the request did not provide valid authentication details"
          },
          "403": {
            "description": "Forbidden; the provided credentials do not have permission to perform the requested action"
          }
        }
      },
      "post": {
        "summary": "Create a creator",
        "tags": [
          "Creators"
        ],
        "security": [
          {
            "client_credentials": [
              "write"
            ]
          }
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "Creator created",
            "content": {
              "application/vnd.manyfold.v0+json": {
                "schema": {
                  "$ref": "#/components/schemas/creator_response"
                }
              }
            }
          },
          "400": {
            "description": "The request structure was incorrect"
          },
          "422": {
            "description": "Creation failed due to invalid data"
          },
          "401": {
            "description": "Unauthorized; the request did not provide valid authentication details"
          },
          "403": {
            "description": "Forbidden; the provided credentials do not have permission to perform the requested action"
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.manyfold.v0+json": {
              "schema": {
                "$ref": "#/components/schemas/creator_request"
              }
            }
          }
        }
      }
    },
    "/creators/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "example": "abc123",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Details of a single creator",
        "tags": [
          "Creators"
        ],
        "security": [
          {
            "client_credentials": [
              "public",
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.manyfold.v0+json": {
                "schema": {
                  "$ref": "#/components/schemas/creator_response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized; the request did not provide valid authentication details"
          },
          "403": {
            "description": "Forbidden; the provided credentials do not have permission to perform the requested action"
          }
        }
      },
      "patch": {
        "summary": "Update a creator",
        "tags": [
          "Creators"
        ],
        "security": [
          {
            "client_credentials": [
              "write"
            ]
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Creator updated",
            "content": {
              "application/vnd.manyfold.v0+json": {
                "schema": {
                  "$ref": "#/components/schemas/creator_response"
                }
              }
            }
          },
          "400": {
            "description": "The request structure was incorrect"
          },
          "422": {
            "description": "Creation failed due to invalid data"
          },
          "401": {
            "description": "Unauthorized; the request did not provide valid authentication details"
          },
          "403": {
            "description": "Forbidden; the provided credentials do not have permission to perform the requested action"
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.manyfold.v0+json": {
              "schema": {
                "$ref": "#/components/schemas/creator_request"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove a creator",
        "tags": [
          "Creators"
        ],
        "security": [
          {
            "client_credentials": [
              "delete"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "content": {
              "application/vnd.manyfold.v0+json": {
                "schema": {
                  "type": null
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized; the request did not provide valid authentication details"
          },
          "403": {
            "description": "Forbidden; the provided credentials do not have permission to perform the requested action"
          }
        }
      }
    },
    "/models/{model_id}/model_files": {
      "post": {
        "summary": "Add a new file to a model",
        "tags": [
          "Files"
        ],
        "security": [
          {
            "client_credentials": [
              "write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "example": "abc123",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted; the files will be added to the model after processing"
          },
          "401": {
            "description": "Unauthorized; the request did not provide valid authentication details"
          },
          "403": {
            "description": "Forbidden; the provided credentials do not have permission to perform the requested action"
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.manyfold.v0+json": {
              "schema": {
                "$ref": "#/components/schemas/uploaded_file_request"
              }
            }
          }
        }
      }
    },
    "/models/{model_id}/model_files/{id}": {
      "parameters": [
        {
          "name": "model_id",
          "in": "path",
          "required": true,
          "example": "abc123",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "example": "def456",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Details of a single file in a model",
        "tags": [
          "Files"
        ],
        "security": [
          {
            "client_credentials": [
              "public",
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.manyfold.v0+json": {
                "schema": {
                  "$ref": "#/components/schemas/model_file_response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized; the request did not provide valid authentication details"
          },
          "403": {
            "description": "Forbidden; the provided credentials do not have permission to perform the requested action"
          }
        }
      },
      "patch": {
        "summary": "Update file details",
        "tags": [
          "Files"
        ],
        "security": [
          {
            "client_credentials": [
              "write"
            ]
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "File updated",
            "content": {
              "application/vnd.manyfold.v0+json": {
                "schema": {
                  "$ref": "#/components/schemas/model_file_response"
                }
              }
            }
          },
          "400": {
            "description": "The request structure was incorrect"
          },
          "422": {
            "description": "Update failed due to invalid data"
          },
          "401": {
            "description": "Unauthorized; the request did not provide valid authentication details"
          },
          "403": {
            "description": "Forbidden; the provided credentials do not have permission to perform the requested action"
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.manyfold.v0+json": {
              "schema": {
                "$ref": "#/components/schemas/model_file_request"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove a single file",
        "tags": [
          "Files"
        ],
        "security": [
          {
            "client_credentials": [
              "delete"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "content": {
              "application/vnd.manyfold.v0+json": {
                "schema": {
                  "type": null
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized; the request did not provide valid authentication details"
          },
          "403": {
            "description": "Forbidden; the provided credentials do not have permission to perform the requested action"
          }
        }
      }
    },
    "/models": {
      "get": {
        "summary": "A list of models",
        "tags": [
          "Models"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "example": 1,
            "description": "Specify which page of results to retrieve.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "enum": [
              "name",
              "recent"
            ],
            "description": "Specify order of results; either by name or creation time:\n * `name` \n * `recent` \n ",
            "example": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "creator",
            "in": "query",
            "description": "The ID of a creator to filter the model list",
            "example": "abc123",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "collection",
            "in": "query",
            "description": "The ID of a collection to filter the model list",
            "example": "abc123",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "client_credentials": [
              "public",
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.manyfold.v0+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "$ref": "#/components/schemas/jsonld_context"
                    },
                    "@id": {
                      "type": "string",
                      "example": "https://example.com/models"
                    },
                    "@type": {
                      "type": "string",
                      "example": "hydra:Collection"
                    },
                    "totalItems": {
                      "type": "integer",
                      "example": 42
                    },
                    "member": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "@id": {
                            "type": "string",
                            "example": "/models/abc123",
                            "description": "The URL of the model"
                          },
                          "@type": {
                            "type": "string",
                            "example": "3DModel"
                          },
                          "name": {
                            "type": "string",
                            "example": "Model",
                            "description": "The human name of the model"
                          }
                        },
                        "required": [
                          "@id",
                          "name"
                        ]
                      }
                    },
                    "view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "example": "https://example.com/models?page=2"
                        },
                        "@type": {
                          "type": "string",
                          "example": "hydra:PartialCollectionView"
                        },
                        "first": {
                          "type": "string",
                          "example": "https://example.com/models?page=1"
                        },
                        "prev": {
                          "type": "string",
                          "example": "https://example.com/models?page=1"
                        },
                        "next": {
                          "type": "string",
                          "example": "https://example.com/models?page=3"
                        },
                        "last": {
                          "type": "string",
                          "example": "https://example.com/models?page=10"
                        }
                      },
                      "required": [
                        "@id",
                        "@type",
                        "first",
                        "last"
                      ]
                    }
                  },
                  "required": [
                    "@context",
                    "@id",
                    "@type",
                    "totalItems",
                    "member",
                    "view"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized; the request did not provide valid authentication details"
          },
          "403": {
            "description": "Forbidden; the provided credentials do not have permission to perform the requested action"
          }
        }
      },
      "post": {
        "summary": "Create new models from uploaded files",
        "tags": [
          "Models"
        ],
        "security": [
          {
            "client_credentials": [
              "write"
            ]
          }
        ],
        "parameters": [],
        "responses": {
          "202": {
            "description": "Accepted; the files will be processed and turned into new models"
          },
          "401": {
            "description": "Unauthorized; the request did not provide valid authentication details"
          },
          "403": {
            "description": "Forbidden; the provided credentials do not have permission to perform the requested action"
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.manyfold.v0+json": {
              "schema": {
                "$ref": "#/components/schemas/uploaded_model_request"
              }
            }
          }
        }
      }
    },
    "/models/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "example": "abc123",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Details of a single model",
        "tags": [
          "Models"
        ],
        "security": [
          {
            "client_credentials": [
              "public",
              "read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.manyfold.v0+json": {
                "schema": {
                  "$ref": "#/components/schemas/model_response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized; the request did not provide valid authentication details"
          },
          "403": {
            "description": "Forbidden; the provided credentials do not have permission to perform the requested action"
          }
        }
      },
      "patch": {
        "summary": "Update a model",
        "tags": [
          "Models"
        ],
        "security": [
          {
            "client_credentials": [
              "write"
            ]
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Model updated",
            "content": {
              "application/vnd.manyfold.v0+json": {
                "schema": {
                  "$ref": "#/components/schemas/model_response"
                }
              }
            }
          },
          "400": {
            "description": "The request structure was incorrect"
          },
          "422": {
            "description": "Update failed due to invalid data"
          },
          "401": {
            "description": "Unauthorized; the request did not provide valid authentication details"
          },
          "403": {
            "description": "Forbidden; the provided credentials do not have permission to perform the requested action"
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.manyfold.v0+json": {
              "schema": {
                "$ref": "#/components/schemas/model_request"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove an entire model",
        "tags": [
          "Models"
        ],
        "security": [
          {
            "client_credentials": [
              "delete"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "content": {
              "application/vnd.manyfold.v0+json": {
                "schema": {
                  "type": null
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized; the request did not provide valid authentication details"
          },
          "403": {
            "description": "Forbidden; the provided credentials do not have permission to perform the requested action"
          }
        }
      }
    },
    "/upload": {
      "options": {
        "summary": "Details of upload capabilities",
        "tags": [
          "File Uploading"
        ],
        "description": "Manyfold uses the Tus protocol for resumable uploading; see https://tus.io/protocols/resumable-upload for full details.",
        "security": [
          {
            "client_credentials": [
              "upload"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Upload capabilities",
            "headers": {
              "Tus-Resumable": {
                "schema": {
                  "type": "string",
                  "example": "1.0.0",
                  "description": "Tus protocol version"
                }
              },
              "Tus-Version": {
                "schema": {
                  "type": "string",
                  "example": "1.0.0,0.2.2,0.2.1",
                  "description": "Comma separated versions of the Tus protocol supported by the server"
                }
              },
              "Tus-Extension": {
                "schema": {
                  "type": "string",
                  "example": "creation,termination,expiration,concatenation",
                  "description": "Comma separated list of Tus protocol extensions supported by the server"
                }
              },
              "Tus-Max-Size": {
                "schema": {
                  "type": "integer",
                  "example": 1073741824,
                  "description": "The maximum file size that can be uploaded to the server"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new upload",
        "tags": [
          "File Uploading"
        ],
        "description": "Manyfold uses the Tus protocol for resumable uploading; see https://tus.io/protocols/resumable-upload for full details.",
        "parameters": [
          {
            "in": "header",
            "name": "Tus-Resumable",
            "description": "Tus protocol version",
            "example": "1.0.0",
            "required": true
          },
          {
            "in": "header",
            "name": "Upload-Length",
            "description": "Total size of upload, in bytes",
            "example": 0,
            "required": true
          },
          {
            "in": "header",
            "name": "Upload-Metadata",
            "description": "See https://tus.io/protocols/resumable-upload#upload-metadata",
            "required": false
          }
        ],
        "security": [
          {
            "client_credentials": [
              "upload"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Upload created successfully",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "example": "/upload/24e533e02ec3bc40c387f1a0e460e216",
                  "description": "URL for the newly created upload"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/upload/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "example": "24e533e02ec3bc40c387f1a0e460e216",
          "required": true
        },
        {
          "in": "header",
          "name": "Tus-Resumable",
          "description": "Tus protocol version",
          "example": "1.0.0",
          "required": true
        }
      ],
      "head": {
        "summary": "Get status of upload",
        "tags": [
          "File Uploading"
        ],
        "description": "Manyfold uses the Tus protocol for resumable uploading; see https://tus.io/protocols/resumable-upload for full details.",
        "security": [
          {
            "client_credentials": [
              "upload"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Upload status",
            "headers": {
              "Tus-Resumable": {
                "schema": {
                  "type": "string",
                  "example": "1.0.0",
                  "description": "Tus protocol version"
                }
              },
              "Upload-Length": {
                "schema": {
                  "type": "integer",
                  "example": 1024,
                  "description": "The expected total length of the file to be uploaded"
                }
              },
              "Upload-Offset": {
                "schema": {
                  "type": "integer",
                  "example": 384,
                  "description": "The number of bytes of the file that have been uploaded so far"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Upload bytes at specified offset",
        "tags": [
          "File Uploading"
        ],
        "description": "Manyfold uses the Tus protocol for resumable uploading; see https://tus.io/protocols/resumable-upload for full details.",
        "parameters": [
          {
            "in": "header",
            "name": "Upload-Offset",
            "description": "File offset for bytes being sent. Must be the same as current Upload-Offset value reported by the HEAD request.",
            "example": 384,
            "required": true
          },
          {
            "in": "header",
            "name": "Content-Length",
            "description": "The number of bytes being sent in the POST body",
            "example": 128,
            "required": true
          }
        ],
        "security": [
          {
            "client_credentials": [
              "upload"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Upload successful",
            "headers": {
              "Upload-Offset": {
                "schema": {
                  "type": "integer",
                  "description": "The new upload offset after the uploaded bytes have been added",
                  "example": 512
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/offset+octet-stream": {
              "schema": {
                "type": "string",
                "format": "byte"
              }
            }
          },
          "required": true
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://try.manyfold.app"
    }
  ],
  "components": {
    "securitySchemes": {
      "client_credentials": {
        "type": "oauth2",
        "description": "Authentication with the OAuth2 Client Credentials grant flow. You can generate client app credentials at /oauth/applications.",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "/oauth/token",
            "scopes": {
              "public": "read public data accessible without logging in",
              "read": "read data accessible to the OAuth application's owner",
              "write": "create or change data that the OAuth application's owner has appropriate permissions for",
              "delete": "remove data that the OAuth application's owner has appropriate permissions for"
            }
          }
        }
      }
    },
    "schemas": {
      "jsonld_context": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "object"
            }
          ]
        }
      },
      "oembed_link": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "example": "1.0"
          },
          "type": {
            "type": "string",
            "example": "link"
          },
          "title": {
            "type": "string",
            "example": "Model Title"
          },
          "author_name": {
            "type": "string",
            "example": "Creator Name"
          },
          "author_url": {
            "type": "string",
            "example": "https://example.com/creators/bob"
          },
          "provider_name": {
            "type": "string",
            "example": "Manyfold"
          },
          "provider_url": {
            "type": "string",
            "example": "https://example.com"
          },
          "cache_age": {
            "type": "integer",
            "example": 86400
          }
        },
        "required": [
          "version",
          "type"
        ]
      },
      "oembed_photo": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "example": "1.0"
          },
          "type": {
            "type": "string",
            "example": "photo"
          },
          "url": {
            "type": "string",
            "example": "https://example.com/models/123/model_files/456.png"
          },
          "width": {
            "type": "integer",
            "example": "256"
          },
          "height": {
            "type": "integer",
            "example": "256"
          },
          "title": {
            "type": "string",
            "example": "Model Title"
          },
          "author_name": {
            "type": "string",
            "example": "Creator Name"
          },
          "author_url": {
            "type": "string",
            "example": "https://example.com/creators/bob"
          },
          "provider_name": {
            "type": "string",
            "example": "Manyfold"
          },
          "provider_url": {
            "type": "string",
            "example": "https://example.com"
          },
          "cache_age": {
            "type": "integer",
            "example": 86400
          }
        },
        "required": [
          "version",
          "type",
          "url",
          "width",
          "height"
        ]
      },
      "oembed_video": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "example": "1.0"
          },
          "type": {
            "type": "string",
            "example": "video"
          },
          "html": {
            "type": "string",
            "example": "<iframe>...</iframe>"
          },
          "width": {
            "type": "integer",
            "example": "256"
          },
          "height": {
            "type": "integer",
            "example": "256"
          },
          "title": {
            "type": "string",
            "example": "Model Title"
          },
          "author_name": {
            "type": "string",
            "example": "Creator Name"
          },
          "author_url": {
            "type": "string",
            "example": "https://example.com/creators/bob"
          },
          "provider_name": {
            "type": "string",
            "example": "Manyfold"
          },
          "provider_url": {
            "type": "string",
            "example": "https://example.com"
          },
          "cache_age": {
            "type": "integer",
            "example": 86400
          }
        },
        "required": [
          "version",
          "type",
          "html",
          "width",
          "height"
        ]
      },
      "oembed_rich": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "example": "1.0"
          },
          "type": {
            "type": "string",
            "example": "rich"
          },
          "html": {
            "type": "string",
            "example": "<iframe>...</iframe>"
          },
          "width": {
            "type": "integer",
            "example": "256"
          },
          "height": {
            "type": "integer",
            "example": "256"
          },
          "title": {
            "type": "string",
            "example": "Model Title"
          },
          "author_name": {
            "type": "string",
            "example": "Creator Name"
          },
          "author_url": {
            "type": "string",
            "example": "https://example.com/creators/bob"
          },
          "provider_name": {
            "type": "string",
            "example": "Manyfold"
          },
          "provider_url": {
            "type": "string",
            "example": "https://example.com"
          },
          "cache_age": {
            "type": "integer",
            "example": 86400
          }
        },
        "required": [
          "version",
          "type",
          "html",
          "width",
          "height"
        ]
      },
      "spdxLicense": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "example": "spdx:License"
          },
          "@id": {
            "type": "string",
            "example": "http://spdx.org/licenses/MIT"
          },
          "licenseId": {
            "type": "string",
            "example": "MIT"
          }
        },
        "required": [
          "@type",
          "licenseId"
        ]
      },
      "link_request": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "example": "https://example.com"
          }
        },
        "required": [
          "url"
        ]
      },
      "collection_request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Interesting Things"
          },
          "caption": {
            "type": "string",
            "example": "A short description"
          },
          "description": {
            "type": "string",
            "example": "Lorem ipsum dolor sit amet..."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link_request"
            }
          },
          "creator": {
            "type": "object",
            "properties": {
              "@id": {
                "type": "string",
                "example": "https://example.com/creators/abc123"
              },
              "@type": {
                "type": "string",
                "example": "Organization"
              }
            },
            "required": [
              "@id"
            ]
          },
          "isPartOf": {
            "type": "object",
            "properties": {
              "@id": {
                "type": "string",
                "example": "https://example.com/collections/abc123"
              },
              "@type": {
                "type": "string",
                "example": "Collection"
              }
            },
            "required": [
              "@id"
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "collection_response": {
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/jsonld_context"
          },
          "@id": {
            "type": "string",
            "example": "https://example.com/collections/abc123"
          },
          "@type": {
            "type": "string",
            "example": "Collection"
          },
          "name": {
            "type": "string",
            "example": "Interesting Things"
          },
          "caption": {
            "type": "string",
            "example": "A short description"
          },
          "description": {
            "type": "string",
            "example": "Lorem ipsum dolor sit amet..."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link_request"
            }
          },
          "creator": {
            "type": "object",
            "properties": {
              "@id": {
                "type": "string",
                "example": "https://example.com/creators/abc123"
              },
              "@type": {
                "type": "string",
                "example": "Organization"
              }
            },
            "required": [
              "@id"
            ]
          },
          "isPartOf": {
            "type": "object",
            "properties": {
              "@id": {
                "type": "string",
                "example": "https://example.com/collections/abc123"
              },
              "@type": {
                "type": "string",
                "example": "Collection"
              }
            },
            "required": [
              "@id"
            ]
          }
        },
        "required": [
          "@context",
          "@id",
          "@type"
        ]
      },
      "creator_request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Bruce Wayne"
          },
          "slug": {
            "type": "string",
            "example": "bruce-wayne"
          },
          "caption": {
            "type": "string",
            "example": "A short description"
          },
          "description": {
            "type": "string",
            "example": "Lorem ipsum dolor sit amet..."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link_request"
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "creator_response": {
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/jsonld_context"
          },
          "@id": {
            "type": "string",
            "example": "https://example.com/creators/abc123"
          },
          "@type": {
            "type": "string",
            "example": "Organization"
          },
          "name": {
            "type": "string",
            "example": "Bruce Wayne"
          },
          "slug": {
            "type": "string",
            "example": "bruce-wayne"
          },
          "caption": {
            "type": "string",
            "example": "A short description"
          },
          "description": {
            "type": "string",
            "example": "Lorem ipsum dolor sit amet..."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link_request"
            }
          }
        },
        "required": [
          "@context",
          "@id",
          "@type"
        ]
      },
      "model_request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Batmobile"
          },
          "caption": {
            "type": "string",
            "example": "A short description"
          },
          "description": {
            "type": "string",
            "example": "Lorem ipsum dolor sit amet..."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link_request"
            }
          },
          "creator": {
            "type": "object",
            "properties": {
              "@id": {
                "type": "string",
                "example": "https://example.com/creators/abc123"
              },
              "@type": {
                "type": "string",
                "example": "Organization"
              }
            },
            "required": [
              "@id"
            ]
          },
          "isPartOf": {
            "type": "object",
            "properties": {
              "@id": {
                "type": "string",
                "example": "https://example.com/collections/abc123"
              },
              "@type": {
                "type": "string",
                "example": "Collection"
              }
            },
            "required": [
              "@id"
            ]
          },
          "spdx:license": {
            "$ref": "#/components/schemas/spdxLicense"
          },
          "sensitive": {
            "type": "boolean",
            "example": true
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "tag"
            }
          },
          "preview_file": {
            "type": "object",
            "properties": {
              "@id": {
                "type": "string",
                "example": "https://example.com/models/abc123/model_files/def456"
              },
              "@type": {
                "type": "string",
                "example": "3DModel"
              }
            },
            "required": [
              "@id"
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "model_response": {
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/jsonld_context"
          },
          "@id": {
            "type": "string",
            "example": "https://example.com/models/abc123"
          },
          "@type": {
            "type": "string",
            "example": "3DModel"
          },
          "hasPart": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "@id": {
                  "type": "string",
                  "example": "https://example.com/models/abc123/model_files/def456"
                },
                "@type": {
                  "type": "string",
                  "example": "3DModel"
                },
                "name": {
                  "type": "string",
                  "example": "Benchy"
                },
                "encodingFormat": {
                  "type": "string",
                  "example": "model/stl"
                }
              }
            },
            "required": [
              "@id",
              "@type",
              "name",
              "encodingFormat"
            ]
          },
          "name": {
            "type": "string",
            "example": "Batmobile"
          },
          "caption": {
            "type": "string",
            "example": "A short description"
          },
          "description": {
            "type": "string",
            "example": "Lorem ipsum dolor sit amet..."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link_request"
            }
          },
          "creator": {
            "type": "object",
            "properties": {
              "@id": {
                "type": "string",
                "example": "https://example.com/creators/abc123"
              },
              "@type": {
                "type": "string",
                "example": "Organization"
              }
            },
            "required": [
              "@id"
            ]
          },
          "isPartOf": {
            "type": "object",
            "properties": {
              "@id": {
                "type": "string",
                "example": "https://example.com/collections/abc123"
              },
              "@type": {
                "type": "string",
                "example": "Collection"
              }
            },
            "required": [
              "@id"
            ]
          },
          "spdx:license": {
            "$ref": "#/components/schemas/spdxLicense"
          },
          "sensitive": {
            "type": "boolean",
            "example": true
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "tag"
            }
          },
          "preview_file": {
            "type": "object",
            "properties": {
              "@id": {
                "type": "string",
                "example": "https://example.com/models/abc123/model_files/def456"
              },
              "@type": {
                "type": "string",
                "example": "3DModel"
              }
            },
            "required": [
              "@id"
            ]
          }
        },
        "required": [
          "@context",
          "@id",
          "@type",
          "hasPart"
        ]
      },
      "model_file_request": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "example": "model.stl"
          },
          "description": {
            "type": "string",
            "example": "Lorem ipsum dolor sit amet..."
          },
          "caption": {
            "type": "string",
            "example": "A short caption describing the file"
          },
          "presupported": {
            "type": "boolean",
            "example": true
          },
          "up": {
            "type": "string",
            "enum": [
              "+y",
              "+z"
            ],
            "example": "+y"
          },
          "related": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "@id": {
                  "type": "string",
                  "example": "https://example.com/models/abc123/model_files/def456"
                },
                "@type": {
                  "type": "string",
                  "example": "3DModel"
                },
                "relationship": {
                  "type": "string",
                  "enum": [
                    "presupported_version",
                    "presupported_version_of"
                  ],
                  "example": "presupported_version"
                }
              }
            }
          }
        }
      },
      "model_file_response": {
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/jsonld_context"
          },
          "@id": {
            "type": "string",
            "example": "https://example.com/models/abc123/model_files/def456"
          },
          "@type": {
            "type": "string",
            "example": "3DModel"
          },
          "name": {
            "type": "string",
            "example": "Benchy"
          },
          "encodingFormat": {
            "type": "string",
            "example": "model/stl"
          },
          "contentUrl": {
            "type": "string",
            "example": "https://example.com/models/abc123/model_files/def456.stl"
          },
          "contentSize": {
            "type": "integer",
            "example": 12345
          },
          "isPartOf": {
            "type": "object",
            "properties": {
              "@id": {
                "type": "string",
                "example": "https://example.com/models/abc123"
              },
              "@type": {
                "type": "string",
                "example": "3DModel"
              }
            }
          },
          "spdx:license": {
            "$ref": "#/components/schemas/spdxLicense"
          },
          "creator": {
            "type": "object",
            "properties": {
              "@id": {
                "type": "string",
                "example": "https://example.com/creators/abc123"
              },
              "@type": {
                "type": "string",
                "example": "Organization"
              }
            }
          },
          "filename": {
            "type": "string",
            "example": "model.stl"
          },
          "description": {
            "type": "string",
            "example": "Lorem ipsum dolor sit amet..."
          },
          "caption": {
            "type": "string",
            "example": "A short caption describing the file"
          },
          "presupported": {
            "type": "boolean",
            "example": true
          },
          "up": {
            "type": "string",
            "enum": [
              "+y",
              "+z"
            ],
            "example": "+y"
          },
          "related": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "@id": {
                  "type": "string",
                  "example": "https://example.com/models/abc123/model_files/def456"
                },
                "@type": {
                  "type": "string",
                  "example": "3DModel"
                },
                "relationship": {
                  "type": "string",
                  "enum": [
                    "presupported_version",
                    "presupported_version_of"
                  ],
                  "example": "presupported_version"
                }
              }
            }
          }
        },
        "required": [
          "@context",
          "@id",
          "@type",
          "isPartOf",
          "encodingFormat"
        ]
      },
      "uploaded_file_request": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The ID of a completed upload, obtained from the upload endpoints",
                  "example": "http://example.com/uploads/abc123456def"
                },
                "name": {
                  "type": "string",
                  "example": "model.stl"
                }
              },
              "required": [
                "id",
                "name",
                "type",
                "size"
              ]
            }
          }
        },
        "required": [
          "files"
        ]
      },
      "uploaded_model_request": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The ID of a completed upload, obtained from the upload endpoints",
                  "example": "http://example.com/uploads/abc123456def"
                },
                "name": {
                  "type": "string",
                  "example": "model.stl"
                }
              },
              "required": [
                "id",
                "name",
                "type",
                "size"
              ]
            }
          },
          "creator": {
            "type": "object",
            "properties": {
              "@id": {
                "type": "string",
                "example": "https://example.com/creators/abc123"
              },
              "@type": {
                "type": "string",
                "example": "Organization"
              }
            },
            "required": [
              "@id"
            ]
          },
          "isPartOf": {
            "type": "object",
            "properties": {
              "@id": {
                "type": "string",
                "example": "https://example.com/collections/abc123"
              },
              "@type": {
                "type": "string",
                "example": "Collection"
              }
            },
            "required": [
              "@id"
            ]
          },
          "spdx:license": {
            "$ref": "#/components/schemas/spdxLicense"
          },
          "sensitive": {
            "type": "boolean",
            "example": true
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "tag"
            }
          }
        },
        "required": [
          "files"
        ]
      }
    }
  }
}
</file>

<file path="app/assets/images/roundel.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="svg1" width="860.906" height="860.906" version="1.1" viewBox="0 0 227.781 227.781" xml:space="preserve"><defs id="defs1"><linearGradient id="swatch40"><stop style="stop-color:#000;stop-opacity:1" id="stop40" offset="0"/></linearGradient><linearGradient id="linearGradient58"><stop style="stop-color:#000;stop-opacity:1" id="stop59" offset=".032"/><stop style="stop-color:#c321e0;stop-opacity:1" id="stop1" offset=".315"/><stop style="stop-color:#553d8f;stop-opacity:1" id="stop62" offset=".341"/><stop style="stop-color:#311d2c;stop-opacity:1" id="stop60" offset=".753"/></linearGradient><linearGradient id="swatch58"><stop style="stop-color:#6df4fc;stop-opacity:1" id="stop58" offset="0"/></linearGradient><filter style="color-interpolation-filters:sRGB" id="filter58" width="1.136" height="1.118" x="-.068" y="-.059"><feGaussianBlur id="feGaussianBlur58" stdDeviation="3.003"/></filter><radialGradient id="radialGradient60" cx="107.61" cy="127.142" r="136.887" fx="107.61" fy="127.142" gradientTransform="matrix(1.3609557,-1.2734913,1.3662239,1.2784209,-212.95715,101.64089)" gradientUnits="userSpaceOnUse" xlink:href="#linearGradient58"/><filter style="color-interpolation-filters:sRGB" id="filter63" width="1.051" height="1.03" x="-.025" y="-.015"><feGaussianBlur id="feGaussianBlur63" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter64" width="1.049" height="1.038" x="-.024" y="-.019"><feGaussianBlur id="feGaussianBlur64" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter65" width="1.071" height="1.166" x="-.035" y="-.083"><feGaussianBlur id="feGaussianBlur65" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter66" width="1.059" height="1.105" x="-.03" y="-.053"><feGaussianBlur id="feGaussianBlur66" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter67" width="1.197" height="1.054" x="-.098" y="-.027"><feGaussianBlur id="feGaussianBlur67" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter68" width="1.545" height="1.08" x="-.272" y="-.04"><feGaussianBlur id="feGaussianBlur68" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter69" width="1.499" height="1.106" x="-.25" y="-.053"><feGaussianBlur id="feGaussianBlur69" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter70" width="1.128" height="1.061" x="-.064" y="-.03"><feGaussianBlur id="feGaussianBlur70" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter71" width="1.068" height="1.16" x="-.034" y="-.08"><feGaussianBlur id="feGaussianBlur71" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter72" width="1.054" height="1.082" x="-.027" y="-.041"><feGaussianBlur id="feGaussianBlur72" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter73" width="1.096" height="1.069" x="-.048" y="-.034"><feGaussianBlur id="feGaussianBlur73" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter74" width="1.16" height="1.521" x="-.08" y="-.261"><feGaussianBlur id="feGaussianBlur74" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter75" width="1.2" height="1.164" x="-.1" y="-.082"><feGaussianBlur id="feGaussianBlur75" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter76" width="1.059" height="1.141" x="-.03" y="-.071"><feGaussianBlur id="feGaussianBlur76" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter77" width="1.3" height="1.048" x="-.15" y="-.024"><feGaussianBlur id="feGaussianBlur77" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter78" width="1.174" height="1.053" x="-.087" y="-.026"><feGaussianBlur id="feGaussianBlur78" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter79" width="1.133" height="1.116" x="-.067" y="-.058"><feGaussianBlur id="feGaussianBlur79" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter80" width="1.054" height="1.245" x="-.027" y="-.122"><feGaussianBlur id="feGaussianBlur80" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter81" width="1.197" height="1.11" x="-.098" y="-.055"><feGaussianBlur id="feGaussianBlur81" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter82" width="1.074" height="2.712" x="-.037" y="-.856"><feGaussianBlur id="feGaussianBlur82" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter83" width="1.102" height="2.998" x="-.051" y="-.999"><feGaussianBlur id="feGaussianBlur83" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter84" width="1.152" height="1.133" x="-.076" y="-.067"><feGaussianBlur id="feGaussianBlur84" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter85" width="1.077" height="1.363" x="-.039" y="-.182"><feGaussianBlur id="feGaussianBlur85" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter86" width="1.21" height="1.184" x="-.105" y="-.092"><feGaussianBlur id="feGaussianBlur86" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter87" width="1.053" height="1.115" x="-.026" y="-.058"><feGaussianBlur id="feGaussianBlur87" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter88" width="1.062" height="1.162" x="-.031" y="-.081"><feGaussianBlur id="feGaussianBlur88" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter89" width="1.097" height="12.987" x="-.049" y="-5.993"><feGaussianBlur id="feGaussianBlur89" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter90" width="1.128" height="2.998" x="-.064" y="-.999"><feGaussianBlur id="feGaussianBlur90" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter91" width="1.15" height="1.083" x="-.075" y="-.042"><feGaussianBlur id="feGaussianBlur91" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter92" width="1.749" height="1.479" x="-.375" y="-.24"><feGaussianBlur id="feGaussianBlur92" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter93" width="1.599" height="1.15" x="-.3" y="-.075"><feGaussianBlur id="feGaussianBlur93" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter94" width="1.856" height="1.231" x="-.428" y="-.115"><feGaussianBlur id="feGaussianBlur94" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter95" width="1.363" height="1.207" x="-.182" y="-.103"><feGaussianBlur id="feGaussianBlur95" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter96" width="1.061" height="1.174" x="-.03" y="-.087"><feGaussianBlur id="feGaussianBlur96" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter97" width="1.1" height="1.133" x="-.05" y="-.067"><feGaussianBlur id="feGaussianBlur97" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter167" width="1.234" height="1.202" x="-.117" y="-.101"><feGaussianBlur id="feGaussianBlur167" stdDeviation="4.9"/></filter><filter style="color-interpolation-filters:sRGB" id="filter168" width="1.18" height="1.156" x="-.09" y="-.078"><feGaussianBlur id="feGaussianBlur168" stdDeviation="3.905"/></filter><filter style="color-interpolation-filters:sRGB" id="filter1" width="1.135" height="1.079" x="-.068" y="-.04"><feGaussianBlur id="feGaussianBlur1" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter2" width="1.13" height="1.103" x="-.065" y="-.051"><feGaussianBlur id="feGaussianBlur2" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter3" width="1.19" height="1.446" x="-.095" y="-.223"><feGaussianBlur id="feGaussianBlur3" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter4" width="1.159" height="1.281" x="-.079" y="-.141"><feGaussianBlur id="feGaussianBlur4" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter5" width="1.526" height="1.145" x="-.263" y="-.073"><feGaussianBlur id="feGaussianBlur5" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter6" width="2.458" height="1.215" x="-.729" y="-.108"><feGaussianBlur id="feGaussianBlur6" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter7" width="2.337" height="1.284" x="-.668" y="-.142"><feGaussianBlur id="feGaussianBlur7" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter8" width="1.341" height="1.162" x="-.171" y="-.081"><feGaussianBlur id="feGaussianBlur8" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter9" width="1.181" height="1.428" x="-.091" y="-.214"><feGaussianBlur id="feGaussianBlur9" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter10" width="1.145" height="1.22" x="-.073" y="-.11"><feGaussianBlur id="feGaussianBlur10" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter11" width="1.257" height="1.184" x="-.128" y="-.092"><feGaussianBlur id="feGaussianBlur11" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter12" width="1.428" height="2.395" x="-.214" y="-.697"><feGaussianBlur id="feGaussianBlur12" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter13" width="1.535" height="1.439" x="-.267" y="-.22"><feGaussianBlur id="feGaussianBlur13" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter14" width="1.159" height="1.377" x="-.079" y="-.189"><feGaussianBlur id="feGaussianBlur14" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter15" width="1.802" height="1.127" x="-.401" y="-.064"><feGaussianBlur id="feGaussianBlur15" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter16" width="1.465" height="1.141" x="-.232" y="-.071"><feGaussianBlur id="feGaussianBlur16" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter17" width="1.356" height="1.311" x="-.178" y="-.156"><feGaussianBlur id="feGaussianBlur17" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter18" width="1.146" height="1.655" x="-.073" y="-.327"><feGaussianBlur id="feGaussianBlur18" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter19" width="1.526" height="1.294" x="-.263" y="-.147"><feGaussianBlur id="feGaussianBlur19" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter20" width="1.198" height="5.583" x="-.099" y="-2.291"><feGaussianBlur id="feGaussianBlur20" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter21" width="1.272" height="6.346" x="-.136" y="-2.673"><feGaussianBlur id="feGaussianBlur21" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter22" width="1.406" height="1.356" x="-.203" y="-.178"><feGaussianBlur id="feGaussianBlur22" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter23" width="1.207" height="1.972" x="-.103" y="-.486"><feGaussianBlur id="feGaussianBlur23" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter24" width="1.563" height="1.494" x="-.281" y="-.247"><feGaussianBlur id="feGaussianBlur24" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter25" width="1.141" height="1.308" x="-.071" y="-.154"><feGaussianBlur id="feGaussianBlur25" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter26" width="1.167" height="1.433" x="-.084" y="-.217"><feGaussianBlur id="feGaussianBlur26" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter27" width="1.261" height="33.079" x="-.13" y="-16.039"><feGaussianBlur id="feGaussianBlur27" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter28" width="1.341" height="6.346" x="-.171" y="-2.673"><feGaussianBlur id="feGaussianBlur28" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter29" width="1.401" height="1.223" x="-.2" y="-.111"><feGaussianBlur id="feGaussianBlur29" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter30" width="3.005" height="2.283" x="-1.002" y="-.642"><feGaussianBlur id="feGaussianBlur30" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter31" width="2.604" height="1.401" x="-.802" y="-.2"><feGaussianBlur id="feGaussianBlur31" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter32" width="3.291" height="1.617" x="-1.146" y="-.308"><feGaussianBlur id="feGaussianBlur32" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter33" width="1.972" height="1.553" x="-.486" y="-.277"><feGaussianBlur id="feGaussianBlur33" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter34" width="1.162" height="1.465" x="-.081" y="-.232"><feGaussianBlur id="feGaussianBlur34" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter35" width="1.267" height="1.356" x="-.134" y="-.178"><feGaussianBlur id="feGaussianBlur35" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter36" width="1.035" height="1.03" x="-.017" y="-.015"><feGaussianBlur id="feGaussianBlur36" stdDeviation=".552"/></filter><clipPath id="clipPath39" clipPathUnits="userSpaceOnUse"><g id="use39"><ellipse style="display:inline;opacity:1;fill:none;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none" id="ellipse39" cx="92.094" cy="118.706" rx="109.284" ry="90.382" transform="translate(92.800032,45.697005)"/></g></clipPath><clipPath id="clipPath45" clipPathUnits="userSpaceOnUse"/><clipPath id="clipPath224" clipPathUnits="userSpaceOnUse"><circle style="display:inline;opacity:1;vector-effect:non-scaling-stroke;fill:#000;fill-opacity:1;stroke:none;stroke-width:.264583;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;-inkscape-stroke:hairline" id="circle224" cx="200" cy="172.839" r="113.891"/></clipPath></defs><metadata id="metadata37"/><g id="g46" style="display:inline" clip-path="url(#clipPath224)" transform="matrix(1,0,0,-1,-86.109261,286.73022)"><g id="layer4" style="display:inline" transform="translate(92.800035,45.697005)"><rect style="opacity:1;fill:url(#radialGradient60);stroke:none;stroke-width:1.846;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1" id="rect58" width="400" height="345.679" x="-92.8" y="-45.697"/></g><g id="layer3" style="display:inline;stroke:#d55ae3;stroke-opacity:1" transform="translate(92.800035,45.697005)"><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter1)" id="path2" d="m 106.50339,36.62104 c 0,31.245476 0,31.245476 0,31.245476 l -26.541852,37.628954 -12.766969,27.21381 -8.399322,21.50226 -31.91742,18.4785"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter2)" id="path3" d="m 106.16742,68.202489 c 21.83823,25.533934 29.22964,36.621041 29.22964,36.621041 l 25.19796,51.40384 28.22172,16.79864 v 0 0"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter3)" id="path4" d="M 80.297511,105.49547 47.708145,93.736423 23.854072,81.977374 23.518099,81.305428"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter4)" id="path5" d="M 38.636876,89.70475 63.83484,78.617645 82.985294,67.866516 106.50339,51.403845"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter5)" id="path6" d="m 29.56561,85.337104 8.063349,23.518096 4.70362,13.10294 0.671946,14.44684 7.055429,23.18212"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter6)" id="path7" d="m 33.597283,168.65837 7.391406,-50.05996"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter7)" id="path8" d="m 43.340498,132.70928 4.367647,-15.79073 3.6957,-22.174207"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter8)" id="path9" d="M 82.313348,161.60294 66.858596,133.04525 50.731901,95.080316"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter9)" id="path10" d="M 46.364252,93.06448 79.625565,78.281675 105.83145,67.866516"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter10)" id="path11" d="m 34.26923,168.65837 36.957013,9.07126 18.478507,9.74322 18.14253,5.37556 h 0.33598 v 0 l 0.33597,24.862"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter11)" id="path12" d="m 107.84728,192.51244 25.53394,-29.90158 16.46267,-28.55769"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter12)" id="path13" d="m 133.71719,162.27489 25.19797,-7.72738"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter13)" id="path14" d="m 159.25113,157.23529 -20.15837,24.52602"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter14)" id="path15" d="m 108.51923,194.52828 67.86651,-28.55769"/><path style="mix-blend-mode:normal;fill:none;stroke:#e046f1;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter15)" id="path16" d="m 186.46493,170.00226 -13.43892,-51.06787 3.02376,-17.13462 10.41516,-16.462666"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter16)" id="path17" d="m 187.13688,85.001131 -11.08711,5.711539 -12.09502,4.703619 5.37557,21.166291 5.37556,7.3914 -0.33597,0.33597 v 0 l -3.02376,15.11878 -3.02375,8.06335 0.33597,13.77489"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter17)" id="path18" d="m 147.49208,129.34955 17.13462,-34.605207 -12.09503,2.687784 -8.73529,5.039593 -9.40724,1.67986"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter18)" id="path19" d="m 59.13122,153.20362 22.174208,7.72737 25.869912,8.7353 25.86991,-6.04751"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter19)" id="path20" d="M 125.98982,165.29864 146.48416,128.6776"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter20)" id="path21" d="m 80.633484,104.82353 16.798642,1.67986 15.118774,0.33598 9.40724,-0.67195 13.10295,-1.67986"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter21)" id="path22" d="m 126.99774,93.06448 -8.06335,0.671943 -7.05543,-2.015836 -9.74321,0.335973 -9.407244,1.679863 H 87.35294"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter22)" id="path23" d="m 81.977374,161.93891 26.541856,30.23756"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter23)" id="path24" d="M 104.15158,169.33031 86.345021,167.65045 67.530543,161.26697 52.075791,158.24321"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter24)" id="path25" d="m 53.755654,157.23529 10.415159,11.08711 8.735296,10.75113"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter25)" id="path26" d="M 182.43326,86.680994 148.83597,74.921945 128.34163,64.84276 106.16742,51.739818"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter26)" id="path27" d="m 106.50339,67.866516 64.50679,24.86199"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter27)" id="path28" d="m 127.33371,93.40045 h 31.24547 l 10.07919,0.335973"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter28)" id="path29" d="M 55.43552,96.088233 72.234162,95.080316 87.016967,94.072397"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter29)" id="path30" d="m 69.882352,130.35747 20.494345,33.93325 2.015836,6.38349 4.367647,8.06334"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter30)" id="path31" d="m 160.25905,155.21946 5.37556,-8.39933"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter31)" id="path32" d="m 166.64253,113.22285 -6.71945,26.87783"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter32)" id="path33" d="m 164.96267,121.95814 4.70362,17.47059"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter33)" id="path34" d="m 106.83937,53.755654 11.0871,19.486428"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter34)" id="path35" d="m 114.90271,64.84276 24.52602,9.071266 12.76697,9.743212 12.09502,4.367649 17.13462,-1.00792"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter35)" id="path36" d="m 96.088233,57.451357 -13.774885,7.055429 -15.118779,7.727376 -5.039592,3.6957 -6.383483,10.751132 v 1.00792"/></g><g id="g165" style="display:inline;stroke:#d55ae3;stroke-opacity:1" transform="translate(92.800035,45.697005)"><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter63)" id="path131" d="m 106.50339,36.62104 c 0,31.245476 0,31.245476 0,31.245476 l -26.541852,37.628954 -12.766969,27.21381 -8.399322,21.50226 -31.91742,18.4785"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter64)" id="path132" d="m 106.16742,68.202489 c 21.83823,25.533934 29.22964,36.621041 29.22964,36.621041 l 25.19796,51.40384 28.22172,16.79864 v 0 0"/><path style="opacity:.861017;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter65)" id="path133" d="M 80.297511,105.49547 47.708145,93.736423 23.854072,81.977374 23.518099,81.305428"/><path style="opacity:.735593;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter66)" id="path134" d="M 38.636876,89.70475 63.83484,78.617645 82.985294,67.866516 106.50339,51.403845" transform="matrix(0.9844826,0,0,0.97328127,1.687696,1.3235247)"/><path style="opacity:.798305;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter67)" id="path135" d="m 29.56561,85.337104 8.063349,23.518096 4.70362,13.10294 0.671946,14.44684 7.055429,23.18212"/><path style="opacity:.559322;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter68)" id="path136" d="m 33.597283,168.65837 7.391406,-50.05996"/><path style="opacity:.333898;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter69)" id="path137" d="m 43.340498,132.70928 4.367647,-15.79073 3.6957,-22.174207"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter70)" id="path138" d="M 82.313348,161.60294 66.858596,133.04525 50.731901,95.080316"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter71)" id="path139" d="M 46.364252,93.06448 79.625565,78.281675 105.83145,67.866516" transform="matrix(0.9750452,0,0,0.99275366,2.6852418,0.47076044)"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter72)" id="path140" d="m 34.26923,168.65837 36.957013,9.07126 18.478507,9.74322 18.14253,5.37556 h 0.33598 v 0 l 0.33597,24.862"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter73)" id="path141" d="m 107.84728,192.51244 25.53394,-29.90158 16.46267,-28.55769"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter74)" id="path142" d="m 133.71719,162.27489 25.19797,-7.72738"/><path style="opacity:.7;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter75)" id="path143" d="m 159.25113,157.23529 -20.15837,24.52602"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter76)" id="path144" d="m 108.51923,194.52828 67.86651,-28.55769"/><path style="mix-blend-mode:normal;fill:none;stroke:#e046f1;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter77)" id="path145" d="m 186.46493,170.00226 -13.43892,-51.06787 3.02376,-17.13462 10.41516,-16.462666"/><path style="opacity:.610169;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter78)" id="path146" d="m 187.13688,85.001131 -11.08711,5.711539 -12.09502,4.703619 5.37557,21.166291 5.37556,7.3914 -0.33597,0.33597 v 0 l -3.02376,15.11878 -3.02375,8.06335 0.33597,13.77489"/><path style="opacity:.849153;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter79)" id="path147" d="m 147.49208,129.34955 17.13462,-34.605207 -12.09503,2.687784 -8.73529,5.039593 -9.40724,1.67986"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter80)" id="path148" d="m 59.13122,153.20362 22.174208,7.72737 25.869912,8.7353 25.86991,-6.04751"/><path style="opacity:.328814;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter81)" id="path149" d="M 125.98982,165.29864 146.48416,128.6776"/><path style="opacity:.40339;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter82)" id="path150" d="m 80.633484,104.82353 16.798642,1.67986 15.118774,0.33598 9.40724,-0.67195 13.10295,-1.67986"/><path style="opacity:.742373;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter83)" id="path151" d="m 126.99774,93.06448 -8.06335,0.671943 -7.05543,-2.015836 -9.74321,0.335973 -9.407244,1.679863 H 87.35294"/><path style="opacity:.825424;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter84)" id="path152" d="m 81.977374,161.93891 26.541856,30.23756"/><path style="opacity:.359322;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter85)" id="path153" d="M 104.15158,169.33031 86.345021,167.65045 67.530543,161.26697 52.075791,158.24321"/><path style="opacity:.483051;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter86)" id="path154" d="m 53.755654,157.23529 10.415159,11.08711 8.735296,10.75113"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter87)" id="path155" d="M 182.43326,86.680994 148.83597,74.921945 128.34163,64.84276 106.16742,51.739818"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter88)" id="path156" d="m 106.50339,67.866516 64.50679,24.86199"/><path style="opacity:.561017;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter89)" id="path157" d="m 127.33371,93.40045 h 31.24547 l 10.07919,0.335973"/><path style="opacity:.489831;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter90)" id="path158" d="M 55.43552,96.088233 72.234162,95.080316 87.016967,94.072397"/><path style="opacity:.225424;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter91)" id="path159" d="m 69.882352,130.35747 20.494345,33.93325 2.015836,6.38349 4.367647,8.06334"/><path style="opacity:.230508;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter92)" id="path160" d="m 160.25905,155.21946 5.37556,-8.39933"/><path style="opacity:.289831;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter93)" id="path161" d="m 166.64253,113.22285 -6.71945,26.87783"/><path style="opacity:.289831;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter94)" id="path162" d="m 164.96267,121.95814 4.70362,17.47059"/><path style="opacity:.408475;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter95)" id="path163" d="m 106.83937,53.755654 11.0871,19.486428"/><path style="opacity:.359322;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter96)" id="path164" d="m 114.90271,64.84276 24.52602,9.071266 12.76697,9.743212 12.09502,4.367649 17.13462,-1.00792"/><path style="opacity:.367797;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter97)" id="path165" d="m 96.088233,57.451357 -13.774885,7.055429 -15.118779,7.727376 -5.039592,3.6957 -6.383483,10.751132 v 1.00792"/></g><g id="layer2" transform="translate(92.800035,45.697005)" style="display:inline"><path style="display:inline;mix-blend-mode:normal;fill:none;stroke:#2ef4ff;stroke-width:6;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter168)" id="path37" d="m 221.40611,100.79185 -68.60263,39.53366 -68.538467,-39.6448 0.06417,-79.17845 68.602638,-39.533652 68.53846,39.644797 z" transform="matrix(1.1887994,0,0,1.1568282,-75.225573,56.42908)"/><path style="display:inline;opacity:.340678;mix-blend-mode:normal;fill:none;stroke:#2ef4ff;stroke-width:8.5273;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter167)" id="path166" d="m 221.40611,100.79185 -68.60263,39.53366 -68.538467,-39.6448 0.06417,-79.17845 68.602638,-39.533652 68.53846,39.644797 z" transform="matrix(1.1887994,0,0,1.1568282,-75.225573,56.42908)"/><path style="display:inline;mix-blend-mode:normal;fill:none;stroke:#2ef4ff;stroke-width:4.26365;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter58)" id="path167" d="m 221.40611,100.79185 -68.60263,39.53366 -68.538467,-39.6448 0.06417,-79.17845 68.602638,-39.533652 68.53846,39.644797 z" transform="matrix(1.1887994,0,0,1.1568282,-75.225573,56.42908)"/></g><g id="layer5" style="display:inline" transform="translate(65.18066,46.345708)"><path style="opacity:.871186;mix-blend-mode:normal;fill:none;stroke:#6df4fc;stroke-width:2.13182;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter36)" id="path1" d="m 221.40611,100.79185 -68.60263,39.53366 -68.538467,-39.6448 0.06417,-79.17845 68.602638,-39.533652 68.53846,39.644797 z" transform="matrix(1.1887994,0,0,1.1568282,-47.606199,55.780376)"/></g></g></svg>
</file>

<file path="app/assets/images/square.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="svg1" width="860.906" height="860.906" version="1.1" viewBox="0 0 227.781 227.781" xml:space="preserve"><defs id="defs1"><linearGradient id="swatch40"><stop style="stop-color:#000;stop-opacity:1" id="stop40" offset="0"/></linearGradient><linearGradient id="linearGradient58"><stop style="stop-color:#000;stop-opacity:1" id="stop59" offset=".032"/><stop style="stop-color:#c321e0;stop-opacity:1" id="stop1" offset=".315"/><stop style="stop-color:#553d8f;stop-opacity:1" id="stop62" offset=".341"/><stop style="stop-color:#311d2c;stop-opacity:1" id="stop60" offset=".753"/></linearGradient><linearGradient id="swatch58"><stop style="stop-color:#6df4fc;stop-opacity:1" id="stop58" offset="0"/></linearGradient><filter style="color-interpolation-filters:sRGB" id="filter58" width="1.136" height="1.118" x="-.068" y="-.059"><feGaussianBlur id="feGaussianBlur58" stdDeviation="3.003"/></filter><radialGradient id="radialGradient60" cx="107.61" cy="127.142" r="136.887" fx="107.61" fy="127.142" gradientTransform="matrix(1.3609557,-1.2734913,1.3662239,1.2784209,-212.95715,101.64089)" gradientUnits="userSpaceOnUse" xlink:href="#linearGradient58"/><filter style="color-interpolation-filters:sRGB" id="filter63" width="1.051" height="1.03" x="-.025" y="-.015"><feGaussianBlur id="feGaussianBlur63" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter64" width="1.049" height="1.038" x="-.024" y="-.019"><feGaussianBlur id="feGaussianBlur64" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter65" width="1.071" height="1.166" x="-.035" y="-.083"><feGaussianBlur id="feGaussianBlur65" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter66" width="1.059" height="1.105" x="-.03" y="-.053"><feGaussianBlur id="feGaussianBlur66" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter67" width="1.197" height="1.054" x="-.098" y="-.027"><feGaussianBlur id="feGaussianBlur67" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter68" width="1.545" height="1.08" x="-.272" y="-.04"><feGaussianBlur id="feGaussianBlur68" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter69" width="1.499" height="1.106" x="-.25" y="-.053"><feGaussianBlur id="feGaussianBlur69" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter70" width="1.128" height="1.061" x="-.064" y="-.03"><feGaussianBlur id="feGaussianBlur70" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter71" width="1.068" height="1.16" x="-.034" y="-.08"><feGaussianBlur id="feGaussianBlur71" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter72" width="1.054" height="1.082" x="-.027" y="-.041"><feGaussianBlur id="feGaussianBlur72" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter73" width="1.096" height="1.069" x="-.048" y="-.034"><feGaussianBlur id="feGaussianBlur73" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter74" width="1.16" height="1.521" x="-.08" y="-.261"><feGaussianBlur id="feGaussianBlur74" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter75" width="1.2" height="1.164" x="-.1" y="-.082"><feGaussianBlur id="feGaussianBlur75" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter76" width="1.059" height="1.141" x="-.03" y="-.071"><feGaussianBlur id="feGaussianBlur76" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter77" width="1.3" height="1.048" x="-.15" y="-.024"><feGaussianBlur id="feGaussianBlur77" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter78" width="1.174" height="1.053" x="-.087" y="-.026"><feGaussianBlur id="feGaussianBlur78" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter79" width="1.133" height="1.116" x="-.067" y="-.058"><feGaussianBlur id="feGaussianBlur79" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter80" width="1.054" height="1.245" x="-.027" y="-.122"><feGaussianBlur id="feGaussianBlur80" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter81" width="1.197" height="1.11" x="-.098" y="-.055"><feGaussianBlur id="feGaussianBlur81" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter82" width="1.074" height="2.712" x="-.037" y="-.856"><feGaussianBlur id="feGaussianBlur82" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter83" width="1.102" height="2.998" x="-.051" y="-.999"><feGaussianBlur id="feGaussianBlur83" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter84" width="1.152" height="1.133" x="-.076" y="-.067"><feGaussianBlur id="feGaussianBlur84" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter85" width="1.077" height="1.363" x="-.039" y="-.182"><feGaussianBlur id="feGaussianBlur85" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter86" width="1.21" height="1.184" x="-.105" y="-.092"><feGaussianBlur id="feGaussianBlur86" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter87" width="1.053" height="1.115" x="-.026" y="-.058"><feGaussianBlur id="feGaussianBlur87" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter88" width="1.062" height="1.162" x="-.031" y="-.081"><feGaussianBlur id="feGaussianBlur88" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter89" width="1.097" height="12.987" x="-.049" y="-5.993"><feGaussianBlur id="feGaussianBlur89" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter90" width="1.128" height="2.998" x="-.064" y="-.999"><feGaussianBlur id="feGaussianBlur90" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter91" width="1.15" height="1.083" x="-.075" y="-.042"><feGaussianBlur id="feGaussianBlur91" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter92" width="1.749" height="1.479" x="-.375" y="-.24"><feGaussianBlur id="feGaussianBlur92" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter93" width="1.599" height="1.15" x="-.3" y="-.075"><feGaussianBlur id="feGaussianBlur93" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter94" width="1.856" height="1.231" x="-.428" y="-.115"><feGaussianBlur id="feGaussianBlur94" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter95" width="1.363" height="1.207" x="-.182" y="-.103"><feGaussianBlur id="feGaussianBlur95" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter96" width="1.061" height="1.174" x="-.03" y="-.087"><feGaussianBlur id="feGaussianBlur96" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter97" width="1.1" height="1.133" x="-.05" y="-.067"><feGaussianBlur id="feGaussianBlur97" stdDeviation=".568"/></filter><filter style="color-interpolation-filters:sRGB" id="filter167" width="1.234" height="1.202" x="-.117" y="-.101"><feGaussianBlur id="feGaussianBlur167" stdDeviation="4.9"/></filter><filter style="color-interpolation-filters:sRGB" id="filter168" width="1.18" height="1.156" x="-.09" y="-.078"><feGaussianBlur id="feGaussianBlur168" stdDeviation="3.905"/></filter><filter style="color-interpolation-filters:sRGB" id="filter1" width="1.135" height="1.079" x="-.068" y="-.04"><feGaussianBlur id="feGaussianBlur1" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter2" width="1.13" height="1.103" x="-.065" y="-.051"><feGaussianBlur id="feGaussianBlur2" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter3" width="1.19" height="1.446" x="-.095" y="-.223"><feGaussianBlur id="feGaussianBlur3" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter4" width="1.159" height="1.281" x="-.079" y="-.141"><feGaussianBlur id="feGaussianBlur4" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter5" width="1.526" height="1.145" x="-.263" y="-.073"><feGaussianBlur id="feGaussianBlur5" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter6" width="2.458" height="1.215" x="-.729" y="-.108"><feGaussianBlur id="feGaussianBlur6" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter7" width="2.337" height="1.284" x="-.668" y="-.142"><feGaussianBlur id="feGaussianBlur7" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter8" width="1.341" height="1.162" x="-.171" y="-.081"><feGaussianBlur id="feGaussianBlur8" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter9" width="1.181" height="1.428" x="-.091" y="-.214"><feGaussianBlur id="feGaussianBlur9" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter10" width="1.145" height="1.22" x="-.073" y="-.11"><feGaussianBlur id="feGaussianBlur10" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter11" width="1.257" height="1.184" x="-.128" y="-.092"><feGaussianBlur id="feGaussianBlur11" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter12" width="1.428" height="2.395" x="-.214" y="-.697"><feGaussianBlur id="feGaussianBlur12" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter13" width="1.535" height="1.439" x="-.267" y="-.22"><feGaussianBlur id="feGaussianBlur13" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter14" width="1.159" height="1.377" x="-.079" y="-.189"><feGaussianBlur id="feGaussianBlur14" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter15" width="1.802" height="1.127" x="-.401" y="-.064"><feGaussianBlur id="feGaussianBlur15" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter16" width="1.465" height="1.141" x="-.232" y="-.071"><feGaussianBlur id="feGaussianBlur16" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter17" width="1.356" height="1.311" x="-.178" y="-.156"><feGaussianBlur id="feGaussianBlur17" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter18" width="1.146" height="1.655" x="-.073" y="-.327"><feGaussianBlur id="feGaussianBlur18" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter19" width="1.526" height="1.294" x="-.263" y="-.147"><feGaussianBlur id="feGaussianBlur19" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter20" width="1.198" height="5.583" x="-.099" y="-2.291"><feGaussianBlur id="feGaussianBlur20" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter21" width="1.272" height="6.346" x="-.136" y="-2.673"><feGaussianBlur id="feGaussianBlur21" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter22" width="1.406" height="1.356" x="-.203" y="-.178"><feGaussianBlur id="feGaussianBlur22" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter23" width="1.207" height="1.972" x="-.103" y="-.486"><feGaussianBlur id="feGaussianBlur23" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter24" width="1.563" height="1.494" x="-.281" y="-.247"><feGaussianBlur id="feGaussianBlur24" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter25" width="1.141" height="1.308" x="-.071" y="-.154"><feGaussianBlur id="feGaussianBlur25" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter26" width="1.167" height="1.433" x="-.084" y="-.217"><feGaussianBlur id="feGaussianBlur26" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter27" width="1.261" height="33.079" x="-.13" y="-16.039"><feGaussianBlur id="feGaussianBlur27" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter28" width="1.341" height="6.346" x="-.171" y="-2.673"><feGaussianBlur id="feGaussianBlur28" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter29" width="1.401" height="1.223" x="-.2" y="-.111"><feGaussianBlur id="feGaussianBlur29" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter30" width="3.005" height="2.283" x="-1.002" y="-.642"><feGaussianBlur id="feGaussianBlur30" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter31" width="2.604" height="1.401" x="-.802" y="-.2"><feGaussianBlur id="feGaussianBlur31" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter32" width="3.291" height="1.617" x="-1.146" y="-.308"><feGaussianBlur id="feGaussianBlur32" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter33" width="1.972" height="1.553" x="-.486" y="-.277"><feGaussianBlur id="feGaussianBlur33" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter34" width="1.162" height="1.465" x="-.081" y="-.232"><feGaussianBlur id="feGaussianBlur34" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter35" width="1.267" height="1.356" x="-.134" y="-.178"><feGaussianBlur id="feGaussianBlur35" stdDeviation="1.974"/></filter><filter style="color-interpolation-filters:sRGB" id="filter36" width="1.035" height="1.03" x="-.017" y="-.015"><feGaussianBlur id="feGaussianBlur36" stdDeviation=".552"/></filter><clipPath id="clipPath39" clipPathUnits="userSpaceOnUse"><g id="use39"><ellipse style="display:inline;opacity:1;fill:none;stroke-width:10;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none" id="ellipse39" cx="92.094" cy="118.706" rx="109.284" ry="90.382" transform="translate(92.800032,45.697005)"/></g></clipPath><clipPath id="clipPath45" clipPathUnits="userSpaceOnUse"/></defs><metadata id="metadata37"/><g id="g46" style="display:inline" clip-path="none" transform="matrix(1,0,0,-1,-86.109261,286.73022)"><g id="layer4" style="display:inline" transform="translate(92.800035,45.697005)"><rect style="opacity:1;fill:url(#radialGradient60);stroke:none;stroke-width:1.846;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1" id="rect58" width="400" height="345.679" x="-92.8" y="-45.697"/></g><g id="layer3" style="display:inline;stroke:#d55ae3;stroke-opacity:1" transform="translate(92.800035,45.697005)"><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter1)" id="path2" d="m 106.50339,36.62104 c 0,31.245476 0,31.245476 0,31.245476 l -26.541852,37.628954 -12.766969,27.21381 -8.399322,21.50226 -31.91742,18.4785"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter2)" id="path3" d="m 106.16742,68.202489 c 21.83823,25.533934 29.22964,36.621041 29.22964,36.621041 l 25.19796,51.40384 28.22172,16.79864 v 0 0"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter3)" id="path4" d="M 80.297511,105.49547 47.708145,93.736423 23.854072,81.977374 23.518099,81.305428"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter4)" id="path5" d="M 38.636876,89.70475 63.83484,78.617645 82.985294,67.866516 106.50339,51.403845"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter5)" id="path6" d="m 29.56561,85.337104 8.063349,23.518096 4.70362,13.10294 0.671946,14.44684 7.055429,23.18212"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter6)" id="path7" d="m 33.597283,168.65837 7.391406,-50.05996"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter7)" id="path8" d="m 43.340498,132.70928 4.367647,-15.79073 3.6957,-22.174207"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter8)" id="path9" d="M 82.313348,161.60294 66.858596,133.04525 50.731901,95.080316"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter9)" id="path10" d="M 46.364252,93.06448 79.625565,78.281675 105.83145,67.866516"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter10)" id="path11" d="m 34.26923,168.65837 36.957013,9.07126 18.478507,9.74322 18.14253,5.37556 h 0.33598 v 0 l 0.33597,24.862"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter11)" id="path12" d="m 107.84728,192.51244 25.53394,-29.90158 16.46267,-28.55769"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter12)" id="path13" d="m 133.71719,162.27489 25.19797,-7.72738"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter13)" id="path14" d="m 159.25113,157.23529 -20.15837,24.52602"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter14)" id="path15" d="m 108.51923,194.52828 67.86651,-28.55769"/><path style="mix-blend-mode:normal;fill:none;stroke:#e046f1;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter15)" id="path16" d="m 186.46493,170.00226 -13.43892,-51.06787 3.02376,-17.13462 10.41516,-16.462666"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter16)" id="path17" d="m 187.13688,85.001131 -11.08711,5.711539 -12.09502,4.703619 5.37557,21.166291 5.37556,7.3914 -0.33597,0.33597 v 0 l -3.02376,15.11878 -3.02375,8.06335 0.33597,13.77489"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter17)" id="path18" d="m 147.49208,129.34955 17.13462,-34.605207 -12.09503,2.687784 -8.73529,5.039593 -9.40724,1.67986"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter18)" id="path19" d="m 59.13122,153.20362 22.174208,7.72737 25.869912,8.7353 25.86991,-6.04751"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter19)" id="path20" d="M 125.98982,165.29864 146.48416,128.6776"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter20)" id="path21" d="m 80.633484,104.82353 16.798642,1.67986 15.118774,0.33598 9.40724,-0.67195 13.10295,-1.67986"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter21)" id="path22" d="m 126.99774,93.06448 -8.06335,0.671943 -7.05543,-2.015836 -9.74321,0.335973 -9.407244,1.679863 H 87.35294"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter22)" id="path23" d="m 81.977374,161.93891 26.541856,30.23756"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter23)" id="path24" d="M 104.15158,169.33031 86.345021,167.65045 67.530543,161.26697 52.075791,158.24321"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter24)" id="path25" d="m 53.755654,157.23529 10.415159,11.08711 8.735296,10.75113"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter25)" id="path26" d="M 182.43326,86.680994 148.83597,74.921945 128.34163,64.84276 106.16742,51.739818"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter26)" id="path27" d="m 106.50339,67.866516 64.50679,24.86199"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter27)" id="path28" d="m 127.33371,93.40045 h 31.24547 l 10.07919,0.335973"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter28)" id="path29" d="M 55.43552,96.088233 72.234162,95.080316 87.016967,94.072397"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter29)" id="path30" d="m 69.882352,130.35747 20.494345,33.93325 2.015836,6.38349 4.367647,8.06334"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter30)" id="path31" d="m 160.25905,155.21946 5.37556,-8.39933"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter31)" id="path32" d="m 166.64253,113.22285 -6.71945,26.87783"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter32)" id="path33" d="m 164.96267,121.95814 4.70362,17.47059"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter33)" id="path34" d="m 106.83937,53.755654 11.0871,19.486428"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter34)" id="path35" d="m 114.90271,64.84276 24.52602,9.071266 12.76697,9.743212 12.09502,4.367649 17.13462,-1.00792"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter35)" id="path36" d="m 96.088233,57.451357 -13.774885,7.055429 -15.118779,7.727376 -5.039592,3.6957 -6.383483,10.751132 v 1.00792"/></g><g id="g165" style="display:inline;stroke:#d55ae3;stroke-opacity:1" transform="translate(92.800035,45.697005)"><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter63)" id="path131" d="m 106.50339,36.62104 c 0,31.245476 0,31.245476 0,31.245476 l -26.541852,37.628954 -12.766969,27.21381 -8.399322,21.50226 -31.91742,18.4785"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter64)" id="path132" d="m 106.16742,68.202489 c 21.83823,25.533934 29.22964,36.621041 29.22964,36.621041 l 25.19796,51.40384 28.22172,16.79864 v 0 0"/><path style="opacity:.861017;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter65)" id="path133" d="M 80.297511,105.49547 47.708145,93.736423 23.854072,81.977374 23.518099,81.305428"/><path style="opacity:.735593;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter66)" id="path134" d="M 38.636876,89.70475 63.83484,78.617645 82.985294,67.866516 106.50339,51.403845" transform="matrix(0.9844826,0,0,0.97328127,1.687696,1.3235247)"/><path style="opacity:.798305;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter67)" id="path135" d="m 29.56561,85.337104 8.063349,23.518096 4.70362,13.10294 0.671946,14.44684 7.055429,23.18212"/><path style="opacity:.559322;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter68)" id="path136" d="m 33.597283,168.65837 7.391406,-50.05996"/><path style="opacity:.333898;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter69)" id="path137" d="m 43.340498,132.70928 4.367647,-15.79073 3.6957,-22.174207"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter70)" id="path138" d="M 82.313348,161.60294 66.858596,133.04525 50.731901,95.080316"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter71)" id="path139" d="M 46.364252,93.06448 79.625565,78.281675 105.83145,67.866516" transform="matrix(0.9750452,0,0,0.99275366,2.6852418,0.47076044)"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter72)" id="path140" d="m 34.26923,168.65837 36.957013,9.07126 18.478507,9.74322 18.14253,5.37556 h 0.33598 v 0 l 0.33597,24.862"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter73)" id="path141" d="m 107.84728,192.51244 25.53394,-29.90158 16.46267,-28.55769"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter74)" id="path142" d="m 133.71719,162.27489 25.19797,-7.72738"/><path style="opacity:.7;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter75)" id="path143" d="m 159.25113,157.23529 -20.15837,24.52602"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter76)" id="path144" d="m 108.51923,194.52828 67.86651,-28.55769"/><path style="mix-blend-mode:normal;fill:none;stroke:#e046f1;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter77)" id="path145" d="m 186.46493,170.00226 -13.43892,-51.06787 3.02376,-17.13462 10.41516,-16.462666"/><path style="opacity:.610169;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter78)" id="path146" d="m 187.13688,85.001131 -11.08711,5.711539 -12.09502,4.703619 5.37557,21.166291 5.37556,7.3914 -0.33597,0.33597 v 0 l -3.02376,15.11878 -3.02375,8.06335 0.33597,13.77489"/><path style="opacity:.849153;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter79)" id="path147" d="m 147.49208,129.34955 17.13462,-34.605207 -12.09503,2.687784 -8.73529,5.039593 -9.40724,1.67986"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter80)" id="path148" d="m 59.13122,153.20362 22.174208,7.72737 25.869912,8.7353 25.86991,-6.04751"/><path style="opacity:.328814;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter81)" id="path149" d="M 125.98982,165.29864 146.48416,128.6776"/><path style="opacity:.40339;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter82)" id="path150" d="m 80.633484,104.82353 16.798642,1.67986 15.118774,0.33598 9.40724,-0.67195 13.10295,-1.67986"/><path style="opacity:.742373;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter83)" id="path151" d="m 126.99774,93.06448 -8.06335,0.671943 -7.05543,-2.015836 -9.74321,0.335973 -9.407244,1.679863 H 87.35294"/><path style="opacity:.825424;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter84)" id="path152" d="m 81.977374,161.93891 26.541856,30.23756"/><path style="opacity:.359322;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter85)" id="path153" d="M 104.15158,169.33031 86.345021,167.65045 67.530543,161.26697 52.075791,158.24321"/><path style="opacity:.483051;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter86)" id="path154" d="m 53.755654,157.23529 10.415159,11.08711 8.735296,10.75113"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter87)" id="path155" d="M 182.43326,86.680994 148.83597,74.921945 128.34163,64.84276 106.16742,51.739818"/><path style="mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter88)" id="path156" d="m 106.50339,67.866516 64.50679,24.86199"/><path style="opacity:.561017;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter89)" id="path157" d="m 127.33371,93.40045 h 31.24547 l 10.07919,0.335973"/><path style="opacity:.489831;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter90)" id="path158" d="M 55.43552,96.088233 72.234162,95.080316 87.016967,94.072397"/><path style="opacity:.225424;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter91)" id="path159" d="m 69.882352,130.35747 20.494345,33.93325 2.015836,6.38349 4.367647,8.06334"/><path style="opacity:.230508;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter92)" id="path160" d="m 160.25905,155.21946 5.37556,-8.39933"/><path style="opacity:.289831;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter93)" id="path161" d="m 166.64253,113.22285 -6.71945,26.87783"/><path style="opacity:.289831;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter94)" id="path162" d="m 164.96267,121.95814 4.70362,17.47059"/><path style="opacity:.408475;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter95)" id="path163" d="m 106.83937,53.755654 11.0871,19.486428"/><path style="opacity:.359322;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter96)" id="path164" d="m 114.90271,64.84276 24.52602,9.071266 12.76697,9.743212 12.09502,4.367649 17.13462,-1.00792"/><path style="opacity:.367797;mix-blend-mode:normal;fill:none;stroke:#d55ae3;stroke-width:1.3;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter97)" id="path165" d="m 96.088233,57.451357 -13.774885,7.055429 -15.118779,7.727376 -5.039592,3.6957 -6.383483,10.751132 v 1.00792"/></g><g id="layer2" transform="translate(92.800035,45.697005)" style="display:inline"><path style="display:inline;mix-blend-mode:normal;fill:none;stroke:#2ef4ff;stroke-width:6;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter168)" id="path37" d="m 221.40611,100.79185 -68.60263,39.53366 -68.538467,-39.6448 0.06417,-79.17845 68.602638,-39.533652 68.53846,39.644797 z" transform="matrix(1.1887994,0,0,1.1568282,-75.225573,56.42908)"/><path style="display:inline;opacity:.340678;mix-blend-mode:normal;fill:none;stroke:#2ef4ff;stroke-width:8.5273;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter167)" id="path166" d="m 221.40611,100.79185 -68.60263,39.53366 -68.538467,-39.6448 0.06417,-79.17845 68.602638,-39.533652 68.53846,39.644797 z" transform="matrix(1.1887994,0,0,1.1568282,-75.225573,56.42908)"/><path style="display:inline;mix-blend-mode:normal;fill:none;stroke:#2ef4ff;stroke-width:4.26365;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter58)" id="path167" d="m 221.40611,100.79185 -68.60263,39.53366 -68.538467,-39.6448 0.06417,-79.17845 68.602638,-39.533652 68.53846,39.644797 z" transform="matrix(1.1887994,0,0,1.1568282,-75.225573,56.42908)"/></g><g id="layer5" style="display:inline" transform="translate(65.18066,46.345708)"><path style="opacity:.871186;mix-blend-mode:normal;fill:none;stroke:#6df4fc;stroke-width:2.13182;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1;filter:url(#filter36)" id="path1" d="m 221.40611,100.79185 -68.60263,39.53366 -68.538467,-39.6448 0.06417,-79.17845 68.602638,-39.533652 68.53846,39.644797 z" transform="matrix(1.1887994,0,0,1.1568282,-47.606199,55.780376)"/></g></g></svg>
</file>

<file path="app/assets/javascripts/active_admin.js">
//= require active_admin/base
</file>

<file path="app/assets/stylesheets/entrypoints/themes/brite.scss">
@import "bootswatch/dist/brite/variables";
@import '../../application';
@import "bootswatch/dist/brite/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/cerulean.scss">
@import "bootswatch/dist/cerulean/variables";
@import '../../application';
@import "bootswatch/dist/cerulean/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/cosmo.scss">
@import "bootswatch/dist/cosmo/variables";
@import '../../application';
@import "bootswatch/dist/cosmo/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/cyborg.scss">
@import "bootswatch/dist/cyborg/variables";
@import '../../application';
@import "bootswatch/dist/cyborg/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/darkly.scss">
@import "bootswatch/dist/darkly/variables";
@import '../../application';
@import "bootswatch/dist/darkly/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/default.scss">
@import '../../application';
</file>

<file path="app/assets/stylesheets/entrypoints/themes/flatly.scss">
@import "bootswatch/dist/flatly/variables";
@import '../../application';
@import "bootswatch/dist/flatly/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/journal.scss">
@import "bootswatch/dist/journal/variables";
@import '../../application';
@import "bootswatch/dist/journal/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/litera.scss">
@import "bootswatch/dist/litera/variables";
@import '../../application';
@import "bootswatch/dist/litera/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/lumen.scss">
@import "bootswatch/dist/lumen/variables";
@import '../../application';
@import "bootswatch/dist/lumen/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/lux.scss">
@import "bootswatch/dist/lux/variables";
@import '../../application';
@import "bootswatch/dist/lux/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/materia.scss">
@import "bootswatch/dist/materia/variables";
@import '../../application';
@import "bootswatch/dist/materia/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/minty.scss">
@import "bootswatch/dist/minty/variables";
@import '../../application';
@import "bootswatch/dist/minty/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/morph.scss">
@import "bootswatch/dist/morph/variables";
@import '../../application';
@import "bootswatch/dist/morph/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/pulse.scss">
@import "bootswatch/dist/pulse/variables";
@import '../../application';
@import "bootswatch/dist/pulse/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/quartz.scss">
@import "bootswatch/dist/quartz/variables";
@import '../../application';
@import "bootswatch/dist/quartz/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/sandstone.scss">
@import "bootswatch/dist/sandstone/variables";
@import '../../application';
@import "bootswatch/dist/sandstone/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/simplex.scss">
@import "bootswatch/dist/simplex/variables";
@import '../../application';
@import "bootswatch/dist/simplex/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/sketchy.scss">
@import "bootswatch/dist/sketchy/variables";
@import '../../application';
@import "bootswatch/dist/sketchy/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/slate.scss">
@import "bootswatch/dist/slate/variables";
@import '../../application';
@import "bootswatch/dist/slate/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/solar.scss">
@import "bootswatch/dist/solar/variables";
@import '../../application';
@import "bootswatch/dist/solar/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/spacelab.scss">
@import "bootswatch/dist/spacelab/variables";
@import '../../application';
@import "bootswatch/dist/spacelab/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/superhero.scss">
@import "bootswatch/dist/superhero/variables";
@import '../../application';
@import "bootswatch/dist/superhero/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/united.scss">
@import "bootswatch/dist/united/variables";
@import '../../application';
@import "bootswatch/dist/united/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/vapor.scss">
@import "bootswatch/dist/vapor/variables";
@import '../../application';
@import "bootswatch/dist/vapor/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/yeti.scss">
@import "bootswatch/dist/yeti/variables";
@import '../../application';
@import "bootswatch/dist/yeti/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/themes/zephyr.scss">
@import "bootswatch/dist/zephyr/variables";
@import '../../application';
@import "bootswatch/dist/zephyr/bootswatch";
</file>

<file path="app/assets/stylesheets/entrypoints/active_admin.scss">
// Sass variable overrides must be declared before loading up Active Admin's styles.
//
// To view the variables that Active Admin provides, take a look at
// `app/assets/stylesheets/active_admin/mixins/_variables.scss` in the
// Active Admin source.
//
// For example, to change the sidebar width:
// $sidebar-width: 242px;

// Active Admin's got SASS!
@import '@activeadmin/activeadmin/src/scss/mixins';
@import '@activeadmin/activeadmin/src/scss/base';

// Overriding any non-variable Sass must be done after the fact.
// For example, to change the default status-tag color:
//
//   .status_tag { background: #6090DB; }
</file>

<file path="app/assets/stylesheets/src/altcha.scss">
div.altcha-wrapper {
	@extend .border;
	@extend .rounded;
	@extend .p-1;

	&:has(div.altcha[data-state="verifying"]) {
		@extend .border-secondary;
		@extend .bg-secondary-subtle;
	}

	&:has(div.altcha[data-state="verified"]) {
		@extend .border-success;
		@extend .bg-success-subtle;
	}

	div.altcha {
		display: inline-block;

		&[data-state="verifying"] {
			div.altcha-main {
				::after {
					content: "";
					@extend .spinner-border;
					@extend .spinner-border-sm;
				}
			}

		}

		.altcha-checkbox {
			display: none;
		}
	}

}
</file>

<file path="app/assets/stylesheets/src/effects.scss">
.icon-flip::before {
	animation: flip 5s ease-in-out infinite;
}

@keyframes flip {
	0% {
		transform: rotate(0deg);
	}

	10% {
		transform: rotate(180deg);
	}

	50% {
		transform: rotate(180deg);
	}

	60% {
		transform: rotate(360deg);
	}

	100% {
		transform: rotate(360deg);
	}
}

.icon-spin::before {
	animation: spin 5s linear infinite;
}

@keyframes spin {
	0% {
		transform: rotate(0deg);
	}

	50% {
		transform: rotate(180deg);
	}

	100% {
		transform: rotate(360deg);
	}
}
</file>

<file path="app/assets/stylesheets/src/layout.scss">
.skip-link {
	position: absolute;
	width: 100%;
	z-index: 9999999; // so many Zs
	transform: translateY(-100%);
	transition: transform 0.2s ease-out;

	&:focus-within {
		transform: translateY(0%);
	}
}

.skip-link-container {
	overflow-y: hidden;
	position: relative;
}
</file>

<file path="app/assets/stylesheets/src/libraries.scss">
// Place all the styles related to the Libraries controller here.
// They will automatically be included in application.css.
// You can use Sass (SCSS) here: https://sass-lang.com/

a.badge {
  text-decoration: none ;
}
</file>

<file path="app/assets/stylesheets/src/links.scss">
ul.links li::marker {
  content: "\F470";
  display: inline-block;
  font-family: "bootstrap-icons" !important;
  font-style: normal;
  font-weight: normal !important;
  font-variant: normal;
  text-transform: none;
  line-height: var(--bs-body-line-height);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
</file>

<file path="app/assets/stylesheets/src/model_files.scss">
// Place all the styles related to the Files controller here.
// They will automatically be included in application.css.
// You can use Sass (SCSS) here: https://sass-lang.com/


.object-preview {
  aspect-ratio: 1;
  width: 100%;
  touch-action: none;
}

.object-preview-progress {
  width: 80%;
  height: 3em;
  z-index: 2;
  cursor: pointer;

  .progress-label {
    width: 100%
  }

}

.preview-card {
  overflow: hidden;
}

.card-img-top-background {
  aspect-ratio: 1;
  background-size: cover;
  background-position: center;
  filter: blur(10px) brightness(0.95);
}

.image-preview {
  position: absolute;
  aspect-ratio: 1;
  object-fit: contain;
  object-position: center;
}

.slicer-icon {
  height: 1.2rem;
}
</file>

<file path="app/assets/stylesheets/src/models.scss">
// Place all the styles related to the Models controller here.
// They will automatically be included in application.css.
// You can use Sass (SCSS) here: https://sass-lang.com/

.form-check-label {
  input.checkbox {
    margin-right: 0.25em;
  }
}

div.form-control.tag-container {
  border: none;
  padding: 0;
}

.action-card .card-text {
  display: flex;
  flex-direction: column;
  row-gap: 1rem;
  align-items: start;
}

.preview-card {
  min-height: 15em;
  height: 100%;
  background: none;

  .image-preview {
    min-width: 100%;
  }

  iframe {
    border: none;
    padding: 0;
    margin: 0;
    width: 100%;
    aspect-ratio: 1;
  }

  .preview-empty {
    position: relative;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    aspect-ratio: 1;
    font-size: .75rem;

    p {
      position: absolute;
      margin: 1em;
      margin-block-end: 0;
      text-align: center;
      z-index: 50;
      font-weight: 500;
    }

    &::before,
    &::after {
      content: '';
      position: absolute;
      top: -20%;
      left: 50%;
      width: 1px;
      height: 140%;
      background-color: #333;
      transform: rotate(45deg);
      border-radius: 1px;
      opacity: .08;
    }

    &::after {
      transform: rotate(-45deg);
    }

  }

  .card-body {
    display: flex;
    flex-direction: column;
    max-height: fit-content;
    gap: 0.5rem;
    justify-content: space-between;
  }

  .card-title {
    margin-bottom: 0;
  }

  .card-body .btn {
    width: fit-content;
    height: fit-content;
  }

  .sensitive {
    filter: blur(1rem);
  }
}

.carousel-inner {

  /* CSS hexagon background by Temani Afif: https://css-pattern.com/ */
  --s: 37px;
  --c: #0000, #333 .5deg 119.5deg, #0000 120deg;
  --g1: conic-gradient(from 60deg at 56.25% calc(425%/6), var(--c));
  --g2: conic-gradient(from 180deg at 43.75% calc(425%/6), var(--c));
  --g3: conic-gradient(from -60deg at 50% calc(175%/12), var(--c));
  background:
    var(--g1), var(--g1) var(--s) calc(1.73*var(--s)),
    var(--g2), var(--g2) var(--s) calc(1.73*var(--s)),
    var(--g3) var(--s) 0, var(--g3) 0 calc(1.73*var(--s)) #444;
  background-size: calc(2*var(--s)) calc(3.46*var(--s));

  img {
    aspect-ratio: 1.77777;
    object-fit: contain;
    object-position: center;
  }

}

.carousel-control-play {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 999;
}
</file>

<file path="app/assets/stylesheets/application.scss">
$color-mode-type: media-query;
$table-bg-scale: -90%;

@import 'bootstrap/scss/bootstrap';

$bootstrap-icons-font-dir: "https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/fonts";
@import 'bootstrap-icons/font/bootstrap-icons';

$ra-font-path: "https://cdn.jsdelivr.net/npm/@infinizhen/rpg-awesome-continued@1.0.6/fonts";
@import '@infinizhen/rpg-awesome-continued/scss/rpg-awesome-continued';

@import 'src/layout';
@import 'src/libraries';
@import 'src/links';
@import 'src/models';
@import 'src/model_files';
@import 'src/effects';
@import 'src/altcha';

@import 'tom-select/dist/css/tom-select.bootstrap5';

@import '@uppy/core/dist/style.min';
@import '@uppy/dashboard/dist/style.min';

.ts-control {
	padding: 1px;
}

p.alert:empty,
p.notice:empty {
	display: none;
}

.button_to,
.button_to .div {
	display: inline;
}
</file>

<file path="app/components/access_indicator.rb">
class Components::AccessIndicator < Components::Base
  def initialize(object:, icon: true, text: false)
    @object = object
    @icon = icon
    @text = text
  end

  def render?
    SiteSettings.multiuser_enabled? && !@object.remote? && (current_user&.is_moderator? || current_user&.has_permission_on?("own", @object))
  end

  def view_template
    span do
      if @object.private?
        span(class: "text-danger") { Icon(icon: "lock-fill", label: t("general.private")) } if @icon
        if @text
          whitespace
          span { t("general.private") }
        end
      elsif @object.public?
        span(class: "text-success") { Icon(icon: "eye-fill", label: t("general.public")) } if @icon
        if @text
          whitespace
          span { t("general.public") }
        end
      else
        span(class: "text-info") { Icon(icon: "unlock", label: t("general.shared")) } if @icon
        if @text
          whitespace
          span { t("general.shared") }
        end
      end
    end
  end
end
</file>

<file path="app/components/altcha_widget.rb">
class Components::AltchaWidget < Components::Base
  include Phlex::Rails::Helpers::JavaScriptURL

  register_element :altcha_widget

  def view_template
    div class: "altcha-wrapper" do
      Icon(icon: "robot", label: t("components.altcha_widget.help"))
      altcha_widget(
        id: "altcha-widget",
        auto: "onload",
        challengeurl: altcha_url,
        hidefooter: true,
        hidelogo: true,
        workerurl: javascript_url("altcha_worker.js")
      )
    end
  end
end
</file>

<file path="app/components/base_button.rb">
# frozen_string_literal: true

class Components::BaseButton < Components::Base
  include Phlex::Rails::Helpers::ButtonTo

  def initialize(label:, href:, variant:, icon: nil, method: nil, icon_only: false, aria_label: nil, confirm: nil, data: {}, nofollow: nil)
    @icon = icon
    @label = label
    @href = href
    @variant = variant
    @method = method
    @icon_only = icon_only
    @aria_label = aria_label
    @confirm = confirm
    @data = data
    @nofollow = nofollow
  end

  def view_template
    helper(@href, method: @method, class: "btn btn-#{@variant}", nofollow: @nofollow, aria: {label: @aria_label || (@icon_only ? @label : nil)}, data: {confirm: @confirm}.merge(@data)) do
      if @icon
        Icon(icon: @icon, label: @label)
        whitespace
      end
      span(class: @icon_only ? "visually-hidden" : nil) { @label }
    end
  end

  def helper(*args)
    raise NotImplementedError
  end
end
</file>

<file path="app/components/base.rb">
# frozen_string_literal: true

class Components::Base < Phlex::HTML
  include Components

  # Include any helpers you want to be available across all components
  include Phlex::Rails::Helpers::Routes
  include Phlex::Rails::Helpers::Translate

  register_value_helper :current_user

  if Rails.env.development?
    def before_template
      comment { "Before #{self.class.name}" }
      super
    end
  end
end
</file>

<file path="app/components/burger_menu.rb">
# frozen_string_literal: true

class Components::BurgerMenu < Components::Base
  def view_template
    div class: "btn-group" do
      a href: "#", role: "button", data: {bs_toggle: "dropdown"}, aria: {expanded: false} do
        Icon icon: "three-dots-vertical", label: t("general.menu")
      end
      ul class: "dropdown-menu dropdown-menu-end" do
        yield
      end
    end
  end
end
</file>

<file path="app/components/copy_button.rb">
class Components::CopyButton < Components::Base
  def initialize(text:)
    @text = text
  end

  def view_template
    a href: "#", class: "link-secondary", data: {controller: "copy-text", action: "click->copy-text#copy:prevent", copy_text_text_value: @text} do
      Icon icon: "clipboard-plus", label: t("components.copy_button.copy")
    end
  end
end
</file>

<file path="app/components/display_user_quota.rb">
# frozen_string_literal: true

class Components::DisplayUserQuota < Components::Base
  include Phlex::Rails::Helpers::NumberToHumanSize

  def initialize(current_size:, quota:)
    @quota = quota.to_f
    @current_size = current_size.to_f
  end

  def view_template
    quota_in_mb = number_to_human_size(@quota)
    current_size_in_mb = number_to_human_size(@current_size)
    percent_used = ((@current_size / @quota) * 100).ceil
    progress_bar_background = "text-bg-success"
    case percent_used
    when 0..60
      progress_bar_background = "text-bg-success"
    when 70..90
      progress_bar_background = "text-bg-warning"
    when 90..Float::INFINITY
      progress_bar_background = "text-bg-danger"
    end
    div class: "fs-2" do
      plain "#{current_size_in_mb} / #{quota_in_mb}"
    end
    div class: "progress", role: %(progressbar), "aria-label": "Quota progress bar", "aria-valuemin": 0, "aria-valuemax": 100, "aria-value": percent_used do
      div class: "progress-bar #{progress_bar_background}", style: "width:#{percent_used}%" do
        "#{percent_used}%"
      end
    end
    p class: "mt-3 text-start" do
      t "components.display_user_quota.request_increase"
    end
  end
end
</file>

<file path="app/components/do_button.rb">
# frozen_string_literal: true

class Components::DoButton < Components::BaseButton
  include Phlex::Rails::Helpers::ButtonTo

  def helper(*args)
    button_to(*args) { yield }
  end
end
</file>

<file path="app/components/download_button.rb">
# frozen_string_literal: true

class Components::DownloadButton < Components::Base
  include Phlex::Rails::Helpers::LinkTo

  def initialize(model:, format: :zip)
    @model = model
    @format = format
  end

  def before_template
    @extensions = @model.file_extensions.excluding("json")
    @has_supported_and_unsupported = @model.has_supported_and_unsupported?
  end

  def view_template
    div class: "btn-group ml-auto mr-auto" do
      download_link html_class: "btn btn-lg btn-primary"
      button(type: "button",
        class: "btn btn-lg btn-primary dropdown-toggle dropdown-toggle-split",
        "data-bs-toggle": "dropdown",
        "aria-expanded": "false") do
        span(class: "visually-hidden") { t("components.download_button.menu_header") }
      end
      ul class: "dropdown-menu" do
        li(class: "dropdown-header") { t("components.download_button.menu_header") }
        if @has_supported_and_unsupported
          li { download_link selection: "supported" }
          li { download_link selection: "unsupported" }
          li { hr class: "dropdown-divider" }
        end
        @extensions&.compact&.map do |type|
          li { download_link file_type: type }
        end
      end
    end
  end

  def download_link(selection: nil, file_type: nil, html_class: "dropdown-item")
    downloader = ArchiveDownloadService.new(model: @model, selection: selection || file_type)
    link_options = {
      class: html_class,
      nofollow: true,
      download: (downloader.ready? ? "download" : nil)
    }
    if downloader.preparing?
      link_options.merge!(
        disabled: true,
        "aria-disabled": "true",
        tabindex: -1,
        class: html_class + " disabled"
      )
    end
    link_to model_path(@model, format: @format, selection: selection || file_type), link_options do
      if downloader.ready?
        Icon(icon: "cloud-download", label: t("components.download_button.download.ready"))
      elsif downloader.preparing?
        Icon(icon: "hourglass-split", label: t("components.download_button.download.preparing"), effect: "icon-flip")
      else
        Icon(icon: "hourglass-top", label: t("components.download_button.download.missing"))
      end
      whitespace
      span do
        if file_type
          t("components.download_button.file_type", type: file_type.upcase)
        elsif selection
          # i18n-tasks-use t('components.download_button.supported')
          # i18n-tasks-use t('components.download_button.unsupported')
          t("components.download_button.%{selection}" % {selection: selection})
        else
          t("components.download_button.label")
        end
      end
    end
  end
end
</file>

<file path="app/components/dropdown_item.rb">
# frozen_string_literal: true

class Components::DropdownItem < Components::Base
  include Phlex::Rails::Helpers::LinkTo

  def initialize(icon:, label:, path:, method: nil, aria_label: nil, confirm: nil)
    @icon = icon
    @label = label
    @path = path
    @method = method
    @aria_label = aria_label
    @confirm = confirm
  end

  def view_template
    li do
      link_to @path, method: @method, class: "dropdown-item", aria: {label: @aria_label}, data: {confirm: @confirm} do
        Icon(icon: @icon, label: @label)
        whitespace
        span { @label }
      end
    end
  end
end
</file>

<file path="app/components/follow_button.rb">
# frozen_string_literal: true

class Components::FollowButton < Components::Base
  include Phlex::Rails::Helpers::ButtonTo

  def initialize(follower:, target:, name: nil)
    @signed_out = follower.nil?
    @target = target
    @following = follower&.following? target
    @name = name
  end

  def view_template
    DoButton(
      icon: @icon,
      href: @path,
      label: translate(@i18n_key, name: @name),
      method: @method,
      variant: (@following == :pending) ? "outline-primary " : "primary",
      data: {
        turbo: !@signed_out
      }
    )
  end

  def render?
    SiteSettings.social_enabled? && (
      Pundit::PolicyFinder.new(Federails::Following).policy.new(current_user, nil).create? ||
      remote_follow_allowed?
    )
  end

  private

  def before_template
    case @following
    when :pending
      @i18n_key = ".pending" # i18n-tasks-use t('components.follow_button.pending')
      @icon = "hourglass-split"
    when :accepted
      @i18n_key = ".unfollow" # i18n-tasks-use t('components.follow_button.unfollow')
      @icon = "person-x-fill"
    else
      @i18n_key = ".follow" # i18n-tasks-use t('components.follow_button.follow')
      @icon = "person-plus-fill"
    end
    if @signed_out
      @path = @target.is_a?(Federails::Actor) ?
        follow_remote_actor_path(@target) :
        remote_follow_path(uri: @target.federails_actor.federated_url, name: @target.name)
      @method = :post
    else
      @path = @target.is_a?(Federails::Actor) ?
        unfollow_remote_actor_path(@target) :
        url_for(@target) + "/follows"
      @method = @following ? :delete : :post
    end
    super
  end

  def remote_follow_allowed?
    SiteSettings.federation_enabled? && @signed_out
  end
end
</file>

<file path="app/components/go_button.rb">
# frozen_string_literal: true

class Components::GoButton < Components::BaseButton
  include Phlex::Rails::Helpers::LinkTo

  def helper(*args)
    link_to(*args) { yield }
  end
end
</file>

<file path="app/components/icon.rb">
# frozen_string_literal: true

class Components::Icon < Components::Base
  def initialize(icon:, id: nil, label: nil, effect: nil)
    @icon = icon
    @effect = effect
    @id = id
    @label = label
  end

  def before_template
    prefix = "bi"
    icon = @icon
    if icon.starts_with? "ra-"
      prefix = "ra"
      icon = @icon.gsub("ra-", "")
    end
    @classes = [prefix, "#{prefix}-#{icon}", @effect].compact.join(" ")
  end

  def view_template
    i class: @classes, role: "img", title: @label, id: @id
  end
end
</file>

<file path="app/components/link_list.rb">
# frozen_string_literal: true

class Components::LinkList < Components::Base
  include Phlex::Rails::Helpers::LinkTo

  def initialize(links:)
    @links = links
  end

  def view_template
    return if @links.empty?
    ul class: "links" do
      @links.each do |link|
        if link.valid?
          li do
            link_to t("sites.%{site}" % {site: link.site}, default: "%{site}" % {site: link.site}), link.url
          end
        end
      end
    end
  end
end
</file>

<file path="app/components/modal.rb">
class Components::Modal < Components::Base
  def initialize(id:, title:)
    @id = id
    @title = title
  end

  def view_template
    div class: "modal fade modal-lg", id: @id, tabindex: "-1", "aria-labelledby": "#{@id}-label", "aria-hidden": "true" do
      div class: "modal-dialog" do
        div class: "modal-content" do
          div class: "modal-header" do
            h1(class: "modal-title fs-5", id: "#{@id}-label") { @title }
            button type: "button", class: "btn-close", "data-bs-dismiss": "modal", "aria-label": t("components.modal.close")
          end
          div class: "modal-body" do
            yield
          end
        end
      end
    end
  end
end
</file>

<file path="app/components/model_card.rb">
# frozen_string_literal: true

class Components::ModelCard < Components::Base
  include Phlex::Rails::Helpers::ImageTag
  include Phlex::Rails::Helpers::Sanitize
  include Phlex::Rails::Helpers::LinkTo

  register_output_helper :status_badges
  register_output_helper :server_indicator
  register_value_helper :policy

  def initialize(model:)
    @model = model
  end

  def view_template
    div class: "col mb-4" do
      div class: "card preview-card" do
        div(class: "card-header position-absolute w-100 top-0 z-3 bg-body-secondary text-secondary-emphasis opacity-75") { server_indicator @model } if @model.remote?
        PreviewFrame(object: @model)
        div(class: "card-body") { info_row }
        actions
      end
    end
  end

  private

  def title
    div class: "card-title" do
      a "data-editable-field": "model[name]", "data-editable-path": model_path(@model), contenteditable: "plaintext-only", "data-controller": "editable", "data-action": "focus->editable#onFocus blur->editable#onBlur" do
        @model.name
      end
      if @model.sensitive
        whitespace
        Icon(icon: "explicit", label: Model.human_attribute_name(:sensitive))
      end
      whitespace
      AccessIndicator(object: @model)
    end
  end

  def open_button
    if @model.remote?
      link_to @model.federails_actor.profile_url, {class: "btn btn-primary btn-sm", "aria-label": translate("components.model_card.open_button.label", name: @model.name)} do
        span { "⁂" }
        whitespace
        span { t("components.model_card.open_button.text") }
      end
    else
      link_to t("components.model_card.open_button.text"), @model, {class: "btn btn-primary btn-sm", "aria-label": translate("components.model_card.open_button.label", name: @model.name)}
    end
  end

  def credits
    ul class: "list-unstyled" do
      if @model.remote?
        if (creator = @model.federails_actor.extensions["attributedTo"])
          li { creator target: creator["url"], name: creator["name"] }
        end
        if (collection = @model.federails_actor.extensions["context"])
          li { collection target: collection["url"], name: collection["name"] }
        end
      else
        li { creator target: @model.creator, name: @model.creator.name } if @model.creator
        li { collection target: @model.collection, name: @model.collection.name } if @model.collection
      end
    end
  end

  def creator(target:, name:)
    Icon icon: "person", label: Creator.model_name.human
    link_to name, target, "aria-label": [Creator.model_name.human, name].join(": ")
  end

  def collection(target:, name:)
    Icon icon: "collection", label: Collection.model_name.human
    link_to name, target, "aria-label": [Collection.model_name.human, name].join(": ")
  end

  def caption
    if @model.caption
      span class: "card-subtitle text-muted" do
        sanitize @model.caption
      end
    end
  end

  def info_row
    div class: "row" do
      div class: "col" do
        title
        caption
      end
      div class: "col-auto" do
        small do
          credits
        end
      end
    end
  end

  def actions
    div class: "card-footer" do
      div class: "row" do
        div class: "col" do
          open_button
          whitespace
          status_badges @model
        end
        div class: "col col-auto" do
          BurgerMenu do
            DropdownItem(icon: "pencil", label: t("components.model_card.edit_button.text"), path: edit_model_path(@model), aria_label: translate("components.model_card.edit_button.label", name: @model.name)) if policy(@model).edit?
            DropdownItem(icon: "trash", label: t("components.model_card.delete_button.text"), path: model_path(@model), method: :delete, aria_label: translate("components.model_card.delete_button.label", name: @model.name), confirm: translate("models.destroy.confirm")) if policy(@model).destroy?
            DropdownItem(icon: "flag", label: t("general.report", type: ""), path: new_model_report_path(@model)) if SiteSettings.multiuser_enabled?
          end
        end
      end
    end
  end
end
</file>

<file path="app/components/preview_frame.rb">
# frozen_string_literal: true

class Components::PreviewFrame < Components::Base
  include Phlex::Rails::Helpers::ImageTag

  def initialize(object:)
    @object = object
    @file = @object.preview_file
  end

  def view_template
    if @file
      local
    elsif @object.remote?
      remote
    else
      empty
    end
  end

  private

  def local
    if @file.is_image?
      image model_model_file_path(@file.model, @file, format: @file.extension), @file.name
    elsif @file.is_renderable?
      div class: "card-img-top #{"sensitive" if needs_hiding?(@object)}" do
        Renderer file: @file
      end
    else
      empty
    end
  end

  def remote
    preview_data = @object.federails_actor&.extensions&.dig("preview")
    case preview_data&.dig("type")
    when "Image"
      image preview_data["url"], preview_data["summary"]
    when "Document"
      div class: "card-img-top #{"sensitive" if needs_hiding?(@object)}" do
        iframe(
          scrolling: "no",
          srcdoc: safe([
            "<html><body style=\"margin: 0; padding: 0; aspect-ratio: 1\">",
            preview_data["content"],
            "</body></html>"
          ].join),
          title: preview_data["summary"]
        )
      end
    else
      empty
    end
  end

  def needs_hiding?(thing)
    return false unless current_user.nil? || current_user.sensitive_content_handling.present?
    case thing.class
    when Model
      thing.sensitive
    when Collection
      thing.preview_file.sensitive
    else
      false
    end
  end

  def empty
    div class: "preview-empty" do
      p { t("components.model_card.no_preview") }
    end
  end

  def image(url, alt)
    div class: "card-img-top card-img-top-background", style: "background-image: url(#{url})"
    image_tag url, class: "card-img-top image-preview #{"sensitive" if needs_hiding?(@object)}", alt: alt
  end
end
</file>

<file path="app/components/renderer.rb">
# frozen_string_literal: true

class Components::Renderer < Components::Base
  include Phlex::Rails::Helpers::JavascriptPath
  include Phlex::Rails::Helpers::NumberToHumanSize

  def initialize(file:)
    @file = file
  end

  def render?
    @file&.is_renderable?
  end

  def before_template
    @settings = current_user&.renderer_settings || SiteSettings::UserDefaults::RENDERER
  end

  def view_template
    div class: "position-relative", data: {turbo_permanent: true} do
      canvas id: "preview-file-#{@file.to_param}",
        class: "object-preview position-relative",
        tabindex: "0",
        data: {
          controller: "renderer",
          preview_url: model_model_file_by_filename_path(@file.model, @file.filename),
          worker_url: javascript_path("offscreen_renderer.js"),
          format: @file.extension,
          y_up: @file.y_up.to_s,
          grid_size_x: @settings["grid_width"],
          grid_size_z: @settings["grid_depth"],
          show_grid: @settings["show_grid"].to_s,
          enable_pan_zoom: @settings["enable_pan_zoom"].to_s,
          background_colour: @settings["background_colour"],
          object_colour: @settings["object_colour"],
          render_style: @settings["render_style"],
          auto_load: ((@file.size || 9_999_999.megabytes) < (@settings["auto_load_max_size"] || 9_999_999).megabytes) ? "true" : "false"
        }
      div class: "p-0 btn btn-secondary load-progress object-preview-progress position-absolute top-50 start-50 translate-middle", role: "presentation" do
        div class: "progress-bar bg-info progress-bar-animated progress-bar-striped", role: "progressbar", style: "width: 0%; height: 100%",
          aria_label: "Loading progress", aria_valuenow: "0", aria_valuemin: "0", aria_valuemax: "100"
        span class: "progress-label position-absolute top-50 start-50 translate-middle", role: "button" do
          span { t("renderer.load") }
          whitespace
          span { "(#{number_to_human_size @file.size, precision: 2})" }
        end
      end
    end
  end
end
</file>

<file path="app/components/report_button.rb">
# frozen_string_literal: true

class Components::ReportButton < Components::Base
  def initialize(object:, path:)
    @object = object
    @path = path
  end

  def view_template
    GoButton(
      icon: "flag",
      href: @path,
      label: t("general.report", type: @object.model_name.human),
      variant: "outline-warning",
      nofollow: true
    )
  end

  def render?
    SiteSettings.multiuser_enabled?
  end
end
</file>

<file path="app/components/resolve_button.rb">
# frozen_string_literal: true

class Components::ResolveButton < Components::Base
  include Phlex::Rails::Helpers::ButtonTo

  OPTIONS = {
    show: {
      icon: "box",
      i18n_key: "models.file.open_button.text", # i18n-tasks-use t('models.file.open_button.text')
      button_type: "primary"
    },
    edit: {
      icon: "pencil",
      i18n_key: "general.edit", # i18n-tasks-use t('general.edit')
      button_type: "primary"
    },
    destroy: {
      icon: "trash",
      i18n_key: "general.delete", # i18n-tasks-use t('general.delete')
      button_type: "danger",
      confirm: "%{type}s.destroy.confirm"
    },
    merge: {
      icon: "box-arrow-in-up-left",
      i18n_key: "models.problem.merge_all", # i18n-tasks-use t('models.problem.merge_all')
      button_type: "danger"
    },
    upload: {
      icon: "upload",
      i18n_key: "application.navbar.upload", # i18n-tasks-use t('application.navbar.upload')
      button_type: "primary"
    },
    convert: {
      icon: "arrow-left-right",
      i18n_key: "model_files.show.convert", # i18n-tasks-use t('model_files.show.convert')
      button_type: "warning"
    }
  }

  def initialize(problem:, user: nil)
    @problem = problem
    @user = user
  end

  def before_template
    @options = OPTIONS[@problem.resolution_strategy.to_sym]
    @text = t @options[:i18n_key]
  end

  def view_template
    if @problem.in_progress
      button_to("#", class: "btn btn-#{@options[:button_type]} disabled") do
        span(class: "spinner-border spinner-border-sm") { Icon(icon: "", label: "") }
        whitespace
        span { @text }
      end
    else
      DoButton(
        label: @text,
        href: resolve_problem_path(@problem, resolve: true),
        variant: @options[:button_type],
        icon: @options[:icon],
        method: :post,
        confirm: @options[:confirm] ? translate(@options[:confirm] % {type: @problem.problematic_type.underscore}) : nil,
        nofollow: true
      )
    end
  end

  def render?
    ProblemPolicy.new(@user, @problem).resolve?
  end
end
</file>

<file path="app/components/search_help.rb">
class Components::SearchHelp < Components::Base
  def view_template
    div class: "text-start" do
      a "data-bs-toggle": "modal", "data-bs-target": "#search-help" do
        yield
      end
      modal
    end
  end

  def modal
    render Components::Modal.new(id: "search-help", title: t("components.search_help.title")) do
      p do
        t("components.search_help.intro")
      end
      help_table
      p do
        t("components.search_help.more_details_html")
      end
    end
  end

  def help_table
    table class: "table table-striped" do
      tr do
        td { code { "cat hat" } }
        td { t("components.search_help.simple") }
      end
      tr do
        td { code { "cat or hat" } }
        td { t("components.search_help.boolean") }
      end
      negation
      tr do
        td { code { '"cat hat"' } }
        td { t("components.search_help.quotes") }
      end
      tr do
        td { code { "(cat or hat) and not bat" } }
        td { t("components.search_help.parentheses") }
      end
      tr do
        td { code { "tag = cat" } }
        td { t("components.search_help.tag") }
      end
      tr do
        td { code { "tag != cat" } }
        td { t("components.search_help.without_tag") }
      end
      specific_fields
      tr do
        td { code { "not set? tag" } }
        td { t("components.search_help.unset") }
      end
      filenames
      federation
    end
  end

  def filenames
    tr do
      td do
        code { "filename = cat.stl" }
        br
        code { "filename ~ cat" }
      end
      td { t("components.search_help.filename") }
    end
  end

  def specific_fields
    tr do
      td do
        code { "creator ~ cat" }
        br
        code { "collection ~ cat" }
        br
        code { "caption ~ cat" }
        br
        code { "description ~ cat" }
        if SiteSettings.show_libraries?
          br
          code { "library = #{Library.first.name}" }
        end
      end
      td { t("components.search_help.specific_fields") }
    end
  end

  def negation
    tr do
      td do
        code { "cat -hat" }
        br
        code { "cat !hat" }
        br
        code { "cat not hat" }
      end
      td { t("components.search_help.negation") }
    end
  end

  def federation
    return unless SiteSettings.federation_enabled?
    tr do
      td do
        code { "@manyfold@3dp.chat" }
      end
      td { t("components.search_help.federation") }
    end
  end
end
</file>

<file path="app/components/stat_block.rb">
# frozen_string_literal: true

class Components::StatBlock < Components::Base
  def initialize(title:, value:)
    @title = title
    @value = value
  end

  def view_template
    div(class: "badge text-bg-info col me-2") do
      div { @title.respond_to?(:model_name) ? @title.model_name.human(count: 100) : @title.to_s }
      div(class: "fs-4 mt-2 ") { @value.to_s }
    end
  end
end
</file>

<file path="app/components/tag.rb">
# frozen_string_literal: true

class Components::Tag < Components::Base
  include Phlex::Rails::Helpers::LinkTo

  CLASSES = "badge rounded-pill bg-secondary tag"

  def initialize(tag:, show_count: false, filters: {}, html_options: {}, filter_in_place: false)
    @tag = tag
    @show_count = show_count
    @filter_in_place = filter_in_place
    @filters = filters || {}
    @filters[:tag] ||= []
    @html_options = html_options.merge({class: CLASSES})
  end

  def view_template
    new_filters = @filters.merge(tag: @filters[:tag] | [@tag.name])
    span itemprop: "keywords" do
      link_to (@filter_in_place ? new_filters : models_path(new_filters)), @html_options do
        parts = [@tag.name]
        parts << "(#{@tag.taggings_count})" if @show_count
        parts.join " "
      end
    end
  end
end
</file>

<file path="app/controllers/concerns/filterable.rb">
module Filterable
  extend ActiveSupport::Concern
  included do
    before_action :get_filters, only: [:index, :show] # rubocop:todo Rails/LexicallyScopedActionFilter
  end

  def get_filters
    # Get list filters from URL
    @filters = params.permit(:library, :collection, :q, :creator, :link, :missingtag, tag: [])
  end

  def filtered_models(filters)
    models = policy_scope(Model).all
    models = filter_by_library(models, filters[:library])
    models = filter_by_missing_tag(models, filters[:missingtag], filters[:library])
    models = filter_by_tag(models, filters[:tag])
    models = filter_by_collection(models, filters[:collection])
    models = filter_by_creator(models, filters[:creator])
    models = filter_by_url(models, filters[:link])
    filter_by_search(models, filters[:q])
  end

  def filtered_collections(filters)
    collections = policy_scope(Collection).includes(:creator)
    collections = filter_collection_by_collection(collections, filters[:collection])
    collections = filter_collection_by_creator(collections, filters[:creator])
    filter_by_search(collections, filters[:q])
  end

  private

  def filter_collection_by_collection(collections, collection)
    case collection
    when nil
      collections
    when ""
      collections.where(collection: nil)
    else
      collections.where(collection: Collection.find_param(collection))
    end
  end

  def filter_collection_by_creator(collections, creator)
    case creator
    when nil
      collections
    when ""
      collections.where(creator_id: nil)
    else
      collections.where(creator: Creator.find_param(creator))
    end
  end

  # Filter by library
  def filter_by_library(models, library)
    library ? models.where(library: Library.find_param(library)) : models
  end

  # Filter by collection
  def filter_by_collection(models, collection)
    case collection
    when nil
      models # No collection, move along
    when ""
      models.where(collection_id: nil)
    else
      @collection = Collection.find_param(collection)
      models.where(collection: Collection.tree_down(@collection.id))
    end
  end

  # Filter by creator
  def filter_by_creator(models, creator)
    case creator
    when nil
      models # No creator specified, nothing to do
    when ""
      models.where(creator_id: nil)
    else
      @creator = Creator.find_param(creator)
      models.where(creator: @creator)
    end
  end

  # Filter by tag
  def filter_by_tag(models, tags)
    case tags
    when nil
      models # No tags, move along
    when [""]
      models.where("(select count(*) from taggings where taggings.taggable_id=models.id and taggings.context='tags')<1")
    else
      @filter_tags = ActsAsTaggableOn::Tag.named_any(tags)
      # Build query directly rather than using tagged_with, which parses the tag list again using default separators
      ::ActsAsTaggableOn::Taggable::TaggedWithQuery.build(models, ActsAsTaggableOn::Tag, ActsAsTaggableOn::Tagging, @filter_tags.map(&:name), {})
    end
  end

  # Filter by url
  def filter_by_url(models, url)
    case url
    when nil
      models # no filter
    when ""
      models.where("(select count(*) from links where linkable_id=models.id and linkable_type='Model')<1")
    else
      models.where("(select count(*) from links where linkable_id=models.id and linkable_type='Model' and url like ?)>0", "%#{url}%")
    end
  end

  # Filter by search query
  def filter_by_search(models, query)
    if query
      Search::ModelSearchService.new(models).search(query)
    else
      models
    end
  end

  def filter_by_missing_tag(models, missingtag, library)
    # Missing tags (If specific tag is not specified, require library to be set)
    if missingtag.presence || (missingtag && library)
      tag_regex_build = []
      regexes = ((missingtag != "") ? [missingtag] : Library.find_param(library).tag_regex)
      # Regexp match syntax - postgres is different from MySQL and SQLite
      regact = (ApplicationRecord.connection.adapter_name == "PostgreSQL") ? "~" : "REGEXP"
      regexes.each do |reg|
        qreg = ActiveRecord::Base.connection.quote(reg)
        tag_regex_build.push "(select count(*) from tags join taggings on tags.id=taggings.tag_id where tags.name #{regact} #{qreg} and taggings.taggable_id=models.id and taggings.taggable_type='Model')<1"
      end
      qreg = ActiveRecord::Base.connection.quote(missingtag)
      tag_regex_build.push "(select count(*) from tags join taggings on tags.id=taggings.tag_id where tags.name #{regact} #{qreg} and taggings.taggable_id=models.id and taggings.taggable_type='Model')<1"
      models.where("(" + tag_regex_build.join(" OR ") + ")")
    else
      models
    end
  end
end
</file>

<file path="app/controllers/concerns/model_listable.rb">
module ModelListable
  extend ActiveSupport::Concern

  included do
    include TagListable
    include Filterable
  end

  private

  def prepare_model_list
    # Ordering
    @models = case session["order"]
    when "recent"
      @models.order(created_at: :desc)
    else
      @models.order(name_lower: :asc)
    end

    @tags, @unrelated_tag_count = generate_tag_list(@models, @filter_tags)
    @tags, @kv_tags = split_key_value_tags(@tags)
    @unrelated_tag_count = nil if @filters.empty?

    if helpers.pagination_settings["models"]
      page = params[:page] || 1
      @models = @models.page(page).per(helpers.pagination_settings["per_page"])
    end

    # Load extra data
    @models = @models.includes [:creator, :collection]
    @models = @models.preload [:model_files, :preview_file] # Use preload query to avoid joining JSON fields
  end
end
</file>

<file path="app/controllers/concerns/permittable.rb">
module Permittable
  extend ActiveSupport::Concern

  included do
    before_action :find_caber_subjects, only: [:create, :update] # rubocop:todo Rails/LexicallyScopedActionFilter
  end

  def caber_relations_params(type: nil)
    params.expect(type => [
      caber_relations_attributes: [
        :id,
        :subject_type,
        :subject_id,
        :permission,
        :_destroy
      ]
    ])
  end

  def find_caber_subjects
    params.values.each do |param|
      if param.is_a?(ActionController::Parameters) && param.has_key?("caber_relations_attributes")
        param["caber_relations_attributes"].transform_values! do |value|
          if value.has_key? "subject"
            subject = case value["subject"]
            when URI::MailTo::EMAIL_REGEXP
              User.find_by!(email: value["subject"])
            when "role::member"
              Role.find_by!(name: :member)
            when "role::public"
              nil
            when ""
              raise ActiveRecord::RecordNotFound
            else
              User.find_by!(username: value["subject"])
            end
            value["subject_id"] = subject&.id
            value["subject_type"] = subject&.class&.name
          end
          value
        rescue ActiveRecord::RecordNotFound
          nil
        end
        param["caber_relations_attributes"].compact!
      end
    end
  end
end
</file>

<file path="app/controllers/concerns/tag_listable.rb">
module TagListable
  def generate_tag_list(models = nil, filter_tags = nil)
    # All tags bigger than threshold
    tags = all_tags = policy_scope(ActsAsTaggableOn::Tag).where(taggings_count: helpers.tag_cloud_settings["threshold"]..)
    # Ignore any tags that have been applied as filters
    tags = all_tags = tags.where.not(id: filter_tags) if filter_tags
    # Generate a list of tags shared by the list of models
    tags = tags.includes(:taggings).where("taggings.taggable": models.map(&:id)) if models
    # Apply tag sorting
    tags = case helpers.tag_cloud_settings["sorting"]
    when "alphabetical"
      tags.order(name: :asc)
    else
      tags.order(taggings_count: :desc, name: :asc)
    end
    # Work out how many tags were unrelated and will be hidden
    unrelated_tag_count = models ? (all_tags.count - tags.count) : 0
    # Only get what we need for rendering
    tags = tags.select(:name, :taggings_count)
    # Done!
    [tags, unrelated_tag_count]
  end

  def split_key_value_tags(tags)
    # Split into plain tags and key-value tags
    if helpers.tag_cloud_settings["keypair"]
      plain_tags = tags.where.not("name LIKE '%:%'")
      kv_tags = tags.where("name LIKE '%:%'")
    else
      plain_tags = tags
      kv_tags = nil
    end
    [plain_tags, kv_tags]
  end
end
</file>

<file path="app/controllers/settings/domain_blocks_controller.rb">
class Settings::DomainBlocksController < ApplicationController
  respond_to :html

  def index
    @blocks = policy_scope(Federails::Moderation::DomainBlock).all
    render layout: "settings"
  end

  def new
    authorize Federails::Moderation::DomainBlock
    @domain_block = Federails::Moderation::DomainBlock.new
    render layout: "settings"
  end

  def create
    authorize Federails::Moderation::DomainBlock
    @domain_block = Federails::Moderation::DomainBlock.create(domain_block_params)
    if @domain_block.valid?
      redirect_to settings_domain_blocks_path, notice: t(".success")
    else
      render :new, layout: "settings", status: :unprocessable_entity
    end
  end

  def destroy
    @domain_block = policy_scope(Federails::Moderation::DomainBlock).find(params[:id])
    authorize @domain_block
    @domain_block.destroy
    redirect_to settings_domain_blocks_path, notice: t(".success")
  end

  private

  def domain_block_params
    params.expect(domain_block: [
      :domain
    ])
  end
end
</file>

<file path="app/controllers/settings/reports_controller.rb">
class Settings::ReportsController < ApplicationController
  before_action :get_report, only: [:show, :update]
  respond_to :html

  def index
    @reports = policy_scope(Federails::Moderation::Report).where(resolution: nil)
    render layout: "settings"
  end

  def show
    render layout: "settings"
  end

  def update
    if params[:resolve]
      @report.resolve!
      redirect_to settings_reports_path, notice: t(".resolved")
    elsif params[:ignore]
      @report.ignore!
      redirect_to settings_reports_path, notice: t(".ignored")
    else
      redirect_to settings_report_path(@report)
    end
  end

  private

  def get_report
    @report = policy_scope(Federails::Moderation::Report).find(params[:id])
    authorize @report
  end
end
</file>

<file path="app/controllers/settings/users_controller.rb">
class Settings::UsersController < ApplicationController
  before_action :get_user, except: [:index, :new, :create]
  before_action :get_available_roles, only: [:new, :create, :edit, :update]
  respond_to :html

  def index
    @users = policy_scope(Federails::Actor).where(entity_type: "User", tombstoned_at: nil).where.not(entity_id: nil).includes(entity: [:roles])
    render layout: "settings"
  end

  def show
    render layout: "settings"
  end

  def new
    authorize(User)
    @user = User.new
    @user.send :assign_default_role
    render layout: "settings"
  end

  def edit
    render layout: "settings"
  end

  def create
    authorize(User)
    password = helpers.random_password
    # Create user with a random password if one isn't provided
    @user = User.create({
      "password" => password,
      "password_confirmation" => password,
      "quota" => SiteSettings.default_user_quota,
      "quota_use_site_default" => true
    }.merge(user_params))
    if @user.valid?
      @user.send_reset_password_instructions if SiteSettings.email_configured?
      redirect_to [:settings, @user], notice: t(".success")
    else
      render :new, layout: "settings", status: :unprocessable_entity
    end
  end

  def update
    if params[:reset]
      @user.send_reset_password_instructions
      redirect_to [:settings, @user], notice: t(".reset_link_sent")
    elsif params[:approve]
      @user.update(approved: true)
      UserMailer.with(user: @user).account_approved.deliver_later if SiteSettings.email_configured?
      redirect_to [:settings, @user], notice: t(".approved")
    elsif @user.update(user_params)
      redirect_to [:settings, @user], notice: t(".success")
    else
      render :edit, layout: "settings", status: :unprocessable_entity
    end
  end

  def destroy
    @user.destroy
    redirect_to settings_users_path, notice: t(".success")
  end

  private

  def get_available_roles
    @available_roles = policy_scope(Role).all
  end

  def get_user
    @user = policy_scope(User).find_param(params[:id])
    authorize @user
  end

  def user_params
    filtered = params.expect(
      user: [
        :email,
        :username,
        :password,
        :password_confirmation,
        :quota,
        :quota_use_site_default,
        role_ids: []
      ]
    )
    # Filter out admin privilege for anyone but admins
    unless current_user.is_administrator?
      filtered[:role_ids]&.delete_if { |it| @available_roles.map(&:id).exclude? it.to_i }
    end
    filtered
  end
end
</file>

<file path="app/controllers/users/omniauth_callbacks_controller.rb">
class Users::OmniauthCallbacksController < Devise::OmniauthCallbacksController
  skip_after_action :verify_authorized

  def openid_connect
    @user = User.from_omniauth(request.env["omniauth.auth"])
    if @user.persisted?
      @user.add_role :administrator if User.with_role(:administrator).empty? # Create admin if there isn't one
      sign_in_and_redirect @user, event: :authentication # this will throw if @user is not activated
      set_flash_message(:notice, :success, kind: "OIDC") if is_navigational_format?
    else
      redirect_to new_user_session_url
      set_flash_message(:alert, :failure, kind: "OIDC", reason: @user.errors.full_messages.join("; ")) if is_navigational_format?
    end
  end
end
</file>

<file path="app/controllers/users/passwords_controller.rb">
# frozen_string_literal: true

class Users::PasswordsController < Devise::PasswordsController
  before_action :random_delay, only: [:create, :update]

  # GET /resource/password/new
  def new
    authorize :"users/passwords"
    super
  end

  # GET /resource/password/edit?reset_password_token=abcdef
  def edit
    authorize :"users/passwords"
    super
  end

  # POST /resource/password
  def create
    authorize :"users/passwords"
    self.resource = resource_class.send_reset_password_instructions(resource_params)
    yield resource if block_given?
    # This operation should always look like it succeeded
    set_flash_message! :notice, :send_instructions
    respond_with({}, location: after_sending_reset_password_instructions_path_for(resource_name))
  end

  # PUT /resource/password
  def update
    authorize :"users/passwords"
    super
  end

  # protected

  # def after_resetting_password_path_for(resource)
  #   super(resource)
  # end

  # The path used after sending reset password instructions
  # def after_sending_reset_password_instructions_path_for(resource_name)
  #   super(resource_name)
  # end
end
</file>

<file path="app/controllers/users/registrations_controller.rb">
# frozen_string_literal: true

class Users::RegistrationsController < Devise::RegistrationsController
  rate_limit to: 3, within: 2.minutes, only: :create

  before_action :random_delay, only: [:create, :cancel]
  before_action :configure_sign_up_params, only: [:create]
  before_action :detect_if_first_use, only: [:edit, :update]
  before_action :load_languages, only: [:edit, :update]
  before_action :configure_account_update_params, only: [:update]
  skip_before_action :check_for_first_use, only: [:edit, :update]

  # GET /resource/sign_up
  def new
    authorize User
    super
  end

  # GET /resource/edit
  def edit
    authorize current_user
    if @first_use
      render "first_use"
    else
      super
    end
  end

  # POST /users
  def create
    authorize User
    if AltchaSolution.verify_and_save(params.permit(:altcha)[:altcha])
      super do |user|
        opts = {}
        opts [:approved] = false if SiteSettings.approve_signups
        creator_username = params.dig(:user, :creators_attributes, "0", :slug)
        opts [:username] ||= "u;#{creator_username}" if SiteSettings.autocreate_creator_for_new_users && creator_username
        opts.compact!
        user.update(opts) unless opts.empty?
      end
      if @user.persisted?
        ModeratorMailer.with(user: @user).new_approval.deliver_later if SiteSettings.approve_signups && SiteSettings.email_configured?
      end
    else
      build_resource
      clean_up_passwords(resource)
      flash[:alert] = t(".altcha_failed")
      render :new, status: :unprocessable_entity
    end
  end

  # PUT /resource
  def update
    authorize current_user
    if @first_use
      if current_user.update(account_update_params.merge(reset_password_token: nil))
        bypass_sign_in current_user
        redirect_to root_path, notice: t("devise.registrations.update.setup_complete")
      else
        render "first_use"
      end
    else
      super
    end
  end

  # DELETE /resource
  def destroy
    authorize current_user
    super
  end

  # GET /resource/cancel
  # Forces the session data which is usually expired after sign
  # in to be expired now. This is useful if the user wants to
  # cancel oauth signing in/up in the middle of the process,
  # removing all OAuth session data.
  def cancel
    authorize :"users/registrations"
    super
  end

  protected

  def configure_sign_up_params
    devise_parameter_sanitizer.permit(:sign_up, keys: [:username, creators_attributes: [:slug, :name]])
  end

  def configure_account_update_params
    devise_parameter_sanitizer.permit(:account_update) do |user|
      user.permit(
        :email,
        :username,
        :password,
        :password_confirmation,
        :current_password,
        :interface_language,
        :sensitive_content_handling,
        pagination_settings: [
          :models,
          :creators,
          :collections,
          :per_page
        ],
        tag_cloud_settings: [
          :threshold,
          :heatmap,
          :keypair,
          :sorting
        ],
        file_list_settings: [
          :hide_presupported_versions
        ],
        renderer_settings: [
          :grid_width,
          :grid_depth,
          :show_grid,
          :enable_pan_zoom,
          :background_colour,
          :object_colour,
          :render_style,
          :auto_load_max_size
        ],
        problem_settings: Problem::CATEGORIES
      )
    end
  end

  def detect_if_first_use
    if current_user.reset_password_token == "first_use"
      @first_use = true
      devise_parameter_sanitizer.permit(:account_update, keys: [:username])
    end
  end

  # The path used after sign up.
  def after_sign_up_path_for(resource)
    SiteSettings.approve_signups ? root_path : welcome_path
  end

  # The path used after sign up for inactive accounts.
  # def after_inactive_sign_up_path_for(resource)
  #   super(resource)
  # end

  # The path used after edit/update
  def after_update_path_for(resource)
    edit_user_registration_path
  end

  def pagination_json(settings)
    return nil unless settings
    {
      "models" => settings[:models] == "1",
      "creators" => settings[:creators] == "1",
      "collections" => settings[:collections] == "1",
      "per_page" => settings[:per_page].to_i
    }
  end

  def tag_cloud_json(settings)
    return nil unless settings
    {
      "threshold" => settings[:threshold].to_i,
      "heatmap" => settings[:heatmap] == "1",
      "keypair" => settings[:keypair] == "1",
      "sorting" => settings[:sorting].to_s
    }
  end

  def file_list_json(settings)
    return nil unless settings
    {
      "hide_presupported_versions" => settings[:hide_presupported_versions] == "1"
    }
  end

  def renderer_json(settings)
    return nil unless settings
    {
      "grid_width" => settings[:grid_width].to_i,
      "grid_depth" => settings[:grid_width].to_i, # Store width in both for now. See #834
      "show_grid" => settings[:show_grid] == "1",
      "enable_pan_zoom" => settings[:enable_pan_zoom] == "1",
      "background_colour" => settings[:background_colour],
      "object_colour" => settings[:object_colour],
      "render_style" => settings[:render_style],
      "auto_load_max_size" => settings[:auto_load_max_size].to_i
    }
  end

  def load_languages
    @languages = [[t("devise.registrations.general_settings.interface_language.autodetect"), nil]].concat(
      I18n.available_locales.map { |locale| [I18nData.languages(locale)[locale.upcase.to_s]&.capitalize, locale] }
    )
  end

  def update_resource(resource, data)
    # Transform form data to crrect types
    data[:pagination_settings] = pagination_json(data[:pagination_settings])
    data[:renderer_settings] = renderer_json(data[:renderer_settings])
    data[:tag_cloud_settings] = tag_cloud_json(data[:tag_cloud_settings])
    data[:file_list_settings] = file_list_json(data[:file_list_settings])
    # Require password if important details have changed
    if (data[:email] && (data[:email] != resource.email)) || data[:password].present?
      resource.update_with_password(data)
    else
      resource.update_without_password(data.except(:email, :password, :password_confirmation, :current_password))
    end
  end
end
</file>

<file path="app/controllers/users/sessions_controller.rb">
# frozen_string_literal: true

class Users::SessionsController < Devise::SessionsController
  rate_limit to: 10, within: 3.minutes, only: :create

  before_action :random_delay, only: [:create]
  before_action :auto_login_single_user
  # before_action :configure_sign_in_params, only: [:create]

  # GET /resource/sign_in
  def new
    authorize :"users/sessions"
    super
  end

  # POST /resource/sign_in
  def create
    authorize :"users/sessions"
    super
  end

  # DELETE /resource/sign_out
  def destroy
    authorize :"users/sessions"
    super
    reset_session # Completely reset the session
  end

  protected

  # If you have extra params to permit, append them to the sanitizer.
  # def configure_sign_in_params
  #   devise_parameter_sanitizer.permit(:sign_in, keys: [:attribute])
  # end

  def auto_login_single_user
    return if ENV.fetch("FORCE_OIDC", nil) == "enabled"
    # Autocreate an admin user if there isn't one
    create_admin_user if User.with_role(:administrator).empty?
    # If in single user mode, or on first run,
    # automatically sign in with an admin account
    if !SiteSettings.multiuser_enabled? || User.with_role(:administrator).first.reset_password_token == "first_use"
      sign_in(:user, User.with_role(:administrator).first)
      flash.discard
      redirect_back_or_to root_path, alert: nil
    end
  end

  def create_admin_user
    password = helpers.random_password
    u = User.create!(
      username: SecureRandom.hex(4),
      email: "root@localhost",
      password:,
      password_confirmation: password,
      reset_password_token: "first_use"
    )
    u.add_role :administrator
    u
  end
end
</file>

<file path="app/controllers/activity_controller.rb">
class ActivityController < ApplicationController
  before_action { authorize :activity }

  after_action :verify_authorized
  skip_after_action :verify_policy_scoped, only: :index

  EXCLUSIONS = [
    "CacheSweepJob",
    "DownloadsSweepJob"
  ]

  def index
    @jobs = ActiveJob::Status.all.sort_by { |it| it.last_activity || "" }.reverse # rubocop:disable Pundit/UsePolicyScope
    @jobs.reject! { |it| EXCLUSIONS.include? it.read.dig(:serialized_job, "job_class") }
    @jobs = Kaminari.paginate_array(@jobs).page(params[:page]).per(50)
  end
end
</file>

<file path="app/controllers/altcha_controller.rb">
class AltchaController < ApplicationController
  skip_after_action :verify_authorized

  def new
    render json: Altcha::Challenge.create.to_json
  end
end
</file>

<file path="app/controllers/application_controller.rb">
class ApplicationController < ActionController::Base
  include Pundit::Authorization
  include BetterContentSecurityPolicy::HasContentSecurityPolicy
  after_action :verify_authorized, except: :index, unless: :active_admin_controller?
  after_action :verify_policy_scoped, only: :index, unless: :active_admin_controller?
  after_action :set_content_security_policy_header, if: -> { request.format.html? }

  before_action :authenticate_user!, unless: -> { SiteSettings.multiuser_enabled? || has_signed_id? }
  around_action :switch_locale
  before_action :check_for_first_use
  before_action :show_security_alerts
  before_action :check_scan_status
  before_action :remember_ordering
  before_action :restore_failed_search

  protect_from_forgery with: :null_session, if: :is_api_request?

  rescue_from ScopedSearch::QueryNotSupported, with: -> {
    flash[:alert] = t("application.search_error")
    flash[:query] = params[:q]
    redirect_back_or_to root_path
  }

  unless Rails.env.test?
    rescue_from Pundit::NotAuthorizedError, with: :user_not_authorized
  end

  def index
    raise NotImplementedError
  end

  def authenticate_admin_user!
    authenticate_user!
    render plain: "401 Unauthorized", status: :unauthorized unless current_user.is_administrator?
  end

  def check_for_first_use
    authenticate_user! if User.count == 0 # rubocop:disable Pundit/UsePolicyScope
    redirect_to(edit_user_registration_path) if current_user&.reset_password_token == "first_use"
  end

  def check_scan_status
    @scan_in_progress = Sidekiq::Queue.new("scan").size > 0
  end

  def remember_ordering
    session["order"] ||= "name"
    session["order"] = params["order"] if params["order"]
  end

  def active_admin_controller?
    is_a?(ActiveAdmin::BaseController)
  end

  private

  def restore_failed_search
    @query ||= flash[:query]
  end

  def is_api_request?
    request.format.manyfold_api_v0?
  end

  def has_signed_id?
    params[:id] && ApplicationRecord.signed_id_verifier.valid_message?(params[:id])
  end

  def img_src
    host = begin
      SiteSettings.site_icon ? URI.parse(SiteSettings.site_icon).host : nil
    rescue
      nil
    end
    [
      :self,
      :data,
      host,
      "https://cdn.jsdelivr.net",
      "https://raw.githubusercontent.com",
      SiteSettings.federation_enabled? ? :https : nil
    ].compact
  end

  def frame_src
    [
      :self,
      SiteSettings.federation_enabled? ? :https : nil
    ].compact
  end

  def configure_content_security_policy
    return if Rails.env.test?

    # Standard security policy
    content_security_policy.default_src :self
    content_security_policy.connect_src :self
    content_security_policy.frame_ancestors :self
    content_security_policy.frame_src(*frame_src)
    content_security_policy.font_src :self, "https://cdn.jsdelivr.net", "https://fonts.gstatic.com"
    content_security_policy.img_src(*img_src)
    content_security_policy.object_src :none
    content_security_policy.script_src :self
    content_security_policy.style_src :self
    content_security_policy.style_src_attr :unsafe_inline
    content_security_policy.style_src_elem :self, "nonce-#{content_security_policy_nonce}", "https://fonts.googleapis.com"
    # Add library origins
    origins = Library.all.filter_map(&:storage_origin) # rubocop:disable Pundit/UsePolicyScope
    content_security_policy.img_src(*origins)
    content_security_policy.connect_src(*origins)
    # If we're using Scout DevTrace in local development, we need to allow a load
    # of inline stuff, so we need to add that and NOT add the nonce
    if Rails.env.development? && ENV.fetch("SCOUT_DEV_TRACE", false) === "true"
      scout_csp = [:unsafe_inline, "https://apm.scoutapp.com", "https://scoutapm.com"]
      content_security_policy.img_src(*scout_csp)
      content_security_policy.script_src(*scout_csp)
      content_security_policy.style_src(*scout_csp)
      content_security_policy.connect_src(*scout_csp)
      content_security_policy.frame_src(*scout_csp)
    else
      content_security_policy.script_src "nonce-#{content_security_policy_nonce}"
    end
  end

  def switch_locale(&action)
    locale = current_user&.interface_language || request.env["rack.locale"]
    I18n.with_locale(locale.presence, &action)
  end

  def show_security_alerts
    return unless current_user&.is_administrator?
    return if ENV.fetch("SUDO_RUN_UNSAFELY", nil) === "enabled"
    flash.now[:alert] = t("security.running_as_root_html") if Process.uid == 0
  end

  def random_delay
    # Not sure how secure this is; it's used to help with timing attacks on login ID lookups
    # by adding a random 0-2 second delay into the response. There is probably a better way.
    sleep Random.new.rand(2.0)
  end

  def user_not_authorized
    if current_user
      raise ActiveRecord::RecordNotFound
    else
      redirect_to new_session_path(:user)
    end
  end

  def set_indexable(content)
    arr = Array(content)
    @indexing_directives = [
      ("noindex" unless arr.map(&:indexable?).all?),
      ("noai noimageai" unless arr.map(&:ai_indexable?).all?)
    ].compact.join(" ")
    response.headers["X-Robots-Tag"] = @indexing_directives if @indexing_directives.presence
  end
end
</file>

<file path="app/controllers/benchmark_controller.rb">
class BenchmarkController < ApplicationController
  skip_before_action :verify_authenticity_token
  before_action :login_as_admin
  before_action :load_random_model

  # Based on https://fractaledmind.github.io/2024/04/15/sqlite-on-rails-the-how-and-why-of-optimal-performance/
  # this controller is designed for benchmarking database write performance
  # and locking behaviour.

  # GET /benchmark to do reads:
  # `oha http://localhost:5000/benchmark`

  # POST /benchmark to do writes
  # `oha http://localhost:5000/benchmark -m POST`
  # or for a more aggressive test:
  # `oha -c 4 -z 5s -m POST --latency-correction --disable-keepalive --redirect 0 http://localhost:5000/benchmark`

  # Read a random model
  def index
    render json: {
      model: @model,
      files: @model.model_files
    }
  end

  # Write a random model
  def create
    @model.update!(name: @model.name.reverse)
    render json: @model, status: :created
  end

  private

  def login_as_admin
    # This should never be used in production, and routes.rb
    # should stop it happening, but *just in case* we'll check
    # here as well and explode if we're in prod.
    raise ActionController::BadRequest if Rails.env.production?
    sign_in(:user, User.with_role(:administrator).first)
  end

  def load_random_model
    @model = policy_scope(Model).find(policy_scope(Model).pluck(:id).sample)
    authorize @model
  end
end
</file>

<file path="app/controllers/collections_controller.rb">
class CollectionsController < ApplicationController
  include Filterable
  include TagListable
  include Permittable
  include ModelListable

  before_action :get_collection, except: [:index, :new, :create]
  before_action :get_parent_collections, except: [:index, :create]
  before_action :get_creators, except: [:index, :create]
  before_action -> { set_indexable @collection }, except: [:index, :new, :create]

  def index
    @collections = policy_scope(Collection)
    if @filters.empty?
      @models = policy_scope(Model).all
    else
      @models = filtered_models @filters
      @collections = filtered_collections @filters
    end

    @tags, @unrelated_tag_count = generate_tag_list(@models, @filter_tags)
    @tags, @kv_tags = split_key_value_tags(@tags)
    @unrelated_tag_count = nil if @filters.empty?

    # Ordering
    @collections = case session["order"]
    when "recent"
      @collections.order(created_at: :desc)
    else
      @collections.order(name_lower: :asc)
    end

    if helpers.pagination_settings["collections"]
      page = params[:page] || 1
      @collections = @collections.page(page).per(helpers.pagination_settings["per_page"])
    end
    # Eager load
    @collections = @collections.includes :collections, :collection, :links
    # Apply tag filters in-place
    @filter_in_place = true

    # Count unassiged models
    @unassigned_count = policy_scope(Model).where(collection: nil).count
    set_indexable @collections
    respond_to do |format|
      format.html { render layout: "card_list_page" }
      format.manyfold_api_v0 { render json: ManyfoldApi::V0::CollectionListSerializer.new(@collections).serialize }
    end
  end

  def show
    respond_to do |format|
      format.html do
        @models = policy_scope(Model).where(collection: @collection)
        prepare_model_list
        @additional_filters = {collection: @collection}
        render layout: "card_list_page"
      end
      format.oembed { render json: OEmbed::CollectionSerializer.new(@collection, helpers.oembed_params).serialize }
      format.manyfold_api_v0 { render json: ManyfoldApi::V0::CollectionSerializer.new(@collection).serialize }
    end
  end

  def new
    authorize Collection
    @collection = Collection.new
    @title = t("collections.general.new")
  end

  def edit
  end

  def create
    authorize Collection
    @collection = Collection.create(collection_params.merge(Collection.caber_owner(current_user)))
    respond_to do |format|
      format.html do
        if @collection.valid?
          if session[:return_after_new]
            redirect_to session[:return_after_new] + "?new_collection=#{@collection.to_param}", notice: t(".success")
            session[:return_after_new] = nil
          else
            redirect_to collections_path, notice: t(".success")
          end
        else
          render :new, status: :unprocessable_entity
        end
      end
      format.manyfold_api_v0 do
        if @collection.valid?
          render json: ManyfoldApi::V0::CollectionSerializer.new(@collection).serialize, status: :created, location: collection_path(@collection)
        else
          render json: @collection.errors.to_json, status: :unprocessable_entity
        end
      end
    end
  end

  def update
    @collection.update(collection_params)
    respond_to do |format|
      format.html do
        if @collection.valid?
          redirect_to collections_path, notice: t(".success")
        else
          render :edit, status: :unprocessable_entity
        end
      end
      format.manyfold_api_v0 do
        if @collection.valid?
          render json: ManyfoldApi::V0::CollectionSerializer.new(@collection).serialize
        else
          render json: @collection.errors.to_json, status: :unprocessable_entity
        end
      end
    end
  end

  def destroy
    @collection.destroy
    respond_to do |format|
      format.html { redirect_to collections_path, notice: t(".success") }
      format.manyfold_api_v0 { head :no_content }
    end
  end

  private

  def get_collection
    if params[:id] == "0"
      @collection = nil
      authorize Collection
      @title = t(".unknown")
    else
      @collection = policy_scope(Collection).find_param(params[:id])
      authorize @collection
      @title = @collection.name
    end
  end

  def get_creators
    # Creators that we can assign this collection to
    @creators = policy_scope(Creator, policy_scope_class: ApplicationPolicy::UpdateScope).local.order("LOWER(creators.name) ASC")
    @default_creator = @creators.first if @creators.count == 1
  end

  def get_parent_collections
    # Collection that we can add this one to
    @collections = policy_scope(Collection, policy_scope_class: ApplicationPolicy::UpdateScope).local.where.not(id: @collection&.id).order("LOWER(collections.name) ASC")
  end

  def collection_params
    if is_api_request?
      raise ActionController::BadRequest unless params[:json]
      ManyfoldApi::V0::CollectionDeserializer.new(params[:json]).deserialize
    else
      Form::CollectionDeserializer.new(params).deserialize
    end
  end
end
</file>

<file path="app/controllers/comments_controller.rb">
class CommentsController < ApplicationController
  before_action :get_commentable
  before_action :get_comment

  def show
  end

  private

  def get_comment
    @comment = @commentable.comments.find_param(params[:id])
  end

  def get_commentable
    commentable = params[:commentable_class].constantize
    commentable_param = params[:commentable_class].parameterize + "_id"
    id = params[commentable_param]
    @commentable = policy_scope(commentable).find_param(id)
    authorize @commentable
  end
end
</file>

<file path="app/controllers/creators_controller.rb">
class CreatorsController < ApplicationController
  include ModelListable
  include Permittable

  before_action :get_creator, except: [:index, :new, :create]
  before_action -> { set_indexable @creator }, except: [:index, :new, :create]

  def index
    @creators = policy_scope(Creator)
    if @filters.empty?
      @models = policy_scope(Model).all
    else
      @models = filtered_models @filters
      @creators = @creators.where(id: @models.pluck(:creator_id).uniq)
    end

    @tags, @unrelated_tag_count = generate_tag_list(@models, @filter_tags)
    @tags, @kv_tags = split_key_value_tags(@tags)
    @unrelated_tag_count = nil if @filters.empty?

    # Ordering
    @creators = case session["order"]
    when "recent"
      @creators.order(created_at: :desc)
    else
      @creators.order(name_lower: :asc)
    end

    if helpers.pagination_settings["creators"]
      page = params[:page] || 1
      @creators = @creators.page(page).per(helpers.pagination_settings["per_page"])
    end
    # Eager load data
    @creators = @creators.includes(:links, :collections)
    # Apply tag filters in-place
    @filter_in_place = true

    # Count unassiged models
    @unassigned_count = policy_scope(Model).where(creator: nil).count
    set_indexable @creators

    respond_to do |format|
      format.html { render layout: "card_list_page" }
      format.manyfold_api_v0 { render json: ManyfoldApi::V0::CreatorListSerializer.new(@creators).serialize }
    end
  end

  def show
    respond_to do |format|
      format.html do
        @models = policy_scope(Model).where(creator: @creator)
        prepare_model_list
        @additional_filters = {creator: @creator}
        render layout: "card_list_page"
      end
      format.oembed { render json: OEmbed::CreatorSerializer.new(@creator, helpers.oembed_params).serialize }
      format.manyfold_api_v0 { render json: ManyfoldApi::V0::CreatorSerializer.new(@creator).serialize }
    end
  end

  def new
    authorize Creator
    @creator = Creator.new
    @title = t("creators.general.new")
  end

  def edit
  end

  def create
    authorize Creator
    @creator = Creator.create(creator_params.merge(Creator.caber_owner(current_user)))
    respond_to do |format|
      format.html do
        if @creator.valid?
          if session[:return_after_new]
            redirect_to session[:return_after_new] + "?new_creator=#{@creator.to_param}", notice: t(".success")
            session[:return_after_new] = nil
          else
            redirect_to creator_path(@creator), notice: t(".success")
          end
        else
          render :new, status: :unprocessable_entity
        end
      end
      format.manyfold_api_v0 do
        if @creator.valid?
          render json: ManyfoldApi::V0::CreatorSerializer.new(@creator).serialize, status: :created, location: creator_path(@creator)
        else
          render json: @creator.errors.to_json, status: :unprocessable_entity
        end
      end
    end
  end

  def update
    @creator.update(creator_params)
    respond_to do |format|
      format.html do
        if @creator.valid?
          redirect_to @creator, notice: t(".success")
        else
          # Restore previous slug
          @attemped_slug = @creator.slug
          @creator.slug = @creator.slug_was
          render :edit, status: :unprocessable_entity
        end
      end
      format.manyfold_api_v0 do
        if @creator.valid?
          render json: ManyfoldApi::V0::CreatorSerializer.new(@creator).serialize
        else
          render json: @creator.errors.to_json, status: :unprocessable_entity
        end
      end
    end
  end

  def destroy
    @creator.destroy
    respond_to do |format|
      format.html { redirect_to creators_path, notice: t(".success") }
      format.manyfold_api_v0 { head :no_content }
    end
  end

  private

  def get_creator
    if params[:id] == "0"
      @creator = nil
      authorize Creator
      @title = t(".unknown")
    else
      @creator = policy_scope(Creator).find_param(params[:id])
      authorize @creator
      @title = @creator.name
    end
  end

  def creator_params
    if is_api_request?
      raise ActionController::BadRequest unless params[:json]
      ManyfoldApi::V0::CreatorDeserializer.new(params[:json]).deserialize
    else
      Form::CreatorDeserializer.new(params).deserialize
    end
  end
end
</file>

<file path="app/controllers/doorkeeper_applications_controller.rb">
class DoorkeeperApplicationsController < ApplicationController
  before_action :get_application, except: [:index, :new, :create]

  def index
    @applications = policy_scope(Doorkeeper::Application)
  end

  def show
  end

  def new
    authorize Doorkeeper::Application
    @application = Doorkeeper::Application.new(
      redirect_uri: "urn:ietf:wg:oauth:2.0:oob",
      scopes: Doorkeeper.configuration.default_scopes
    )
  end

  def edit
  end

  def create
    authorize Doorkeeper::Application
    @application = Doorkeeper::Application.create(application_params.merge(owner: current_user))
    if @application.valid?
      redirect_to @application, notice: t(".success")
    else
      flash.now[:alert] = t(".failure")
      render :new, status: :unprocessable_entity
    end
  end

  def update
    @application.update(application_params)
    if @application.save
      render :show, notice: t(".success")
    else
      flash.now[:alert] = t(".failure")
      render :edit, status: :unprocessable_entity
    end
  end

  def destroy
    @application.destroy
    redirect_to doorkeeper_applications_path, notice: t(".success")
  end

  private

  def application_params
    params.expect(doorkeeper_application: [
      :name,
      :redirect_uri,
      :confidential,
      scopes: []
    ])
  end

  def get_application
    @application = policy_scope(Doorkeeper::Application).find(params[:id])
    authorize @application
  end
end
</file>

<file path="app/controllers/follows_controller.rb">
class FollowsController < ApplicationController
  before_action :get_target, except: [:index, :new, :remote_follow, :perform_remote_follow, :follow_remote_actor, :unfollow_remote_actor]
  skip_after_action :verify_policy_scoped, only: :index
  skip_after_action :verify_authorized, only: [:new, :remote_follow, :perform_remote_follow]

  def index
    authorize Federails::Following
    @followings = current_user&.federails_actor&.follows
    @followers = current_user&.federails_actor&.followers
  end

  # Incoming remote follow
  def new
    @query = params[:uri]
    @actor = if @query.starts_with?(%r{https?://})
      Federails::Actor.find_by_federation_url @query # rubocop:disable Rails/DynamicFindBy
    else
      Federails::Actor.find_by_account @query # rubocop:disable Rails/DynamicFindBy
    end
    @actor = Federails::Actor.find_or_create_by_federation_url @actor.federated_url
    # If local, go to the real thing
    # This will happen if anyone comes here from a remote follow
    redirect_to url_for(@actor.entity) if @actor&.local?
    # If not local, we show a follow button and some details of the account
  rescue ActiveRecord::RecordNotFound
  end

  # Outgoing remote follow - ask for target account
  def remote_follow
    @remote_account = cookies[:fediverse_account]
    @name = params[:name]
    @uri = params[:uri]
  end

  # Outgoing remote follow - perform webfinger, then redirect
  def perform_remote_follow
    @remote_account = params[:remote_account]
    parts = Fediverse::Webfinger.split_account(@remote_account)
    target = Fediverse::Webfinger.remote_follow_url(parts[:username], parts[:domain], actor_url: params[:uri])
    # Store remote username in a cookie for future convenience
    cookies[:fediverse_account] = @remote_account
    # And off we go
    redirect_to target, allow_other_host: true
  rescue ActiveRecord::RecordNotFound, NoMethodError
    @name = params[:name]
    @uri = params[:uri]
    render :remote_follow
  end

  def follow_remote_actor
    authorize Federails::Following, :create?
    @actor = Federails::Actor.find_param(params[:id])
    current_user.follow(@actor)
    redirect_back_or_to root_url, notice: t(".followed", actor: @actor.at_address)
  end

  def unfollow_remote_actor
    authorize Federails::Following, :destroy?
    @actor = Federails::Actor.find_param(params[:id])
    current_user.unfollow(@actor)
    redirect_back_or_to root_url, notice: t(".unfollowed", actor: @actor.at_address)
  end

  def create
    authorize Federails::Following
    current_user.follow @target
    redirect_to @target
  end

  def destroy
    authorize Federails::Following
    current_user.unfollow @target
    redirect_to @target
  end

  private

  def get_target
    followable = params[:followable_class].constantize
    followable_param = params[:followable_class].parameterize + "_id"
    id = params[followable_param]
    @target = policy_scope(followable).find_param(id)
  end
end
</file>

<file path="app/controllers/home_controller.rb">
class HomeController < ApplicationController
  before_action :check_library_exists
  skip_after_action :verify_policy_scoped

  def index
    @feed = local_timeline
  end

  def welcome
    skip_authorization
  end

  def about
    skip_authorization
  end

  private

  def check_library_exists
    redirect_to new_library_path if Library.count === 0 # rubocop:disable Pundit/UsePolicyScope
  end

  def local_timeline
    [Model, Creator, Collection].map do |model|
      query = policy_scope(model)
      query = query.includes(:federails_actor) if SiteSettings.federation_enabled?
      query.order(updated_at: :desc).limit(20)
    end.flatten.sort_by(&:updated_at).last(20).reverse
  end
end
</file>

<file path="app/controllers/libraries_controller.rb">
class LibrariesController < ApplicationController
  before_action :get_library, except: [:index, :new, :create, :scan_all]
  skip_after_action :verify_policy_scoped, only: [:index]

  def index
    redirect_to new_library_path and return if Library.count === 0 # rubocop:disable Pundit/UsePolicyScope
    render layout: "settings"
  end

  def show
    redirect_to models_path(library: @library)
  end

  def new
    authorize Library
    @library = Library.new
    @title = t("libraries.general.new")
  end

  def edit
  end

  def create
    authorize Library
    @library = Library.create(library_params)
    @library.tag_regex = params[:tag_regex]
    if @library.valid?
      @library.detect_filesystem_changes_later
      @library.make_default if SiteSettings.default_library.nil?
      redirect_to @library, notice: t(".success")
    else
      flash.now[:alert] = t(".failure")
      render :new, status: :unprocessable_entity
    end
  end

  def update
    @library.update(library_params)
    uptags = library_params[:tag_regex]&.reject(&:empty?)
    @library.tag_regex = uptags
    if @library.save
      @library.make_default if params.dig("library", "default") == "1"
      redirect_to models_path, notice: t(".success")
    else
      flash.now[:alert] = t(".failure")
      render :edit, status: :unprocessable_entity
    end
  end

  def scan
    @library.detect_filesystem_changes_later
    redirect_back_or_to @library, notice: t(".success")
  end

  def scan_all
    authorize Library
    if params[:type] === "check"
      Scan::CheckAllJob.perform_later
    else
      Library.find_each do |library|
        library.detect_filesystem_changes_later
      end
    end
    redirect_back_or_to models_path, notice: t(".success")
  end

  def destroy
    begin
      @library.destroy
      Library.first&.make_default if @library.default?
    rescue Shrine::Error # Not ideal, but file after_commit callbacks explode if the library has gone
      nil
    end
    redirect_to settings_libraries_path, notice: t(".success")
  end

  private

  def library_params
    params.expect(library: [
      :path, :create_path_if_not_on_disk, :name, :notes, :caption, :icon, {tag_regex: []}, :storage_service,
      :s3_endpoint, :s3_bucket, :s3_region, :s3_access_key_id, :s3_secret_access_key, :s3_path_style
    ])
  end

  def get_library
    @library = Library.find_param(params[:id])
    authorize @library
    @title = @library.name
  end
end
</file>

<file path="app/controllers/model_files_controller.rb">
class ModelFilesController < ApplicationController
  include ActionController::Live

  before_action :get_model
  before_action :get_file, except: [:create, :bulk_edit, :bulk_update]
  before_action -> { set_indexable @file }, except: [:create, :bulk_edit, :bulk_update]

  skip_after_action :verify_authorized, only: [:bulk_edit, :bulk_update]
  after_action :verify_policy_scoped, only: [:bulk_edit, :bulk_update]

  def configure_content_security_policy
    # If embed mode, allow any frame ancestor
    content_security_policy.frame_ancestors [:https, :http] if embedded?
  end

  def show
    if embedded?
      respond_to do |format|
        format.html { render "embedded", layout: "embed" }
      end
    elsif stale?(@file)
      @duplicates = @file.duplicates
      respond_to do |format|
        format.html
        format.manyfold_api_v0 { render json: ManyfoldApi::V0::ModelFileSerializer.new(@file).serialize }
        format.any(*SupportedMimeTypes.indexable_types.map(&:to_sym)) do
          send_file_content disposition: (params[:download] == "true") ? :attachment : :inline
        end
      end
    end
  end

  def create
    authorize @model
    if params[:convert]
      file = ModelFile.find_param(params[:convert][:id])
      file.convert_later params[:convert][:to]
      redirect_back_or_to [@model, file], notice: t(".conversion_started")
    elsif !(p = upload_params).empty?
      p[:file].each_pair do |_id, file|
        ProcessUploadedFileJob.perform_later(
          @model.library.id,
          {
            id: file[:id],
            storage: "cache",
            metadata: {
              filename: file[:name]
            }
          },
          model: @model
        )
      end
      respond_to do |format|
        format.html { redirect_to @model, notice: t(".success") }
        format.manyfold_api_v0 { head :accepted }
      end
    else
      head :unprocessable_entity
    end
  end

  def update
    result = @file.update(file_params)
    respond_to do |format|
      format.html do
        if result
          current_user.set_list_state(@file, :printed, params[:model_file][:printed] === "1")
          redirect_to [@model, @file], notice: t(".success")
        else
          render :edit, alert: t(".failure"), status: :unprocessable_entity
        end
      end
      format.manyfold_api_v0 do
        if result
          render json: ManyfoldApi::V0::ModelFileSerializer.new(@file).serialize
        else
          render json: @file.errors.to_json, status: :unprocessable_entity
        end
      end
    end
  end

  def bulk_edit
    @files = policy_scope(@model.model_files.without_special)
  end

  def bulk_update
    hash = bulk_update_params
    ids_to_update = params[:model_files].keep_if { |key, value| value == "1" }.keys
    files = policy_scope(@model.model_files.without_special).where(public_id: ids_to_update)
    files.each do |file|
      ActiveRecord::Base.transaction do
        current_user.set_list_state(file, :printed, params[:printed] === "1")
        options = {}
        if params[:pattern].present?
          options[:filename] =
            file.filename.split(file.extension).first.gsub(params[:pattern], params[:replacement]) +
            file.extension
        end
        file.update(hash.merge(options))
      end
    end
    if params[:split]
      new_model = @model.split! files: files
      redirect_to model_path(new_model), notice: t(".success")
    else
      redirect_back_or_to model_path(@model), notice: t(".success")
    end
  end

  def destroy
    authorize @file
    @file.delete_from_disk_and_destroy
    respond_to do |format|
      format.html do
        if request.referer && (URI.parse(request.referer).path == model_model_file_path(@model, @file))
          # If we're coming from the file page itself, we can't go back there
          redirect_to model_path(@model), notice: t(".success")
        else
          redirect_back_or_to model_path(@model), notice: t(".success")
        end
      end
      format.manyfold_api_v0 { head :no_content }
    end
  end

  private

  def send_file_content(disposition: :attachment)
    # Check if we can send a direct URL
    redirect_to(@file.attachment.url, allow_other_host: true) if /https?:\/\//.match?(@file.attachment.url)
    # Otherwise provide a direct download
    status, headers, body = @file.attachment.to_rack_response(disposition: disposition)
    self.status = status
    self.headers.merge!(headers)
    self.response_body = body
  rescue Errno::ENOENT
    head :internal_server_error
  end

  def bulk_update_params
    params.permit(
      :presupported,
      :y_up,
      :previewable
    ).compact_blank
  end

  def file_params
    if is_api_request?
      raise ActionController::BadRequest unless params[:json]
      ManyfoldApi::V0::ModelFileDeserializer.new(params[:json]).deserialize
    else
      Form::ModelFileDeserializer.new(params).deserialize
    end
  end

  def upload_params
    if is_api_request?
      raise ActionController::BadRequest unless params[:json]
      ManyfoldApi::V0::UploadedFileDeserializer.new(params[:json]).deserialize
    else
      Form::UploadedFileDeserializer.new(params).deserialize
    end
  end

  def get_model
    @model = Model.find_param(params[:model_id])
  end

  def get_file
    # Check for signed download URLs
    if has_signed_id?
      @file = @model.model_files.find_signed!(params[:id], purpose: "download")
      skip_authorization
    else
      scope = policy_scope(@model.model_files)
      begin
        @file = scope.find_param(params[:id])
      rescue ActiveRecord::RecordNotFound
        @file = scope.find_by!(filename: [params[:id], params[:format]].join("."))
        request.format = params[:format].downcase
      end
      authorize @file
    end
    @title = @file.name
  rescue ActiveSupport::MessageVerifier::InvalidSignature
    raise ActiveRecord::RecordNotFound
  end

  def embedded?
    params[:embed] == "true"
  end
end
</file>

<file path="app/controllers/models_controller.rb">
require "fileutils"

class ModelsController < ApplicationController
  include ModelListable
  include Permittable

  rate_limit to: 10, within: 3.minutes, only: :create

  before_action :redirect_search, only: [:index], if: -> { params.key?(:q) }
  before_action :get_model, except: [:bulk_edit, :bulk_update, :index, :new, :create]
  before_action :get_creators_and_collections, only: [:new, :edit, :bulk_edit]
  before_action :set_returnable, only: [:bulk_edit, :edit, :new]
  before_action :clear_returnable, only: [:bulk_update, :update, :create]
  before_action :get_filters, only: [:bulk_edit, :bulk_update, :index, :show] # rubocop:todo Rails/LexicallyScopedActionFilter
  before_action :get_model, except: [:bulk_edit, :bulk_update, :index, :new, :create]
  before_action -> { set_indexable @model }, except: [:bulk_edit, :bulk_update, :index, :new, :create]

  after_action :verify_policy_scoped, only: [:bulk_edit, :bulk_update]

  def index
    @models = filtered_models @filters
    prepare_model_list
    set_indexable @models
    respond_to do |format|
      format.html { render layout: "card_list_page" }
      format.manyfold_api_v0 { render json: ManyfoldApi::V0::ModelListSerializer.new(@models).serialize }
    end
  end

  def show
    respond_to do |format|
      format.html do
        files = policy_scope(@model.model_files).without_special
        @locked_files = @model.model_files.without_special.count - files.count
        @images = files.select(&:is_image?)
        @images.unshift(@model.preview_file) if @images.delete(@model.preview_file)
        if helpers.file_list_settings["hide_presupported_versions"]
          hidden_ids = files.select(:presupported_version_id).where.not(presupported_version_id: nil)
          files = files.where.not(id: hidden_ids)
        end
        files = files.includes(:presupported_version, :problems)
        files = files.reject(&:is_image?)
        @groups = helpers.group(files)
        @num_files = files.count
      end
      format.zip do
        download = ArchiveDownloadService.new(model: @model, selection: params[:selection])
        if download.ready?
          send_file(download.output_file, filename: download.filename, type: :zip, disposition: :attachment)
        elsif download.preparing?
          redirect_to model_path(@model, format: :html), notice: t(".download_preparing")
        else
          download.prepare
          redirect_to model_path(@model, format: :html), notice: t(".download_requested")
        end
      end
      format.oembed { render json: OEmbed::ModelSerializer.new(@model, helpers.oembed_params).serialize }
      format.manyfold_api_v0 { render json: ManyfoldApi::V0::ModelSerializer.new(@model).serialize }
    end
  end

  def new
    authorize :model
    generate_available_tag_list
  end

  def edit
    @model.links.build if @model.links.empty? # populate empty link
    @model.caber_relations.build if @model.caber_relations.empty?
    generate_available_tag_list
  end

  def create
    authorize :model
    p = upload_params
    library = SiteSettings.show_libraries ? Library.find_param(p[:library]) : Library.default
    p[:file].each_pair do |_id, file|
      ProcessUploadedFileJob.perform_later(
        library.id,
        {
          id: file[:id],
          storage: "cache",
          metadata: {
            filename: file[:name]
          }
        },
        owner: current_user,
        creator_id: p[:creator_id],
        collection_id: p[:collection_id],
        license: p[:license],
        sensitive: (p[:sensitive] == "1"),
        tags: p[:add_tags]
      )
    end
    respond_to do |format|
      format.html { redirect_to models_path, notice: t(".success") }
      format.manyfold_api_v0 { head :accepted }
    end
  end

  def update
    hash = model_params
    organize = hash.delete(:organize) == "true"
    result = @model.update(hash)
    respond_to do |format|
      format.html do
        if result
          @model.organize_later if organize
          redirect_to @model, notice: t(".success")
        else
          get_creators_and_collections
          edit
          render :edit, status: :unprocessable_entity
        end
      end
      format.manyfold_api_v0 do
        if result
          render json: ManyfoldApi::V0::ModelSerializer.new(@model).serialize
        else
          render json: @model.errors.to_json, status: :unprocessable_entity
        end
      end
    end
  end

  def merge
    if params[:target] && (target = (@model.parents.find { |it| it.public_id == params[:target] }))
      @model.merge_into! target
      redirect_to target, notice: t(".success")
    elsif params[:all] && @model.contains_other_models?
      @model.merge_all_children!
      redirect_to @model, notice: t(".success")
    else
      head :bad_request
    end
  end

  def scan
    # Start the scans
    @model.check_later
    # Back to the model page
    redirect_to @model, notice: t(".success")
  end

  def bulk_edit
    authorize Model
    @models = filtered_models(@filters).includes(:collection, :creator)
    generate_available_tag_list
    if helpers.pagination_settings["models"]
      page = params[:page] || 1
      # Double the normal page size for bulk editing
      @models = @models.page(page).per(helpers.pagination_settings["per_page"] * 2)
    end
    set_indexable @models
    # Apply tag filters in-place
    @filter_in_place = true
  end

  def bulk_update
    authorize Model
    hash = bulk_update_params
    hash[:library_id] = hash.delete(:new_library_id) if hash[:new_library_id]
    organize = hash.delete(:organize) == "1"
    add_tags = Set.new(hash.delete(:add_tags))
    remove_tags = Set.new(hash.delete(:remove_tags))

    models_to_update = if params.key?(:update_all)
      # If "Update All Models" was clicked, update all models in the filtered set
      filtered_models(@filters)
    else
      # If "Update Selected Models" was clicked, only update checked models
      ids = params[:models].select { |k, v| v == "1" }.keys
      policy_scope(Model).where(public_id: ids)
    end

    models_to_update.find_each do |model|
      if model&.update(hash)
        existing_tags = Set.new(model.tag_list)
        model.tag_list = existing_tags + add_tags - remove_tags
        model.save
      end
      model.organize_later if organize
    end
    redirect_back_or_to edit_models_path(@filters), notice: t(".success")
  end

  def destroy
    @model.delete_from_disk_and_destroy
    respond_to do |format|
      format.html do
        if request.referer && (URI.parse(request.referer).path == model_path(@model))
          # If we're coming from the model page itself, we can't go back there
          redirect_to root_path, notice: t(".success")
        else
          redirect_back_or_to root_path, notice: t(".success")
        end
      end
      format.manyfold_api_v0 { head :no_content }
    end
  end

  private

  def redirect_search
    redirect_to new_follow_path(uri: params[:q]) if params[:q]&.match?(/(@|acct:)?([a-z0-9\-_.]+)@(.*)/)
  end

  def generate_available_tag_list
    @available_tags = policy_scope(ActsAsTaggableOn::Tag).where(
      id: policy_scope(ActsAsTaggableOn::Tagging).where(
        taggable_type: "Model", taggable_id: policy_scope(Model).select(:id)
      ).select(:tag_id)
    ).order(:name)
  end

  def bulk_update_params
    params.permit(
      :creator_id,
      :collection_id,
      :new_library_id,
      :organize,
      :license,
      :sensitive,
      add_tags: [],
      remove_tags: []
    ).compact_blank
  end

  def model_params
    if is_api_request?
      raise ActionController::BadRequest unless params[:json]
      ManyfoldApi::V0::ModelDeserializer.new(params[:json]).deserialize
    else
      Form::ModelDeserializer.new(params).deserialize
    end
  end

  def upload_params
    if is_api_request?
      raise ActionController::BadRequest unless params[:json]
      ManyfoldApi::V0::UploadedModelDeserializer.new(params[:json]).deserialize
    else
      Form::UploadedModelDeserializer.new(params).deserialize
    end
  end

  def get_model
    @model = policy_scope(Model).find_param(params[:id])
    authorize @model
    @title = @model.name
  end

  def get_creators_and_collections
    # Creators and collections that we can assign this model to
    @creators = policy_scope(Creator, policy_scope_class: ApplicationPolicy::UpdateScope).local.order("LOWER(creators.name) ASC")
    @default_creator = @creators.first if @creators.count == 1
    @collections = policy_scope(Collection, policy_scope_class: ApplicationPolicy::UpdateScope).local.order("LOWER(collections.name) ASC")
  end

  def set_returnable
    session[:return_after_new] = request.fullpath.split("?")[0]
    @new_collection = Collection.find_param(params[:new_collection]) if params[:new_collection]
    @new_creator = Creator.find_param(params[:new_creator]) if params[:new_creator]
    if @model
      @model.collection = @new_collection if @new_collection
      @model.creator = @new_creator if @new_creator
    end
  end

  def clear_returnable
    session[:return_after_new] = nil
  end
end
</file>

<file path="app/controllers/problems_controller.rb">
class ProblemsController < ApplicationController
  skip_after_action :verify_authorized, only: :resolve
  after_action :verify_policy_scoped, only: :resolve

  def index
    authorize Problem
    # Are we showing ignored problems?
    @show_ignored = (params[:show_ignored] == "true")
    query = @show_ignored ? policy_scope(Problem.including_ignored) : policy_scope(Problem)
    # Now, which page are we on?
    page = params[:page] || 1
    # What categories are we showing?
    # First, get the possible categories based on severity filter
    severities = params[:severity] ? Problem::CATEGORIES.select { |cat| params[:severity]&.include?(current_user.problem_severity(cat).to_s) } : nil # rubocop:disable Pundit/UsePolicyScope
    # Then get the category filter
    categories = params[:category]&.map(&:to_sym)
    # Now query with the intersection of the two, or if we don't have both, then whichever we do have
    if categories.present? || severities.present?
      combined = (categories.present? && severities.present?) ?
        (categories.intersection(severities)) :
        [[categories], [severities]].flatten.compact
      query = query.where(category: combined)
    end
    # What object types are we showing?
    query = query.where(problematic_type: params[:type].map(&:classify)) if params[:type]
    # Don't show types ignored in user settings
    query = query.visible(helpers.problem_settings)
    query = query.includes([:problematic])
    @problems = query.page(page).per(50).order([:category, :problematic_type]).includes(problematic: [:library, :model])
    # Do we have any filters at all?
    @filters_applied = [:show_ignored, :severity, :category, :type].any? { |k| params.has_key?(k) }
  end

  def update
    @problem = Problem.including_ignored.find_param(params[:id])
    authorize @problem
    @problem.update!(permitted_params)
    notice = t(
      (@problem.ignored ? ".ignored" : ".unignored"),
      name: @problem.problematic.name,
      message: translate("problems.%{type}.%{category}.title" % {type: @problem.problematic_type.underscore, category: @problem.category})
    )
    redirect_back_or_to problems_path, notice: notice
  end

  def resolve
    ids = params[:id] ? [params[:id]] : params["problems"].select { |k, v| v == "1" }.keys
    @problems = policy_scope(Problem).where(public_id: ids)
    # Resolve each problem individually
    # Some can't be done in bulk mode, so check that
    bulk = @problems.count > 1
    if params[:resolve]
      @problems.each do |problem|
        case problem.resolution_strategy
        when :show
          resolve_by_showing(problem) unless bulk
        when :edit
          resolve_by_editing(problem) unless bulk
        when :destroy
          resolve_by_destroying(problem)
        when :merge
          resolve_by_merging(problem)
        when :upload
          resolve_by_uploading(problem) unless bulk
        when :convert
          resolve_by_converting(problem)
        else
          raise NotImplementedError
        end
      end
    elsif params[:ignore]
      @problems.update(ignored: true)
    end
    redirect_back_or_to problems_path unless performed?
  end

  private

  def resolve_by_showing(problem)
    case problem.problematic_type
    when "Model"
      redirect_to problem.problematic
    when "ModelFile"
      redirect_to [problem.problematic.model, problem.problematic]
    else
      raise NotImplementedError
    end
  end

  def resolve_by_editing(problem)
    case problem.problematic_type
    when "Library"
      redirect_to edit_library_path(problem.problematic)
    when "Model"
      redirect_to edit_model_path(problem.problematic)
    when "ModelFile"
      redirect_to edit_model_model_file_path([problem.problematic.model, problem.problematic])
    else
      raise NotImplementedError
    end
  end

  def resolve_by_destroying(problem)
    case problem.problematic_type
    when "Model"
      problem.problematic.delete_from_disk_and_destroy
    when "ModelFile"
      problem.problematic.delete_from_disk_and_destroy
    else
      raise NotImplementedError
    end
  end

  def resolve_by_merging(problem)
    case problem.problematic_type
    when "Model"
      problem.update(in_progress: true)
      problem.problematic.merge_all_children!
    else
      raise NotImplementedError
    end
  end

  def resolve_by_uploading(problem)
    case problem.problematic_type
    when "Model"
      redirect_to model_path(problem.problematic, anchor: "upload-form")
    else
      raise NotImplementedError
    end
  end

  def resolve_by_converting(problem)
    case problem.problematic_type
    when "ModelFile"
      problem.update(in_progress: true)
      problem.problematic.convert_later :threemf
    else
      raise NotImplementedError
    end
  end

  def permitted_params
    params.expect(problem: [
      :ignored
    ])
  end
end
</file>

<file path="app/controllers/reports_controller.rb">
class ReportsController < ApplicationController
  before_action :get_reportable

  def new
    @report = Federails::Moderation::Report.new
  end

  def create
    @report = Federails::Moderation::Report.create report_params.merge({
      federails_actor: current_user.federails_actor,
      object: @reportable.federails_actor
    })
    redirect_to(@reportable, notice: t(".success"))
  end

  private

  def report_params
    params.expect(report: [
      :content
    ])
  end

  def get_reportable
    reportable = params[:reportable_class].constantize
    reportable_param = params[:reportable_class].parameterize + "_id"
    id = params[reportable_param]
    @reportable = policy_scope(reportable).find_param(id)
    authorize :"federails/moderation/report"
  end
end
</file>

<file path="app/controllers/robots_controller.rb">
class RobotsController < ActionController::Base # rubocop:disable Rails/ApplicationController
  protect_from_forgery with: :exception
  include Pundit::Authorization

  def index
    respond_to do |format|
      format.text
    end
  end

  def sitemap
    @creators = CreatorPolicy::Scope.new(nil, Creator).resolve.local.filter(&:indexable?)
    @collections = CollectionPolicy::Scope.new(nil, Collection).resolve.local.filter(&:indexable?)
    @models = ModelPolicy::Scope.new(nil, Model).resolve.local.filter(&:indexable?)
    respond_to do |format|
      format.xml
    end
  end
end
</file>

<file path="app/controllers/settings_controller.rb">
class SettingsController < ApplicationController
  before_action :check_owner_permission

  def update
    # Save site-wide settings if user is an admin
    update_folder_settings(params[:folders])
    update_library_settings(params[:libraries])
    update_appearance_settings(params[:appearance])
    update_file_settings(params[:files])
    update_tagging_settings(params[:model_tags])
    update_multiuser_settings(params[:multiuser])
    update_analysis_settings(params[:analysis])
    update_usage_settings(params[:usage])
    update_download_settings(params[:downloads])
    update_discovery_settings(params[:discovery])
    redirect_back_or_to settings_path, notice: t(".success")
  end

  private

  def update_folder_settings(settings)
    return unless settings
    SiteSettings.model_path_template = settings[:model_path_template].gsub(/^\//, "") # Remove leading slashes
    SiteSettings.parse_metadata_from_path = settings[:parse_metadata_from_path]
    SiteSettings.safe_folder_names = settings[:safe_folder_names]
  end

  def update_file_settings(settings)
    return unless settings
    regexes = settings[:model_ignored_files].lines.map { |p| p.chomp.to_regexp }
    SiteSettings.model_ignored_files = regexes unless regexes.any?(&:nil?)
  end

  def update_appearance_settings(settings)
    return unless settings
    SiteSettings.site_name = settings[:site_name]
    SiteSettings.site_tagline = settings[:site_tagline]
    SiteSettings.theme = settings[:theme]
    SiteSettings.about = settings[:about]
    SiteSettings.rules = settings[:rules]
    SiteSettings.support_link = settings[:support_link]
    SiteSettings.site_icon = begin
      URI.parse(settings[:site_icon])
      settings[:site_icon]
    rescue URI::InvalidURIError
      nil
    end
  end

  def update_library_settings(settings)
    return unless settings
    SiteSettings.show_libraries = settings[:show] == "1"
  end

  def update_tagging_settings(settings)
    return unless settings
    SiteSettings.model_tags_filter_stop_words = settings[:filter_stop_words] == "1"
    SiteSettings.model_tags_tag_model_directory_name = settings[:tag_model_directory_name] == "1"
    SiteSettings.model_tags_stop_words_locale = settings[:stop_words_locale]
    SiteSettings.model_tags_custom_stop_words = settings[:custom_stop_words].split
    SiteSettings.model_tags_auto_tag_new = settings[:auto_tag_new]
  end

  def update_analysis_settings(settings)
    return unless settings
    SiteSettings.analyse_manifold = settings[:manifold] == "1"
  end

  def update_multiuser_settings(settings)
    return unless settings
    SiteSettings.registration_enabled = (settings[:registration_open])
    SiteSettings.approve_signups = (settings[:approve_signups])
    SiteSettings.default_signup_role = settings[:default_signup_role]
    SiteSettings.autocreate_creator_for_new_users = settings[:autocreate_creator_for_new_users]
    SiteSettings.default_viewer_role = settings[:default_viewer_role]
    SiteSettings.enable_user_quota = (settings[:enable_user_quota].presence)
    SiteSettings.default_user_quota = (settings[:default_user_quota].to_i * 1.megabyte)
  end

  def update_usage_settings(settings)
    return unless settings
    (settings[:report] == "1") ? UsageReport.enable! : UsageReport.disable!
  end

  def update_discovery_settings(settings)
    return unless settings
    SiteSettings.allow_robots = settings[:allow_robots] == "1"
    SiteSettings.allow_ai_bots = settings[:allow_ai_bots] == "1"
    SiteSettings.default_indexable = settings[:default_indexable] == "1"
    SiteSettings.default_ai_indexable = settings[:default_ai_indexable] == "1"
  end

  def update_download_settings(settings)
    return unless settings
    SiteSettings.pregenerate_downloads = (settings[:pregenerate] == "1")
    SiteSettings.download_expiry_time_in_hours = (settings[:expiry].to_i)
  end

  def check_owner_permission
    authorize :settings
  end
end
</file>

<file path="app/deserializers/activity_pub/application_deserializer.rb">
module ActivityPub
  class ApplicationDeserializer < BaseDeserializer
    def self.deserializer_for(object)
      case object.extensions&.dig("f3di:concreteType")
      when "Creator"
        ActivityPub::CreatorDeserializer.new(object)
      when "3DModel"
        ActivityPub::ModelDeserializer.new(object)
      when "Collection"
        ActivityPub::CollectionDeserializer.new(object)
      end
    end

    def update!
      @object.entity.update!(deserialize)
    end

    private

    def parse_link_attributes(object)
      links = object.extensions&.dig("attachment") || []
      links.select { |it| it["type"] == "Link" }&.map { |it| {url: it["href"]} }
    end
  end
end
</file>

<file path="app/deserializers/activity_pub/base_deserializer.rb">
module ActivityPub
  class BaseDeserializer
    def initialize(object)
      @object = object
    end

    def deserialize
      raise NotImplementedError
    end
  end
end
</file>

<file path="app/deserializers/activity_pub/collection_deserializer.rb">
module ActivityPub
  class CollectionDeserializer < ApplicationDeserializer
    def create!
      options = deserialize.merge(
        federails_actor: @object
      )
      Collection.create!(options)
    end

    private

    def deserialize
      raise ArgumentError unless @object.is_a?(Federails::Actor)
      {
        name: @object.name,
        slug: @object.username,
        links: [], # Overwrite existing links
        links_attributes: parse_link_attributes(@object),
        caption: @object.extensions&.dig("summary"),
        notes: @object.extensions&.dig("content"),
        indexable: (@object.extensions&.dig("indexable") == true) ? "yes" : "no"
      }
    end
  end
end
</file>

<file path="app/deserializers/activity_pub/creator_deserializer.rb">
module ActivityPub
  class CreatorDeserializer < ApplicationDeserializer
    def create!
      options = deserialize.merge(
        federails_actor: @object
      )
      Creator.create!(options)
    end

    private

    def deserialize
      raise ArgumentError unless @object.is_a?(Federails::Actor)
      {
        name: @object.name,
        slug: @object.username,
        links: [], # Overwrite existing links
        links_attributes: parse_link_attributes(@object),
        caption: @object.extensions&.dig("summary"),
        notes: @object.extensions&.dig("content"),
        indexable: (@object.extensions&.dig("indexable") == true) ? "yes" : "no"
      }
    end
  end
end
</file>

<file path="app/deserializers/activity_pub/model_deserializer.rb">
module ActivityPub
  class ModelDeserializer < ApplicationDeserializer
    def create!
      options = deserialize.merge(
        federails_actor: @object,
        library: Library.first, # TODO: This is not ideal
        path: SecureRandom.uuid
      )
      Model.create!(options)
    end

    private

    def deserialize
      raise ArgumentError unless @object.is_a?(Federails::Actor)
      {
        name: @object.name,
        slug: @object.username,
        links: [], # Overwrite existing links
        links_attributes: parse_link_attributes(@object),
        caption: @object.extensions&.dig("summary"),
        notes: @object.extensions&.dig("content"),
        tag_list: parse_tags(@object),
        license: @object.extensions&.dig("spdx:license", "spdx:licenseId"),
        indexable: (@object.extensions&.dig("indexable") == true) ? "yes" : "no"
      }
    end

    def parse_tags(object)
      tags = object.extensions&.dig("tag") || []
      tags.select { |it| it["type"] == "Hashtag" }&.map { |it| it["name"].delete_prefix("#") }
    end
  end
end
</file>

<file path="app/deserializers/data_package/base_deserializer.rb">
module DataPackage
  class BaseDeserializer
    def initialize(object)
      @object = object
    end

    def deserialize
      raise NotImplementedError
    end
  end
end
</file>

<file path="app/deserializers/data_package/collection_deserializer.rb">
module DataPackage
  class CollectionDeserializer < BaseDeserializer
    def deserialize
      return unless @object
      attributes = {
        name: @object["title"],
        caption: @object["caption"],
        notes: @object["description"]
      }
      begin
        route_options = Rails.application.routes.recognize_path(@object["path"])
        if route_options[:controller] == "collections"
          attributes[:id] = Collection.find_param(route_options[:id]).id
        end
      rescue ActionController::RoutingError, ActiveRecord::RecordNotFound
      end
      attributes[:links_attributes] = @object["links"]&.map { |it| LinkDeserializer.new(it).deserialize } || []
      attributes[:links_attributes] << {url: @object["path"]} unless attributes.has_key?(:id)
      attributes.compact
    end
  end
end
</file>

<file path="app/deserializers/data_package/creator_deserializer.rb">
module DataPackage
  class CreatorDeserializer < BaseDeserializer
    def deserialize
      return unless @object && @object["roles"]&.include?("creator")
      attributes = {
        name: @object["title"],
        caption: @object["caption"],
        notes: @object["description"]
      }
      begin
        route_options = Rails.application.routes.recognize_path(@object["path"])
        if route_options[:controller] == "creators"
          attributes[:id] = Creator.find_param(route_options[:id]).id
        end
      rescue ActionController::RoutingError, ActiveRecord::RecordNotFound
      end
      attributes[:links_attributes] = @object["links"]&.map { |it| LinkDeserializer.new(it).deserialize } || []
      attributes[:links_attributes] << {url: @object["path"]} unless attributes.has_key?(:id)
      attributes.compact
    end
  end
end
</file>

<file path="app/deserializers/data_package/link_deserializer.rb">
module DataPackage
  class LinkDeserializer < BaseDeserializer
    def deserialize
      return unless @object
      {
        url: @object["path"]
      }.compact
    end
  end
end
</file>

<file path="app/deserializers/data_package/model_deserializer.rb">
module DataPackage
  class ModelDeserializer < BaseDeserializer
    def deserialize
      {
        name: @object["title"],
        caption: @object["caption"],
        notes: @object["description"],
        links_attributes: parse_links,
        preview_file: @object["image"],
        tag_list: @object["keywords"],
        sensitive: @object["sensitive"],
        license: @object.dig("licenses", 0, "name"),
        model_files: @object["resources"]&.map { |it| ModelFileDeserializer.new(it).deserialize },
        creator: CreatorDeserializer.new(@object["contributors"]&.find { |it| it["roles"].include?("creator") }).deserialize,
        collection: CollectionDeserializer.new(@object.dig("collections", 0)).deserialize
      }.compact
    end

    private

    def parse_links
      links = (@object["links"] || []).map { |it| LinkDeserializer.new(it).deserialize }
      links << {url: @object["homepage"]} if @object["homepage"]
      links.reject { |it| it[:url] == self_link }
    end

    def self_link
      Rails.application.routes.url_helpers.model_url(id: @object["name"])
    rescue ActionController::UrlGenerationError
    end
  end
end
</file>

<file path="app/deserializers/data_package/model_file_deserializer.rb">
module DataPackage
  class ModelFileDeserializer < BaseDeserializer
    def deserialize
      {
        filename: @object["path"],
        caption: @object["caption"],
        notes: @object["description"],
        presupported: @object["presupported"],
        y_up: (@object["up"] == "+y")
      }.compact
    end
  end
end
</file>

<file path="app/deserializers/form/base_deserializer.rb">
module Form
  class BaseDeserializer
    def initialize(params)
      @params = params
    end

    def deserialize
      raise NotImplementedError
    end

    private

    def caber_relations_params(type: nil)
      @params.require(type).permit(
        caber_relations_attributes: [:id, :subject_type, :subject_id, :permission, :_destroy]
      )
    end
  end
end
</file>

<file path="app/deserializers/form/collection_deserializer.rb">
module Form
  class CollectionDeserializer < BaseDeserializer
    def deserialize
      return nil unless @params
      @params.require(:collection).permit(
        :name,
        :creator_id,
        :collection_id,
        :caption,
        :notes,
        :indexable,
        :ai_indexable,
        links_attributes: [:id, :url, :_destroy]
      ).deep_merge(caber_relations_params(type: :collection))
    end
  end
end
</file>

<file path="app/deserializers/form/creator_deserializer.rb">
module Form
  class CreatorDeserializer < BaseDeserializer
    def deserialize
      return nil unless @params
      @params.require(:creator).permit(
        :name,
        :slug,
        :caption,
        :notes,
        :indexable,
        :ai_indexable,
        links_attributes: [:id, :url, :_destroy]
      ).deep_merge(caber_relations_params(type: :creator))
    end
  end
end
</file>

<file path="app/deserializers/form/model_deserializer.rb">
module Form
  class ModelDeserializer < BaseDeserializer
    def deserialize
      return nil unless @params
      @params.require(:model).permit(
        :preview_file_id,
        :creator_id,
        :library_id,
        :name,
        :caption,
        :notes,
        :license,
        :sensitive,
        :indexable,
        :ai_indexable,
        :collection_id,
        :q,
        :library,
        :creator,
        :tag,
        :organize,
        :missingtag,
        tag_list: [],
        links_attributes: [:id, :url, :_destroy]
      ).deep_merge(caber_relations_params(type: :model))
    end
  end
end
</file>

<file path="app/deserializers/form/model_file_deserializer.rb">
module Form
  class ModelFileDeserializer < BaseDeserializer
    def deserialize
      return nil unless @params
      @params.require(:model_file).permit([
        :filename,
        :presupported,
        :notes,
        :caption,
        :y_up,
        :presupported_version_id
      ])
    end
  end
end
</file>

<file path="app/deserializers/form/uploaded_file_deserializer.rb">
module Form
  class UploadedFileDeserializer < BaseDeserializer
    def deserialize
      return nil unless @params
      @params.permit(
        file: [
          [:id, :name]
        ]
      )
    end
  end
end
</file>

<file path="app/deserializers/form/uploaded_model_deserializer.rb">
module Form
  class UploadedModelDeserializer < BaseDeserializer
    def deserialize
      return nil unless @params
      @params.permit(
        :creator_id,
        :collection_id,
        :library,
        :license,
        :sensitive,
        add_tags: [],
        file: [
          [:id, :name]
        ]
      )
    end
  end
end
</file>

<file path="app/deserializers/manyfold_api/v0/base_deserializer.rb">
module ManyfoldApi::V0
  class BaseDeserializer
    def initialize(object)
      @object = object
    end

    def deserialize
      raise NotImplementedError
    end

    def self.schema_ref_name
      name.underscore.split("/").last.gsub("_deserializer", "_request")
    end

    def self.schema_ref
      {"$ref" => "#/components/schemas/#{schema_ref_name}"}
    end

    def self.schema
      raise NotImplementedError
    end

    def dereference(id, type)
      route_options = Rails.application.routes.recognize_path(id)
      if route_options[:controller] == type.name.underscore.pluralize
        type.find_param(route_options[:id])
      end
    rescue ActionController::RoutingError, ActiveRecord::RecordNotFound
    end
  end
end
</file>

<file path="app/deserializers/manyfold_api/v0/collection_deserializer.rb">
module ManyfoldApi::V0
  class CollectionDeserializer < BaseDeserializer
    def deserialize
      return unless @object
      {
        name: @object["name"],
        creator: dereference(@object.dig("creator", "@id"), Creator),
        collection: dereference(@object.dig("isPartOf", "@id"), Collection),
        caption: @object["caption"],
        notes: @object["description"],
        links_attributes: @object["links"]&.map { |it| LinkDeserializer.new(it).deserialize }
      }.compact
    end

    def self.schema
      {
        type: :object,
        properties: {
          name: {type: :string, example: "Interesting Things"},
          caption: {type: :string, example: "A short description"},
          description: {type: :string, example: "Lorem ipsum dolor sit amet..."}, # rubocop:disable I18n/RailsI18n/DecorateString
          links: {
            type: :array,
            items: LinkDeserializer.schema_ref
          },
          creator: {
            type: :object,
            properties: {
              "@id": {type: :string, example: "https://example.com/creators/abc123"},
              "@type": {type: :string, example: "Organization"}
            },
            required: ["@id"]
          },
          isPartOf: {
            type: :object,
            properties: {
              "@id": {type: :string, example: "https://example.com/collections/abc123"},
              "@type": {type: :string, example: "Collection"}
            },
            required: ["@id"]
          }
        },
        required: ["name"]
      }
    end
  end
end
</file>

<file path="app/deserializers/manyfold_api/v0/creator_deserializer.rb">
module ManyfoldApi::V0
  class CreatorDeserializer < BaseDeserializer
    def deserialize
      return unless @object
      {
        name: @object["name"],
        slug: @object["slug"],
        caption: @object["caption"],
        notes: @object["description"],
        links_attributes: @object["links"]&.map { |it| LinkDeserializer.new(it).deserialize }
      }.compact
    end

    def self.schema
      {
        type: :object,
        properties: {
          name: {type: :string, example: "Bruce Wayne"},
          slug: {type: :string, example: "bruce-wayne"},
          caption: {type: :string, example: "A short description"},
          description: {type: :string, example: "Lorem ipsum dolor sit amet..."}, # rubocop:disable I18n/RailsI18n/DecorateString
          links: {
            type: :array,
            items: LinkDeserializer.schema_ref
          }
        },
        required: ["name"]
      }
    end
  end
end
</file>

<file path="app/deserializers/manyfold_api/v0/link_deserializer.rb">
module ManyfoldApi::V0
  class LinkDeserializer < BaseDeserializer
    def deserialize
      return unless @object
      {
        url: @object["url"]
      }.compact
    end

    def self.schema
      {
        type: :object,
        properties: {
          url: {type: :string, example: "https://example.com"}
        },
        required: ["url"]
      }
    end
  end
end
</file>

<file path="app/deserializers/manyfold_api/v0/model_deserializer.rb">
module ManyfoldApi::V0
  class ModelDeserializer < BaseDeserializer
    def deserialize
      return unless @object
      {
        name: @object["name"],
        creator: dereference(@object.dig("creator", "@id"), Creator),
        collection: dereference(@object.dig("isPartOf", "@id"), Collection),
        caption: @object["caption"],
        notes: @object["description"],
        links_attributes: @object["links"]&.map { |it| LinkDeserializer.new(it).deserialize },
        license: @object.dig("spdx:license", "licenseId"),
        sensitive: @object["sensitive"],
        preview_file: dereference(@object.dig("preview_file", "@id"), ModelFile),
        tag_list: @object["keywords"]
      }.compact
    end

    def self.schema
      {
        type: :object,
        properties: {
          name: {type: :string, example: "Batmobile"},
          caption: {type: :string, example: "A short description"},
          description: {type: :string, example: "Lorem ipsum dolor sit amet..."}, # rubocop:disable I18n/RailsI18n/DecorateString
          links: {
            type: :array,
            items: LinkDeserializer.schema_ref
          },
          creator: {
            type: :object,
            properties: {
              "@id": {type: :string, example: "https://example.com/creators/abc123"},
              "@type": {type: :string, example: "Organization"}
            },
            required: ["@id"]
          },
          isPartOf: {
            type: :object,
            properties: {
              "@id": {type: :string, example: "https://example.com/collections/abc123"},
              "@type": {type: :string, example: "Collection"}
            },
            required: ["@id"]
          },
          "spdx:license": {"$ref" => "#/components/schemas/spdxLicense"},
          sensitive: {type: :boolean, example: true},
          keywords: {type: :array, items: {type: :string, example: "tag"}},
          preview_file: {
            type: :object,
            properties: {
              "@id": {type: :string, example: "https://example.com/models/abc123/model_files/def456"},
              "@type": {type: :string, example: "3DModel"}
            },
            required: ["@id"]
          }
        },
        required: ["name"]
      }
    end
  end
end
</file>

<file path="app/deserializers/manyfold_api/v0/model_file_deserializer.rb">
module ManyfoldApi::V0
  class ModelFileDeserializer < BaseDeserializer
    def deserialize
      return unless @object
      {
        filename: @object["filename"],
        notes: @object["description"],
        caption: @object["caption"],
        presupported: @object["presupported"],
        y_up: @object["up"] == "+y",
        presupported_version: dereference(@object["related"]&.find { |it| it["relationship"] == "presupported_version" }&.dig("@id"), ModelFile)
      }.compact
    end

    def self.schema
      {
        type: :object,
        properties: {
          filename: {type: :string, example: "model.stl"},
          description: {type: :string, example: "Lorem ipsum dolor sit amet..."}, # rubocop:disable I18n/RailsI18n/DecorateString
          caption: {type: :string, example: "A short caption describing the file"},
          presupported: {type: :boolean, example: true},
          up: {type: :string, enum: ["+y", "+z"], example: "+y"},
          related: {
            type: :array,
            items: {
              type: :object,
              properties: {
                "@id": {type: :string, example: "https://example.com/models/abc123/model_files/def456"},
                "@type": {type: :string, example: "3DModel"},
                relationship: {type: :string, enum: ["presupported_version", "presupported_version_of"], example: "presupported_version"}
              }
            }
          }
        }
      }
    end
  end
end
</file>

<file path="app/deserializers/manyfold_api/v0/uploaded_file_deserializer.rb">
module ManyfoldApi::V0
  class UploadedFileDeserializer < BaseDeserializer
    def deserialize
      return unless @object
      {
        file: @object.dig("files")&.each_with_index.to_h.invert
      }.compact
    end

    def self.schema
      {
        type: :object,
        properties: {
          files: {
            type: :array,
            items: {
              type: :object,
              properties: {
                id: {type: :string, description: "The ID of a completed upload, obtained from the upload endpoints", example: "http://example.com/uploads/abc123456def"},
                name: {type: :string, example: "model.stl"}
              },
              required: [:id, :name, :type, :size]
            }
          }
        },
        required: [:files]
      }
    end
  end
end
</file>

<file path="app/deserializers/manyfold_api/v0/uploaded_model_deserializer.rb">
module ManyfoldApi::V0
  class UploadedModelDeserializer < BaseDeserializer
    def deserialize
      return unless @object
      {
        file: @object.dig("files")&.each_with_index.to_h.invert,
        creator_id: dereference(@object.dig("creator", "@id"), Creator)&.id,
        collection_id: dereference(@object.dig("isPartOf", "@id"), Collection)&.id,
        license: @object.dig("spdx:license", "licenseId"),
        sensitive: @object["sensitive"] ? "1" : "0",
        add_tags: @object["keywords"]
      }.compact
    end

    def self.schema
      {
        type: :object,
        properties: {
          files: {
            type: :array,
            items: {
              type: :object,
              properties: {
                id: {type: :string, description: "The ID of a completed upload, obtained from the upload endpoints", example: "http://example.com/uploads/abc123456def"},
                name: {type: :string, example: "model.stl"}
              },
              required: [:id, :name, :type, :size]
            }
          },
          creator: {
            type: :object,
            properties: {
              "@id": {type: :string, example: "https://example.com/creators/abc123"},
              "@type": {type: :string, example: "Organization"}
            },
            required: ["@id"]
          },
          isPartOf: {
            type: :object,
            properties: {
              "@id": {type: :string, example: "https://example.com/collections/abc123"},
              "@type": {type: :string, example: "Collection"}
            },
            required: ["@id"]
          },
          "spdx:license": {"$ref" => "#/components/schemas/spdxLicense"},
          sensitive: {type: :boolean, example: true},
          keywords: {type: :array, items: {type: :string, example: "tag"}}
        },
        required: [:files]
      }
    end
  end
end
</file>

<file path="app/helpers/activity_helper.rb">
module ActivityHelper
  def status_icon(status)
    case status
    when :queued
      render Components::Icon.new(icon: "hourglass", label: translate("activity_helper.status_icon.queued"))
    when :working
      render Components::Icon.new(icon: "gear", label: translate("activity_helper.status_icon.working"), effect: "icon-spin")
    when :completed
      render Components::Icon.new(icon: "check2-circle", label: translate("activity_helper.status_icon.completed"))
    when :failed
      render Components::Icon.new(icon: "exclamation-diamond", label: translate("activity_helper.status_icon.error"))
    end
  end

  def activity_row_style(status)
    case status
    when :working
      "table-info"
    when :completed
      "table-success"
    when :failed
      "table-danger"
    end
  end
end
</file>

<file path="app/helpers/application_helper.rb">
module ApplicationHelper
  def site_name(default: translate("application.title"))
    SiteSettings.site_name.presence || default
  end

  def site_tagline
    SiteSettings.site_tagline.presence || t("application.tagline")
  end

  def site_icon
    SiteSettings.site_icon.presence || "roundel.svg"
  end

  def icon(icon, label, id: nil, effect: nil)
    render Components::Icon.new(icon: icon, label: label, id: id, effect: effect)
  end

  def icon_for(klass)
    case klass.name
    when "Creator"
      "person"
    when "Collection"
      "collection"
    when "Library"
      "boxes"
    when "Model"
      "box"
    when "ModelFile"
      "file"
    when "User"
      "person"
    end
  end

  def markdownify(text)
    Kramdown::Document.new(
      sanitize(text),
      header_offset: 2,
      input: "GFM"
    ).to_html.html_safe # rubocop:disable Rails/OutputSafety
  end

  def card(style, title = nil, options = {}, &content)
    id = options[:id] || "card-#{SecureRandom.hex(4)}"
    card_class = ["card", "mb-4", options[:class]].join(" ")
    if options[:skip_link]
      skiplink = skip_link(options[:skip_link][:target], options[:skip_link][:text])
      card_class += " skip-link-container"
    end
    tag.div class: card_class do
      safe_join([
        if title.present?
          tag.div(class: "card-header text-white bg-#{style}") do
            options[:collapse] ?
              safe_join([
                title,
                tag.span(icon("arrows-expand", t("general.expand")), class: "float-end d-#{options[:collapse]}-none"),
                tag.a(
                  nil,
                  class: "link-unstyled stretched-link d-#{options[:collapse]}-none",
                  "data-bs-toggle": "collapse",
                  "data-bs-target": "##{id}",
                  "aria-expanded": false,
                  "aria-controls": id
                )
              ]) :
              title
          end
        end,
        skiplink,
        tag.div(class: "card-body #{"collapse d-#{options[:collapse]}-block" if options[:collapse]}", id: id) do
          tag.div class: "card-text" do
            yield
          end
        end
      ].compact)
    end
  end

  def text_input_row(form, name, options = {})
    content_tag :div, class: "row mb-3 input-group" do
      safe_join [
        form.label(name, options[:label], class: "col-auto col-form-label"),
        content_tag(:div, class: "col p-0") do
          safe_join [
            form.text_field(name, {class: "form-control"}.merge(options)),
            errors_for(form.object, name),
            (options[:help] ? content_tag(:span, class: "form-text") { options[:help] } : nil)
          ].compact
        end
      ]
    end
  end

  def password_input_row(form, name, options = {})
    field_options = {class: "form-control"}.merge(options)
    if options[:strength_meter]
      field_options["data-controller"] = "zxcvbn"
      field_options["data-action"] = "input->zxcvbn#onInput"
    end
    content_tag :div, class: "row mb-3 input-group" do
      safe_join [
        form.label(name, options[:label], class: "col-auto col-form-label"),
        content_tag(:div, class: "col p-0") do
          safe_join [
            form.password_field(name, field_options),
            (if options[:strength_meter]
               content_tag(:div, class: "progress") do
                 content_tag(:div, nil, class: "progress-bar w-0 zxcvbn-meter", "data-zxcvbn-min-score": Devise.min_password_score)
               end
             end),
            errors_for(form.object, name),
            (options[:help] ? content_tag(:span, class: "form-text") { options[:help] } : nil)
          ].compact
        end
      ]
    end
  end

  def url_input_row(form, name, options = {})
    content_tag :div, class: "row mb-3 input-group" do
      safe_join [
        form.label(name, options[:label], class: "col-auto col-form-label"),
        content_tag(:div, class: "col p-0") do
          safe_join [
            form.url_field(name, {class: "form-control"}.merge(options)),
            errors_for(form.object, name),
            (options[:help] ? content_tag(:span, class: "form-text") { options[:help] } : nil)
          ].compact
        end
      ]
    end
  end

  def rich_text_input_row(form, name, options = {})
    content_tag :div, class: "row mb-3 input-group" do
      safe_join [
        form.label(name, options[:label], class: "col-auto col-form-label"),
        content_tag(:div, class: "col p-0") do
          safe_join [
            form.text_area(name, {class: "form-control col-auto"}.merge(options)),
            errors_for(form.object, name),
            (options[:help] ? content_tag(:span, class: "form-text") { options[:help] } : nil)
          ].compact
        end
      ]
    end
  end

  def checkbox_input_row(form, name, options = {})
    content_tag :div, class: "row mb-3 input-group" do
      safe_join [
        form.label(name, options[:label], class: "col-sm-2 col-form-label"),
        content_tag(:div, class: "col-sm-10") do
          content_tag(:div, class: "form-switch") do
            safe_join [
              form.check_box(name, options.merge(class: "form-check-input form-check-inline")),
              errors_for(form.object, name),
              (options[:help] ? content_tag(:span, class: "form-text") { options[:help] } : nil)
            ].compact
          end
        end
      ]
    end
  end

  def select_input_row(form, name, select_options, options = {})
    content_tag :div, class: "row mb-3 input-group" do
      safe_join [
        form.label(name, options[:label], class: "col-auto col-form-label"),
        content_tag(:div, class: "col p-0") do
          safe_join [
            content_tag(:div, class: "input-group") do
              safe_join [
                form.select(name, select_options, options.compact, {class: "form-control col-auto form-select #{"is-invalid" if form.object&.errors&.include?(name) && !form.object.errors[name].empty?}"}),
                (link_to(options[:button][:label], options[:button][:path], class: "btn btn-outline-secondary col-auto") if options[:button])
              ]
            end,
            errors_for(form.object, name),
            (options[:help] ? content_tag(:span, class: "form-text") { options[:help] } : nil)
          ].compact
        end
      ]
    end
  end

  def collection_select_input_row(form, name, collection, value_method, text_method, options = {})
    content_tag :div, class: "row mb-3 input-group" do
      safe_join [
        form.label(name, options[:label], class: "col-auto col-form-label"),
        content_tag(:div, class: "col p-0") do
          safe_join [
            content_tag(:div, class: "input-group") do
              safe_join [
                form.collection_select(:"#{name}_id", collection, value_method, text_method, options.compact, {class: "form-control col-auto form-select #{"is-invalid" if form.object&.errors&.include?(name) && !form.object.errors[name].empty?}"}),
                (link_to(options[:button][:label], options[:button][:path], class: "btn btn-outline-secondary col-auto") if options[:button])
              ]
            end,
            errors_for(form.object, name),
            (options[:help] ? content_tag(:span, class: "form-text") { options[:help] } : nil)
          ].compact
        end
      ]
    end
  end

  def nav_link(ico, text, path, options = {})
    link_to(
      safe_join(
        [
          content_tag(:span, icon(ico, options[:title].presence || text), class: options[:icon_style]),
          content_tag(:span, text, class: options[:text_style])
        ],
        " "
      ),
      path,
      class: options[:style] || safe_join(["nav-link", (current_page?(path) ? "active" : "")], " "),
      method: options[:method],
      nofollow: options[:nofollow],
      "aria-label": options[:aria_label]
    )
  end

  def errors_for(record, attribute)
    return if record.nil? || attribute.nil?
    return unless record.errors.include? attribute
    content_tag(:div,
      record.errors.full_messages_for(attribute).join("; "),
      class: "invalid-feedback d-block")
  end

  def skip_link(target, text)
    content_tag :div, class: "container-fluid skip-link text-bg-success p-2" do
      link_to text, "##{target}", class: "text-reset"
    end
  end

  def translate_with_locale_wrapper(key, **options)
    translate(key, **options) do |str, _key|
      str&.locale ? content_tag(:span, lang: str.locale) { sanitize str } : str
    end
  end
  alias_method :t, :translate_with_locale_wrapper

  def pagination_settings
    current_user&.pagination_settings || SiteSettings::UserDefaults::PAGINATION
  end

  def tag_cloud_settings
    current_user&.tag_cloud_settings || SiteSettings::UserDefaults::TAG_CLOUD.merge(heatmap: false)
  end

  def renderer_settings
    current_user&.renderer_settings || SiteSettings::UserDefaults::RENDERER
  end

  def file_list_settings
    current_user&.file_list_settings || SiteSettings::UserDefaults::FILE_LIST
  end

  def problem_settings
    current_user&.problem_settings || Problem::DEFAULT_SEVERITIES
  end

  def random_password
    (SecureRandom.base64(32) + "!0aB").chars.shuffle.join
  end

  def server_indicator(object)
    actor = object.respond_to?(:federails_actor) ? object.federails_actor : object
    return if !SiteSettings.federation_enabled? || actor.local?
    link_to actor.profile_url, class: "link-primary link-underline-opacity-0 link-underline-opacity-100-hover" do
      safe_join([
        "⁂",
        actor.server
      ], " ")
    end
  end

  def oembed_params
    params.permit(:maxwidth, :maxheight)
  end

  def render_component_collection(component, param, collection, kwargs = {})
    safe_join(collection.map { |it| render component.new(**{param => it}.merge(kwargs)) }, " ")
  end

  def indexable_select_options(object)
    current = object.inherited_indexable? ? translate("application_helper.indexable_select_options.yes") : translate("application_helper.indexable_select_options.no")
    options_for_select(
      [
        [translate("application_helper.indexable_select_options.inherit", inherited: current), "inherit"],
        [translate("application_helper.indexable_select_options.always_no"), "no"],
        [translate("application_helper.indexable_select_options.always_yes"), "yes"]
      ],
      selected: object&.indexable || "inherit"
    )
  end

  def ai_indexable_select_options(object)
    current = object.inherited_ai_indexable? ? translate("application_helper.indexable_select_options.yes") : translate("application_helper.indexable_select_options.no")
    options_for_select(
      [
        [translate("application_helper.ai_indexable_select_options.inherit", inherited: current), "inherit"],
        [translate("application_helper.ai_indexable_select_options.always_no"), "no"],
        [translate("application_helper.ai_indexable_select_options.always_yes"), "yes"]
      ],
      selected: object&.ai_indexable || "inherit"
    )
  end
end
</file>

<file path="app/helpers/collections_helper.rb">
module CollectionsHelper
end
</file>

<file path="app/helpers/comments_helper.rb">
module CommentsHelper
end
</file>

<file path="app/helpers/creators_helper.rb">
module CreatorsHelper
end
</file>

<file path="app/helpers/home_helper.rb">
module HomeHelper
end
</file>

<file path="app/helpers/layouts_helper.rb">
# From https://mattbrictson.com/blog/easier-nested-layouts-in-rails

module LayoutsHelper
  def parent_layout(layout)
    @view_flow.set(:layout, output_buffer) # rubocop:todo Rails/HelperInstanceVariable
    output = render(template: "layouts/#{layout}")
    self.output_buffer = ActionView::OutputBuffer.new(output)
  end
end
</file>

<file path="app/helpers/libraries_helper.rb">
module LibrariesHelper
end
</file>

<file path="app/helpers/model_files_helper.rb">
module ModelFilesHelper
  def slicer_links(file)
    # i18n-tasks-use t('model_files.download.cura')
    # i18n-tasks-use t('model_files.download.orca')
    # i18n-tasks-use t('model_files.download.prusa')
    # i18n-tasks-use t('model_files.download.bambu')
    # i18n-tasks-use t('model_files.download.elegoo')
    # i18n-tasks-use t('model_files.download.superslicer')
    safe_join(
      [:cura, :orca, :elegoo, :superslicer].map do |slicer|
        content_tag(:li) {
          link_to safe_join(
            [
              slicer_icon_tag(slicer, alt: t("model_files.download.%{slicer}" % {slicer: slicer})),
              t("model_files.download.%{slicer}" % {slicer: slicer})
            ].compact,
            " "
          ), slicer_url(slicer, file), class: "dropdown-item", download: "download"
        }
      end
    )
  end

  def slicer_url(slicer, file)
    signed_id = file.signed_id expires_in: 1.hour, purpose: "download"
    signed_url = model_url(file.model) + "/model_files/#{signed_id}.#{file.extension}"
    case slicer
    when :orca
      slic3r_family_open_url "orcaslicer", signed_url
    when :prusa, :superslicer
      # Prusa will only open files from printables.com
      slic3r_family_open_url "prusaslicer", signed_url
    when :bambu
      # Bambu will only open from Makerworld and a few others
      slic3r_family_open_url "bambustudioopen", signed_url
    when :cura
      slic3r_family_open_url "cura", signed_url
    when :elegoo
      slic3r_family_open_url "elegooslicer", signed_url
    end
  end

  def slicer_icon_tag(slicer, alt:)
    url = case slicer
    when :orca
      "https://cdn.jsdelivr.net/gh/homarr-labs/dashboard-icons/webp/orcaslicer.webp"
    when :cura
      "https://cdn.jsdelivr.net/gh/homarr-labs/dashboard-icons/webp/cura.webp"
    when :elegoo
      "https://raw.githubusercontent.com/ELEGOO-3D/ElegooSlicer/refs/heads/main/resources/images/ElegooSlicer.svg"
    when :superslicer
      "https://raw.githubusercontent.com/supermerill/SuperSlicer/refs/heads/master_27/resources/icons/SuperSlicer.svg"
    end
    return if url.nil?
    image_tag(url, class: "slicer-icon", alt: alt)
  end

  private

  def slic3r_family_open_url(scheme, signed_url)
    URI::Generic.new(
      scheme, nil,
      "open", nil, nil, nil, nil,
      {file: signed_url}.to_query, nil
    ).to_s
  end
end
</file>

<file path="app/helpers/models_helper.rb">
module ModelsHelper
  def group(files)
    return {} if files.empty?
    sections = {}
    min_section_size = [2, (files.count * 0.05).round].max
    min_prefix_length = 3
    names = files.map { |it| it.filename.downcase }
    slice = names.map(&:length).max
    while slice > min_prefix_length
      slice -= 1
      candidates = names.map { |it| it.slice(0, slice) }
      groups = candidates.group_by { |it| it }
      ready = groups.select { |k, v| v.count >= min_section_size }.map(&:first)
      ready.each do |r|
        names.reject! { |it| it.starts_with? r }
        sections[r], files = files.partition { |it| it.filename.downcase.starts_with? r }
      end
    end
    # Sort and include empty set
    {nil => files}.merge sections.sort_by { |k, v| k }.to_h
  end

  def status_badges(model)
    badges = []
    badges << content_tag(:span, icon("bi bi-stars", t("general.new")), class: "text-warning align-middle") if model.new?
    badges << problem_icon_tag(problems_including_files(model).visible(problem_settings)) if policy(Problem).show?
    content_tag :span, safe_join(badges, " "), class: "status-badges"
  end

  def problems_including_files(model)
    policy_scope(Problem).where(problematic: policy_scope(model.model_files) + [self])
  end

  def license_select_options(selected: nil)
    # Generate a list of select options for select with a set of useful licenses
    options_for_select(
      %w[
        CC-BY-4.0
        CC-BY-NC-4.0
        CC-BY-ND-4.0
        CC-BY-NC-ND-4.0
        CC-BY-NC-SA-4.0
        CC-BY-SA-4.0
        CC-PDDC
        CC0-1.0
        MIT
        GPL-2.0-only
        GPL-3.0-only
        LGPL-2.0-only
        LGPL-3.0-only
        0BSD
        LicenseRef-Commercial
      ].map { |id|
        [
          t_license(id),
          id
        ]
      },
      selected: selected
    )
  end

  def t_license(license)
    t("licenses.%{id}" % {id: license.delete(".")}, default: license)
  end
end
</file>

<file path="app/helpers/problems_helper.rb">
module ProblemsHelper
  def problem_severity(problem)
    current_user.problem_severity(problem.category) || :silent
  end

  def max_problem_severity(problems)
    return nil if problems.empty?
    severities = problems.select(:category).distinct.map { |p| problem_severity(p) }
    severities.max_by { |p| Problem::SEVERITIES.find_index(p) }
  end

  def problem_icon(severity)
    case severity
    when :info
      "info-circle-fill"
    when :warning
      "exclamation-triangle-fill"
    when :danger
      "x-octagon-fill"
    end
  end

  def problem_icon_tag(problems)
    severity = max_problem_severity(problems)
    ico = problem_icon(severity)
    content_tag(:span, icon(ico, t("problems.severities.#{severity}")), class: "text-#{severity} align-middle") if ico # rubocop:todo I18n/RailsI18n/DecorateStringFormattingUsingInterpolation
  end
end
</file>

<file path="app/helpers/settings_helper.rb">
module SettingsHelper
  def masked_email(email)
    email.gsub(/(?<=^.)[^@]*|(?<=@.).*(?=\.[^.]+$)/, "****")
  end

  def model_count(library: nil)
    scope = policy_scope(Model)
    scope = scope.where(library: library) if library
    scope.count
  end

  def model_file_count(library: nil)
    scope = policy_scope(ModelFile)
    scope = scope.includes(:model).where("models.library": library) if library
    scope.count
  end

  def total_file_size(library: nil)
    scope = policy_scope(ModelFile)
    scope = scope.includes(:model).where("models.library": library) if library
    scope.sum(:size)
  end

  def creator_count
    policy_scope(Creator).local.count
  end

  def collection_count
    policy_scope(Collection).local.count
  end

  def tag_count
    policy_scope(ActsAsTaggableOn::Tag).count
  end

  def user_count
    policy_scope(User).count
  end
end
</file>

<file path="app/helpers/uploads_helper.rb">
module UploadsHelper
  def library_select_title(l)
    title = [l.name]
    if current_user.is_administrator? && l.free_space
      title << translate("models.new.free_space",
        available: number_to_human_size(l.free_space),
        precision: 2)
    end
    title.join(" ")
  end

  def uploadable_file_extensions
    SupportedMimeTypes.indexable_extensions
  end

  def input_accept_string
    safe_join [
      uploadable_file_extensions.map { |it| Mime::EXTENSION_LOOKUP[it].to_s },
      uploadable_file_extensions.map { |it| ".#{it}" }
    ].uniq.flatten, ","
  end
end
</file>

<file path="app/javascript/controllers/application.ts">
import { Application } from '@hotwired/stimulus'

const application = Application.start()

// Configure Stimulus development experience
application.debug = false
window.Stimulus = application

export { application }
</file>

<file path="app/javascript/controllers/bulk_edit_controller.ts">
import { Controller } from '@hotwired/stimulus'

// Connects to data-controller="bulk-edit"
export default class extends Controller {
  connect (): void {
  }

  updateTagOptions (tags: string[], input, addTags = true): void {
    tags.forEach((tag) => {
      if (addTags) {
        input.tomselect.addOption({ value: tag, text: tag })
      } else {
        input.tomselect.removeOption({ value: tag, text: tag })
      }
    })
    input.tomselect.refreshOptions(false)
  }

  getTags (modelId: string): string[] {
    const selector = `[data-bulk-item-tags="${modelId}"]`
    const tagLinks = document.querySelectorAll(
      selector
    )
    return Array.prototype.slice
      .call(tagLinks)
      .map((tag: HTMLAnchorElement) => tag.textContent)
  }

  updateTagList (modelId: string, add: boolean): void {
    const tags = this.getTags(modelId)
    if (tags.length > 0) {
      this.updateTagOptions(tags, document.querySelector('select[name="remove_tags[]"]'), add)
    }
  }

  handleCheckboxChange (event): void {
    const target = event.target as HTMLInputElement
    event.preventDefault()
    // the bulk select checkbox has been selected
    if (target.name === 'bulk-select-all') {
      document
        .querySelectorAll('[data-bulk-item]')
        .forEach((checkbox: HTMLInputElement) => {
          const modelId = checkbox.getAttribute('data-bulk-item')
          if (modelId != null) {
            this.updateTagList(modelId, target.checked)
          }
          checkbox.checked = target.checked
        })
    } else {
      // a single checkbox item has been selected.
      const modelId = target.getAttribute('data-bulk-item') as string
      if (modelId != null) {
        this.updateTagList(modelId, target.checked)
      }
    }
  }
}
</file>

<file path="app/javascript/controllers/carousel_controller.ts">
import { Controller } from '@hotwired/stimulus'

import { Carousel } from 'bootstrap'

// Connects to data-controller="carousel"
export default class extends Controller {
  paused = false
  manual = false
  carousel: Carousel = null

  connect (): void {
    this.carousel = new Carousel(this.element, { /* eslint no-new: 0 */
      interval: 5000,
      pause: this.paused
    })

    this.element.addEventListener('slid.bs.carousel', function (event) {
      document.querySelector(`.carousel-indicators > button:nth-child(${event.from + 1})`)?.removeAttribute('aria-disabled')
      document.querySelector(`.carousel-indicators > button:nth-child(${event.to + 1})`)?.setAttribute('aria-disabled', 'true')
    })
  }

  onPauseButton (): void {
    this.manual = true
    this.setPauseState(!this.paused)
  }

  onEnter (): void {
    if (this.manual) { return }
    this.setPauseState(true)
  }

  onLeave (): void {
    if (this.manual) { return }
    this.setPauseState(false)
  }

  setPauseState (pause: boolean): void {
    const icon = document.querySelector('#rotationControlIcon')
    this.paused = pause
    if (this.paused) {
      this.carousel?.pause()
      document.querySelector('#imageCarouselInner')?.setAttribute('aria-live', 'polite')
      icon?.classList.add('bi-play')
      icon?.classList.remove('bi-pause')
    } else {
      this.carousel?.cycle()
      document.querySelector('#imageCarouselInner')?.setAttribute('aria-live', 'off')
      icon?.classList.add('bi-pause')
      icon?.classList.remove('bi-play')
    }
  }
}
</file>

<file path="app/javascript/controllers/cocooned_controller.ts">
import { Controller } from '@hotwired/stimulus'

import Cocooned from '@notus.sh/cocooned'

// Connects to data-controller="i18n"
export default class extends Controller {
  connect (): void {
    Cocooned.create(this.element)
  }
}
</file>

<file path="app/javascript/controllers/copy_text_controller.ts">
import { Controller } from '@hotwired/stimulus'

// Connects to data-controller="editable"
export default class extends Controller {
  static values = {
    text: String
  }

  declare textValue: string

  copy (): void {
    void navigator.clipboard.writeText(this.textValue)
  }
}
</file>

<file path="app/javascript/controllers/editable_controller.ts">
import { Controller } from '@hotwired/stimulus'

// Connects to data-controller="editable"
export default class extends Controller {
  input (): HTMLInputElement {
    return this.element as HTMLInputElement
  }

  field (): string {
    return this.input().dataset.editableField ?? ''
  }

  path (): string {
    return this.input().dataset.editablePath ?? ''
  }

  value (): string {
    return this.input().innerText?.trim()
  }

  initialText: string | null = null

  onFocus (): void {
    this.initialText = this.value()
  }

  onBlur (): void {
    if (this.initialText !== this.value()) {
      const data = new FormData()
      data.append(this.field(), this.value())
      data.append('authenticity_token', document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') ?? '')
      void fetch(
        this.path(),
        {
          method: 'PATCH',
          redirect: 'manual',
          body: data
        }
      )
    }
  }
}
</file>

<file path="app/javascript/controllers/i18n_controller.ts">
import { Controller } from '@hotwired/stimulus'

// Load i18n definitions
import { I18n } from 'i18n-js'
import locales from '../src/locales.json'

// Connects to data-controller="i18n"
export default class extends Controller {
  connect (): void {
    window.i18n = new I18n(locales)
    window.i18n.locale = (this.element as HTMLElement).lang ?? 'en'
  }
}
</file>

<file path="app/javascript/controllers/index.ts">
// This file is auto-generated by ./bin/rails stimulus:manifest:update
// Run that command whenever you add a new controller or create them with
// ./bin/rails generate stimulus controllerName

import { application } from './application'

import BulkEditController from './bulk_edit_controller'
import CarouselController from './carousel_controller'
import CocoonedController from './cocooned_controller'
import CopyTextController from './copy_text_controller'
import EditableController from './editable_controller'
import I18nController from './i18n_controller'
import RendererController from './renderer_controller'
import StorageServiceController from './storage_service_controller'
import TagInputController from './tag_input_controller'
import TagSectionController from './tag_section_controller'
import UploadController from './upload_controller'
import ZxcvbnController from './zxcvbn_controller'

application.register('carousel', CarouselController)
application.register('cocooned', CocoonedController)
application.register('copy-text', CopyTextController)
application.register('bulk-edit', BulkEditController)
application.register('editable', EditableController)
application.register('i18n', I18nController)
application.register('renderer', RendererController)
application.register('storage-service', StorageServiceController)
application.register('tag-input', TagInputController)
application.register('tag-section', TagSectionController)
application.register('upload', UploadController)
application.register('zxcvbn', ZxcvbnController)
</file>

<file path="app/javascript/controllers/renderer_controller.ts">
import { Controller } from '@hotwired/stimulus'
import { ObjectPreview } from '../src/object_preview'

// Connects to data-controller="renderer"
export default class extends Controller {
  connect (): void {
    const preview = new ObjectPreview(this.element)
    void (async () => {
      await preview.run()
    })() // Wrap up the promise, we don't want it
  }
}
</file>

<file path="app/javascript/controllers/storage_service_controller.ts">
import { Controller } from '@hotwired/stimulus'

import { Collapse } from 'bootstrap'

// Connects to data-controller="storage-service"
export default class extends Controller {
  connect (): void {
    this.onChange()
  }

  onChange (): void {
    this.updateSections((this.element as HTMLSelectElement).value)
  }

  updateSections (active: string): void {
    const selected = 'options-' + active
    document.querySelectorAll('.storage-collapse').forEach((section: HTMLDivElement) => {
      const control = Collapse.getOrCreateInstance(section, { toggle: false })
      if (section.id === selected) {
        control.show()
      } else {
        control.hide()
      }
    })
  }
}
</file>

<file path="app/javascript/controllers/tag_input_controller.ts">
import { Controller } from '@hotwired/stimulus'

import TomSelect from 'tom-select'
import type { TomInput } from 'tom-select/dist/cjs/types'

// Connects to data-controller="tag-input"
export default class extends Controller {
  tomSelect: TomSelect | null

  connect (): void {
    this.tomSelect = new TomSelect((this.element as TomInput), { // eslint-disable-line no-new
      addPrecedence: true,
      create: true,
      plugins: ['remove_button'],
      selectOnTab: true,
      onItemAdd: function () {
        this.setTextboxValue('')
        this.refreshOptions()
      }
    })
  }

  disconnect (): void {
    this.tomSelect?.destroy()
  }

  reconnect (): void {
    this.disconnect()
    this.connect()
  }
}
</file>

<file path="app/javascript/controllers/tag_section_controller.ts">
import { Controller } from '@hotwired/stimulus'

// Connects to data-controller="tag-section"
export default class extends Controller {
  connect (): void {
    const status = window.localStorage.getItem(this.storageKey())
    if (status === 'open') {
      this.element.setAttribute('open', 'open')
    }
  }

  storageKey (): string {
    return `details-${this.element.id}`
  }

  saveState (): void {
    const state = (this.element.getAttribute('open') == null) ? '' : 'open'
    window.localStorage.setItem(this.storageKey(), state)
  }
}
</file>

<file path="app/javascript/controllers/upload_controller.ts">
import { Controller } from '@hotwired/stimulus'

import Uppy from '@uppy/core'
import Dashboard from '@uppy/dashboard'
import Tus from '@uppy/tus'

import cs from '@uppy/locales/lib/cs_CZ'
import de from '@uppy/locales/lib/de_DE'
import en from '@uppy/locales/lib/en_US'
import es from '@uppy/locales/lib/es_ES'
import fr from '@uppy/locales/lib/fr_FR'
import ja from '@uppy/locales/lib/ja_JP'
import nl from '@uppy/locales/lib/nl_NL'
import pl from '@uppy/locales/lib/pl_PL'

const uppyLocales = { cs, de, en, es, fr, ja, nl, pl }

// Connects to data-controller="upload"
export default class extends Controller {
  uppy: Uppy | null = null

  connect (): void {
    if (this.uppy != null) { return }
    const settings = (this.element as HTMLElement).dataset
    this.uppy = new Uppy({
      autoProceed: true,
      locale: uppyLocales[window.i18n.locale],
      restrictions: {
        allowedFileTypes: settings.allowedFileTypes?.split(','),
        maxFileSize: +(settings?.maxFileSize ?? -1)
      }
    })
      .use(Dashboard, {
        inline: true,
        target: this.element,
        theme: 'auto',
        width: '100%',
        height: '25rem',
        showRemoveButtonAfterComplete: true,
        hideProgressAfterFinish: true
      })
      .use(Tus, {
        endpoint: settings.uploadEndpoint ?? '/upload',
        chunkSize: 1 * 1024 * 1024
      })
    const submitButton = this.element?.closest('form')?.querySelector("input[type='submit']")
    this.uppy.on('upload', () => {
      submitButton?.setAttribute('disabled', 'disabled')
    })
    this.uppy.on('complete', (result) => {
      if (result.successful?.length != null && result.successful.length > 0) {
        submitButton?.removeAttribute('disabled')
      }
    })
    this.element.closest('form')?.addEventListener('formdata', (event) => {
      this.uppy?.getFiles().forEach((f, index) => {
        if (f.tus?.uploadUrl != null) {
          event.formData.set(`file[${index}][id]`, f.tus?.uploadUrl)
          if (f.name != null) { event.formData.set(`file[${index}][name]`, f.name) }
        }
      })
    })
  }

  disconnect (): void {
    this.uppy?.destroy()
    this.uppy = null
  }

  reconnect (): void {
    this.disconnect()
    this.connect()
  }
}
</file>

<file path="app/javascript/controllers/zxcvbn_controller.ts">
import { Controller } from '@hotwired/stimulus'

import { zxcvbn, zxcvbnOptions } from '@zxcvbn-ts/core'
import * as zxcvbnCommonPackage from '@zxcvbn-ts/language-common'
import * as zxcvbnEnPackage from '@zxcvbn-ts/language-en'

// Connects to data-controller="zxcvbn"
export default class extends Controller {
  meter: HTMLDivElement | null = null
  minScore = 4

  connect (): void {
    zxcvbnOptions.setOptions({
      translations: zxcvbnEnPackage.translations,
      graphs: zxcvbnCommonPackage.adjacencyGraphs,
      dictionary: {
        ...zxcvbnCommonPackage.dictionary,
        ...zxcvbnEnPackage.dictionary
      }
    })
    this.meter = this.element.parentElement?.querySelector('.zxcvbn-meter') ?? null
    this.minScore = parseInt(this.meter?.dataset.zxcvbnMinScore ?? '4')
  }

  value (): string {
    return (this.element as HTMLInputElement).value
  }

  onInput (event: InputEvent): void {
    const widths = ['w-0', 'w-25', 'w-50', 'w-75', 'w-100']
    const severities = ['bg-danger', 'bg-danger', 'bg-danger', 'bg-warning', 'bg-success', 'bg-success', 'bg-success', 'bg-success', 'bg-success'].slice(4 - this.minScore, 4 - this.minScore + 5)
    const result = zxcvbn(this.value())
    if (this.meter != null) { this.meter.className = `progress-bar zxcvbn-meter ${widths[result.score]} ${severities[result.score]}` }
  }
}

document.querySelectorAll('[data-zxcvbn]').forEach((element: HTMLInputElement) => {
})
</file>

<file path="app/javascript/src/canvas_proxy.ts">
import { EventDispatcher } from 'three'

export class CanvasProxy extends EventDispatcher {
  style = { touchAction: '' }
  clientWidth: number = 100
  clientHeight: number = 100
  realCanvas: HTMLCanvasElement

  ownerDocument = this

  constructor (canvas: HTMLCanvasElement) {
    super()
    this.realCanvas = canvas
  }

  getBoundingClientRect (): DOMRect {
    return {
      left: 0,
      top: 0,
      x: 0,
      y: 0,
      width: this.clientWidth,
      height: this.clientHeight,
      right: this.clientWidth,
      bottom: this.clientHeight,
      toJSON: () => ('')
    }
  }

  resize (width, height): void {
    this.clientWidth = width
    this.clientHeight = height
    this.realCanvas.width = width
    this.realCanvas.height = height
  }

  handleEvent (event: Event): void {
    event.preventDefault = function () { }
    super.dispatchEvent(event)
  }

  // Pretend we can handle capture events
  getRootNode (): CanvasProxy {
    return this
  }

  setPointerCapture (): void {}
  releasePointerCapture (): void {}
}
</file>

<file path="app/javascript/src/comlink_event_handler.ts">
import * as Comlink from 'comlink'

interface UnifiedEvent {
  type: string
  altKey?: boolean
  ctrlKey?: boolean
  metaKey?: boolean
  shiftKey?: boolean
  button?: number
  buttons?: number
  clientX?: number
  clientY?: number
  pageX?: number
  pageY?: number
  pointerType?: string
  deltaX?: number
  deltaY?: number
  keyCode?: number
  code?: string
}

const handler: Comlink.TransferHandler<Event, UnifiedEvent> = {
  canHandle: (obj): obj is Event => (obj instanceof Event),
  serialize: (ev: Event) => {
    let serializedEvent: UnifiedEvent = { type: ev.type }
    if (ev instanceof PointerEvent) {
      serializedEvent = {
        altKey: ev.altKey,
        ctrlKey: ev.ctrlKey,
        metaKey: ev.metaKey,
        shiftKey: ev.shiftKey,
        button: ev.button,
        buttons: ev.buttons,
        clientX: ev.clientX,
        clientY: ev.clientY,
        pageX: ev.pageX,
        pageY: ev.pageY,
        pointerType: ev.pointerType,
        ...serializedEvent
      }
    }
    if (ev instanceof WheelEvent) {
      serializedEvent = {
        deltaX: ev.deltaX,
        deltaY: ev.deltaY,
        ...serializedEvent
      }
    }
    if (ev instanceof KeyboardEvent) {
      serializedEvent = {
        altKey: ev.altKey,
        ctrlKey: ev.ctrlKey,
        metaKey: ev.metaKey,
        shiftKey: ev.shiftKey,
        keyCode: ev.keyCode,
        code: ev.code,
        ...serializedEvent
      }
    }
    return [serializedEvent, []]
  },
  deserialize: (obj) => obj as Event
}

Comlink.transferHandlers.set('EVENT', handler)
</file>

<file path="app/javascript/src/object_preview.ts">
import * as Comlink from 'comlink'
import 'src/comlink_event_handler'
import type { OffscreenRenderer } from 'offscreen_renderer'

export class ObjectPreview {
  progressBar: HTMLDivElement | null
  progressLabel: HTMLSpanElement | null
  canvas: HTMLCanvasElement
  renderer: any
  observer: IntersectionObserver | null
  loading: boolean = false

  constructor (canvas) {
    this.canvas = canvas
    this.progressBar = this.canvas.parentElement?.getElementsByClassName('progress-bar')[0] as HTMLDivElement
    this.progressLabel = this.canvas.parentElement?.getElementsByClassName('progress-label')[0] as HTMLSpanElement
  }

  async run (): Promise<void> {
    if (this.canvas.dataset.workerUrl === undefined || this.canvas.dataset.workerUrl === null) {
      console.log('ERROR: Could not load worker!')
      return
    }
    // Create offscreen renderer worker
    const offscreenCanvas = this.canvas.transferControlToOffscreen()
    const RemoteOffscreenRenderer = await Comlink.wrap<typeof OffscreenRenderer>(
      new Worker(this.canvas.dataset.workerUrl, { type: 'module' })
    )
    this.renderer = await new RemoteOffscreenRenderer(
      Comlink.transfer(offscreenCanvas as unknown as HTMLCanvasElement, [offscreenCanvas]), { ...this.canvas.dataset }
    )
    // Handle resize events
    window.addEventListener('resize', this.onResize.bind(this))
    this.onResize()
    // Handle interaction events
    const pointerEvents = ['pointerdown', 'pointermove', 'pointerup']
    pointerEvents.forEach((eventName) => {
      this.canvas.addEventListener(eventName, this.onPointerEvent.bind(this))
    })
    const keyEvents = ['keydown', 'keyup']
    keyEvents.forEach((eventName) => {
      this.canvas.addEventListener(eventName, this.onKeyEvent.bind(this))
    })
    const otherEvents = ['wheel', 'contextmenu']
    otherEvents.forEach((eventName) => {
      this.canvas.addEventListener(eventName, this.onEvent.bind(this))
    })
    // Monitor visibility
    this.observer = new window.IntersectionObserver(
      this.onIntersectionChanged.bind(this), {}
    )
    this.observer.observe(this.canvas)
    // Monitor load button click
    const loadButton = this.canvas.parentElement?.getElementsByClassName('object-preview-progress')[0] as HTMLDivElement
    loadButton.addEventListener('click', this.load.bind(this))
  }

  onIntersectionChanged (entries, observer): void {
    if ((this.canvas.dataset.autoLoad === 'true') && (entries[0].isIntersecting === true)) {
      this.load()
    }
  }

  onPointerEvent (event): void {
    if (event.type === 'pointerdown') {
      this.canvas.focus()
      this.canvas.setPointerCapture(event.pointerId)
    }
    this.onEvent(event)
  }

  onKeyEvent (event): void {
    if ([
      'ArrowUp',
      'ArrowDown',
      'ArrowLeft',
      'ArrowRight',
      'Minus',
      'Equal'
    ].includes(event.code)) {
      this.onEvent(event)
    }
  }

  onEvent (event): void {
    event.preventDefault()
    this.renderer.handleEvent(event)
  }

  onLoadProgress (percentage: number): void {
    if ((this.progressBar == null) || (this.progressLabel == null)) { return }
    if (percentage === 100) {
      this.progressLabel.textContent = window.i18n.t('renderer.processing')
    } else {
      this.progressLabel.textContent = `${percentage}%`
    }
    this.progressBar.style.width = `${percentage}%`
    this.progressBar.ariaValueNow = percentage.toString()
  }

  onLoad (): void {
    this.progressBar?.parentElement?.remove()
    this.progressBar = null
    this.progressLabel = null
  }

  onLoadError (): void {
    if ((this.progressBar == null) || (this.progressLabel == null)) { return }
    this.progressBar?.classList.add('bg-danger')
    this.progressBar.style.width = this.progressBar.ariaValueNow = '100%'
    this.progressLabel.textContent = window.i18n.t('renderer.errors.load')
  }

  onResize (): void {
    this.renderer.onResize(
      this.canvas.clientWidth,
      this.canvas.clientHeight,
      window.devicePixelRatio
    )
  }

  load (): void {
    if (this.loading) { return }
    this.loading = true
    this.renderer.load(
      Comlink.proxy(this.onLoad.bind(this)),
      Comlink.proxy(this.onLoadProgress.bind(this)),
      Comlink.proxy(this.onLoadError.bind(this))
    )
  }
}
</file>

<file path="app/javascript/src/orbit_controls.js">
import {
  EventDispatcher,
  MOUSE,
  Quaternion,
  Spherical,
  TOUCH,
  Vector2,
  Vector3,
  Plane,
  Ray,
  MathUtils
} from 'three'

// OrbitControls performs orbiting, dollying (zooming), and panning.
// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
//
//    Orbit - left mouse / touch: one-finger move
//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move

const _changeEvent = { type: 'change' }
const _startEvent = { type: 'start' }
const _endEvent = { type: 'end' }
const _ray = new Ray()
const _plane = new Plane()
const TILT_LIMIT = Math.cos(70 * MathUtils.DEG2RAD)

class OrbitControls extends EventDispatcher {
  constructor (object, domElement) {
    super()

    this.object = object
    this.domElement = domElement
    this.domElement.style.touchAction = 'none' // disable touch scroll

    // Set to false to disable this control
    this.enabled = true

    // "target" sets the location of focus, where the object orbits around
    this.target = new Vector3()

    // Sets the 3D cursor (similar to Blender), from which the maxTargetRadius takes effect
    this.cursor = new Vector3()

    // How far you can dolly in and out ( PerspectiveCamera only )
    this.minDistance = 0
    this.maxDistance = Infinity

    // How far you can zoom in and out ( OrthographicCamera only )
    this.minZoom = 0
    this.maxZoom = Infinity

    // Limit camera target within a spherical area around the cursor
    this.minTargetRadius = 0
    this.maxTargetRadius = Infinity

    // How far you can orbit vertically, upper and lower limits.
    // Range is 0 to Math.PI radians.
    this.minPolarAngle = 0 // radians
    this.maxPolarAngle = Math.PI // radians

    // How far you can orbit horizontally, upper and lower limits.
    // If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )
    this.minAzimuthAngle = -Infinity // radians
    this.maxAzimuthAngle = Infinity // radians

    // Set to true to enable damping (inertia)
    // If damping is enabled, you must call controls.update() in your animation loop
    this.enableDamping = false
    this.dampingFactor = 0.05

    // This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
    // Set to false to disable zooming
    this.enableZoom = true
    this.zoomSpeed = 1.0
    this.keyZoomSpeed = 100.0

    // Set to false to disable rotating
    this.enableRotate = true
    this.rotateSpeed = 1.0
    this.keyRotateFactor = 1.0

    // Set to false to disable panning
    this.enablePan = true
    this.panSpeed = 1.0
    this.screenSpacePanning = true // if false, pan orthogonal to world-space direction camera.up
    this.keyPanSpeed = 7.0 // pixels moved per arrow key push
    this.zoomToCursor = false

    // Set to true to automatically rotate around the target
    // If auto-rotate is enabled, you must call controls.update() in your animation loop
    this.autoRotate = false
    this.autoRotateSpeed = 2.0 // 30 seconds per orbit when fps is 60

    // The four arrow keys
    this.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown', IN: 'Equal', OUT: 'Minus' }

    // Mouse buttons
    this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN }

    // Touch fingers
    this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN }

    // for reset
    this.target0 = this.target.clone()
    this.position0 = this.object.position.clone()
    this.zoom0 = this.object.zoom

    // the target DOM element for key events
    this._domElementKeyEvents = null

    //
    // public methods
    //

    this.getPolarAngle = function () {
      return spherical.phi
    }

    this.getAzimuthalAngle = function () {
      return spherical.theta
    }

    this.getDistance = function () {
      return this.object.position.distanceTo(this.target)
    }

    this.listenToKeyEvents = function (domElement) {
      domElement.addEventListener('keydown', onKeyDown)
      this._domElementKeyEvents = domElement
    }

    this.stopListenToKeyEvents = function () {
      this._domElementKeyEvents.removeEventListener('keydown', onKeyDown)
      this._domElementKeyEvents = null
    }

    this.saveState = function () {
      scope.target0.copy(scope.target)
      scope.position0.copy(scope.object.position)
      scope.zoom0 = scope.object.zoom
    }

    this.reset = function () {
      scope.target.copy(scope.target0)
      scope.object.position.copy(scope.position0)
      scope.object.zoom = scope.zoom0

      scope.object.updateProjectionMatrix()
      scope.dispatchEvent(_changeEvent)

      scope.update()

      state = STATE.NONE
    }

    // this method is exposed, but perhaps it would be better if we can make it private...
    this.update = (function () {
      const offset = new Vector3()

      // so camera.up is the orbit axis
      const quat = new Quaternion().setFromUnitVectors(object.up, new Vector3(0, 1, 0))
      const quatInverse = quat.clone().invert()

      const lastPosition = new Vector3()
      const lastQuaternion = new Quaternion()
      const lastTargetPosition = new Vector3()

      const twoPI = 2 * Math.PI

      return function update (deltaTime = null) {
        const position = scope.object.position

        offset.copy(position).sub(scope.target)

        // rotate offset to "y-axis-is-up" space
        offset.applyQuaternion(quat)

        // angle from z-axis around y-axis
        spherical.setFromVector3(offset)

        if (scope.autoRotate && state === STATE.NONE) {
          rotateLeft(getAutoRotationAngle(deltaTime))
        }

        if (scope.enableDamping) {
          spherical.theta += sphericalDelta.theta * scope.dampingFactor
          spherical.phi += sphericalDelta.phi * scope.dampingFactor
        } else {
          spherical.theta += sphericalDelta.theta
          spherical.phi += sphericalDelta.phi
        }

        // restrict theta to be between desired limits

        let min = scope.minAzimuthAngle
        let max = scope.maxAzimuthAngle

        if (isFinite(min) && isFinite(max)) {
          if (min < -Math.PI) min += twoPI; else if (min > Math.PI) min -= twoPI

          if (max < -Math.PI) max += twoPI; else if (max > Math.PI) max -= twoPI

          if (min <= max) {
            spherical.theta = Math.max(min, Math.min(max, spherical.theta))
          } else {
            spherical.theta = (spherical.theta > (min + max) / 2)
              ? Math.max(min, spherical.theta)
              : Math.min(max, spherical.theta)
          }
        }

        // restrict phi to be between desired limits
        spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi))

        spherical.makeSafe()

        // move target to panned location

        if (scope.enableDamping === true) {
          scope.target.addScaledVector(panOffset, scope.dampingFactor)
        } else {
          scope.target.add(panOffset)
        }

        // Limit the target distance from the cursor to create a sphere around the center of interest
        scope.target.sub(scope.cursor)
        scope.target.clampLength(scope.minTargetRadius, scope.maxTargetRadius)
        scope.target.add(scope.cursor)

        let zoomChanged = false
        // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera
        // we adjust zoom later in these cases
        if ((scope.zoomToCursor && performCursorZoom) || scope.object.isOrthographicCamera) {
          spherical.radius = clampDistance(spherical.radius)
        } else {
          const prevRadius = spherical.radius
          spherical.radius = clampDistance(spherical.radius * scale)
          zoomChanged = prevRadius !== spherical.radius
        }

        offset.setFromSpherical(spherical)

        // rotate offset back to "camera-up-vector-is-up" space
        offset.applyQuaternion(quatInverse)

        position.copy(scope.target).add(offset)

        scope.object.lookAt(scope.target)

        if (scope.enableDamping === true) {
          sphericalDelta.theta *= (1 - scope.dampingFactor)
          sphericalDelta.phi *= (1 - scope.dampingFactor)

          panOffset.multiplyScalar(1 - scope.dampingFactor)
        } else {
          sphericalDelta.set(0, 0, 0)

          panOffset.set(0, 0, 0)
        }

        // adjust camera position
        if (scope.zoomToCursor && performCursorZoom) {
          let newRadius = null
          if (scope.object.isPerspectiveCamera) {
            // move the camera down the pointer ray
            // this method avoids floating point error
            const prevRadius = offset.length()
            newRadius = clampDistance(prevRadius * scale)

            const radiusDelta = prevRadius - newRadius
            scope.object.position.addScaledVector(dollyDirection, radiusDelta)
            scope.object.updateMatrixWorld()

            zoomChanged = !!radiusDelta
          } else if (scope.object.isOrthographicCamera) {
            // adjust the ortho camera position based on zoom changes
            const mouseBefore = new Vector3(mouse.x, mouse.y, 0)
            mouseBefore.unproject(scope.object)

            const prevZoom = scope.object.zoom
            scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale))
            scope.object.updateProjectionMatrix()

            zoomChanged = prevZoom !== scope.object.zoom

            const mouseAfter = new Vector3(mouse.x, mouse.y, 0)
            mouseAfter.unproject(scope.object)

            scope.object.position.sub(mouseAfter).add(mouseBefore)
            scope.object.updateMatrixWorld()

            newRadius = offset.length()
          } else {
            console.warn('WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.')
            scope.zoomToCursor = false
          }

          // handle the placement of the target
          if (newRadius !== null) {
            if (this.screenSpacePanning) {
              // position the orbit target in front of the new camera position
              scope.target.set(0, 0, -1)
                .transformDirection(scope.object.matrix)
                .multiplyScalar(newRadius)
                .add(scope.object.position)
            } else {
              // get the ray and translation plane to compute target
              _ray.origin.copy(scope.object.position)
              _ray.direction.set(0, 0, -1).transformDirection(scope.object.matrix)

              // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid
              // extremely large values
              if (Math.abs(scope.object.up.dot(_ray.direction)) < TILT_LIMIT) {
                object.lookAt(scope.target)
              } else {
                _plane.setFromNormalAndCoplanarPoint(scope.object.up, scope.target)
                _ray.intersectPlane(_plane, scope.target)
              }
            }
          }
        } else if (scope.object.isOrthographicCamera) {
          const prevZoom = scope.object.zoom
          scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale))

          if (prevZoom !== scope.object.zoom) {
            scope.object.updateProjectionMatrix()
            zoomChanged = true
          }
        }

        scale = 1
        performCursorZoom = false

        // update condition is:
        // min(camera displacement, camera rotation in radians)^2 > EPS
        // using small-angle approximation cos(x/2) = 1 - x^2 / 8

        if (zoomChanged ||
          lastPosition.distanceToSquared(scope.object.position) > EPS ||
          8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS ||
          lastTargetPosition.distanceToSquared(scope.target) > EPS) {
          scope.dispatchEvent(_changeEvent)

          lastPosition.copy(scope.object.position)
          lastQuaternion.copy(scope.object.quaternion)
          lastTargetPosition.copy(scope.target)

          return true
        }

        return false
      }
    }())

    this.dispose = function () {
      scope.domElement.removeEventListener('contextmenu', onContextMenu)

      scope.domElement.removeEventListener('pointerdown', onPointerDown)
      scope.domElement.removeEventListener('pointercancel', onPointerUp)
      scope.domElement.removeEventListener('wheel', onMouseWheel)

      scope.domElement.removeEventListener('pointermove', onPointerMove)
      scope.domElement.removeEventListener('pointerup', onPointerUp)

      const document = scope.domElement.getRootNode() // offscreen canvas compatibility

      document.removeEventListener('keydown', interceptControlDown, { capture: true })

      if (scope._domElementKeyEvents !== null) {
        scope._domElementKeyEvents.removeEventListener('keydown', onKeyDown)
        scope._domElementKeyEvents = null
      }

      // scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?
    }

    //
    // internals
    //

    const scope = this

    const STATE = {
      NONE: -1,
      ROTATE: 0,
      DOLLY: 1,
      PAN: 2,
      TOUCH_ROTATE: 3,
      TOUCH_PAN: 4,
      TOUCH_DOLLY_PAN: 5,
      TOUCH_DOLLY_ROTATE: 6
    }

    let state = STATE.NONE

    const EPS = 0.000001

    // current position in spherical coordinates
    const spherical = new Spherical()
    const sphericalDelta = new Spherical()

    let scale = 1
    const panOffset = new Vector3()

    const rotateStart = new Vector2()
    const rotateEnd = new Vector2()
    const rotateDelta = new Vector2()

    const panStart = new Vector2()
    const panEnd = new Vector2()
    const panDelta = new Vector2()

    const dollyStart = new Vector2()
    const dollyEnd = new Vector2()
    const dollyDelta = new Vector2()

    const dollyDirection = new Vector3()
    const mouse = new Vector2()
    let performCursorZoom = false

    const pointers = []
    const pointerPositions = {}

    let controlActive = false

    function getAutoRotationAngle (deltaTime) {
      if (deltaTime !== null) {
        return (2 * Math.PI / 60 * scope.autoRotateSpeed) * deltaTime
      } else {
        return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed
      }
    }

    function getZoomScale (delta) {
      const normalizedDelta = Math.abs(delta * 0.01)
      return Math.pow(0.95, scope.zoomSpeed * normalizedDelta)
    }

    function rotateLeft (angle) {
      sphericalDelta.theta -= angle
    }

    function rotateUp (angle) {
      sphericalDelta.phi -= angle
    }

    const panLeft = (function () {
      const v = new Vector3()

      return function panLeft (distance, objectMatrix) {
        v.setFromMatrixColumn(objectMatrix, 0) // get X column of objectMatrix
        v.multiplyScalar(-distance)

        panOffset.add(v)
      }
    }())

    const panUp = (function () {
      const v = new Vector3()

      return function panUp (distance, objectMatrix) {
        if (scope.screenSpacePanning === true) {
          v.setFromMatrixColumn(objectMatrix, 1)
        } else {
          v.setFromMatrixColumn(objectMatrix, 0)
          v.crossVectors(scope.object.up, v)
        }

        v.multiplyScalar(distance)

        panOffset.add(v)
      }
    }())

    // deltaX and deltaY are in pixels; right and down are positive
    const pan = (function () {
      const offset = new Vector3()

      return function pan (deltaX, deltaY) {
        const element = scope.domElement

        if (scope.object.isPerspectiveCamera) {
          // perspective
          const position = scope.object.position
          offset.copy(position).sub(scope.target)
          let targetDistance = offset.length()

          // half of the fov is center to top of screen
          targetDistance *= Math.tan((scope.object.fov / 2) * Math.PI / 180.0)

          // we use only clientHeight here so aspect ratio does not distort speed
          panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix)
          panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix)
        } else if (scope.object.isOrthographicCamera) {
          // orthographic
          panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix)
          panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix)
        } else {
          // camera neither orthographic nor perspective
          console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.')
          scope.enablePan = false
        }
      }
    }())

    function dollyOut (dollyScale) {
      if (scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera) {
        scale /= dollyScale
      } else {
        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.')
        scope.enableZoom = false
      }
    }

    function dollyIn (dollyScale) {
      if (scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera) {
        scale *= dollyScale
      } else {
        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.')
        scope.enableZoom = false
      }
    }

    function updateZoomParameters (x, y) {
      if (!scope.zoomToCursor) {
        return
      }

      performCursorZoom = true

      const rect = scope.domElement.getBoundingClientRect()
      const dx = x - rect.left
      const dy = y - rect.top
      const w = rect.width
      const h = rect.height

      mouse.x = (dx / w) * 2 - 1
      mouse.y = -(dy / h) * 2 + 1

      dollyDirection.set(mouse.x, mouse.y, 1).unproject(scope.object).sub(scope.object.position).normalize()
    }

    function clampDistance (dist) {
      return Math.max(scope.minDistance, Math.min(scope.maxDistance, dist))
    }

    //
    // event callbacks - update the object state
    //

    function handleMouseDownRotate (event) {
      rotateStart.set(event.clientX, event.clientY)
    }

    function handleMouseDownDolly (event) {
      updateZoomParameters(event.clientX, event.clientX)
      dollyStart.set(event.clientX, event.clientY)
    }

    function handleMouseDownPan (event) {
      panStart.set(event.clientX, event.clientY)
    }

    function handleMouseMoveRotate (event) {
      rotateEnd.set(event.clientX, event.clientY)

      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed)

      const element = scope.domElement

      rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight) // yes, height

      rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight)

      rotateStart.copy(rotateEnd)

      scope.update()
    }

    function handleMouseMoveDolly (event) {
      dollyEnd.set(event.clientX, event.clientY)

      dollyDelta.subVectors(dollyEnd, dollyStart)

      if (dollyDelta.y > 0) {
        dollyOut(getZoomScale(dollyDelta.y))
      } else if (dollyDelta.y < 0) {
        dollyIn(getZoomScale(dollyDelta.y))
      }

      dollyStart.copy(dollyEnd)

      scope.update()
    }

    function handleMouseMovePan (event) {
      panEnd.set(event.clientX, event.clientY)

      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed)

      pan(panDelta.x, panDelta.y)

      panStart.copy(panEnd)

      scope.update()
    }

    function handleMouseWheel (event) {
      updateZoomParameters(event.clientX, event.clientY)

      if (event.deltaY < 0) {
        dollyIn(getZoomScale(event.deltaY))
      } else if (event.deltaY > 0) {
        dollyOut(getZoomScale(event.deltaY))
      }

      scope.update()
    }

    function handleKeyDown (event) {
      let needsUpdate = false

      switch (event.code) {
        case scope.keys.UP:

          if (scope.enablePan && (event.ctrlKey || event.metaKey || event.shiftKey)) {
            pan(0, scope.keyPanSpeed)
          } else {
            rotateUp(-2 * Math.PI * scope.keyRotateFactor * scope.rotateSpeed / scope.domElement.clientHeight)
          }

          needsUpdate = true
          break

        case scope.keys.BOTTOM:

          if (scope.enablePan && (event.ctrlKey || event.metaKey || event.shiftKey)) {
            pan(0, -scope.keyPanSpeed)
          } else {
            rotateUp(2 * Math.PI * scope.keyRotateFactor * scope.rotateSpeed / scope.domElement.clientHeight)
          }

          needsUpdate = true
          break

        case scope.keys.LEFT:

          if (scope.enablePan && (event.ctrlKey || event.metaKey || event.shiftKey)) {
            pan(scope.keyPanSpeed, 0)
          } else {
            rotateLeft(-2 * Math.PI * scope.keyRotateFactor * scope.rotateSpeed / scope.domElement.clientHeight)
          }

          needsUpdate = true
          break

        case scope.keys.RIGHT:

          if (scope.enablePan && (event.ctrlKey || event.metaKey || event.shiftKey)) {
            pan(-scope.keyPanSpeed, 0)
          } else {
            rotateLeft(2 * Math.PI * scope.keyRotateFactor * scope.rotateSpeed / scope.domElement.clientHeight)
          }

          needsUpdate = true
          break

        case scope.keys.IN:
          if (scope.enableZoom) {
            dollyIn(getZoomScale(scope.keyZoomSpeed))
            needsUpdate = true
          }
          break

        case scope.keys.OUT:
          if (scope.enableZoom) {
            dollyOut(getZoomScale(scope.keyZoomSpeed))
            needsUpdate = true
          }
          break
      }

      if (needsUpdate) {
        // prevent the browser from scrolling on cursor keys
        event.preventDefault()

        scope.update()
      }
    }

    function handleTouchStartRotate (event) {
      if (pointers.length === 1) {
        rotateStart.set(event.pageX, event.pageY)
      } else {
        const position = getSecondPointerPosition(event)

        const x = 0.5 * (event.pageX + position.x)
        const y = 0.5 * (event.pageY + position.y)

        rotateStart.set(x, y)
      }
    }

    function handleTouchStartPan (event) {
      if (pointers.length === 1) {
        panStart.set(event.pageX, event.pageY)
      } else {
        const position = getSecondPointerPosition(event)

        const x = 0.5 * (event.pageX + position.x)
        const y = 0.5 * (event.pageY + position.y)

        panStart.set(x, y)
      }
    }

    function handleTouchStartDolly (event) {
      const position = getSecondPointerPosition(event)

      const dx = event.pageX - position.x
      const dy = event.pageY - position.y

      const distance = Math.sqrt(dx * dx + dy * dy)

      dollyStart.set(0, distance)
    }

    function handleTouchStartDollyPan (event) {
      if (scope.enableZoom) handleTouchStartDolly(event)

      if (scope.enablePan) handleTouchStartPan(event)
    }

    function handleTouchStartDollyRotate (event) {
      if (scope.enableZoom) handleTouchStartDolly(event)

      if (scope.enableRotate) handleTouchStartRotate(event)
    }

    function handleTouchMoveRotate (event) {
      if (pointers.length === 1) {
        rotateEnd.set(event.pageX, event.pageY)
      } else {
        const position = getSecondPointerPosition(event)

        const x = 0.5 * (event.pageX + position.x)
        const y = 0.5 * (event.pageY + position.y)

        rotateEnd.set(x, y)
      }

      rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed)

      const element = scope.domElement

      rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight) // yes, height

      rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight)

      rotateStart.copy(rotateEnd)
    }

    function handleTouchMovePan (event) {
      if (pointers.length === 1) {
        panEnd.set(event.pageX, event.pageY)
      } else {
        const position = getSecondPointerPosition(event)

        const x = 0.5 * (event.pageX + position.x)
        const y = 0.5 * (event.pageY + position.y)

        panEnd.set(x, y)
      }

      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed)

      pan(panDelta.x, panDelta.y)

      panStart.copy(panEnd)
    }

    function handleTouchMoveDolly (event) {
      const position = getSecondPointerPosition(event)

      const dx = event.pageX - position.x
      const dy = event.pageY - position.y

      const distance = Math.sqrt(dx * dx + dy * dy)

      dollyEnd.set(0, distance)

      dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed))

      dollyOut(dollyDelta.y)

      dollyStart.copy(dollyEnd)

      const centerX = (event.pageX + position.x) * 0.5
      const centerY = (event.pageY + position.y) * 0.5

      updateZoomParameters(centerX, centerY)
    }

    function handleTouchMoveDollyPan (event) {
      if (scope.enableZoom) handleTouchMoveDolly(event)

      if (scope.enablePan) handleTouchMovePan(event)
    }

    function handleTouchMoveDollyRotate (event) {
      if (scope.enableZoom) handleTouchMoveDolly(event)

      if (scope.enableRotate) handleTouchMoveRotate(event)
    }

    //
    // event handlers - FSM: listen for events and reset state
    //

    function onPointerDown (event) {
      if (scope.enabled === false) return

      if (pointers.length === 0) {
        scope.domElement.setPointerCapture(event.pointerId)

        scope.domElement.addEventListener('pointermove', onPointerMove)
        scope.domElement.addEventListener('pointerup', onPointerUp)
      }

      //

      if (isTrackingPointer(event)) return

      //

      addPointer(event)

      if (event.pointerType === 'touch') {
        onTouchStart(event)
      } else {
        onMouseDown(event)
      }
    }

    function onPointerMove (event) {
      if (scope.enabled === false) return

      if (event.pointerType === 'touch') {
        onTouchMove(event)
      } else {
        onMouseMove(event)
      }
    }

    function onPointerUp (event) {
      removePointer(event)

      let pointerId = null
      let position = null

      switch (pointers.length) {
        case 0:

          scope.domElement.releasePointerCapture(event.pointerId)

          scope.domElement.removeEventListener('pointermove', onPointerMove)
          scope.domElement.removeEventListener('pointerup', onPointerUp)

          scope.dispatchEvent(_endEvent)

          state = STATE.NONE

          break

        case 1:
          pointerId = pointers[0]
          position = pointerPositions[pointerId]

          // minimal placeholder event - allows state correction on pointer-up
          onTouchStart({ pointerId, pageX: position.x, pageY: position.y })

          break
      }
    }

    function onMouseDown (event) {
      let mouseAction

      switch (event.button) {
        case 0:

          mouseAction = scope.mouseButtons.LEFT
          break

        case 1:

          mouseAction = scope.mouseButtons.MIDDLE
          break

        case 2:

          mouseAction = scope.mouseButtons.RIGHT
          break

        default:

          mouseAction = -1
      }

      switch (mouseAction) {
        case MOUSE.DOLLY:

          if (scope.enableZoom === false) return

          handleMouseDownDolly(event)

          state = STATE.DOLLY

          break

        case MOUSE.ROTATE:

          if (event.ctrlKey || event.metaKey || event.shiftKey) {
            if (scope.enablePan === false) return

            handleMouseDownPan(event)

            state = STATE.PAN
          } else {
            if (scope.enableRotate === false) return

            handleMouseDownRotate(event)

            state = STATE.ROTATE
          }

          break

        case MOUSE.PAN:

          if (event.ctrlKey || event.metaKey || event.shiftKey) {
            if (scope.enableRotate === false) return

            handleMouseDownRotate(event)

            state = STATE.ROTATE
          } else {
            if (scope.enablePan === false) return

            handleMouseDownPan(event)

            state = STATE.PAN
          }

          break

        default:

          state = STATE.NONE
      }

      if (state !== STATE.NONE) {
        scope.dispatchEvent(_startEvent)
      }
    }

    function onMouseMove (event) {
      switch (state) {
        case STATE.ROTATE:

          if (scope.enableRotate === false) return

          handleMouseMoveRotate(event)

          break

        case STATE.DOLLY:

          if (scope.enableZoom === false) return

          handleMouseMoveDolly(event)

          break

        case STATE.PAN:

          if (scope.enablePan === false) return

          handleMouseMovePan(event)

          break
      }
    }

    function onMouseWheel (event) {
      if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE) return

      event.preventDefault()

      scope.dispatchEvent(_startEvent)

      handleMouseWheel(customWheelEvent(event))

      scope.dispatchEvent(_endEvent)
    }

    function customWheelEvent (event) {
      const mode = event.deltaMode

      // minimal wheel event altered to meet delta-zoom demand
      const newEvent = {
        clientX: event.clientX,
        clientY: event.clientY,
        deltaY: event.deltaY
      }

      switch (mode) {
        case 1: // LINE_MODE
          newEvent.deltaY *= 16
          break

        case 2: // PAGE_MODE
          newEvent.deltaY *= 100
          break
      }

      // detect if event was triggered by pinching
      if (event.ctrlKey && !controlActive) {
        newEvent.deltaY *= 10
      }

      return newEvent
    }

    function interceptControlDown (event) {
      if (event.key === 'Control') {
        controlActive = true

        const document = scope.domElement.getRootNode() // offscreen canvas compatibility

        document.addEventListener('keyup', interceptControlUp, { passive: true, capture: true })
      }
    }

    function interceptControlUp (event) {
      if (event.key === 'Control') {
        controlActive = false

        const document = scope.domElement.getRootNode() // offscreen canvas compatibility

        document.removeEventListener('keyup', interceptControlUp, { passive: true, capture: true })
      }
    }

    function onKeyDown (event) {
      if (scope.enabled === false) return

      handleKeyDown(event)
    }

    function onTouchStart (event) {
      trackPointer(event)

      switch (pointers.length) {
        case 1:

          switch (scope.touches.ONE) {
            case TOUCH.ROTATE:

              if (scope.enableRotate === false) return

              handleTouchStartRotate(event)

              state = STATE.TOUCH_ROTATE

              break

            case TOUCH.PAN:

              if (scope.enablePan === false) return

              handleTouchStartPan(event)

              state = STATE.TOUCH_PAN

              break

            default:

              state = STATE.NONE
          }

          break

        case 2:

          switch (scope.touches.TWO) {
            case TOUCH.DOLLY_PAN:

              if (scope.enableZoom === false && scope.enablePan === false) return

              handleTouchStartDollyPan(event)

              state = STATE.TOUCH_DOLLY_PAN

              break

            case TOUCH.DOLLY_ROTATE:

              if (scope.enableZoom === false && scope.enableRotate === false) return

              handleTouchStartDollyRotate(event)

              state = STATE.TOUCH_DOLLY_ROTATE

              break

            default:

              state = STATE.NONE
          }

          break

        default:

          state = STATE.NONE
      }

      if (state !== STATE.NONE) {
        scope.dispatchEvent(_startEvent)
      }
    }

    function onTouchMove (event) {
      trackPointer(event)

      switch (state) {
        case STATE.TOUCH_ROTATE:

          if (scope.enableRotate === false) return

          handleTouchMoveRotate(event)

          scope.update()

          break

        case STATE.TOUCH_PAN:

          if (scope.enablePan === false) return

          handleTouchMovePan(event)

          scope.update()

          break

        case STATE.TOUCH_DOLLY_PAN:

          if (scope.enableZoom === false && scope.enablePan === false) return

          handleTouchMoveDollyPan(event)

          scope.update()

          break

        case STATE.TOUCH_DOLLY_ROTATE:

          if (scope.enableZoom === false && scope.enableRotate === false) return

          handleTouchMoveDollyRotate(event)

          scope.update()

          break

        default:

          state = STATE.NONE
      }
    }

    function onContextMenu (event) {
      if (scope.enabled === false) return

      event.preventDefault()
    }

    function addPointer (event) {
      pointers.push(event.pointerId)
    }

    function removePointer (event) {
      delete pointerPositions[event.pointerId]

      for (let i = 0; i < pointers.length; i++) {
        if (pointers[i] === event.pointerId) {
          pointers.splice(i, 1)
          return
        }
      }
    }

    function isTrackingPointer (event) {
      for (let i = 0; i < pointers.length; i++) {
        if (pointers[i] === event.pointerId) return true
      }

      return false
    }

    function trackPointer (event) {
      let position = pointerPositions[event.pointerId]

      if (position === undefined) {
        position = new Vector2()
        pointerPositions[event.pointerId] = position
      }

      position.set(event.pageX, event.pageY)
    }

    function getSecondPointerPosition (event) {
      const pointerId = (event.pointerId === pointers[0]) ? pointers[1] : pointers[0]

      return pointerPositions[pointerId]
    }

    //

    scope.domElement.addEventListener('contextmenu', onContextMenu)

    scope.domElement.addEventListener('pointerdown', onPointerDown)
    scope.domElement.addEventListener('pointercancel', onPointerUp)
    scope.domElement.addEventListener('wheel', onMouseWheel, { passive: false })

    const document = scope.domElement.getRootNode() // offscreen canvas compatibility

    document.addEventListener('keydown', interceptControlDown, { passive: true, capture: true })

    // force an update at start

    this.update()
  }
}

export { OrbitControls }
</file>

<file path="app/javascript/src/window_extensions.d.ts">
declare module 'WindowExtensions' {
  global {
    interface Window {
      i18n
      Stimulus
    }
  }
}
</file>

<file path="app/javascript/altcha_worker.ts">
import 'altcha/worker'
</file>

<file path="app/javascript/application.ts">
// Turbo and Stimulus
import '@hotwired/turbo-rails'
import 'controllers/index'

import Rails from '@rails/ujs'
import 'masonry-layout'

import 'altcha/external'
import 'altcha/i18n/cs'
import 'altcha/i18n/de'
import 'altcha/i18n/en'
import 'altcha/i18n/es-es'
import 'altcha/i18n/fr-fr'
import 'altcha/i18n/ja'
import 'altcha/i18n/nl'
import 'altcha/i18n/pl'

document.addEventListener('DOMContentLoaded', () => {
  // Legacy Rails UJS
  Rails.start()
})
</file>

<file path="app/javascript/offscreen_renderer.ts">
import * as Comlink from 'comlink'
import 'src/comlink_event_handler'

import * as THREE from 'three'
import { OBJLoader } from 'three/addons/loaders/OBJLoader.js'
import { STLLoader } from 'three/addons/loaders/STLLoader.js'
import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js'
import { DRACOLoader } from 'three/addons/loaders/DRACOLoader.js'
import { ThreeMFLoader } from 'threejs-webworker-3mf-loader'
import { PLYLoader } from 'three/addons/loaders/PLYLoader.js'
import { TDSLoader } from 'three/addons/loaders/TDSLoader.js'
import { FBXLoader } from 'three/addons/loaders/FBXLoader.js'
import { GCodeLoader } from 'three/addons/loaders/GCodeLoader.js'
import { LDrawLoader } from 'three/addons/loaders/LDrawLoader.js'

import { OrbitControls } from 'src/orbit_controls.js'
import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js'
import { SSAOPass } from 'three/addons/postprocessing/SSAOPass.js'
import { RenderPass } from 'three/addons/postprocessing/RenderPass.js'
import { OutputPass } from 'three/addons/postprocessing/OutputPass.js'
import { CanvasProxy } from 'src/canvas_proxy'
import { LDrawConditionalLineMaterial } from 'three/addons/materials/LDrawConditionalLineMaterial.js'

const loaders = {
  '3mf': ThreeMFLoader,
  drc: DRACOLoader,
  gltf: GLTFLoader,
  glb: GLTFLoader,
  obj: OBJLoader,
  stl: STLLoader,
  ply: PLYLoader,
  '3ds': TDSLoader,
  fbx: FBXLoader,
  gcode: GCodeLoader,
  ldr: LDrawLoader,
  mpd: LDrawLoader
}

export class OffscreenRenderer {
  canvas: CanvasProxy
  renderer: THREE.WebGLRenderer
  settings: DOMStringMap
  scene: THREE.Scene
  composer: THREE.EffectComposer
  camera: THREE.PerspectiveCamera
  controls: OrbitControls
  gridHelper: THREE.GridHelper
  ready: boolean = false

  cbLoadComplete: any = null
  cbLoadProgress: any = null
  cbLoadError: any = null

  constructor (
    canvas: HTMLCanvasElement,
    settings: DOMStringMap
  ) {
    this.canvas = new CanvasProxy(canvas)
    this.renderer = new THREE.WebGLRenderer({ canvas: this.canvas.realCanvas })
    this.settings = settings
    this.setup()
  }

  handleEvent (event): void {
    this.canvas.handleEvent(event)
  }

  setup (): void {
    this.scene = new THREE.Scene()
    this.scene.background = new THREE.Color(this.settings.backgroundColour ?? '#000000')
    this.camera = new THREE.PerspectiveCamera(
      45,
      this.canvas.clientWidth / this.canvas.clientHeight,
      0.1,
      100000
    )
    this.controls = new OrbitControls(this.camera, this.canvas as any)
    this.controls.enableDamping = true
    this.controls.enablePan = this.controls.enableZoom = (this.settings.enablePanZoom === 'true')
    this.controls.keyPanSpeed = 35
    this.controls.keyRotateFactor = 10
    this.controls.listenToKeyEvents(this.canvas as unknown as HTMLElement)
    // Add lighting
    const gridSizeX = parseInt(this.settings.gridSizeX ?? '10', 10)
    const gridSizeZ = parseInt(this.settings.gridSizeZ ?? '10', 10)
    this.scene.add(new THREE.HemisphereLight(0xffffff, 0xcccccc))
    const light = new THREE.DirectionalLight()
    light.position.set(gridSizeX, 50, gridSizeZ)
    this.scene.add(light)
    const light2 = new THREE.DirectionalLight()
    light2.position.set(-gridSizeX, 50, gridSizeZ)
    this.scene.add(light2)
    // Set up render passes
    this.composer = new EffectComposer(this.renderer)
    this.composer.addPass(new RenderPass(this.scene, this.camera))
    if (this.settings.renderStyle === 'shadowed') {
      const ssaoPass = new SSAOPass(this.scene, this.camera)
      ssaoPass.output = SSAOPass.OUTPUT.Default
      ssaoPass.minDistance = 0
      ssaoPass.maxDistance = 50
      this.composer.addPass(ssaoPass)
    }
    this.composer.addPass(new OutputPass())
  }

  async load (cbLoadComplete, cbLoadProgress, cbLoadError): Promise<void> {
    // Store callbacks
    this.cbLoadComplete = cbLoadComplete
    this.cbLoadProgress = cbLoadProgress
    this.cbLoadError = cbLoadError
    // Load
    const LoaderClass: THREE.Loader | null = loaders[this.settings.format as string]
    if (LoaderClass !== null) {
      // Create loader
      const loader = new LoaderClass()
      // Set up DRACO loader for GLTF
      if (LoaderClass === GLTFLoader) {
        const dracoLoader = new DRACOLoader()
        dracoLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.7/')
        loader.setDRACOLoader(dracoLoader)
      } else if (LoaderClass === DRACOLoader) {
        loader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.7/')
      } else if (LoaderClass === LDrawLoader) {
        loader.setConditionalLineMaterial(LDrawConditionalLineMaterial)
        loader.setPartsLibraryPath('https://raw.githubusercontent.com/gkjohnson/ldraw-parts-library/master/complete/ldraw/')
        await loader.preloadMaterials('https://raw.githubusercontent.com/gkjohnson/ldraw-parts-library/master/complete/ldraw/LDConfig.ldr')
      }
      // Load
      loader.load(
        this.settings.previewUrl ?? '',
        this.onLoad.bind(this),
        this.onLoadProgress.bind(this),
        this.onLoadError.bind(this)
      )
    }
  }

  onLoadProgress (xhr): void {
    const percentage = Math.floor((xhr.loaded / xhr.total) * 100)
    this.cbLoadProgress(percentage)
  }

  onLoad (model): void {
    let material = new THREE.MeshLambertMaterial({
      flatShading: true,
      color: (this.settings.objectColour ?? '#cccccc')
    })

    switch (this.settings.renderStyle) {
      case 'normals':
        material = new THREE.MeshNormalMaterial({
          flatShading: true
        })
        break
    }
    // find mesh
    let object: THREE.Mesh | THREE.Group | null = null
    if (model.type === 'BufferGeometry') {
      object = new THREE.Mesh(model, material)
    } else if ('scene' in model) {
      object = model.scene
    } else {
      object = model
    }
    // Set material
    if (object == null) { return }
    const overwriteMaterials = this.settings.renderStyle !== 'original'
    object.traverse(function (node: THREE.Mesh) {
      if (node.isMesh === true) {
        if (node.material == null || overwriteMaterials) {
          node.material = material
        }
      }
    })
    // Transform coordinate system and rescale for LDraw
    if (this.settings.format === 'ldr' || this.settings.format === 'mpd') {
      const coordSystemTransform = new THREE.Matrix4()
      coordSystemTransform.set(
        0.4,
        0,
        0,
        0, // x -> x
        0,
        -0.4,
        0,
        0, // y -> -y
        0,
        0,
        -0.4,
        0, // z -> -z
        0,
        0,
        0,
        1
      )
      object.applyMatrix4(coordSystemTransform)
    }
    // Transform to screen coords from print
    if (this.settings.yUp !== 'true') {
      const coordSystemTransform = new THREE.Matrix4()
      coordSystemTransform.set(
        1,
        0,
        0,
        0, // x -> x
        0,
        0,
        1,
        0, // z -> y
        0,
        -1,
        0,
        0, // y -> -z
        0,
        0,
        0,
        1
      )
      object.applyMatrix4(coordSystemTransform)
    }
    // Calculate bounding volumes
    const bbox = new THREE.Box3().setFromObject(object)
    const centre = new THREE.Vector3()
    bbox.getCenter(centre)
    const bsphere = new THREE.Sphere()
    bbox.getBoundingSphere(bsphere)
    const modelHeight = bbox.max.y - bbox.min.y
    // Centre the model
    object.position.set(-centre.x, -bbox.min.y, -centre.z)

    // Configure camera
    this.camera.position.z = this.camera.position.x = bsphere.radius * 1.63
    this.camera.position.y = bsphere.radius * 0.75
    this.controls.target.set(0, modelHeight / 2, 0)
    this.scene.add(object)
    // Add the grid
    if (this.settings.showGrid === 'true') {
      const gridSizeX = parseInt(this.settings.gridSizeX ?? '10', 10)
      // TODO: use grid size Z here, see #834
      this.gridHelper = new THREE.GridHelper(
        gridSizeX,
        gridSizeX / 10,
        'magenta',
        'cyan'
      )
      this.scene.add(this.gridHelper)
    }

    // Let's go!
    this.ready = true
    this.render()

    // Listen for control updates and re-render
    this.controls.addEventListener('change', this.render.bind(this))

    // Report load complete
    this.cbLoadComplete()
  }

  onLoadError (e): void {
    console.log(e)
    this.cbLoadError()
  }

  onResize (width, height, pixelRatio): void {
    this.canvas.resize(width, height)
    this.renderer.setSize(width, height, false)
    this.composer.setSize(width, height, false)
    // Update camera
    this.camera.aspect = width / height
    this.camera.updateProjectionMatrix()
    // Update pixel ratio
    this.renderer.setPixelRatio(pixelRatio)
    this.composer.setPixelRatio(pixelRatio)
    // Render!
    this.render()
  }

  render (): void {
    setTimeout(() => {
      requestAnimationFrame(this.onAnimationFrame.bind(this))
    }, 16) // ms per 60fps frame, near enough
  }

  onAnimationFrame (): void {
    if (!this.ready || this.canvas === null || this.renderer === null) {
      return
    }
    // Update controls to allow animation of damping
    this.controls.update()
    // Render
    this.composer.render()
  }

  cleanup (): void {
    if (typeof this.scene !== 'undefined' && this.scene !== null) {
      this.scene.traverse(function (node) {
        if (node instanceof THREE.Mesh) {
          node.geometry.dispose()
          node.material.dispose()
        }
      })
    }
  }
}

Comlink.expose(OffscreenRenderer)
</file>

<file path="app/jobs/activity/collection_published_job.rb">
class Activity::CollectionPublishedJob < ApplicationJob
  queue_as :default
  unique :until_executed

  def perform(collection_id)
    collection = Collection.find(collection_id)
    Comment.create!(
      system: true,
      commentable: collection.creator || collection,
      commenter: model.creator,
      comment: I18n.t("jobs.activity.collection_published.comment", # rubocop:disable I18n/RailsI18n/DecorateStringFormattingUsingInterpolation
        name: collection.name,
        url: collection.federails_actor.profile_url)
    )
  end
end
</file>

<file path="app/jobs/activity/model_collected_job.rb">
class Activity::ModelCollectedJob < ApplicationJob
  queue_as :default
  unique :until_executed

  def perform(model_id, collection_id)
    model = Model.find(model_id)
    collection = Collection.find(collection_id)
    Comment.create!(
      system: true,
      commentable: model,
      commenter: model.creator || collection || model,
      comment: I18n.t("jobs.activity.model_collected.comment", # rubocop:disable I18n/RailsI18n/DecorateStringFormattingUsingInterpolation
        model_name: model.name,
        model_url: model.federails_actor.profile_url,
        collection_name: collection.name,
        collection_url: collection.federails_actor.profile_url),
      sensitive: model.sensitive
    )
  end
end
</file>

<file path="app/jobs/activity/model_published_job.rb">
class Activity::ModelPublishedJob < ApplicationJob
  queue_as :default
  unique :until_executed

  def perform(model_id)
    model = Model.find(model_id)
    Comment.create!(
      system: true,
      commentable: model,
      commenter: model.creator || model,
      comment: I18n.t("jobs.activity.model_published.comment", # rubocop:disable I18n/RailsI18n/DecorateStringFormattingUsingInterpolation
        name: model.name,
        url: model.federails_actor.profile_url),
      sensitive: model.sensitive
    )
  end
end
</file>

<file path="app/jobs/activity/model_updated_job.rb">
class Activity::ModelUpdatedJob < ApplicationJob
  queue_as :default
  unique :until_executed

  def perform(model_id)
    model = Model.find(model_id)
    Comment.create!(
      system: true,
      commentable: model,
      commenter: model.creator || model,
      comment: I18n.t("jobs.activity.updated_model.comment", # rubocop:disable I18n/RailsI18n/DecorateStringFormattingUsingInterpolation
        name: model.name,
        url: model.federails_actor.profile_url),
      sensitive: model.sensitive
    )
  end
end
</file>

<file path="app/jobs/analysis/analyse_model_file_job.rb">
require "string/similarity"

class Analysis::AnalyseModelFileJob < ApplicationJob
  queue_as :low
  unique :until_executed

  def perform(file_id)
    file = ModelFile.find(file_id)
    # Don't run analysis if the file is missing
    # The Problem is raised elsewhere.
    return if !file.exists_on_storage?
    # If the file is modified, or we're lacking metadata
    status[:step] = "jobs.analysis.analyse_model_file.file_statistics" # i18n-tasks-use t('jobs.analysis.analyse_model_file.file_statistics')
    if file.file_last_modified > file.updated_at || file.digest.nil?
      # Store updated file metadata
      file.update!(digest: file.calculate_digest)
      # If the digest has changed, queue up detailed geometric mesh analysis
      file.analyse_geometry_later if file.is_3d_model? && file.digest_previously_changed?
    end
    # Raise problems for empty files
    Problem.create_or_clear file, :empty, (file.size == 0)
    status[:step] = "jobs.analysis.analyse_model_file.matching" # i18n-tasks-use t('jobs.analysis.analyse_model_file.matching')
    # Match supported files
    match_with_supported_file(file)
    status[:step] = "jobs.analysis.analyse_model_file.detect_ineffiency" # i18n-tasks-use t('jobs.analysis.analyse_model_file.detect_ineffiency')
    # Detect inefficient file formats
    message = inefficiency_problem(file)
    Problem.create_or_clear(
      file,
      :inefficient,
      !message.nil?,
      note: message
    )
    status[:step] = "jobs.analysis.analyse_model_file.detect_duplicates" # i18n-tasks-use t('jobs.analysis.analyse_model_file.detect_duplicates')
    # Detect duplicates
    Problem.create_or_clear(
      file,
      :duplicate,
      file.duplicate?
    )
  end

  def match_with_supported_file(file)
    # If this is a supported file or already matched, don't do anything
    return if file.presupported || file.presupported_version
    # Otherwise, find presupported files in the same model
    # Build list of files with normalised names
    matches = file.model.model_files.presupported.map { |s|
      # Normalize filename
      human = s.name.humanize.downcase
      # Normalize name of this file
      normed = stopword_filter.filter(file.name.humanize.downcase.split)
      # Remove stop words
      human = stopword_filter.filter(human.split)
      # Measure distance from this filename
      d = String::Similarity.cosine(normed.join(" "), human.join(" "))
      [d, s]
    }.select { |it| it[0] > 0.95 }
    best = case matches.length
    when 0
      nil
    when 1
      matches.first[1]
    else
      same_format = matches.select { |it| it[1].mime_type === file.mime_type }
      matches = same_format unless same_format.empty?
      matches.max_by { |it| it[0] }[1]
    end
    file.update(presupported_version: best)
  end

  def inefficiency_problem(file)
    return "ASCII STL" if (file.extension === "stl") && (file.head(6) === "solid ")
    return "Wavefront OBJ" if file.extension === "obj"
    return "ASCII PLY" if (file.extension === "ply") && (file.head(16) === "ply\rformat ascii")
    nil
  end

  private

  def stopword_filter
    # Create stopwords filter
    @@filter ||= Stopwords::Snowball::Filter.new(
      SiteSettings.model_tags_stop_words_locale,
      SiteSettings.model_tags_custom_stop_words + ModelFile::SUPPORT_KEYWORDS
    )
  end
end
</file>

<file path="app/jobs/analysis/file_conversion_job.rb">
require "string/similarity"

class UnsupportedFormatError < StandardError
end

class NonManifoldError < StandardError
end

class Analysis::FileConversionJob < ApplicationJob
  queue_as :performance
  sidekiq_options retry: false
  unique :until_executed

  def perform(file_id, output_format)
    # Get model
    file = ModelFile.find(file_id)
    # Can we output this format?
    raise UnsupportedFormatError unless SupportedMimeTypes.can_export?(output_format) || !file.loadable?
    exporter = nil
    extension = nil
    status[:step] = "jobs.analysis.file_conversion.loading_mesh" # i18n-tasks-use t('jobs.analysis.file_conversion.loading_mesh')
    case output_format
    when :threemf
      raise NonManifoldError.new if !file.mesh.manifold?
      extension = "3mf"
      exporter = Mittsu::ThreeMFExporter.new
    end
    if exporter
      status[:step] = "jobs.analysis.file_conversion.exporting" # i18n-tasks-use t('jobs.analysis.file_conversion.exporting')
      new_file = ModelFile.new(
        model: file.model,
        filename: file.filename.gsub(".#{file.extension}", ".#{extension}")
      )
      dedup = 0
      while new_file.exists_on_storage?
        dedup += 1
        new_file.filename = file.filename.gsub(".#{file.extension}", "-#{dedup}.#{extension}")
      end
      # Save the actual file in new format
      Tempfile.create do |outfile|
        exporter.export(file.mesh, outfile.path)
        new_file.attachment = outfile
      end
      # Store record in database
      new_file.save
      # Queue up file scan
      new_file.analyse_later
    end
  rescue NonManifoldError
    # Log non-manifold error as a problem, and absorb error so we don't retry
    Problem.create_or_clear(
      file,
      :non_manifold,
      true
    )
  ensure
    if file
      # Mark inefficient problem resolution as no longer in progress, if it's set
      file.problems.where(category: :inefficient, in_progress: true).find_each do |it|
        it.update(in_progress: false)
      end
    end
  end
end
</file>

<file path="app/jobs/analysis/geometric_analysis_job.rb">
class MeshLoadError < StandardError
end

class Analysis::GeometricAnalysisJob < ApplicationJob
  queue_as :performance
  sidekiq_options retry: false
  unique :until_executed

  def perform(file_id)
    # Get model
    file = ModelFile.find(file_id)
    return unless file.loadable?
    if SiteSettings.analyse_manifold
      status[:step] = "jobs.analysis.geometric_analysis.loading_mesh" # i18n-tasks-use t('jobs.analysis.geometric_analysis.loading_mesh')
      # Get mesh
      mesh = file.mesh
      if mesh
        status[:step] = "jobs.analysis.geometric_analysis.manifold_check" # i18n-tasks-use t('jobs.analysis.geometric_analysis.manifold_check')
        # Check for manifold mesh
        manifold = mesh.manifold?
        Problem.create_or_clear(
          file,
          :non_manifold,
          !manifold
        )
        # Temporarily disabled for release
        # # If the mesh is manifold, we can check if it's inside out
        # if manifold
        # i18n-tasks-use t('jobs.analysis.geometric_analysis.direction_check')
        # status[:step] = "jobs.analysis.geometric_analysis.direction_check"
        #   Problem.create_or_clear(
        #     file,
        #     :inside_out,
        #     !mesh.solid?
        #   )
        # end
      else
        raise MeshLoadError.new
      end
    end
  end
end
</file>

<file path="app/jobs/scan/library/create_model_from_path_job.rb">
class Scan::Library::CreateModelFromPathJob < ApplicationJob
  queue_as :scan
  unique :until_executed

  def perform(library_id, path, include_all_subfolders: false)
    library = Library.find(library_id)
    return if library.nil?
    new_model_properties = {
      # Initial best guess at name, this might be overwritten later by path parser
      name: File.basename(path).humanize.tr("+", " ").careful_titleize,
      tag_list: Array(SiteSettings.model_tags_auto_tag_new)
    }
    model = library.models.create_with(new_model_properties).find_or_create_by(path: path.trim_path_separators)
    if model.valid?
      model.add_new_files_later(include_all_subfolders: include_all_subfolders)
    else
      Rails.logger.error(model.inspect)
      Rails.logger.error(model.errors.full_messages.inspect)
    end
  end
end
</file>

<file path="app/jobs/scan/library/detect_filesystem_changes_job.rb">
class Scan::Library::DetectFilesystemChangesJob < ApplicationJob
  queue_as :scan
  unique :until_executed

  # Find all files in the library that we might need to look at
  def filenames_on_disk(library)
    library.list_files(File.join("**", ApplicationJob.file_pattern))
  end

  # Get a list of all the existing filenames
  def known_filenames(library)
    library.model_files.without_special.reload.map(&:path_within_library)
  end

  def filter_out_common_subfolders(folders)
    matcher = /\/(#{ApplicationJob.common_subfolders.keys.join("|")})$/i
    folders.map { |f| f.gsub(matcher, "") }.uniq
  end

  def folders_with_changes(library)
    # Make a list of changed filenames using set XOR
    status[:step] = "jobs.scan.detect_filesystem_changes.building_filename_list" # i18n-tasks-use t('jobs.scan.detect_filesystem_changes.building_filename_list')
    changes = (known_filenames(library).to_set ^ filenames_on_disk(library)).to_a
    # Discard thingiverse false-positives - sometimes they add images that have model extensions.
    patterns = SupportedMimeTypes.model_extensions.map { |it| %r{images/[^/]*\.#{it}} }
    changes = changes.reject { |f| patterns.any? { |it| f =~ it } }
    # Make a list of library-relative folders with changed files
    status[:step] = "jobs.scan.detect_filesystem_changes.building_folder_list" # i18n-tasks-use t('jobs.scan.detect_filesystem_changes.building_folder_list')
    folders_with_changes = changes.map { |f| File.dirname(f) }.uniq
    folders_with_changes = filter_out_common_subfolders(folders_with_changes)
    # Ignore root folder, however specified
    folders_with_changes.delete("/")
    folders_with_changes.delete(".")
    folders_with_changes.delete("./")
    # Trim out anything left blank and we're done
    folders_with_changes.compact_blank
  end

  def perform(library_id)
    library = Library.find(library_id)
    return if library.nil?
    return if Problem.create_or_clear(library, :missing, !library.storage_exists?)
    # For each folder in the library with a change, find or create a model, then scan it
    status[:step] = "jobs.scan.detect_filesystem_changes.creating_models" # i18n-tasks-use t('jobs.scan.detect_filesystem_changes.creating_models')
    folders_with_changes(library).each { |path| library.create_model_from_path_later(path) }
  end
end
</file>

<file path="app/jobs/scan/model/add_new_files_job.rb">
require "shellwords"

class Scan::Model::AddNewFilesJob < ApplicationJob
  queue_as :scan
  unique :until_executed

  def file_list(model_path, library, include_all_subfolders: false)
    glob = include_all_subfolders ?
      [File.join(Shellwords.escape(model_path), "**", ApplicationJob.file_pattern)] :
      [File.join(Shellwords.escape(model_path), ApplicationJob.file_pattern)] +
        ApplicationJob.common_subfolders.map do |name, pattern|
          File.join(
            Shellwords.escape(model_path),
            ApplicationJob.case_insensitive_glob_string(name),
            pattern
          )
        end
    library.list_files(glob) + library.list_files(File.join(Shellwords.escape(model_path), "datapackage.json"))
  end

  def perform(model_id, include_all_subfolders: false)
    model = Model.find(model_id)
    return if model.remote?
    return if Problem.create_or_clear(model, :missing, !model.exists_on_storage?)
    # For each file in the model, create a file object
    file_list(model.path, model.library, include_all_subfolders: include_all_subfolders).each do |filename|
      # Create the file
      file = model.model_files.find_or_create_by(filename: filename.gsub(model.path + "/", ""))
      file.parse_metadata_later if file.valid? && file.filename != "datapackage.json"
    end
    model.parse_metadata_later
  end
end
</file>

<file path="app/jobs/scan/model/check_for_problems_job.rb">
class Scan::Model::CheckForProblemsJob < ApplicationJob
  queue_as :scan
  unique :until_executed

  def perform(model_id)
    model = Model.find(model_id)
    return if model.remote?
    Problem.create_or_clear(model, :missing, !model.exists_on_storage?)
    Problem.create_or_clear model, :empty, (model.model_files.count == 0)
    Problem.create_or_clear model, :nesting, model.contains_other_models?
    Problem.create_or_clear model, :no_image, model.image_files.empty?
    Problem.create_or_clear model, :no_3d_model, model.three_d_files.empty?
    Problem.create_or_clear model, :no_license, model.license.blank?
    Problem.create_or_clear model, :no_links, model.links.empty?
    Problem.create_or_clear model, :no_creator, model.creator.nil?
    Problem.create_or_clear model, :no_tags, model.tag_list.empty?
    model.model_files.each do |f|
      Problem.create_or_clear(f, :missing, !f.exists_on_storage?)
    end
  end
end
</file>

<file path="app/jobs/scan/model/parse_metadata_job.rb">
class Scan::Model::ParseMetadataJob < ApplicationJob
  queue_as :scan
  unique :until_executed

  README_FILES = [
    "readme",
    "readme.md",
    "readme.txt"
  ]

  def perform(model_id)
    model = Model.find(model_id)
    return if model.remote?
    options = {
      # Some things are preserved if already set
      creator: model.creator,
      collection: model.collection,
      preview_file: model.preview_file
    }.compact
    # Set preview file
    options.reverse_merge! identify_preview_file(model)
    # Set path template attributes
    options.reverse_merge! attributes_from_path_template(model.path)
    # Build combined tag list
    tag_list =
      model.tag_list +
      tags_from_directory_name(model.path) +
      tags_from_path_template(model.path)
    # Load from datapackage
    if (datapackage_content = model.datapackage_content)
      data = DataPackage::ModelDeserializer.new(datapackage_content).deserialize
      # match creator
      creator_data = data.delete(:creator)
      if creator_data
        data[:creator] = creator_data[:id] ? Creator.find(creator_data.delete(:id)) :
          find_or_create_from_path_component(Creator, creator_data[:name])
        data[:creator].update(creator_data)
      end
      # match collection
      collection_data = data.delete(:collection)
      if collection_data
        data[:collection] = collection_data[:id] ? Collection.find(collection_data.delete(:id)) :
          find_or_create_from_path_component(Collection, collection_data[:name])
        data[:collection].update(collection_data)
      end
      # match preview file
      data[:preview_file] = model.model_files.find_by(filename: data[:preview_file])
      # Set file data
      data.delete(:model_files)&.each do |file|
        model.model_files.find_by(filename: file.delete(:filename))&.update(file)
      end
      # Merge in to main lists
      tag_list.concat data.delete(:tag_list) if data.key?(:tag_list)
      options.merge! data.compact_blank
    end
    # Load information from READMEs
    options.compact_blank!
    options.merge! attributes_from_readme(model.model_files.find_by(filename_lower: README_FILES))
    # Filter stop words
    options[:tag_list] = remove_stop_words(tag_list.uniq)
    # Remove data that shouldn't be overwritten
    options.delete(:notes) if model.notes.present?
    # Store new metadata
    model.update!(options.compact_blank!)
  end

  private

  def identify_preview_file(model)
    {
      preview_file: model.model_files.min_by { |it| preview_priority(it) }
    }
  end

  def preview_priority(file)
    return 0 if file.is_image?
    return 1 if file.is_renderable?
    100
  end

  def tags_from_directory_name(path)
    return [] unless SiteSettings.model_tags_tag_model_directory_name
    File.split(path).last.split(/[\W_+-]/).filter { |it| it.length > 1 }
  end

  def attributes_from_path_template(path)
    return {} unless SiteSettings.parse_metadata_from_path && SiteSettings.model_path_template
    components = PathParserService.new(SiteSettings.model_path_template, path).call
    {
      creator: find_or_create_from_path_component(Creator, components[:creator]),
      collection: find_or_create_from_path_component(Collection, components[:collection]),
      name: to_human_name(components[:model_name])
    }.compact
  end

  ASCII_ART_THINGIVERSE_README = /(?<url>https?:\/\/www\.thingiverse\.com\/thing:[0-9]+)\n(?<title>.*) by (?<creator>.*) is licensed under the (?<license_name>.*) license\.\n(?<license_url>https?:\/\/.*)\n\n# Summary\n\n(?<summary>.*)/
  SIMPLE_THINGIVERSE_README = /(?<title>.*) by (?<creator>.*) on Thingiverse: (?<url>https?:\/\/www\.thingiverse\.com\/thing:[0-9]+)/

  def attributes_from_readme(file)
    return {} if file.nil?
    content = file.attachment.read.force_encoding(Encoding::UTF_8)
    case content
    when SIMPLE_THINGIVERSE_README
      attributes_from_simple_thingiverse_readme(content)
    when ASCII_ART_THINGIVERSE_README
      attributes_from_ascii_art_thingiverse_readme(content)
    else
      attributes_from_generic_readme(content)
    end
  end

  def attributes_from_generic_readme(content)
    {
      notes: content
    }
  end

  def attributes_from_ascii_art_thingiverse_readme(content)
    matches = content.match ASCII_ART_THINGIVERSE_README
    {
      name: matches[:title],
      notes: matches[:summary],
      links_attributes: [
        {url: matches[:url]}
      ],
      creator: find_or_create_from_path_component(Creator, matches[:creator]),
      license: license_id_from_url(matches[:license_url])
    }.compact
  end

  def attributes_from_simple_thingiverse_readme(content)
    matches = content.match SIMPLE_THINGIVERSE_README
    {
      name: matches[:title],
      links_attributes: [
        {url: matches[:url]}
      ],
      creator: find_or_create_from_path_component(Creator, matches[:creator])
    }
  end

  def license_id_from_url(url)
    Spdx.licenses.find { |id, details| details["seeAlso"].map { |it| it.gsub("legalcode", "") }.include?(url.gsub("http:", "https:")) }&.dig(0)
  end

  def tags_from_path_template(path)
    return [] unless SiteSettings.parse_metadata_from_path && SiteSettings.model_path_template
    components = PathParserService.new(SiteSettings.model_path_template, path).call
    tags = components[:tags] ? components[:tags].map { |tag| tag.titleize.downcase } : []
    tags.delete("@untagged")
    tags
  end

  def remove_stop_words(words)
    return words if !SiteSettings.model_tags_filter_stop_words
    stopword_filter = Stopwords::Snowball::Filter.new(
      SiteSettings.model_tags_stop_words_locale,
      SiteSettings.model_tags_custom_stop_words
    )
    stopword_filter.filter(words)
  end

  def find_or_create_from_path_component(klass, path_component)
    return unless path_component
    klass.find_by(slug: path_component) ||
      klass.create_with(slug: path_component.parameterize).find_or_create_by(
        name: to_human_name(path_component)
      )
  end

  def to_human_name(str)
    str&.humanize&.tr("+", " ")&.careful_titleize
  end
end
</file>

<file path="app/jobs/scan/model_file/parse_metadata_job.rb">
class Scan::ModelFile::ParseMetadataJob < ApplicationJob
  queue_as :scan
  unique :until_executed

  def perform(file_id)
    file = ModelFile.find(file_id)
    # Refresh shrine metadata
    file.attachment_attacher.refresh_metadata!
    # Get metadata for specific types
    params = if file.is_image?
      image_metadata(file)
    elsif file.is_3d_model?
      model_metadata(file)
    end
    # Store updated data
    file.update!(params.compact) if params
    # Queue up deeper analysis job
    file.analyse_later
  end

  def image_metadata(file)
    {
      previewable: true
    }
  end

  def model_metadata(file)
    {
      presupported: presupported?(file)
    }
  end

  def presupported?(file)
    elements = file.path_within_library.split(/[[:punct:]]|[[:space:]]/).map(&:downcase)
    elements.any? { |it| ModelFile::SUPPORT_KEYWORDS.include?(it) }
  end
end
</file>

<file path="app/jobs/scan/check_all_job.rb">
class Scan::CheckAllJob < ApplicationJob
  queue_as :scan
  unique :until_executed

  def perform
    # Remove orphan problems
    status[:step] = "jobs.scan.check_all.removing_orphaned_problems" # i18n-tasks-use t('jobs.scan.check_all.removing_orphaned_problems')
    Problem.including_ignored.find_each do |problem|
      problem.destroy if problem.problematic.nil?
    end
    # Check all models
    status[:step] = "jobs.scan.check_all.queueing_model_checks" # i18n-tasks-use t('jobs.scan.check_all.queueing_model_checks')
    Model.find_each(&:check_later)
  end
end
</file>

<file path="app/jobs/scan/check_model_job.rb">
class Scan::CheckModelJob < ApplicationJob
  queue_as :scan
  unique :until_executed

  def perform(model_id)
    model = Model.find(model_id)
    # Scan for new files (runs integrity check automatically)
    model.add_new_files_later(include_all_subfolders: !model.contains_other_models?)
    # Rerun analysis job on individual files
    model.model_files.without_special.each do |file|
      file.analyse_later
    end
  end
end
</file>

<file path="app/jobs/upgrade/backfill_data_packages.rb">
# frozen_string_literal: true

class Upgrade::BackfillDataPackages < ApplicationJob
  queue_as :low
  unique :until_executed

  def perform
    # Find models that don't have a datapackage and enqueue their generation
    Model.where.not(
      id: ModelFile.where(filename: "datapackage.json").select(:model_id)
    ).each do |model|
      model.write_datapackage_later
    end
  end
end
</file>

<file path="app/jobs/upgrade/disambiguate_usernames_job.rb">
# frozen_string_literal: true

class Upgrade::DisambiguateUsernamesJob < ApplicationJob
  queue_as :low
  unique :until_executed

  def perform
    duplicates = duplicated_usernames
    return if duplicates.empty?
    suffix = 0
    FederailsCommon::FEDIVERSE_USERNAMES.each_pair do |model_name, attr|
      finder_scope(model_name).where(attr => duplicates).find_each do |it|
        it.validate
        if it.errors.of_kind?(attr, :taken)
          suffix += 1
          new_value = "#{it.send(attr)}#{suffix}"
          it.update_attribute attr, new_value # rubocop:disable Rails/SkipsModelValidations
        end
      end
    end
  end

  private

  def duplicated_usernames
    FederailsCommon::FEDIVERSE_USERNAMES
      .map { |model_name, attr| finder_scope(model_name).pluck(attr) }
      .flatten.tally
      .select { |k, v| k if v > 1 }
      .keys
  end

  def finder_scope(model_name)
    model_name.to_s.classify.constantize.unscoped
  end
end
</file>

<file path="app/jobs/upgrade/fix_nil_file_size_values.rb">
# frozen_string_literal: true

class Upgrade::FixNilFileSizeValues < ApplicationJob
  include JobIteration::Iteration
  unique :until_executed

  def build_enumerator(cursor:)
    enumerator_builder.active_record_on_records(ModelFile.unscoped.where(size: nil), cursor: cursor)
  end

  def each_iteration(modelfile)
    modelfile.attachment_attacher.refresh_metadata!
    modelfile.save(touch: false)
  rescue Shrine::FileNotFound
    Rails.logger.info("File not found during FixNilFileSizeValues upgrade job: #{modelfile.path_within_library}")
  end
end
</file>

<file path="app/jobs/upgrade/fix_parent_collections.rb">
# frozen_string_literal: true

class Upgrade::FixParentCollections < ApplicationJob
  queue_as :low
  unique :until_executed

  def perform
    Collection.where("id = collection_id").update_all(collection_id: nil) # rubocop:disable Rails/SkipsModelValidations
  end
end
</file>

<file path="app/jobs/upgrade/update_actors_job.rb">
# frozen_string_literal: true

require "federails/maintenance/actors_updater"
class Upgrade::UpdateActorsJob < ApplicationJob
  queue_as :low
  unique :until_executed

  def perform
    if SiteSettings.federation_enabled?
      # Fix incorrectly-flagged local actors
      Federails::Actor.where(local: true)
        .where.not(server: [PublicUrl.hostname, nil])
        .update_all(local: false) # rubocop:disable Rails/SkipsModelValidations
      # Fix incorrect entity type fields
      Federails::Actor.where(entity_id: nil)
        .where.not(entity_type: nil)
        .update_all(entity_type: nil) # rubocop:disable Rails/SkipsModelValidations
      # Update remove actor data
      Federails::Maintenance::ActorsUpdater.run
    end
  end
end
</file>

<file path="app/jobs/application_job.rb">
class ApplicationJob < ActiveJob::Base
  include ActiveJob::Status
  sidekiq_options retry: 10

  # Most jobs are safe to ignore if the underlying records are no longer available
  discard_on ActiveJob::DeserializationError
  discard_on ActiveRecord::RecordNotFound unless Rails.env.test?
  after_discard do |_job, exception|
    Rails.logger.debug exception.to_s
  end

  before_perform do |job|
    begin
      SiteSettings.clear_cache
      Library.register_all_storage
    rescue
      nil
    end
    job.status.update(started_at: DateTime.now)
  end

  after_perform do |job|
    job.status.update(
      finished_at: DateTime.now,
      step: nil
    )
  end

  def self.extension_glob(extensions)
    [
      "*.{",
      extensions.map { |ext| case_insensitive_glob_string(ext) }.join(","),
      "}"
    ].join
  end

  def self.case_insensitive_glob_string(str)
    str.chars.map { |char|
      "[#{char.upcase}#{char.downcase}]"
    }.join
  end

  def self.image_pattern
    extension_glob(SupportedMimeTypes.image_extensions)
  end

  def self.file_pattern
    extension_glob(SupportedMimeTypes.indexable_extensions)
  end

  def self.common_subfolders
    {
      "3mf" => file_pattern,
      "fdm" => file_pattern,
      "files" => file_pattern,
      "images" => image_pattern,
      "lychee" => file_pattern,
      "lys" => file_pattern,
      "model" => file_pattern,
      "obj" => file_pattern,
      "parts" => file_pattern,
      "presupported" => file_pattern,
      "resin" => file_pattern,
      "stl" => file_pattern,
      "sup" => file_pattern,
      "supported" => file_pattern,
      "unsupported" => file_pattern
    }
  end
end
</file>

<file path="app/jobs/cache_sweep_job.rb">
class CacheSweepJob < ApplicationJob
  def perform
    cache = LibraryUploader.storages[:cache]
    cache.clear! { |path| path.mtime < 6.hours.ago }
    # Don't need to clear tus separately, the storage is the same place

    # Clear up old ALTCHA records
    AltchaSolution.cleanup
  end
end
</file>

<file path="app/jobs/downloads_sweep_job.rb">
class DownloadsSweepJob < ApplicationJob
  def perform
    return if SiteSettings.download_expiry_time_in_hours == 0 # zero expiry time means keep forever

    LibraryUploader.storages[:downloads].clear! do |path|
      path.mtime < SiteSettings.download_expiry_time_in_hours.hours.ago
    end
  end
end
</file>

<file path="app/jobs/organize_model_job.rb">
class OrganizeModelJob < ApplicationJob
  queue_as :high

  def perform(model_id)
    model = Model.find(model_id)
    model&.organize!
  end
end
</file>

<file path="app/jobs/prepare_download_job.rb">
class PrepareDownloadJob < ApplicationJob
  queue_as :critical
  unique :until_executed

  def perform(model_id:, selection:)
    @model = Model.find(model_id)
    @downloader = ArchiveDownloadService.new(model: @model, selection: selection)
    write_archive(@downloader.temp_file, file_list(@model, selection))
    FileUtils.mv(@downloader.temp_file, @downloader.output_file)
    @model.broadcast_refresh
  end

  private

  def file_list(model, selection)
    scope = model.model_files
    case selection
    when nil
      scope
    when "supported"
      scope.where(presupported: true)
    when "unsupported"
      scope.where(presupported: false)
    else
      scope.select { |f| f.extension == selection }
    end
  end

  def write_archive(filename, files)
    Archive.write_open_filename(filename, Archive::COMPRESSION_NONE, Archive::FORMAT_ZIP) do |archive|
      files.each do |file|
        # Make sure we have a file size before proceeding
        file.attachment_attacher&.refresh_metadata! if file.size.nil?
        # Build archive
        archive.new_entry do |entry|
          entry.pathname = file.filename
          entry.size = file.size
          entry.filetype = Archive::Entry::FILE
          entry.mtime = file.mtime
          entry.ctime = file.ctime
          archive.write_header entry
          archive.write_data file.attachment.read
        end
      end
    end
  end
end
</file>

<file path="app/jobs/process_uploaded_file_job.rb">
class ProcessUploadedFileJob < ApplicationJob
  queue_as :critical

  def perform(library_id, uploaded_file, owner: nil, creator_id: nil, collection_id: nil, tags: nil, license: nil, model: nil, sensitive: nil)
    # Find library
    library = Library.find(library_id)
    return if library.nil?
    # Attach cached upload file
    attacher = LibraryUploader::Attacher.new
    attacher.attach_cached(uploaded_file)
    file = attacher.file
    data = {
      name: File.basename(file.original_filename, ".*").humanize.tr("+", " ").careful_titleize,
      path: SecureRandom.uuid,
      creator_id: creator_id,
      collection_id: collection_id,
      tag_list: tags,
      license: license,
      sensitive: sensitive
    }.compact
    # Create model
    new_model = false
    new_file = nil
    ActiveRecord::Base.transaction do
      if model.nil?
        data.merge!(Model.caber_owner(owner)) if owner
        model = library.models.create!(data)
        model.organize!
        new_model = true
      end
      # Handle different file types
      case File.extname(file.original_filename).delete(".").downcase
      when *SupportedMimeTypes.archive_extensions
        unzip(model, file)
      when *SupportedMimeTypes.indexable_extensions
        new_file = model.model_files.create(filename: file.original_filename, attachment: file)
      else
        Rails.logger.warn("Ignoring #{file.inspect}")
      end
    end
    # Discard cached file
    attacher.destroy
    # Queue scans to fill in data or update things
    if new_model
      model.add_new_files_later(include_all_subfolders: true)
    else
      model.check_for_problems_later
    end
    new_file&.parse_metadata_later
  end

  private

  def unzip(model, uploaded_file)
    LibraryUploader.with_file(uploaded_file) do |archive|
      tmpdir = LibraryUploader.find_storage(:cache).directory.join(SecureRandom.uuid)
      tmpdir.mkdir
      strip = count_common_path_components(archive)
      Archive::Reader.open_filename(archive.path, strip_components: strip) do |reader|
        reader.each_entry do |entry|
          next if !entry.file? || entry.size > SiteSettings.max_file_extract_size
          next if SiteSettings.ignored_file?(entry.pathname)
          filename = entry.pathname # Stored because pathname gets mutated by the extract and we want the original
          reader.extract(entry, Archive::EXTRACT_SECURE, destination: tmpdir.to_s)
          model.model_files.create(filename: filename, attachment: File.open(entry.pathname))
          # Clean up file
          File.delete(entry.pathname) if File.exist?(entry.pathname)
        end
      end
      # Clean up temp folder
      Dir.rmdir(tmpdir) if Dir.empty?(tmpdir)
    end
  end

  def count_common_path_components(archive)
    # Generate full list of directories in the archive
    paths = []
    files_in_root = false
    Archive::Reader.open_filename(archive.path) do |reader|
      reader.each_entry do |entry|
        paths << entry.pathname if entry.directory?
        files_in_root = true if entry.file? && entry.pathname.exclude?(File::SEPARATOR)
      end
    end
    return 0 if files_in_root
    paths = paths.map { |path| path.split(File::SEPARATOR) }
    # Count the common elements in the paths
    count_common_elements(paths)
  end

  def count_common_elements(arrays)
    return 0 if arrays.empty?
    first = arrays.shift
    zip = first.zip(*arrays)
    zip.count { |it| it.uniq.count == 1 }
  end
end
</file>

<file path="app/jobs/README.md">
# Scanning jobs

There is a fairly complex tree of jobs that happens when models are scanned, which can also be prompted by various actions.

```mermaid
flowchart TD
    DFS[Scan::Library::DetectFileSystemChangesJob]
    CMFP[Scan::Library::CreateModelFromPathJob]
    ANF[Scan::Model::AddNewFilesJob]
    PM[Scan::Model::ParseMetadataJob]
    PMF[Scan::ModelFile::ParseMetadataJob]
    CFP[Scan::Model::CheckForProblemsJob]
    CA[Scan::CheckAllJob]
    CM[Scan::CheckModelJob]
    OM[OrganizeModelJob]
    PUF[ProcessUploadedFileJob]
    AMF[Analysis::AnalyseModelFileJob]
    FC[Analysis::FileConversionJob]
    GA[Analysis::GeometricAnalysisJob]

    ModelEdit([fa:fa-person Model edited])
    Organize([fa:fa-person Organize button])
    ScanAll([fa:fa-person Scan for changes])
    CheckAll([fa:fa-person Rescan all models])
    MainUpload([fa:fa-person Upload button])
    FileUpload([fa:fa-person Upload files in model])
    FileConvert([fa:fa-person Convert file button])

    ScanAll --> DFS
    CheckAll --> CA
    DFS -->|each changed path| CMFP
    CMFP --> ANF
    ANF --> PM
    ANF -->|each new file| PMF
    PM --> CFP
    ModelEdit --> CFP
    PMF --> AMF
    AMF -->|geometric analysis enabled?| GA
    CA -->|each model| CM
    CM -->|scan = true| ANF
    CM -->|scan = false| CFP
    CM -->|each file| AMF
    Organize --> OM
    OM --> CFP
    MainUpload --> PUF
    FileUpload --> PUF
    PUF -->|new model?| ANF
    PUF -->|new file in existing model?| CFP
    PUF -->|new file in existing model?| PMF
    FileConvert --> FC
    FC --> AMF


    classDef queue_analysis fill:#700,stroke:#f00,stroke-width:2px;
    classDef queue_activity fill:#770,stroke:#ff0,stroke-width:2px;
    classDef queue_scan fill:#070,stroke:#0f0,stroke-width:2px;
    classDef queue_default fill:#077,stroke:#0ff,stroke-width:2px;
    classDef queue_performance fill:#007,stroke:#00f,stroke-width:2px;
    classDef queue_upgrade fill:#707,stroke:#f0f,stroke-width:2px;

    class DFS,CA,CM,CMFP,ANF,PM,PMF,CFP queue_scan
    class FC,GA queue_performance
    class AMF queue_analysis
    class OM,PUF queue_default

    classDef user_action fill:#777,stroke:#fff,stroke-width:2px;
    class ModelEdit,Organize,ScanAll,CheckAll,MainUpload,FileUpload,FileConvert user_action

```

Colours correspond to the queue the job uses:

* Green: `scan`
* Red: `analysis`
* Cyan: `default`
* Blue: `performance`

Grey ovals are user-initiated actions (e.g. a button click).
</file>

<file path="app/jobs/update_datapackage_job.rb">
class UpdateDatapackageJob < ApplicationJob
  queue_as :default
  unique :until_executed

  def perform(model_id)
    model = Model.find(model_id)
    file = model.model_files.find_or_initialize_by(filename: "datapackage.json")
    file.update!(attachment: LibraryUploader.upload(
      StringIO.new(
        JSON.pretty_generate(DataPackage::ModelSerializer.new(model).serialize)
      ),
      :cache
    ))
  end
end
</file>

<file path="app/jobs/usage_reporting_job.rb">
require "net/http"

class UsageReportingJob < ApplicationJob
  def perform
    # If there's no ID, don't send
    return unless SiteSettings.anonymous_usage_id
    # Get the endpoint
    uri = URI.parse(UsageReport.endpoint)
    # Prepare the report
    data = UsageReport.generate
    # Tell the user what we're doing
    Rails.logger.info("Sending anonymous usage report to #{uri}: #{data}")
    # Send
    headers = {
      "Content-Type": "application/json",
      "User-Agent": "Manyfold::UsageReportingJob"
    }
    Net::HTTP.post(uri, data, headers)
  end
end
</file>

<file path="app/lib/auth_failure_app.rb">
class AuthFailureApp < Devise::FailureApp
  def respond
    super
    # Set response code from warden throw if set
    self.status = warden_options[:status] if warden_options[:status]
  end
end
</file>

<file path="app/lib/careful_titleize.rb">
module CarefulTitleize
  def careful_titleize
    # Regex here is from ActiveSupport::Inflector#titleize, but we remove
    # a lot of the preprocessing which discards stuff we want to keep
    gsub(/[_-]/, " ").gsub(/\b([[:alnum:]]{1})[[:lower:][:digit:]]*\b/) do |match|
      match.upcase_first
    end
  end
end
</file>

<file path="app/lib/client_credentials_strategy.rb">
class ClientCredentialsStrategy < Devise::Strategies::Authenticatable
  def valid?
    request.format.manyfold_api_v0? && request.headers.key?("Authorization")
  end

  def authenticate!
    token = ::Doorkeeper::OAuth::Token.authenticate(request, :from_bearer_authorization)
    fail! and throw(:warden, status: :unauthorized) unless token&.accessible?

    scopes = case request.env.dig("action_dispatch.request.parameters", "action") || request.env.dig("action_dispatch.route_uri_pattern")
    when "index", "show"
      ["public", "read"]
    when "create", "update"
      ["write"]
    when "destroy"
      ["delete"]
    when "/upload"
      ["upload"]
    end
    fail! and throw(:warden, status: :forbidden) unless token.acceptable?(scopes)

    # If scope is :public, we need no resource owner
    resource_owner = if token.scopes == ["public"]
      nil
    else
      # If this is a client credentials flow, the resource owner should be the owner of the application
      token.application&.owner
    end
    # Sign in resource owner
    if resource_owner&.active_for_authentication?
      request.session_options[:skip] = true
      success! resource_owner
    end
  end
end
</file>

<file path="app/lib/locale_awareness.rb">
module LocaleAwareness
  def locale=(l)
    @locale = l
  end

  def locale
    @locale
  end
end
</file>

<file path="app/lib/public_url.rb">
module PublicUrl
  def self.port
    # PUBLIC_PORT overrides everything
    return ENV.fetch("PUBLIC_PORT") if ENV.key?("PUBLIC_PORT")
    # If hostname is set, assume a standard port
    if ENV.key?("PUBLIC_HOSTNAME")
      https = ENV.fetch("HTTPS_ONLY", nil) === "enabled"
      return https ? "443" : "80"
    end
    # Fall back to RAILS_PORT or default
    ENV.fetch("RAILS_PORT", "3214")
  end

  def self.nonstandard_port
    ["80", "443"].include?(port) ? nil : port
  end

  def self.hostname
    ENV.fetch("PUBLIC_HOSTNAME", "localhost")
  end
end
</file>

<file path="app/lib/supported_mime_types.rb">
module SupportedMimeTypes
  def self.image_types
    Mime::LOOKUP.filter { |k, v| is_image_mime_type?(v) }.values
  end

  def self.image_extensions
    Mime::EXTENSION_LOOKUP.filter { |k, v| is_image_mime_type?(v) }.keys
  end

  def self.video_types
    Mime::LOOKUP.filter { |k, v| is_video_mime_type?(v) }.values
  end

  def self.video_extensions
    Mime::EXTENSION_LOOKUP.filter { |k, v| is_video_mime_type?(v) }.keys
  end

  def self.document_types
    Mime::LOOKUP.filter { |k, v| is_document_mime_type?(v) }.values
  end

  def self.document_extensions
    Mime::EXTENSION_LOOKUP.filter { |k, v| is_document_mime_type?(v) }.keys
  end

  def self.archive_types
    Mime::LOOKUP.filter { |k, v| is_archive_mime_type?(v) }.values
  end

  def self.archive_extensions
    Mime::EXTENSION_LOOKUP.filter { |k, v| is_archive_mime_type?(v) }.keys
  end

  def self.model_types
    Mime::LOOKUP.filter { |k, v| is_model_mime_type?(v) }.values
  end

  def self.model_extensions
    Mime::EXTENSION_LOOKUP.filter { |k, v| is_model_mime_type?(v) }.keys
  end

  def self.can_export?(type)
    [:threemf].include? type
  end

  def self.indexable_types
    image_types + model_types + video_types + document_types + archive_types
  end

  def self.indexable_extensions
    image_extensions + model_extensions + video_extensions + document_extensions + archive_extensions
  end

  class << self
    private

    def is_image_mime_type?(type)
      exclusions = [
        "image/vnd.dxf",
        "image/vnd.dwg"
      ]
      type.to_s.start_with?("image/") && exclusions.exclude?(type.to_s)
    end

    def is_video_mime_type?(type)
      type.to_s.start_with?("video/")
    end

    def is_document_mime_type?(type)
      [
        "application/pdf",
        "text/markdown",
        "text/plain",
        "text/html",
        "application/msword",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "application/octet-stream",
        "application/x-gerber",
        "application/x-gerber-job",
        "application/x-excellon",
        "application/x-kicad-project",
        "application/x-kicad-footprint",
        "application/x-kicad-pcb",
        "application/x-kicad-symbol",
        "application/x-kicad-schematic",
        "application/x-kicad-worksheet"
      ].include?(type.to_s)
    end

    def is_model_mime_type?(type)
      extras = [
        "text/x-gcode",
        "application/x-openscad",
        "image/vnd.dxf",
        "image/vnd.dwg",
        "application/x-3ds",
        "application/x-amf",
        "application/x-ldraw"
      ]
      type.to_s.start_with?("model/") || extras.include?(type.to_s)
    end

    def is_archive_mime_type?(type)
      [
        "application/zip",
        "application/gzip",
        "application/vnd.rar",
        "application/x-7z-compressed",
        "application/x-bzip2"
      ].include?(type.to_s)
    end
  end
end
</file>

<file path="app/lib/trim_path_separators.rb">
module TrimPathSeparators
  TRIM_PATH_SEPARATOR_REGEXP = /(^#{File::SEPARATOR})|(#{File::SEPARATOR}$)/

  def trim_path_separators
    gsub(TRIM_PATH_SEPARATOR_REGEXP, "")
  end
end
</file>

<file path="app/lib/usage_report.rb">
module UsageReport
  def self.endpoint
    ENV.fetch("USAGE_TRACKING_URL", "https://tracking.manyfold.app")
  end

  def self.generate
    Jbuilder.encode do |report|
      report.id SiteSettings.anonymous_usage_id
      report.version do |version|
        version.app Rails.application.config.app_version.gsub(/^v/, "")
        version.sha Rails.application.config.git_sha
        version.image ENV.fetch("DOCKER_TAG", nil)&.split(":")&.first
        version.arch RUBY_PLATFORM
      end
    end
  end

  def self.set_schedule!
    SiteSettings.clear_cache
    jobname = "usage"
    if SiteSettings.anonymous_usage_id.present?
      Sidekiq::Cron::Job.create(
        name: jobname,
        cron: "every day",
        class: "UsageReportingJob"
      )
    else
      Sidekiq::Cron::Job.destroy(jobname)
    end
  end

  def self.enable!
    SiteSettings.anonymous_usage_id ||= SecureRandom.uuid
    set_schedule!
  end

  def self.disable!
    SiteSettings.anonymous_usage_id = nil
    set_schedule!
  end
end
</file>

<file path="app/mailers/application_mailer.rb">
class ApplicationMailer < ActionMailer::Base
  default from: ENV.fetch("SMTP_FROM_ADDRESS", "notifications@#{ENV.fetch("PUBLIC_HOSTNAME", "localhost")}")
  layout "mailer"
end
</file>

<file path="app/mailers/moderator_mailer.rb">
class ModeratorMailer < ApplicationMailer
  def new_report
    # i18n-tasks-use t('moderator_mailer.new_report.subject')
    @report = params[:report]
    mail bcc: moderator_addresses
  end

  def new_approval
    # i18n-tasks-use t('moderator_mailer.new_approval.subject')
    @user = params[:user]
    mail bcc: moderator_addresses
  end

  private

  def moderator_addresses
    User.with_any_role(:moderator, :administrator).pluck(:email)
  end
end
</file>

<file path="app/mailers/user_mailer.rb">
class UserMailer < ApplicationMailer
  def account_approved
    # i18n-tasks-use t('user_mailer.account_approved.subject')
    @user = params[:user]
    mail to: @user.email
  end

  def test_email
    # i18n-tasks-use t('user_mailer.test_email.subject')
    @user = params[:user]
    mail to: @user.email
  end
end
</file>

<file path="app/models/concerns/caber_object.rb">
module CaberObject
  extend ActiveSupport::Concern
  include Caber::Object

  included do
    can_grant_permissions_to User
    can_grant_permissions_to Role

    accepts_nested_attributes_for :caber_relations, reject_if: :all_blank, allow_destroy: true

    after_create_commit :assign_default_permissions

    before_update -> { @was_private = !public? }

    def self.caber_owner(subject)
      {caber_relations_attributes: [{permission: "own", subject: subject}]}
    end
  end

  def public?
    Pundit::PolicyFinder.new(self.class).policy.new(nil, self).show?
  end

  def private?
    caber_relations.where(subject_type: "Role").or(caber_relations.where(subject: nil)).none?
  end

  def just_became_public?
    public? && @was_private
  end

  def assign_default_permissions
    # Grant local view access by default
    role = SiteSettings.default_viewer_role
    grant_permission_to("view", Role.find_or_create_by(name: role)) if role.presence
    # Set default owner if an owner isn't already set
    if permitted_users.with_permission("own").empty?
      owner = SiteSettings.default_user
      grant_permission_to("own", owner) if owner
    end
  end

  def will_be_public?
    caber_relations.find { |it| it.subject.nil? }
  end
end
</file>

<file path="app/models/concerns/caber_subject.rb">
module CaberSubject
  extend ActiveSupport::Concern
  include Caber::Subject

  included do
    can_have_permissions_on Creator
    can_have_permissions_on Collection
    can_have_permissions_on Model
  end
end
</file>

<file path="app/models/concerns/commentable.rb">
module Commentable
  extend ActiveSupport::Concern
  included do
    has_many :comments, as: :commentable, dependent: :destroy
  end
end
</file>

<file path="app/models/concerns/federails_common.rb">
module FederailsCommon
  extend ActiveSupport::Concern
  include Federails::ActorEntity

  included do
    scope :local, -> { includes(:federails_actor).where("federails_actor.local": true) }
    scope :remote, -> { includes(:federails_actor).where("federails_actor.local": false) }
  end

  # Listed in increasing order of priority
  FEDIVERSE_USERNAMES = {
    collection: :public_id,
    model: :public_id,
    creator: :slug,
    user: :username
  }

  def federails_actor
    return nil unless persisted?
    act = Federails::Actor.find_by(entity: self)
    if act.nil?
      act = create_federails_actor
      reload
    end
    act
  end

  def remote?
    !federails_actor&.local?
  end
end
</file>

<file path="app/models/concerns/followable.rb">
module Followable
  extend ActiveSupport::Concern
  include FederailsCommon

  TIMEOUT = Rails.env.development? ? 1 : 15

  included do
    delegate :following_followers, to: :federails_actor
    after_commit :followable_post_creation_activity, on: :create
    after_commit :followable_post_update_activity, on: :update

    after_followed :auto_accept
  end

  def followers
    federails_actor.followers.map(&:entity)
  end

  def followed_by?(follower)
    federails_actor.followers.include? follower.federails_actor
  end

  def owning_actor
    user = permitted_users.with_permission("own").first || SiteSettings.default_user
    user&.federails_actor
  end

  private

  def recently_posted?
    Federails::Activity.exists?(action: ["Create", "Update"], entity: federails_actor, created_at: TIMEOUT.minutes.ago..)
  end

  def followable_post_creation_activity
    followable_post_activity("Create")
  end

  def followable_post_update_activity
    followable_post_activity("Update") unless recently_posted?
  end

  def followable_post_activity(action)
    return unless owning_actor
    Federails::Activity.create!(
      actor: owning_actor,
      action: action,
      entity: federails_actor,
      created_at: updated_at
    )
  end

  def auto_accept(follow)
    return unless federails_actor.local?
    follow.accept!
  end
end
</file>

<file path="app/models/concerns/follower.rb">
module Follower
  extend ActiveSupport::Concern
  include FederailsCommon

  included do
    delegate :activities, to: :federails_actor
    delegate :following_follows, to: :federails_actor

    after_follow_accepted :after_accept
  end

  def follow(target)
    following_follows.create(target_actor: target.is_a?(Federails::Actor) ? target : target.federails_actor)
  end

  def unfollow(target)
    f = federails_actor.follows?(target.is_a?(Federails::Actor) ? target : target.federails_actor)
    f&.destroy unless f == false
  end

  def following?(target)
    # follows? gives us the relationship or false if it doesn't exist,
    # we turn that into the pendingstatus (or false if not)
    tgt = target.is_a?(Federails::Actor) ? target : target.federails_actor
    f = federails_actor&.follows?(tgt)
    f&.is_a?(Federails::Following) ? f.status.to_sym : false
  end

  private

  def after_accept(follow)
    find_or_create_followed_entity(follow.target_actor)
  end

  def find_or_create_followed_entity(actor)
    actor.entity || ActivityPub::ApplicationDeserializer.deserializer_for(actor)&.create!
  end
end
</file>

<file path="app/models/concerns/indexable.rb">
module Indexable
  extend ActiveSupport::Concern

  included do
    validates :indexable, inclusion: {in: [nil, "no", "yes"]}
    validates :ai_indexable, inclusion: {in: [nil, "no", "yes"]}

    normalizes :indexable, with: ->(it) { (it == "inherit") ? nil : it }
    normalizes :ai_indexable, with: ->(it) { (it == "inherit") ? nil : it }
  end

  def indexable?
    case indexable
    when nil
      inherited_indexable?
    when "yes"
      true
    else
      false
    end
  end

  def ai_indexable?
    case ai_indexable
    when nil
      inherited_ai_indexable?
    when "yes"
      true
    else
      false
    end
  end

  def inherited_indexable?
    if is_a?(Collection) && collection
      collection.indexable?
    elsif respond_to?(:creator) && creator
      creator.indexable?
    else
      SiteSettings.default_indexable
    end
  end

  def inherited_ai_indexable?
    if is_a?(Collection) && collection
      collection.ai_indexable?
    elsif respond_to?(:creator) && creator
      creator.ai_indexable?
    else
      SiteSettings.default_ai_indexable
    end
  end
end
</file>

<file path="app/models/concerns/linkable.rb">
module Linkable
  extend ActiveSupport::Concern

  included do
    has_many :links, as: :linkable, dependent: :destroy
    accepts_nested_attributes_for :links, reject_if: :link_not_valid?, allow_destroy: true

    def link_not_valid?(attributes)
      attributes[:url].blank? || links.map(&:url).include?(attributes[:url])
    end
  end
end
</file>

<file path="app/models/concerns/listable.rb">
module Listable
  extend ActiveSupport::Concern

  included do
    acts_as_favoritable
  end

  def listers(list_name)
    favoritors(scope: list_name)
  end
end
</file>

<file path="app/models/concerns/lister.rb">
module Lister
  extend ActiveSupport::Concern

  included do
    acts_as_favoritor
  end

  def list(object, list_name)
    favorite(object, scope: list_name)
  end

  def delist(object, list_name)
    unfavorite(object, scope: list_name)
  end

  def set_list_state(object, list_name, listed)
    if listed
      list(object, list_name)
    else
      delist(object, list_name)
    end
  end

  def listed?(object, list_name)
    favorited?(object, scope: list_name)
  end
end
</file>

<file path="app/models/concerns/path_builder.rb">
module PathBuilder
  extend ActiveSupport::Concern

  def formatted_path
    SiteSettings.model_path_template.gsub(/{.+?}/) do |token|
      case token
      when "{tags}"
        (tags.count > 0) ?
          File.join(tags.order(taggings_count: :desc, name: :asc).map { |it| it.to_s.parameterize }) :
          "@untagged"
      when "{creator}"
        path_component(creator) || "@unattributed"
      when "{collection}"
        path_component(collection) || "@uncollected"
      when "{modelName}"
        path_component(self)
      when "{modelId}"
        "##{id}"
      else
        token
      end
    end
  end

  private

  def path_component(object)
    return nil if object.nil?
    SiteSettings.safe_folder_names ? object.slug : object.name
  end
end
</file>

<file path="app/models/concerns/problematic.rb">
module Problematic
  extend ActiveSupport::Concern

  included do
    has_many :problems, as: :problematic, dependent: :destroy
  end
end
</file>

<file path="app/models/concerns/public_i_dable.rb">
module PublicIDable
  extend ActiveSupport::Concern

  included do
    before_validation :generate_public_id
    validates :public_id, presence: true, uniqueness: true

    def self.find_param(param)
      find_by!(public_id: param)
    end
  end

  def to_param
    public_id
  end

  ALPHABET = "bcdfghjklmnpqrstvwxz0123456789"
  private_constant :ALPHABET

  private

  def generate_public_id
    return if public_id
    self.public_id = begin
      Nanoid.generate(size: 12, alphabet: ALPHABET)
    end while public_id.nil? || self.class.exists?(public_id: public_id)
  end
end
</file>

<file path="app/models/concerns/sluggable.rb">
module Sluggable
  extend ActiveSupport::Concern

  included do
    before_validation :slugify_name
  end

  private

  def slugify_name
    self.slug = name&.parameterize unless slug.presence
  end
end
</file>

<file path="app/models/altcha_solution.rb">
class AltchaSolution < ApplicationRecord
  validates :algorithm, :challenge, :salt, :signature, :number, presence: true
  attr_accessor :took

  def self.verify_and_save(base64encoded)
    p = begin
      JSON.parse(Base64.decode64(base64encoded))
    rescue
      nil
    end
    return false if p.nil?

    submission = Altcha::Submission.new(p)
    return false unless submission.valid?

    solution = new(p)

    begin
      solution.save
    rescue ActiveRecord::RecordNotUnique
      # Replay attack
      false
    end
  end

  def self.cleanup
    # Replay attacks are protected by the time stamp in the salt of the challenge for
    # the duration configured in the timeout. All solutions in the database that older
    # can be deleted.
    AltchaSolution.where(created_at: ...(Time.zone.now - Altcha.timeout)).delete_all # rubocop:disable Pundit/UsePolicyScope
  end
end
</file>

<file path="app/models/application_record.rb">
class ApplicationRecord < ActiveRecord::Base
  self.abstract_class = true

  def self.ransackable_symbols
    (ransackable_attributes + ransackable_associations + ransackable_scopes).map(&:to_sym)
  end

  # Default find_param implementation
  # just the same as standard find()
  def self.find_param(param)
    find(param)
  end
end
</file>

<file path="app/models/collection.rb">
class Collection < ApplicationRecord
  include Followable
  include CaberObject
  include Linkable
  include Sluggable
  include PublicIDable
  include Commentable
  include Indexable

  broadcasts_refreshes

  acts_as_federails_actor(
    username_field: :public_id,
    name_field: :name,
    profile_url_method: :url_for,
    # We use the Group actor type purely so Mastodon doesn't ignore the actor.
    # Actual type is differentiated with f3di:concreteType == "Collection".
    # Ideally this would be a Collection: https://www.w3.org/TR/activitystreams-vocabulary/#dfn-collection
    # Hopefully at some point this can change, if Mastodon starts allowing other actor types
    # See https://github.com/mastodon/mastodon/issues/22322
    actor_type: "Group"
  )

  has_many :models, dependent: :nullify
  has_many :collections, dependent: :nullify
  belongs_to :collection, optional: true
  belongs_to :creator, optional: true
  validates :name, uniqueness: {case_sensitive: false}
  validates :public_id, multimodel_uniqueness: {case_sensitive: false, check: FederailsCommon::FEDIVERSE_USERNAMES}
  validates :collection_id, exclusion: {in: ->(it) { Array(it.id) }}

  before_validation :publish_creator, if: :will_be_public?

  validate :validate_publishable

  after_create_commit :after_create
  after_update_commit :after_update

  def name_with_domain
    remote? ? name + " (#{federails_actor.server})" : name
  end

  # returns all collections at and below given ids
  #   this should be applied to @filters[:collection] to get models in sub-trees
  scope :tree_down, ->(id) {
    id ?
    where("collections.id IN (With RECURSIVE search_tree(id) AS (
      select id from collections where id IN (#{[*id].join(",")})
      union all
      select collections.id from search_tree join collections on collections.collection_id = search_tree.id where NOT collections.id IN (search_tree.id)
    ) select id from search_tree)") : where(collection_id: nil)
  }

  # returns root top-level collections for given ids
  scope :tree_up, ->(id) {
    id ?
    where("collections.id IN (WITH RECURSIVE search_tree(id, path) AS (
      SELECT id, id
      FROM collections
      WHERE collection_id is NULL
    UNION ALL
      SELECT collections.id, path           FROM search_tree
      JOIN collections ON collections.collection_id = search_tree.id
      WHERE NOT collections.id IN (path)
    ) select id from search_tree where id IN (?))", id) : where(collection_id: nil)
  }

  # returns root top-level collections for given collection ids, limited by the top-level ids
  #    top:  @filter[:collection]
  #    id:  collections from models resulting from searches
  scope :tree_both, ->(top, id) {
    top ?
    where("collections.id IN (WITH RECURSIVE search_tree(id, path) AS (
      SELECT id, id
      FROM collections
      WHERE collection_id IN (#{[*top].join(",")})
    UNION ALL
      SELECT collections.id, path           FROM search_tree
      JOIN collections ON collections.collection_id = search_tree.id
      WHERE NOT collections.id IN (path)
    ) select id from search_tree where id IN (?))", id) : tree_up(id)
  }

  #  Basic query that returns list of all collections with their path as csv
  #     WITH RECURSIVE search_tree(id, path) AS (
  #         SELECT id, id
  #         FROM collections
  #         WHERE collection_id is NULL
  #       UNION ALL
  #         SELECT collections.id, path || ',' || collections.id
  #         FROM search_tree
  #         JOIN collections ON collections.collection_id = search_tree.id
  #         WHERE NOT collections.id IN (path)
  #     )  SELECT * FROM search_tree

  def self.ransackable_attributes(_auth_object = nil)
    ["caption", "created_at", "id", "public_id", "name", "notes", "slug", "updated_at"]
  end

  def self.ransackable_associations(_auth_object = nil)
    ["collection", "collections", "creator", "links", "models"]
  end

  def to_activitypub_object
    ActivityPub::CollectionSerializer.new(self).serialize
  end

  def preview_file
    models.first&.preview_file
  end

  def after_create
    Activity::CollectionPublishedJob.set(wait: 5.seconds).perform_later(id) if public?
  end

  def after_update
    Activity::CollectionPublishedJob.set(wait: 5.seconds).perform_later(id) if just_became_public?
  end

  def validate_publishable
    # If the model will be public
    if caber_relations.find { |it| it.subject.nil? }
      # Check required fields
      errors.add :creator, :private if creator && !creator.public?
      errors.add :collection, :private if collection && !collection.public?
    end
  end

  def publish_creator
    creator&.update!(caber_relations_attributes: [{permission: "view", subject: nil}]) unless creator&.public?
  end
end
</file>

<file path="app/models/comment.rb">
require "federails/data_transformer/note"

class Comment < ApplicationRecord
  include PublicIDable

  belongs_to :commenter, polymorphic: true, optional: true
  belongs_to :commentable, polymorphic: true

  include Federails::DataEntity
  acts_as_federails_data handles: "Note", actor_entity_method: :commenter, url_param: :public_id, should_federate_method: :federate?

  def to_activitypub_object
    ActivityPub::CommentSerializer.new(self).serialize
  end

  def federate?
    ActivityPub::CommentSerializer.new(self).federate?
  end

  def public?
    commenter&.public? && commentable&.public?
  end
end
</file>

<file path="app/models/creator.rb">
class Creator < ApplicationRecord
  include Followable
  include CaberObject
  include Linkable
  include Sluggable
  include PublicIDable
  include Commentable
  include Indexable

  broadcasts_refreshes

  acts_as_federails_actor username_field: :slug, name_field: :name, profile_url_method: :url_for

  has_many :models, dependent: :nullify
  has_many :collections, dependent: :nullify
  validates :name, presence: true, uniqueness: {case_sensitive: false}
  validates :slug, presence: true, multimodel_uniqueness: {case_sensitive: false, check: FederailsCommon::FEDIVERSE_USERNAMES}, format: {with: /\A[[:alnum:]\-_]+\z/}

  def name_with_domain
    remote? ? name + " (#{federails_actor.server})" : name
  end

  def self.ransackable_attributes(_auth_object = nil)
    ["caption", "created_at", "id", "public_id", "name", "notes", "slug", "updated_at"]
  end

  def self.ransackable_associations(_auth_object = nil)
    ["collections", "links", "models"]
  end

  def to_param
    slug
  end

  def self.find_param(param)
    find_by!(slug: param)
  end

  def to_activitypub_object
    ActivityPub::CreatorSerializer.new(self).serialize
  end
end
</file>

<file path="app/models/favorite.rb">
# frozen_string_literal: true

class Favorite < ApplicationRecord
  extend ActsAsFavoritor::FavoriteScopes

  belongs_to :favoritable, polymorphic: true
  belongs_to :favoritor, polymorphic: true

  def block!
    update!(blocked: true)
  end

  def self.ransackable_attributes(auth_object = nil)
    ["blocked", "created_at", "favoritable_id", "favoritable_type", "favoritor_id", "favoritor_type", "id", "scope", "updated_at"]
  end
end
</file>

<file path="app/models/library.rb">
class Library < ApplicationRecord
  extend Memoist
  include PublicIDable
  include Problematic

  STORAGE_SERVICES = [
    "filesystem",
    "s3"
  ]

  has_many :models, dependent: :destroy
  has_many :model_files, through: :models
  serialize :tag_regex, type: Array, coder: YAML
  after_initialize :init
  before_validation :ensure_path_case_is_correct
  after_commit :register_storage, on: :create

  normalizes :path, with: ->(path) do
    Pathname.new(path).realpath.to_s
  rescue Errno::ENOENT, Errno::EACCES # carry on, we validate these later
    path
  end

  validates :storage_service, presence: true, inclusion: STORAGE_SERVICES
  validates :path,
    presence: true,
    uniqueness: true,
    safe_path: true,
    writable: true,
    disjoint_library_folder: true,
    if: -> { storage_service == "filesystem" }

  validates :s3_bucket, presence: true, if: -> { storage_service == "s3" }
  validates :s3_region, presence: true, if: -> { storage_service == "s3" }
  validates :s3_access_key_id, presence: true, if: -> { storage_service == "s3" }
  validates :s3_secret_access_key, presence: true, if: -> { storage_service == "s3" }

  default_scope { order(:name) }

  def name
    self[:name] || (path ? File.basename(path) : "")
  end

  def init
    self.name = nil if name == ""
  end

  # Backwards compatibility for use during migrations
  def storage_service
    attributes["storage_service"] || "filesystem"
  end

  def storage_exists?
    case storage_service
    when "filesystem"
      Dir.exist?(path)
    when "s3"
      storage.bucket.exists?
    else
      raise "Invalid storage service: #{storage_service}"
    end
  end

  def self.ransackable_attributes(auth_object = nil)
    ["public_id", "caption", "created_at", "icon", "name", "notes", "tag_regex", "updated_at"]
  end

  def self.ransackable_associations(auth_object = nil)
    []
  end

  def free_space
    case storage_service
    when "filesystem"
      stat = Sys::Filesystem.stat(path)
      stat.bytes_available
    when "s3"
      nil
    else
      raise "Invalid storage service: #{storage_service}"
    end
  end

  def storage_key
    :"library_#{id}"
  end

  def storage_origin
    case storage_service
    when "s3"
      URI.parse(storage.presign(nil)[:url]).origin
    end
  end
  memoize :storage_origin

  def storage
    case storage_service
    when "filesystem"
      Shrine::Storage::FileSystem.new(path)
    when "s3"
      Shrine::Storage::S3.new(
        endpoint: s3_endpoint,
        bucket: s3_bucket,
        region: s3_region,
        access_key_id: s3_access_key_id,
        secret_access_key: s3_secret_access_key,
        force_path_style: s3_endpoint.present? && s3_path_style,
        use_accelerate_endpoint: s3_endpoint.blank?
      )
    else
      raise "Invalid storage service: #{storage_service}"
    end
  end
  memoize :storage

  def register_storage
    LibraryUploader.storages[storage_key] = storage
  end

  def self.register_all_storage
    find_each(&:register_storage)
  rescue ActiveRecord::StatementInvalid, NameError
    nil # migrations probably haven't run yet to create library table
  end

  def list_files(pattern, flags = 0)
    files = case storage_service
    when "filesystem"
      Dir.glob(pattern, flags, base: path).filter { |it| File.file?(File.join(path, it)) }
    when "s3"
      keys = []
      pattern_array = [pattern].flatten
      storage.bucket.objects.each do |object|
        keys << object.key if pattern_array.any? { |p| File.fnmatch?(p, object.key) }
      end
      keys
    else
      raise "Invalid storage service: #{storage_service}"
    end
    # Filter out files that should be ignored
    files.uniq.reject { |str| SiteSettings.ignored_file?(str) }
  end

  def has_file?(path)
    storage.exists?(path)
  end

  def has_folder?(path)
    case storage_service
    when "s3"
      storage.bucket.objects(prefix: path).count > 0
    else
      storage.exists?(path)
    end
  end

  def file_last_modified(file)
    case storage_service
    when "filesystem"
      File.mtime(File.join(path, file))
    when "s3"
      storage.bucket.object(file).last_modified
    else
      raise "Invalid storage service: #{storage_service}"
    end
  end

  def create_path_if_not_on_disk=(val)
    if val == "1" && storage_service == "filesystem"
      begin
        FileUtils.makedirs(path)
      rescue Errno::EROFS, Errno::EACCES
        errors.add(:path, :non_writable)
      end
    end
  end

  def self.default
    SiteSettings.default_library ? Library.find_by(id: SiteSettings.default_library) : Library.first
  end

  def default?
    SiteSettings.default_library == id
  end

  def make_default
    SiteSettings.default_library = id
  end

  def detect_filesystem_changes_later(delay: 0.seconds)
    Scan::Library::DetectFilesystemChangesJob.set(wait: delay).perform_later(id)
  end

  def create_model_from_path_later(path, delay: 0.seconds)
    Scan::Library::CreateModelFromPathJob.set(wait: delay).perform_later(id, path)
  end

  private

  def ensure_path_case_is_correct
    # On case-preserving-and-insensitive filesystems (i.e. macOS)
    # if you get the case wrong, the library can be created, but then
    # models will get the wrong paths. This method makes sure that the
    # case is stored in the canonical form that the OS will give us back
    # in globs
    if storage_service == "filesystem" && path
      normalised = Dir.glob(path).first
      self.path = normalised if normalised
    end
  end
end
</file>

<file path="app/models/link.rb">
class Link < ApplicationRecord
  belongs_to :linkable, polymorphic: true

  validates :url, presence: true, uniqueness: {scope: :linkable} # rubocop:disable Rails/UniqueValidationWithoutIndex

  def host
    URI.parse(url).host || url
  rescue URI::InvalidURIError, URI::InvalidComponentError
    url
  end

  def site
    PublicSuffix.parse(host).sld
  rescue PublicSuffix::DomainInvalid
    host
  end

  def remove_duplicates!
    Link.where.not(id: id).where(linkable: linkable, url: url).destroy_all # rubocop:disable Pundit/UsePolicyScope
  end

  def self.find_duplicated
    Link.select(:linkable_type, :linkable_id, :url) # rubocop:disable Pundit/UsePolicyScope
      .group([:linkable_type, :linkable_id, :url])
      .having("count(*) > 1").map do |it|
      Link.find_by(linkable_type: it.linkable_type, linkable_id: it.linkable_id, url: it.url)
    end
  end

  def self.ransackable_attributes(_auth_object = nil)
    ["created_at", "id", "linkable_id", "linkable_type", "updated_at", "url"]
  end

  def self.ransackable_associations(auth_object = nil)
    ["linkable"]
  end
end
</file>

<file path="app/models/model_file.rb">
class ModelFile < ApplicationRecord
  include LibraryUploader::Attachment(:attachment)
  include Listable
  include PublicIDable
  include Problematic

  extend Memoist

  broadcasts_refreshes

  SPECIAL_FILES = [
    "datapackage.json"
  ]

  belongs_to :model, touch: true

  after_create :attach_existing_file!

  before_destroy :rescan_duplicates
  after_commit :reattach!, on: :update, if: :filename_previously_changed?

  belongs_to :presupported_version, class_name: "ModelFile", optional: true
  has_one :unsupported_version, class_name: "ModelFile", foreign_key: "presupported_version_id",
    inverse_of: :presupported_version, dependent: :nullify

  # This is here to handle cleanup of duplicate presupported version links
  # There should only ever be one relation (above), but there's a bug.
  # Hopefully one day we can remove this when we build proper file relationships.
  has_many :duplicate_unsupported_versions, class_name: "ModelFile", foreign_key: "presupported_version_id",
    inverse_of: :presupported_version, dependent: :nullify

  validates :filename, presence: true, uniqueness: {scope: :model}, stable_mime_type: true, change_case_only: true
  validate :presupported_version_is_presupported
  validate :presupported_files_cannot_have_presupported_version

  after_commit :clear_presupported_relation, on: :update, if: :presupported_previously_changed?

  scope :without_special, -> { where.not(filename: SPECIAL_FILES) }
  scope :unsupported, -> { where(presupported: false) }
  scope :presupported, -> { where(presupported: true) }

  # Explicitly explain serialization for MariaDB
  attribute :attachment_data, :json

  delegate :indexable?, to: :model
  delegate :ai_indexable?, to: :model

  SUPPORT_KEYWORDS = %w[
    presupported
    presup
    supported
    sup
    wsupports
    withsupports
  ]

  def extension
    if has_attribute? :attachment_data
      attachment&.extension
    else
      # DEPRECATED: for Pre-shrine migration
      File.extname(filename).delete(".").downcase
    end
  end

  def is_image?
    SupportedMimeTypes.image_extensions.include? extension
  end

  def is_video?
    SupportedMimeTypes.video_extensions.include? extension
  end

  def is_document?
    SupportedMimeTypes.document_extensions.include? extension
  end

  def is_3d_model?
    SupportedMimeTypes.model_extensions.include? extension
  end

  def is_renderable?
    ["stl", "obj", "3mf", "ply", "gltf", "glb", "drc", "fbx", "3ds", "gcode", "mpd", "ldr"].include? extension
  end

  def mime_type
    Mime::Type.lookup_by_extension(extension)
  end

  def basename(include_extension: false)
    File.basename(filename, include_extension ? "" : ".*")
  end

  def filename_without_extension
    dirname = File.dirname(filename)
    File.join([dirname, basename(include_extension: false)].reject { |it| it == "." })
  end

  def name
    basename.humanize.careful_titleize
  end

  def path_within_library
    File.join(model.path, filename)
  end

  def attach_existing_file!(refresh: true, skip_validations: false)
    return if attachment.present? || !exists_on_storage?
    attachment_attacher.set LibraryUploader.uploaded_file(
      storage: model.library.storage_key,
      id: path_within_library,
      metadata: {
        filename: basename(include_extension: true),
        size: attributes["size"],
        mime_type: Mime::Type.lookup_by_extension(File.extname(filename).delete(".").downcase).to_s
      }
    )
    attachment_attacher.refresh_metadata! if refresh
    save!(validate: !skip_validations)
  end

  def exists_on_storage?
    model.library.has_file? path_within_library
  end

  def file_last_modified
    model.library.file_last_modified path_within_library
  end

  def head(bytes)
    io = attachment.open
    result = io.read(bytes)
    io.close
    result
  end

  # TODO: this should move to Shrine metadata processing to be more efficient
  def calculate_digest
    Digest::SHA512.new.update(attachment.read).hexdigest
  rescue Errno::ENOENT
    nil
  end

  def bounding_box
    return nil unless mesh
    bbox = Mittsu::Box3.new.set_from_object(mesh)
    bbox.size.to_a
  end

  def duplicates
    return ModelFile.none if digest.nil? # rubocop:todo Pundit/UsePolicyScope
    ModelFile.where(digest: digest).where.not(id: id) # rubocop:todo Pundit/UsePolicyScope
  end

  def duplicate?
    size && size > 0 && duplicates.count > 0 && !is_document?
  end

  # Used for ETag in conditional GETs
  # See https://guides.rubyonrails.org/caching_with_rails.html#conditional-get-support
  def cache_key_with_version
    digest
  end

  def self.ransackable_attributes(_auth_object = nil)
    ["caption", "created_at", "digest", "filename", "id", "public_id", "notes", "presupported", "size", "updated_at", "y_up", "presupported_version_id"]
  end

  def self.ransackable_associations(_auth_object = nil)
    ["favorited", "model", "problems"]
  end

  def mesh
    # TODO: This can be better, but needs changes upstream in Mittsu to allow loaders to parse from an IO object
    loader&.new&.parse(attachment.read)
  end
  memoize :mesh

  def reattach!
    if attachment.id != path_within_library || attachment.storage_key != model.library.storage_key
      old_path = attachment.id
      old_storage = attachment.storage
      # Reattach
      attachment_attacher.attach attachment, storage: model.library.storage_key
      # Remove previous file
      old_storage.delete old_path
      save!
    end
  end

  def convert_later(format, delay: 0.seconds)
    Analysis::FileConversionJob.set(wait: delay).perform_later(id, format.to_sym)
  end

  def loadable?
    loader.present?
  end

  def delete_from_disk_and_destroy
    model.library.storage.delete path_within_library
    destroy
  end

  def analyse_later(delay: 5.seconds)
    Analysis::AnalyseModelFileJob.set(wait: delay).perform_later(id)
  end

  def analyse_geometry_later(delay: 0.seconds)
    Analysis::GeometricAnalysisJob.set(wait: delay).perform_later(id)
  end

  def parse_metadata_later(delay: 0.seconds)
    Scan::ModelFile::ParseMetadataJob.set(wait: delay).perform_later(id)
  end

  def up_direction
    y_up ? "+y" : "+z"
  end

  def mtime
    attachment&.mtime || updated_at
  rescue NoMethodError
    updated_at
  end

  def ctime
    attachment&.ctime || created_at
  rescue NoMethodError
    created_at
  end

  private

  def rescan_duplicates
    duplicates.each { |it| it.analyse_later }
  end

  def presupported_files_cannot_have_presupported_version
    if presupported_version && presupported
      errors.add(:presupported_version, :already_presupported)
    end
  end

  def presupported_version_is_presupported
    if presupported_version && !presupported_version.presupported
      errors.add(:presupported_version, :not_supported)
    end
  end

  def loader
    case extension
    when "stl"
      Mittsu::STLLoader
    when "obj"
      Mittsu::OBJLoader
    end
  end

  def clear_presupported_relation
    unsupported_version&.update presupported_version: nil
  end
end
</file>

<file path="app/models/model.rb">
class Model < ApplicationRecord
  extend Memoist
  include PathBuilder
  include Followable
  include CaberObject
  include Linkable
  include Sluggable
  include PublicIDable
  include Commentable
  include Problematic
  include Indexable

  broadcasts_refreshes

  acts_as_federails_actor(
    username_field: :public_id,
    name_field: :name,
    profile_url_method: :url_for,
    # We use the Service actor type purely so Mastodon doesn't ignore the actor.
    # Actual type is differentiated with f3di:concreteType == "3DModel".
    # Ideally this would be a Document: https://www.w3.org/TR/activitystreams-vocabulary/#dfn-document
    # Hopefully at some point this can change, if Mastodon starts allowing other actor types
    # See https://github.com/mastodon/mastodon/issues/22322
    actor_type: "Service"
  )

  scope :recent, -> { order(created_at: :desc) }

  belongs_to :library
  belongs_to :creator, optional: true
  belongs_to :collection, optional: true
  belongs_to :preview_file, class_name: "ModelFile", optional: true
  has_many :model_files, dependent: :destroy
  acts_as_taggable_on :tags

  before_validation :strip_separators_from_path, if: :path_changed?
  before_validation :publish_creator, if: :will_be_public?
  before_validation :normalize_license
  # In Rails 7.1 we will be able to do this instead:
  # normalizes :license, with: -> license { license.blank? ? nil : license }

  after_create_commit :post_creation_activity
  after_create :pregenerate_downloads
  before_update :move_files, if: :need_to_move_files?
  after_update_commit :post_update_activity
  after_update :pregenerate_downloads, if: :was_changed?
  after_save :write_datapackage_later, if: :was_changed?
  after_commit :check_for_problems_later, on: :update

  validates :name, presence: true
  validates :path, presence: true, uniqueness: {scope: :library}
  validate :check_for_submodels, on: :update, if: :need_to_move_files?
  validate :destination_is_vacant, on: :update, if: :need_to_move_files?
  validates :license, spdx: true, allow_nil: true
  validates :public_id, multimodel_uniqueness: {case_sensitive: false, check: FederailsCommon::FEDIVERSE_USERNAMES}

  validate :validate_publishable

  scoped_search on: [:name, :caption]
  scoped_search on: :notes, aliases: [:description], only_explicit: true
  scoped_search relation: :library, on: :name, rename: :library, only_explicit: true, default_operator: :eq
  scoped_search relation: :creator, on: :name, rename: :creator
  scoped_search relation: :collection, on: :name, rename: :collection
  scoped_search relation: :tags, on: :name, default_operator: :eq, rename: :tag
  scoped_search relation: :model_files, on: :filename, rename: :filename, only_explicit: true

  def parents
    Pathname.new(path).parent.descend.filter_map do |path|
      library.models.find_by(path: path.to_s)
    end
  end
  memoize :parents

  def was_changed?
    !previous_changes.empty?
  end

  def merge_into!(target)
    return unless target

    # Work out path to this model from the target
    relative_path = Pathname.new(path).relative_path_from(Pathname.new(target.path))
    # Remove datapackage
    datapackage&.destroy
    # Move files
    model_files.each do |f|
      new_filename = File.join(relative_path, f.filename)
      if target.model_files.exists?(filename: new_filename)
        f.problems.destroy_all # Remove associated problems for this file manually
        f.delete # Don't run callbacks, just remove the database record
      else
        f.update(
          filename: new_filename,
          model: target
        )
      end
    end
    target.check_for_problems_later
    # Destroy this model
    reload
    destroy
  end

  def delete_from_disk_and_destroy
    # Remove all presupported_version relationships first, they get in the way
    # This will go away later when we do proper file relationships rather than linking the tables directly
    model_files.update_all(presupported_version_id: nil) # rubocop:disable Rails/SkipsModelValidations
    # Trigger deletion for each file separately, to make sure cleanup happens
    model_files.each { |f| f.delete_from_disk_and_destroy }
    # Remove tags first - sometimes this causes problems if we don't do it beforehand
    update!(tags: [])
    # Delete directory corresponding to model
    library.storage.delete_prefixed(path)
    # Remove from DB
    destroy
  end

  def contained_models
    previous_library.models.where(
      Model.arel_table[:path].matches(
        Model.sanitize_sql_like(previous_path) + "/%",
        "\\"
      )
    )
  end

  def contains_other_models?
    contained_models.exists?
  end

  def needs_organizing?
    formatted_path != path
  end

  def self.ransackable_attributes(_auth_object = nil)
    ["caption", "created_at", "id", "public_id", "library_id", "name", "notes", "path", "slug", "updated_at", "license_cont", "license"]
  end

  def self.ransackable_associations(auth_object = nil)
    ["base_tags", "collection", "creator", "library", "links", "model_files", "preview_file", "problems", "tag_taggings", "taggings", "tags"]
  end

  def new?
    tags.where(name: SiteSettings.model_tags_auto_tag_new).any?
  end

  def valid_preview_files
    model_files.select { |it| it.is_image? || it.is_renderable? }
  end

  def image_files
    model_files.select(&:is_image?)
  end

  def three_d_files
    model_files.select(&:is_3d_model?)
  end

  def exists_on_storage?
    library.has_folder?(path)
  end

  def organize!
    autoupdate_path
    save!
  end

  def self.create_from(other, link_preview_file:)
    new_model = other.dup
    new_model.update(
      name: "Copy of #{other.name}",
      public_id: nil,
      tags: other.tags,
      preview_file: link_preview_file ? other.preview_file : nil
      # caber_relations_attributes: caber_relations.all.map { |it| {permission: it.permission, subject: it.subject} }
    )
    new_model.organize!
    # Wipe permissions and copy from old model
    new_model.caber_relations.delete_all
    new_model.update!(
      caber_relations_attributes: other.caber_relations.all.map { |it| {permission: it.permission, subject: it.subject} }
    )
    new_model
  end

  def split!(files: [])
    preview_file_will_move = files.include?(preview_file)
    new_model = Model.create_from(self, link_preview_file: preview_file_will_move)
    # Clear preview file if it was moved
    update!(preview_file: nil) if preview_file_will_move
    # Move files
    files.each do |file|
      file.update!(model: new_model)
      file.reattach!
    end
    # Done!
    new_model
  end

  def has_supported_and_unsupported?
    model_files.where(presupported: true).count > 0 &&
      model_files.where(presupported: false).count > 0
  end

  def file_extensions
    model_files.map(&:extension).uniq
  end

  def merge_all_children!
    contained_models.each do |child|
      child.merge_into! self
    end
  end

  def size_on_disk
    model_files.pluck(:size).compact.sum
  end

  def to_activitypub_object
    ActivityPub::ModelSerializer.new(self).serialize
  end

  def add_new_files_later(include_all_subfolders: false, delay: 0.seconds)
    Scan::Model::AddNewFilesJob.set(wait: delay).perform_later(id, include_all_subfolders: include_all_subfolders)
  end

  def check_later(delay: 0.seconds)
    Scan::CheckModelJob.set(wait: delay).perform_later(id)
  end

  def check_for_problems_later(delay: 5.seconds)
    Scan::Model::CheckForProblemsJob.set(wait: delay).perform_later(id)
  end

  def organize_later(delay: 5.seconds)
    OrganizeModelJob.set(wait: delay).perform_later(id)
  end

  def write_datapackage_later(delay: 1.second)
    UpdateDatapackageJob.set(wait: delay).perform_later(id)
  end

  def parse_metadata_later(delay: 0.seconds)
    Scan::Model::ParseMetadataJob.set(wait: delay).perform_later(id)
  end

  def datapackage
    model_files.find_by(filename: "datapackage.json")
  end

  def datapackage_content
    JSON.parse(datapackage.attachment.read) unless datapackage.nil?
  rescue Shrine::FileNotFound
  end

  def pregenerate_downloads(delay: 10.minutes, queue: nil)
    # By default, give 10 minutes' grace for followup changes before we pregenerate the download
    # Other scan jobs could be running, which might take some time.
    # This is brittle, and we need a better way to say "this model is done changing for a while"
    return unless SiteSettings.pregenerate_downloads

    download_types = [nil]
    download_types += ["supported", "unsupported"] if has_supported_and_unsupported?
    download_types += file_extensions.excluding("json")
    download_types.each do |selection|
      ArchiveDownloadService.new(model: self, selection: selection).prepare(delay: delay, queue: queue)
    end
  end

  private

  def normalize_license
    self.license = nil if license.blank?
  end

  def strip_separators_from_path
    self.path = path&.trim_path_separators
  end

  def previous_library
    library_id_changed? ? Library.find_by(id: library_id_was) : library
  end

  def previous_path
    path_changed? ? path_was : path
  end

  def need_to_move_files?
    library_id_changed? ||
      (path_changed? &&
        (previous_path.trim_path_separators != path.trim_path_separators)
      )
  end

  def autoupdate_path
    self.path = formatted_path
  end

  def check_for_submodels
    if contains_other_models?
      errors.add(library_id_changed? ? :library : :path, :nested)
    end
  end

  def destination_is_vacant
    if exists_on_storage? && need_to_move_files?
      errors.add(:path, :destination_exists)
    end
  end

  def move_files
    # Move all the files
    model_files.each(&:reattach!)
    # Remove the old folder if it's still there
    previous_library.storage.delete_prefixed(previous_path)
  end

  def post_creation_activity
    Activity::ModelPublishedJob.set(wait: 5.seconds).perform_later(id) if public?
  end

  def post_update_activity
    if creator_previously_changed? && creator&.public?
      Activity::ModelPublishedJob.set(wait: 5.seconds).perform_later(id)
    elsif collection_previously_changed? && collection&.public?
      Activity::ModelCollectedJob.set(wait: 5.seconds).perform_later(id, collection.id)
    elsif just_became_public?
      Activity::ModelPublishedJob.set(wait: 5.seconds).perform_later(id)
    elsif public? && noteworthy_change?
      Activity::ModelUpdatedJob.set(wait: 5.seconds).perform_later(id)
    end
  end

  def noteworthy_change?
    # Exclude internal fields, they're not interesting enough to post comments for
    !previous_changes.keys.without([
      "id",
      "path",
      "library_id",
      "created_at",
      "updated_at",
      "preview_file_id",
      "slug",
      "public_id",
      "name_lower"
    ]).empty?
  end

  def validate_publishable
    # If the model will be public
    return unless will_be_public?
    # Check required fields
    errors.add :license, :blank if license.nil?
    errors.add :creator, :blank if creator.nil?
    errors.add :creator, :private if creator && !creator.public?
  end

  def publish_creator
    creator&.update!(caber_relations_attributes: [{permission: "view", subject: nil}]) unless creator&.public?
  end
end
</file>

<file path="app/models/problem.rb">
class Problem < ApplicationRecord
  include PublicIDable

  belongs_to :problematic, polymorphic: true

  validates :category, uniqueness: {scope: :problematic}, presence: true

  default_scope { where(ignored: false) }
  scope :including_ignored, -> { unscope(where: :ignored) }

  scope :visible, ->(settings) {
    enabled = DEFAULT_SEVERITIES.merge(settings.symbolize_keys).select { |cat, sev| sev.to_sym != :silent }
    where(category: enabled.keys)
  }

  broadcasts_refreshes

  CATEGORIES = [
    :missing,
    :empty,
    :destination_exists, # No longer used, but kept for compatibility
    :nesting,
    :inefficient,
    :duplicate,
    :no_image,
    :no_3d_model,
    :non_manifold,
    :inside_out,
    :no_license,
    :no_links,
    :no_creator,
    :no_tags
  ]
  enum :category, CATEGORIES

  SEVERITIES = [
    :silent,
    :info,
    :warning,
    :danger
  ]

  DEFAULT_SEVERITIES = ActiveSupport::HashWithIndifferentAccess.new(
    missing: :danger,
    empty: :info,
    nesting: :warning,
    inefficient: :info,
    duplicate: :warning,
    no_image: :silent,
    no_3d_model: :silent,
    non_manifold: :warning,
    inside_out: :warning,
    no_license: :silent,
    no_links: :silent,
    no_creator: :silent,
    no_tags: :silent
  )

  ICONS = ActiveSupport::HashWithIndifferentAccess.new(
    missing: "question-mark-circle",
    nesting: "files-alt",
    duplicate: "files",
    inefficient: "file-earmark-zip",
    no_image: "file-earmark-image",
    no_creator: "person-x",
    no_tags: "label"
  )

  def self.create_or_clear(problematic, category, should_exist, options = {})
    if should_exist
      problematic.problems.find_or_create_by(options.merge(category: category))
    else
      problematic.problems.where(category: category).destroy_all
    end
    should_exist
  end

  def self.ransackable_attributes(auth_object = nil)
    ["category", "created_at", "id", "public_id", "note", "problematic_id", "problematic_type", "updated_at", "ignored", "in_progress"]
  end

  def self.ransackable_associations(auth_object = nil)
    ["problematic"]
  end

  def parent
    problematic.model if problematic_type == "ModelFile"
  end

  def icon
    ICONS[category] || "fire"
  end

  RESOLUTIONS = {
    missing: :destroy,
    empty: :destroy,
    nesting: :merge,
    inefficient: :convert,
    duplicate: :destroy,
    no_image: :upload,
    no_3d_model: :upload,
    non_manifold: :show,
    inside_out: :show,
    no_license: :edit,
    no_links: :edit,
    no_creator: :edit,
    no_tags: :edit
  }

  def resolution_strategy
    RESOLUTIONS[category.to_sym] or raise NotImplementedError.new(category)
  end
end
</file>

<file path="app/models/role.rb">
class Role < ApplicationRecord
  include CaberSubject

  ROLES = [
    :administrator,   # Can do everything
    :moderator,       # Can edit any models
    :contributor,     # Can upload models and edit their own
    :member           # Can view models; read only access
  ]

  has_many :users, through: :users_roles

  belongs_to :resource,
    polymorphic: true,
    optional: true

  validates :resource_type,
    inclusion: {in: Rolify.resource_types},
    allow_nil: true

  validates :name,   # rubocop:todo Rails/UniqueValidationWithoutIndex
    inclusion: {in: ROLES.map(&:to_s)},
    uniqueness: true

  scopify

  def self.merge_duplicates!
    ActiveRecord::Base.transaction do
      ROLES
        .map { |n| Role.where(name: n) } # rubocop:disable Pundit/UsePolicyScope
        .select { |r| r.count > 1 }
        .each do |roles|
          original, *duplicates = roles.order(created_at: :desc)
          Caber::Relation.where(subject_type: "Role", subject_id: duplicates.map(&:id)).update_all(subject_id: original.id) # rubocop:disable Rails/SkipsModelValidations, Pundit/UsePolicyScope
          duplicates.each do |dupe|
            # Rename duplicate role to something different
            dupe.update_attribute :name, "#{dupe.name}##{dupe.id}"  # rubocop:disable Rails/SkipsModelValidations
            # Find all users with the new named role
            # and give them the original role, before removing the dupe
            User.with_role(dupe.name).each do |user|
              user.add_role(original.name)
            end
            dupe.destroy
          end
        end
    end
  end
end
</file>

<file path="app/models/site_settings.rb">
# RailsSettings Model
class SiteSettings < RailsSettings::Base
  cache_prefix { "v1" }

  field :model_tags_filter_stop_words, type: :boolean, default: true
  field :model_tags_tag_model_directory_name, type: :boolean, default: false
  field :model_tags_stop_words_locale, type: :string, default: "en"
  field :model_tags_custom_stop_words, type: :array, default: SupportedMimeTypes.indexable_extensions
  field :model_tags_auto_tag_new, type: :string, default: "!new"
  field :model_path_template, type: :string, default: "{tags}/{modelName}{modelId}"
  field :model_ignored_files, type: :array, default: [
    /^\.[^\.]+/, # Hidden files starting with .
    /.*\/@eaDir\/.*/, # Synology temp files
    /__MACOSX/ # MACOS resource forks
  ]
  field :parse_metadata_from_path, type: :boolean, default: true
  field :safe_folder_names, type: :boolean, default: true
  field :analyse_manifold, type: :boolean, default: false
  field :anonymous_usage_id, type: :string, default: nil
  field :default_viewer_role, type: :string, default: "member"
  field :default_signup_role, type: :string, default: "member"
  field :autocreate_creator_for_new_users, type: :boolean, default: false
  field :approve_signups, type: :boolean, default: true
  field :theme, type: :string, default: "default"
  field :default_library, type: :integer, default: nil
  field :show_libraries, type: :boolean, default: false
  field :registration_enabled, type: :boolean, default: (ENV.fetch("REGISTRATION", nil) == "enabled")

  field :site_name, type: :string, default: ENV.fetch("SITE_NAME", nil)
  field :site_tagline, type: :string, default: ENV.fetch("SITE_TAGLINE", nil)
  field :site_icon, type: :string, default: ENV.fetch("SITE_ICON", nil)
  field :about, type: :string, default: nil
  field :rules, type: :string, default: nil
  field :support_link, type: :string, default: nil

  field :enable_user_quota, type: :boolean, default: false
  field :default_user_quota, type: :integer, default: 0

  field :pregenerate_downloads, type: :boolean, default: false
  field :download_expiry_time_in_hours, type: :integer, default: 24

  field :allow_robots, type: :boolean, default: false
  field :allow_ai_bots, type: :boolean, default: false
  field :default_indexable, type: :boolean, default: false
  field :default_ai_indexable, type: :boolean, default: false

  validates :model_ignored_files, regex_array: {strict: true}

  def self.email_configured?
    !Rails.env.production? || ENV.fetch("SMTP_SERVER", false)
  end

  def self.max_file_upload_size
    ENV.fetch("MAX_FILE_UPLOAD_SIZE", 1_073_741_824).to_i
  end

  def self.max_file_extract_size
    ENV.fetch("MAX_FILE_EXTRACT_SIZE", 1_073_741_824).to_i
  end

  def self.demo_mode_enabled?
    Rails.application.config.manyfold_features[:demo_mode]
  end

  def self.multiuser_enabled?
    Rails.application.config.manyfold_features[:multiuser]
  end

  def self.federation_enabled?
    Rails.application.config.manyfold_features[:federation]
  end

  def self.oidc_enabled?
    Rails.application.config.manyfold_features[:oidc]
  end

  def self.default_user
    User.with_role(:administrator).first
  end

  def self.social_enabled?
    multiuser_enabled? || federation_enabled?
  end

  def self.ignored_file?(pathname)
    patterns ||= model_ignored_files
    (File.split(pathname) - ["."]).any? do |path_component|
      patterns.any? { |pattern| path_component =~ pattern.to_regexp }
    end
  end

  module UserDefaults
    RENDERER = ActiveSupport::HashWithIndifferentAccess.new(
      grid_width: 200,
      grid_depth: 200,
      show_grid: true,
      enable_pan_zoom: false,
      background_colour: "#000000",
      object_colour: "#ffffff",
      render_style: "original"
    )

    PAGINATION = ActiveSupport::HashWithIndifferentAccess.new(
      models: true,
      creators: true,
      collections: true,
      per_page: 12
    )

    TAG_CLOUD = ActiveSupport::HashWithIndifferentAccess.new(
      threshold: 2,
      heatmap: true,
      keypair: true,
      sorting: "frequency"
    )

    FILE_LIST = ActiveSupport::HashWithIndifferentAccess.new(
      hide_presupported_versions: true
    )
  end
end
</file>

<file path="app/models/user.rb">
require "uri"

class User < ApplicationRecord
  include Lister
  include Follower
  include CaberSubject
  include PublicIDable

  # Creator ownership relation used for auto-creation
  has_many :creators, -> { where("caber_relations.permission": "own") }, through: :caber_relations, source_type: "Creator", source: :object
  accepts_nested_attributes_for :creators

  before_save :set_quota

  acts_as_federails_actor(
    username_field: :username,
    name_field: :username,
    user_count_method: :user_count
  )

  rolify
  devise :database_authenticatable,
    :registerable, :zxcvbnable,
    :rememberable, :recoverable,
    :lockable, :timeoutable

  devise :omniauthable, omniauth_providers: %i[openid_connect] if SiteSettings.oidc_enabled?

  validates :username, multimodel_uniqueness: {case_sensitive: false, check: FederailsCommon::FEDIVERSE_USERNAMES}

  validates :username,
    presence: true,
    uniqueness: {case_sensitive: false},
    format: {with: /\A[[:alnum:];]+\z/}

  validates :email,
    presence: true,
    uniqueness: {case_sensitive: false},
    format: {with: URI::MailTo::EMAIL_REGEXP}

  validates :password,
    presence: true,
    confirmation: true,
    if: :password_required?

  after_create :assign_default_role

  # Explicitly explain serialization for MariaDB
  attribute :pagination_settings, :json
  attribute :renderer_settings, :json
  attribute :tag_cloud_settings, :json
  attribute :problem_settings, :json
  attribute :file_list_settings, :json

  has_many :access_grants, # rubocop:disable Rails/InverseOf
    class_name: "Doorkeeper::AccessGrant",
    foreign_key: :resource_owner_id,
    dependent: :delete_all

  has_many :access_tokens, # rubocop:disable Rails/InverseOf
    class_name: "Doorkeeper::AccessToken",
    foreign_key: :resource_owner_id,
    dependent: :delete_all

  has_many :oauth_applications,
    class_name: "Doorkeeper::Application",
    as: :owner,
    dependent: :delete_all,
    inverse_of: :owner

  def federails_name
    username
  end

  def to_param
    username
  end

  def self.find_param(param)
    find_by!(username: param)
  end

  def printed?(file)
    listed?(file, :printed)
  end

  def self.ransackable_attributes(auth_object = nil)
    ["created_at", "email", "id", "updated_at", "username"]
  end

  def self.ransackable_associations(auth_object = nil)
    ["role"]
  end

  def is_administrator?
    has_any_role_of? :administrator
  end

  def is_moderator?
    has_any_role_of? :administrator, :moderator
  end

  def is_contributor?
    has_any_role_of? :administrator, :moderator, :contributor
  end

  def is_member?
    has_any_role_of? :administrator, :moderator, :contributor, :member
  end

  def problem_severity(category)
    problem_settings[category.to_s]&.to_sym || Problem::DEFAULT_SEVERITIES[category.to_sym]
  end

  def self.from_omniauth(auth)
    # Match existing users by email first
    user = find_by(auth_provider: nil, auth_uid: nil, email: auth.info.email)
    if user
      user.update!(
        auth_provider: auth.provider,
        auth_uid: auth.uid
      )
    else
      # Email isn't present, so let's match by ID
      user = find_or_create_by(auth_provider: auth.provider, auth_uid: auth.uid) do |user|
        user.email = auth.info.email
        # Find an unused username - get the first of a few options
        user.username = [
          auth.info.preferred_username,
          auth.info.nickname&.parameterize,
          auth.info.email&.split("@")&.[](0),
          # Fallback to any of the above with some random numbers on the end
          (auth.info.preferred_username || auth.info.nickname&.parameterize || auth.info.email&.split("@")&.[](0) || "") + SecureRandom.hex(2)
        ].compact.find { |u| !User.exists?(username: u) }
      end
    end
    user
  end

  def self.user_count(range)
    return User.count if range.nil? # rubocop:disable Pundit/UsePolicyScope

    # Updated date isn't a great proxy for activity, but it'll do for now
    # We can improve this by using devise trackable to track logins at some point
    User.where(updated_at: range).count # rubocop:disable Pundit/UsePolicyScope
  end

  # Devise approval checks
  def active_for_authentication?
    super && approved?
  end

  def inactive_message
    approved? ? super : :not_approved
  end

  def self.send_reset_password_instructions(attributes = {})
    recoverable = find_or_initialize_with_errors(reset_password_keys, attributes, :not_found)
    if recoverable.persisted?
      if recoverable.approved?
        recoverable.send_reset_password_instructions
      else
        recoverable.errors.add(:base, :not_approved)
      end
    end
    recoverable
  end

  def to_activitypub_object
    ActivityPub::UserSerializer.new(self).serialize
  end

  def public?
    true
  end

  # Quota is in MB and is referred to in the UI as file storage limits for clarity
  def quota
    quota_use_site_default ? SiteSettings.default_user_quota : attributes["quota"].to_i * 1.megabyte
  end

  def has_quota?
    !(attributes["quota"] == 0) && SiteSettings.enable_user_quota
  end

  def current_space_used
    permitted_models.with_permission("own").sum(&:size_on_disk)
  end

  private

  def set_quota
    attributes["quota"] = SiteSettings.default_user_quota if quota_use_site_default
  end

  def has_any_role_of?(*args)
    args.map { |it| has_role? it }.any?
  end

  def assign_default_role
    return unless roles.empty?
    default_roles = [:member, SiteSettings.default_signup_role.to_sym].uniq
    default_roles.each { |it| add_role(it) }
  end

  def password_required?
    return false if auth_provider && auth_uid
    !persisted? || !password.nil? || !password_confirmation.nil?
  end

  def weak_words
    ["manyfold", username]
  end
end
</file>

<file path="app/policies/active_admin/page_policy.rb">
# frozen_string_literal: true

class ActiveAdmin::PagePolicy < ApplicationPolicy
  def show?
    user&.is_administrator?
  end
end
</file>

<file path="app/policies/acts_as_taggable_on/tag_policy.rb">
# frozen_string_literal: true

class ActsAsTaggableOn::TagPolicy < ApplicationPolicy
  class Scope
    attr_reader :user, :scope

    def initialize(user, scope)
      @user = user
      @scope = scope
    end

    def resolve
      scope
    end
  end
end
</file>

<file path="app/policies/acts_as_taggable_on/tagging_policy.rb">
# frozen_string_literal: true

class ActsAsTaggableOn::TaggingPolicy < ApplicationPolicy
  class Scope
    attr_reader :user, :scope

    def initialize(user, scope)
      @user = user
      @scope = scope
    end

    def resolve
      scope
    end
  end
end
</file>

<file path="app/policies/doorkeeper/application_policy.rb">
class Doorkeeper::ApplicationPolicy < ApplicationPolicy
  def index?
    user.present?
  end

  def show?
    one_of(
      record.owner == user,
      user&.is_moderator?
    )
  end

  def create?
    none_of(
      SiteSettings.demo_mode_enabled?
    )
  end

  def update?
    all_of(
      one_of(
        user == record,
        user&.is_administrator?
      ),
      SiteSettings.multiuser_enabled?,
      none_of(
        SiteSettings.demo_mode_enabled?
      )
    )
  end

  def destroy?
    update?
  end

  class Scope
    attr_reader :user, :scope

    def initialize(user, scope)
      @user = user
      @scope = scope
    end

    def resolve
      user.is_moderator? ? scope : scope.where(owner: user)
    end
  end
end
</file>

<file path="app/policies/federails/moderation/domain_block_policy.rb">
class Federails::Moderation::DomainBlockPolicy < ApplicationPolicy
  def index?
    all_of(
      SiteSettings.federation_enabled?,
      @user.is_moderator?
    )
  end

  def show?
    index?
  end

  def edit?
    index?
  end

  def update?
    index?
  end

  def destroy?
    index?
  end

  class Scope < ApplicationPolicy::Scope
  end
end
</file>

<file path="app/policies/federails/moderation/report_policy.rb">
class Federails::Moderation::ReportPolicy < ApplicationPolicy
  def index?
    all_of(
      SiteSettings.multiuser_enabled?,
      @user.is_moderator?
    )
  end

  def new?
    all_of(
      SiteSettings.multiuser_enabled?,
      @user.is_member?
    )
  end

  def create?
    new?
  end

  def show?
    index?
  end

  def edit?
    index?
  end

  def update?
    index?
  end

  def destroy?
    index?
  end

  class Scope < ApplicationPolicy::Scope
  end
end
</file>

<file path="app/policies/federails/actor_policy.rb">
class Federails::ActorPolicy < ApplicationPolicy
  def index?
    all_of(
      SiteSettings.multiuser_enabled?,
      @user.is_moderator?
    )
  end

  def show?
    index?
  end

  def edit?
    index?
  end

  def update?
    index?
  end

  def destroy?
    index?
  end

  class Scope < ApplicationPolicy::Scope
  end
end
</file>

<file path="app/policies/federails/following_policy.rb">
class Federails::FollowingPolicy < ApplicationPolicy
  def create?
    all_of(
      one_of(
        SiteSettings.multiuser_enabled?,
        SiteSettings.federation_enabled?
      ),
      @user
    )
  end

  def destroy?
    create?
  end

  class Scope < ApplicationPolicy::Scope
  end
end
</file>

<file path="app/policies/users/passwords_policy.rb">
# frozen_string_literal: true

class Users::PasswordsPolicy < ApplicationPolicy
  def create?
    SiteSettings.multiuser_enabled? && SiteSettings.email_configured?
  end

  def update?
    SiteSettings.multiuser_enabled? && SiteSettings.email_configured?
  end
end
</file>

<file path="app/policies/users/registrations_policy.rb">
# frozen_string_literal: true

class Users::RegistrationsPolicy < ApplicationPolicy
  def cancel?
    SiteSettings.multiuser_enabled?
  end
end
</file>

<file path="app/policies/users/sessions_policy.rb">
# frozen_string_literal: true

class Users::SessionsPolicy < ApplicationPolicy
  def new?
    true # different from create? to allow autologin
  end

  def create?
    SiteSettings.multiuser_enabled?
  end

  def destroy?
    SiteSettings.multiuser_enabled?
  end
end
</file>

<file path="app/policies/activity_policy.rb">
class ActivityPolicy < ApplicationPolicy
  def index?
    user&.is_administrator?
  end
end
</file>

<file path="app/policies/application_policy.rb">
# frozen_string_literal: true

class ApplicationPolicy
  attr_reader :user, :record

  STANDARD_VIEW_PERMISSIONS = ["preview", "view", "edit", "own"]
  STANDARD_EDIT_PERMISSIONS = ["edit", "own"]

  def initialize(user, record)
    @user = user
    @record = record
  end

  def index?
    show?
  end

  def show?
    one_of(
      user&.is_moderator?,
      check_permissions(record, STANDARD_VIEW_PERMISSIONS, user, role_fallback: :member)
    )
  end

  def create?
    user&.is_contributor?
  end

  def new?
    create?
  end

  def update?
    one_of(
      user&.is_moderator?,
      check_permissions(record, STANDARD_EDIT_PERMISSIONS, user, role_fallback: :moderator)
    )
  end

  def edit?
    update?
  end

  def destroy?
    all_of(
      one_of(
        user&.is_moderator?,
        check_permissions(record, STANDARD_EDIT_PERMISSIONS, user, role_fallback: :moderator)
      ),
      none_of(
        SiteSettings.demo_mode_enabled?
      )
    )
  end

  def destroy_all?
    user&.is_administrator?
  end

  class Scope
    def initialize(user, scope)
      @user = user
      @scope = scope
    end

    def resolve
      return scope if user&.is_moderator? || !scope.respond_to?(:granted_to)

      result = scope.granted_to(STANDARD_VIEW_PERMISSIONS, [user, nil])
      result = result.or(scope.granted_to(STANDARD_VIEW_PERMISSIONS, user.roles)) if user
      result
    end

    private

    attr_reader :user, :scope
  end

  class UpdateScope < Scope
    def resolve
      return scope if user&.is_moderator? || !scope.respond_to?(:granted_to)

      result = scope.granted_to(STANDARD_EDIT_PERMISSIONS, [user, nil])
      result = result.or(scope.granted_to(STANDARD_EDIT_PERMISSIONS, user.roles)) if user
      result
    end
  end

  class OwnerScope < Scope
    def resolve
      scope.granted_to("own", user)
    rescue NoMethodError
      scope.none
    end
  end

  private

  def check_permissions(record, permissions, user, role_fallback: nil)
    record.grants_permission_to?(permissions, [user, user&.roles].flatten)
  rescue NoMethodError
    user&.has_role?(role_fallback)
  end

  def one_of(*args)
    args.any?
  end

  def all_of(*args)
    args.all?
  end

  def none_of(*args)
    args.none?
  end
end
</file>

<file path="app/policies/collection_policy.rb">
class CollectionPolicy < ApplicationPolicy
end
</file>

<file path="app/policies/creator_policy.rb">
class CreatorPolicy < ApplicationPolicy
end
</file>

<file path="app/policies/library_policy.rb">
class LibraryPolicy < ApplicationPolicy
  def index?
    all_of(
      user&.is_administrator?
    )
  end

  def create?
    all_of(
      user&.is_administrator?,
      none_of(
        SiteSettings.demo_mode_enabled?
      )
    )
  end

  def update?
    create?
  end

  def destroy?
    create?
  end

  def scan?
    user&.is_contributor?
  end

  def scan_all?
    scan?
  end

  class Scope
    attr_reader :user, :scope

    def initialize(user, scope)
      @user = user
      @scope = scope
    end

    def resolve
      scope.all
    end
  end
end
</file>

<file path="app/policies/link_policy.rb">
class LinkPolicy < ApplicationPolicy
  class Scope
    attr_reader :user, :scope

    def initialize(user, scope)
      @user = user
      @scope = scope
    end

    def resolve
      scope
    end
  end
end
</file>

<file path="app/policies/model_file_policy.rb">
class ModelFilePolicy < ApplicationPolicy
  def show?
    return false unless ModelPolicy.new(@user, @record.model).show?
    @user&.is_moderator? || @record.previewable? || check_permissions(@record.model, ["view", "edit", "own"], @user)
  end

  def create?
    can_update_model?
  end

  def convert?
    can_update_model? && @record.loadable? && !@record.problems.exists?(category: :non_manifold)
  end

  def update?
    can_update_model?
  end

  def destroy?
    can_update_model?
  end

  def bulk_edit?
    bulk_update?
  end

  def bulk_update?
    can_update_model?
  end

  class Scope < ApplicationPolicy::Scope
    FULL_VIEW_PERMISSIONS = ["view", "edit", "own"]

    def resolve
      return scope if @user&.is_moderator?
      subject_list = [nil, user, user&.roles].flatten
      scope
        # Where the user only has preview permissions, then show previewable files
        .where(previewable: true)
        .where(model: Model.granted_to("preview", subject_list))
        .where.not(model: Model.granted_to(FULL_VIEW_PERMISSIONS, subject_list))
        # Otherwise, show files where the user has full view permissions on the model
        .or(
          scope.where(model: Model.granted_to(FULL_VIEW_PERMISSIONS, subject_list))
        )
    end
  end

  private

  def can_update_model?
    ModelPolicy.new(@user, @record.model).update?
  end
end
</file>

<file path="app/policies/model_policy.rb">
class ModelPolicy < ApplicationPolicy
  def show?
    super && !(user&.sensitive_content_handling == "hide" && record.sensitive)
  end

  def merge?
    all_of(
      update?,
      none_of(
        SiteSettings.demo_mode_enabled?
      )
    )
  end

  def upload?
    edit? && UploadPolicy.new(user, record).create?
  end

  def destroy?
    super && (record.is_a?(Model) ? !record.contains_other_models? : true)
  end

  def scan?
    user&.is_contributor?
  end

  def bulk_edit?
    user&.is_moderator?
  end

  def bulk_update?
    user&.is_moderator?
  end

  class Scope < ApplicationPolicy::Scope
    def resolve
      if user&.sensitive_content_handling == "hide"
        super.where(sensitive: false)
      else
        super
      end
    end
  end
end
</file>

<file path="app/policies/problem_policy.rb">
class ProblemPolicy < ApplicationPolicy
  def index?
    user&.is_moderator?
  end

  def show?
    user&.is_moderator?
  end

  def resolve?
    all_of(
      user&.is_moderator?,
      Pundit::PolicyFinder.new(record.problematic).policy.new(user, record.problematic).send(:"#{record.resolution_strategy}?")
    )
  end

  class Scope < ApplicationPolicy::Scope
    def resolve
      @user.is_moderator? ? scope : scope.none
    end
  end
end
</file>

<file path="app/policies/role_policy.rb">
class RolePolicy < ApplicationPolicy
  class Scope
    attr_reader :user, :scope

    def initialize(user, scope)
      @user = user
      @scope = scope
    end

    def resolve
      user&.is_administrator? ? scope : scope.where(name: [:member, :contributor])
    end
  end
end
</file>

<file path="app/policies/settings_policy.rb">
class SettingsPolicy < ApplicationPolicy
  def show?
    update?
  end

  def analysis?
    update?
  end

  def appearance?
    update?
  end

  def downloads?
    update?
  end

  def multiuser?
    update?
  end

  def reporting?
    update?
  end

  def update?
    one_of(
      user&.is_administrator?
    )
  end

  def discovery?
    update?
  end
end
</file>

<file path="app/policies/upload_policy.rb">
class UploadPolicy < ApplicationPolicy
  def index?
    create?
  end

  def create?
    all_of(
      user&.is_contributor?,
      user&.has_quota? ? user.current_space_used < user.quota : true,
      none_of(
        SiteSettings.demo_mode_enabled?
      )
    )
  end
end
</file>

<file path="app/policies/user_policy.rb">
class UserPolicy < ApplicationPolicy
  def index?
    all_of(
      user&.is_moderator?,
      none_of(
        SiteSettings.demo_mode_enabled?
      )
    )
  end

  def show?
    all_of(
      one_of(
        user == record,
        user&.is_moderator?
      )
    )
  end

  def create?
    all_of(
      SiteSettings.multiuser_enabled?,
      one_of(
        SiteSettings.registration_enabled?,
        user&.is_moderator?
      ),
      none_of(
        SiteSettings.demo_mode_enabled?
      )
    )
  end

  def update?
    one_of(
      user == record,
      user&.is_moderator?
    )
  end

  def destroy?
    all_of(
      one_of(
        user == record,
        user&.is_administrator?
      ),
      SiteSettings.multiuser_enabled?,
      none_of(
        SiteSettings.demo_mode_enabled?
      )
    )
  end

  class Scope
    attr_reader :user, :scope

    def initialize(user, scope)
      @user = user
      @scope = scope
    end

    def resolve
      scope
    end
  end
end
</file>

<file path="app/serializers/activity_pub/application_serializer.rb">
module ActivityPub
  class ApplicationSerializer < BaseSerializer
    def federate?
      @object.public?
    end

    def to
      PUBLIC_COLLECTION if @object.public?
    end

    private

    def short_creator(creator)
      return nil unless creator
      {
        "@id": creator.federails_actor.federated_url,
        type: "Person",
        name: creator.name,
        url: creator.federails_actor.profile_url,
        "f3di:concreteType": "Creator"
      }
    end

    def short_collection(collection)
      return nil unless collection
      {
        "@id": collection.federails_actor.federated_url,
        type: "Group",
        name: collection.name,
        url: collection.federails_actor.profile_url,
        "f3di:concreteType": "Collection"
      }
    end

    def oembed_to_preview(oembed_data)
      data = case oembed_data[:type]
      when "photo"
        {
          type: "Image",
          url: oembed_data[:url],
          mediaType: @object.preview_file.mime_type.to_s
        }
      when "rich"
        {
          type: "Document",
          content: oembed_data[:html],
          mediaType: "text/html"
        }
      when "video"
        {
          type: "Video",
          url: oembed_data[:url],
          mediaType: @object.preview_file.mime_type.to_s
        }
      end
      data&.merge({
        name: @object.preview_file&.name,
        summary: @object.preview_file&.caption
      })&.compact
    end
  end
end
</file>

<file path="app/serializers/activity_pub/base_serializer.rb">
module ActivityPub
  class BaseSerializer
    PUBLIC_COLLECTION = "https://www.w3.org/ns/activitystreams#Public"

    def initialize(object)
      @object = object
    end

    def serialize
      raise NotImplementedError
    end

    def federate?
      true
    end

    def to
      nil
    end

    def bto
      nil
    end

    def cc
      nil
    end

    def bcc
      nil
    end

    def audience
      nil
    end

    protected

    def address_fields
      {
        "to" => to,
        "bto" => bto,
        "cc" => cc,
        "bcc" => bcc,
        "audience" => audience
      }.compact
    end
  end
end
</file>

<file path="app/serializers/activity_pub/collection_serializer.rb">
module ActivityPub
  class CollectionSerializer < ApplicationSerializer
    def serialize
      raise ActiveRecord::RecordNotFound unless federate? # Temporary guard against publishing non-public Federails::ActorEntity objects
      {
        "@context": [
          {
            f3di: "http://purl.org/f3di/ns#",
            toot: "http://joinmastodon.org/ns#",
            indexable: "toot:indexable"
          }
        ],
        summary: @object.caption,
        content: @object.notes,
        "f3di:concreteType": "Collection",
        indexable: @object.indexable?,
        attachment: @object.links.map { |it| {type: "Link", href: it.url} },
        attributedTo: short_creator(@object.creator),
        context: short_collection(@object.collection),
        preview: oembed_to_preview(OEmbed::CollectionSerializer.new(@object, maxwidth: "100%", maxheight: "100%").serialize)
      }.merge(address_fields)
    end

    def cc
      [
        @object.federails_actor.followers_url,
        @object.creator&.federails_actor&.followers_url,
        @object.collection&.federails_actor&.followers_url
      ].compact
    end
  end
end
</file>

<file path="app/serializers/activity_pub/comment_serializer.rb">
module ActivityPub
  class CommentSerializer < ApplicationSerializer
    def serialize
      Federails::DataTransformer::Note.to_federation(
        @object,
        content: to_html,
        custom: {
          "@context" => [
            "https://purl.archive.org/miscellany",
            {
              f3di: "http://purl.org/f3di/ns#",
              Hashtag: "as:Hashtag",
              sensitive: "as:sensitive"
            }
          ],
          "context" => Rails.application.routes.url_helpers.url_for([@object.commentable, {only_path: false}]),
          "sensitive" => @object.sensitive,
          "summary" => (@object.sensitive ? "Sensitive Content" : nil), # Adding a summary if sensitive, for Mastodon
          "tag" => hashtags,
          "f3di:compatibilityNote" => @object.system
        }.compact.merge(address_fields)
      )
    end

    def cc
      [
        @object.commentable&.federails_actor&.followers_url,
        @object.commenter&.federails_actor&.followers_url,
        (@object.commentable&.creator&.federails_actor&.followers_url if @object.commentable.respond_to?(:creator)),
        (@object.commentable&.collection&.federails_actor&.followers_url if @object.commentable.respond_to?(:collection))
      ].compact
    end

    private

    def hashtags
      return nil unless @object.commentable.respond_to?(:tags)

      @object.commentable.tags.pluck(:name).map do |tag|
        {
          type: "Hashtag",
          name: "##{tag.tr(" ", "_").camelize}",
          href: Rails.application.routes.url_helpers.url_for([@object.commentable.class, {tag: tag}])
        }
      end
    end

    def to_html
      content = [Kramdown::Document.new(@object.comment, input: "GFM").to_html]
      tags = hashtags
      if !tags&.empty?
        content << "<p role=\"list\">#{tags.map { |t| %(<a role="listitem" href="#{t[:href]}" class="mention hashtag" rel="tag">#{t[:name]}</a>) }&.join(" ")}</p>"
      end
      content.join
    end
  end
end
</file>

<file path="app/serializers/activity_pub/creator_serializer.rb">
module ActivityPub
  class CreatorSerializer < ApplicationSerializer
    def serialize
      raise ActiveRecord::RecordNotFound unless federate? # Temporary guard against publishing non-public Federails::ActorEntity objects
      {
        "@context": {
          f3di: "http://purl.org/f3di/ns#",
          toot: "http://joinmastodon.org/ns#",
          indexable: "toot:indexable",
          attributionDomains: {
            "@id": "toot:attributionDomains",
            "@type": "@id"
          }
        },
        summary: @object.caption,
        content: @object.notes,
        attributionDomains: [
          [Rails.application.default_url_options[:host], Rails.application.default_url_options[:port]].compact.join(":")
        ],
        "f3di:concreteType": "Creator",
        indexable: @object.indexable?,
        attachment: @object.links.map { |it| {type: "Link", href: it.url} }
      }.merge(address_fields)
    end

    def cc
      @object.federails_actor.followers_url
    end
  end
end
</file>

<file path="app/serializers/activity_pub/model_serializer.rb">
module ActivityPub
  class ModelSerializer < ApplicationSerializer
    def serialize
      raise ActiveRecord::RecordNotFound unless federate? # Temporary guard against publishing non-public Federails::ActorEntity objects
      {
        "@context": [
          "https://purl.archive.org/miscellany",
          {
            spdx: "http://spdx.org/rdf/terms#",
            f3di: "http://purl.org/f3di/ns#",
            toot: "http://joinmastodon.org/ns#",
            Hashtag: "as:Hashtag",
            sensitive: "as:sensitive",
            indexable: "toot:indexable"
          }
        ],
        summary: @object.caption,
        content: @object.notes,
        "f3di:concreteType": "3DModel",
        attachment: @object.links.map { |it| {type: "Link", href: it.url} },
        sensitive: @object.sensitive,
        indexable: @object.indexable?,
        tag: hashtags,
        attributedTo: short_creator(@object.creator),
        context: short_collection(@object.collection),
        "spdx:license": license,
        preview: oembed_to_preview(OEmbed::ModelSerializer.new(@object, maxwidth: "100%", maxheight: "100%").serialize)
      }.compact.merge(address_fields)
    end

    def cc
      [
        @object.federails_actor.followers_url,
        @object.creator&.federails_actor&.followers_url,
        @object.collection&.federails_actor&.followers_url
      ].compact
    end

    private

    def license
      return if @object.license.blank?
      {
        "@id": @object.license.starts_with?("LicenseRef-") ?
          nil :
          "http://spdx.org/licenses/#{@object.license}",
        "spdx:licenseId": @object.license
      }.compact
    end

    def hashtags
      @object.tags.pluck(:name).map do |tag|
        {
          type: "Hashtag",
          name: tag,
          href: Rails.application.routes.url_helpers.models_url(tag: tag)
        }
      end
    end
  end
end
</file>

<file path="app/serializers/activity_pub/user_serializer.rb">
module ActivityPub
  class UserSerializer < ApplicationSerializer
    def serialize
      {
        "@context": {
          f3di: "http://purl.org/f3di/ns#"
        },
        "f3di:concreteType": "User"
      }
    end
  end
end
</file>

<file path="app/serializers/data_package/base_serializer.rb">
module DataPackage
  class BaseSerializer
    def initialize(object)
      @object = object
    end

    def serialize
      raise NotImplementedError
    end
  end
end
</file>

<file path="app/serializers/data_package/collection_serializer.rb">
module DataPackage
  class CollectionSerializer < BaseSerializer
    def serialize
      {
        title: @object.name,
        path: Rails.application.routes.url_helpers.url_for(@object),
        caption: @object.caption,
        description: @object.notes,
        links: @object.links.map { |it| LinkSerializer.new(it).serialize }
      }.compact
    end
  end
end
</file>

<file path="app/serializers/data_package/creator_serializer.rb">
module DataPackage
  class CreatorSerializer < BaseSerializer
    def serialize
      {
        title: @object.name,
        path: Rails.application.routes.url_helpers.url_for(@object),
        roles: ["creator"],
        caption: @object.caption,
        description: @object.notes,
        links: @object.links.map { |it| LinkSerializer.new(it).serialize }
      }.compact
    end
  end
end
</file>

<file path="app/serializers/data_package/link_serializer.rb">
module DataPackage
  class LinkSerializer < BaseSerializer
    def serialize
      {
        path: @object.url
      }.compact
    end
  end
end
</file>

<file path="app/serializers/data_package/model_file_serializer.rb">
module DataPackage
  class ModelFileSerializer < BaseSerializer
    def serialize
      return if !@object.persisted? || @object.basename == "datapackage.json"
      {
        name: @object.basename.parameterize,
        path: @object.filename,
        mediatype: @object.mime_type,
        caption: @object.caption,
        description: @object.notes,
        up: @object.up_direction,
        presupported: @object.presupported
      }.compact
    end
  end
end
</file>

<file path="app/serializers/data_package/model_serializer.rb">
module DataPackage
  class ModelSerializer < BaseSerializer
    def serialize
      {
        "$schema": "https://manyfold.app/profiles/0.0/datapackage.json",
        name: @object.name.parameterize,
        title: @object.name,
        caption: @object.caption,
        description: @object.notes,
        homepage: Rails.application.routes.url_helpers.url_for(@object),
        image: @object.preview_file&.is_image? ? @object.preview_file.filename : nil,
        keywords: @object.tag_list,
        licenses: (@object.license ? [
          {
            name: @object.license,
            path: Spdx.licenses.dig(@object.license, "reference")
          }.compact
        ] : nil),
        resources: @object.model_files.without_special.map { |it| ModelFileSerializer.new(it).serialize },
        sensitive: @object.sensitive,
        contributors: @object.creator ? [CreatorSerializer.new(@object.creator).serialize] : nil,
        collections: @object.collection ? [CollectionSerializer.new(@object.collection).serialize] : nil,
        links: @object.links.map { |it| LinkSerializer.new(it).serialize }
      }.compact
    end
  end
end
</file>

<file path="app/serializers/manyfold_api/v0/application_serializer.rb">
module ManyfoldApi::V0
  class ApplicationSerializer
    def initialize(object)
      @object = object
    end

    def context
      [
        "https://schema.org/",
        {
          hydra: "http://www.w3.org/ns/hydra/core#",
          spdx: "http://spdx.org/rdf/terms#"
        }
      ]
    end

    def license(id)
      return if id.blank?
      {
        "@type": "spdx:License",
        "@id": id.starts_with?("LicenseRef-") ?
          nil :
          "http://spdx.org/licenses/#{id}",
        licenseId: id
      }.compact
    end

    def collection_ref(collection)
      return if collection.nil?
      ref id: Rails.application.routes.url_helpers.collection_url(collection), type: "Collection"
    end

    def creator_ref(creator)
      return if creator.nil?
      ref id: Rails.application.routes.url_helpers.creator_url(creator), type: "Organization"
    end

    def model_ref(model)
      return if model.nil?
      ref id: Rails.application.routes.url_helpers.model_url(model), type: "3DModel"
    end

    def file_ref(file)
      return if file.nil?
      ref id: Rails.application.routes.url_helpers.model_model_file_url(file.model, file), type: "3DModel"
    end

    def ref(id:, type:)
      {
        "@id": id,
        "@type": type
      }
    end

    def self.schema_ref_name
      name.underscore.split("/").last.gsub("_serializer", "_response")
    end

    def self.schema_ref
      {"$ref" => "#/components/schemas/#{schema_ref_name}"}
    end

    def self.schema
      raise NotImplementedError
    end
  end
end
</file>

<file path="app/serializers/manyfold_api/v0/collection_list_serializer.rb">
module ManyfoldApi::V0
  class CollectionListSerializer < ApplicationSerializer
    def serialize
      {
        "@context": context,
        "@id": Rails.application.routes.url_helpers.collections_path,
        "@type": "hydra:Collection",
        totalItems: @object.total_count,
        member: @object.map { |collection|
          {
            "@id": Rails.application.routes.url_helpers.collection_path(collection),
            name: collection.name
          }
        },
        view: {
          "@id": Rails.application.routes.url_helpers.collections_path(page: @object.current_page),
          "@type": "hydra:PartialCollectionView",
          first: Rails.application.routes.url_helpers.collections_path(page: 1),
          previous: (Rails.application.routes.url_helpers.collections_path(page: @object.prev_page) if @object.prev_page),
          next: (Rails.application.routes.url_helpers.collections_path(page: @object.next_page) if @object.next_page),
          last: Rails.application.routes.url_helpers.collections_path(page: @object.total_pages)
        }.compact
      }
    end
  end
end
</file>

<file path="app/serializers/manyfold_api/v0/collection_serializer.rb">
module ManyfoldApi::V0
  class CollectionSerializer < ApplicationSerializer
    def serialize
      collection_ref(@object).merge(
        "@context": context,
        name: @object.name,
        caption: @object.caption,
        description: @object.notes,
        creator: creator_ref(@object.creator),
        isPartOf: collection_ref(@object.collection),
        links: @object.links.map { |it| LinkSerializer.new(it).serialize }
      ).compact
    end

    def self.schema
      {
        type: :object,
        properties: {
          "@context": {"$ref" => "#/components/schemas/jsonld_context"},
          "@id": {type: :string, example: "https://example.com/collections/abc123"},
          "@type": {type: :string, example: "Collection"}
        }.merge(CollectionDeserializer.schema[:properties]),
        required: ["@context", "@id", "@type"]
      }
    end
  end
end
</file>

<file path="app/serializers/manyfold_api/v0/creator_list_serializer.rb">
module ManyfoldApi::V0
  class CreatorListSerializer < ApplicationSerializer
    def serialize
      {
        "@context": context,
        "@id": Rails.application.routes.url_helpers.creators_path,
        "@type": "hydra:Collection",
        totalItems: @object.total_count,
        member: @object.map { |creator|
          {
            "@id": Rails.application.routes.url_helpers.creator_path(creator),
            name: creator.name
          }
        },
        view: {
          "@id": Rails.application.routes.url_helpers.creators_path(page: @object.current_page),
          "@type": "hydra:PartialCollectionView",
          first: Rails.application.routes.url_helpers.creators_path(page: 1),
          previous: (Rails.application.routes.url_helpers.creators_path(page: @object.prev_page) if @object.prev_page),
          next: (Rails.application.routes.url_helpers.creators_path(page: @object.next_page) if @object.next_page),
          last: Rails.application.routes.url_helpers.creators_path(page: @object.total_pages)
        }.compact
      }
    end
  end
end
</file>

<file path="app/serializers/manyfold_api/v0/creator_serializer.rb">
module ManyfoldApi::V0
  class CreatorSerializer < ApplicationSerializer
    def serialize
      creator_ref(@object).merge(
        "@context": context,
        name: @object.name,
        slug: @object.slug,
        caption: @object.caption,
        description: @object.notes,
        links: @object.links.map { |it| LinkSerializer.new(it).serialize }
      ).compact
    end

    def self.schema
      {
        type: :object,
        properties: {
          "@context": {"$ref" => "#/components/schemas/jsonld_context"},
          "@id": {type: :string, example: "https://example.com/creators/abc123"},
          "@type": {type: :string, example: "Organization"}
        }.merge(CreatorDeserializer.schema[:properties]),
        required: ["@context", "@id", "@type"]
      }
    end
  end
end
</file>

<file path="app/serializers/manyfold_api/v0/link_serializer.rb">
module ManyfoldApi::V0
  class LinkSerializer < ApplicationSerializer
    def serialize
      {
        url: @object.url
      }.compact
    end

    def self.schema
      LinkDeserializer.schema
    end
  end
end
</file>

<file path="app/serializers/manyfold_api/v0/model_file_serializer.rb">
module ManyfoldApi::V0
  class ModelFileSerializer < ApplicationSerializer
    def serialize
      file_ref(@object).merge(
        "@context": context,
        name: @object.name,
        isPartOf: model_ref(@object.model),
        contentUrl: Rails.application.routes.url_helpers.model_model_file_path(@object.model, @object, format: @object.extension),
        encodingFormat: @object.mime_type.to_s,
        contentSize: @object.size,
        description: @object.notes,
        caption: @object.caption,
        presupported: @object.presupported,
        up: @object.up_direction,
        related: [
          @object.presupported_version ? file_ref(@object.presupported_version).merge(relationship: "presupported_version") : nil,
          @object.unsupported_version ? file_ref(@object.unsupported_version).merge(relationship: "presupported_version_of") : nil
        ].compact,
        "spdx:license": license(@object.model.license),
        creator: creator_ref(@object.model.creator)
      ).compact
    end

    def self.schema
      {
        type: :object,
        properties: {
          # JSON-LD
          "@context": {"$ref" => "#/components/schemas/jsonld_context"},
          "@id": {type: :string, example: "https://example.com/models/abc123/model_files/def456"},
          "@type": {type: :string, example: "3DModel"},
          # Derived attributes
          name: {type: :string, example: "Benchy"},
          encodingFormat: {type: :string, example: "model/stl"},
          contentUrl: {type: :string, example: "https://example.com/models/abc123/model_files/def456.stl"},
          contentSize: {type: :integer, example: 12345},
          # Attributes from model
          isPartOf: {type: :object, properties: {
            "@id": {type: :string, example: "https://example.com/models/abc123"},
            "@type": {type: :string, example: "3DModel"}
          }},
          "spdx:license": {"$ref" => "#/components/schemas/spdxLicense"},
          creator: {
            type: :object,
            properties: {
              "@id": {type: :string, example: "https://example.com/creators/abc123"},
              "@type": {type: :string, example: "Organization"}
            }
          }
        }.merge(ModelFileDeserializer.schema[:properties]),
        required: ["@context", "@id", "@type", "isPartOf", "encodingFormat"]
      }
    end
  end

  private

  def related_ref(object, relationship)
  end
end
</file>

<file path="app/serializers/manyfold_api/v0/model_list_serializer.rb">
module ManyfoldApi::V0
  class ModelListSerializer < ApplicationSerializer
    def serialize
      {
        "@context": context,
        "@id": Rails.application.routes.url_helpers.models_path,
        "@type": "hydra:Collection",
        totalItems: @object.total_count,
        member: @object.map { |model|
          model_ref(model).merge(
            name: model.name
          )
        },
        view: {
          "@id": Rails.application.routes.url_helpers.models_path(page: @object.current_page),
          "@type": "hydra:PartialCollectionView",
          first: Rails.application.routes.url_helpers.models_path(page: 1),
          previous: (Rails.application.routes.url_helpers.models_path(page: @object.prev_page) if @object.prev_page),
          next: (Rails.application.routes.url_helpers.models_path(page: @object.next_page) if @object.next_page),
          last: Rails.application.routes.url_helpers.models_path(page: @object.total_pages)
        }.compact
      }
    end
  end
end
</file>

<file path="app/serializers/manyfold_api/v0/model_serializer.rb">
module ManyfoldApi::V0
  class ModelSerializer < ApplicationSerializer
    def serialize
      model_ref(@object).merge(
        "@context": context,
        name: @object.name,
        caption: @object.caption,
        description: @object.notes,
        "spdx:license": license(@object.license),
        hasPart: @object.model_files.without_special.map do |file|
          file_ref(file).merge(
            name: file.name,
            encodingFormat: file.mime_type.to_s
          )
        end,
        isPartOf: collection_ref(@object.collection),
        creator: creator_ref(@object.creator),
        sensitive: @object.sensitive,
        keywords: @object.tag_list,
        preview_file: file_ref(@object.preview_file),
        links: @object.links.map { |it| LinkSerializer.new(it).serialize }
      ).compact
    end

    def self.schema
      {
        type: :object,
        properties: {
          "@context": {"$ref" => "#/components/schemas/jsonld_context"},
          "@id": {type: :string, example: "https://example.com/models/abc123"},
          "@type": {type: :string, example: "3DModel"},
          hasPart: {
            type: :array,
            items: {
              type: :object,
              properties: {
                "@id": {type: :string, example: "https://example.com/models/abc123/model_files/def456"},
                "@type": {type: :string, example: "3DModel"},
                name: {type: :string, example: "Benchy"},
                encodingFormat: {type: :string, example: "model/stl"}
              }
            },
            required: ["@id", "@type", "name", "encodingFormat"]
          }
        }.merge(ModelDeserializer.schema[:properties]),
        required: ["@context", "@id", "@type", "hasPart"]
      }
    end
  end
end
</file>

<file path="app/serializers/o_embed/application_serializer.rb">
module OEmbed
  class ApplicationSerializer
    def initialize(object, options = {})
      @object = object
      @maxwidth = options[:maxwidth]
      @maxheight = options[:maxheight]
    end

    def generic_properties
      {
        version: "1.0",
        provider_name: ENV.fetch("SITE_NAME", "Manyfold"),
        provider_url: Rails.application.routes.url_helpers.root_url,
        cache_age: 86400
      }
    end

    def author_properties(creator)
      return {} if creator.nil?
      {
        author_name: creator.name,
        author_url: Rails.application.routes.url_helpers.creator_url(creator)
      }
    end

    def model_file_properties(model_file)
      if model_file&.is_image?
        photo_properties(model_file)
      elsif model_file&.is_renderable?
        renderable_properties(model_file)
      elsif model_file&.is_video?
        video_properties(model_file)
      else
        link_properties
      end
    end

    def link_properties
      {
        type: "link"
      }
    end

    def photo_properties(model_file)
      width = @maxwidth || 512 # TODO proper scale calc based on image size
      height = @maxheight || 512
      {
        type: "photo",
        url: Rails.application.routes.url_helpers.model_model_file_url(model_file.model, model_file, format: model_file.extension),
        width: width,
        height: height
      }
    end

    def video_properties(model_file)
      width = @maxwidth || 512
      height = [@maxheight, width * 0.75].compact.min # TODO proper aspect ratio calculation
      html = <<~EOF
        <video controls width="#{width}" height="#{height}">
          <source
            src="#{Rails.application.routes.url_helpers.model_model_file_url(model_file.model, model_file, format: model_file.extension)}"
            type="#{model_file.mime_type}"
          />
        </video>
      EOF
      {
        type: "video",
        url: Rails.application.routes.url_helpers.model_model_file_url(model_file.model, model_file, format: model_file.extension),
        html: html,
        width: width,
        height: height
      }
    end

    def renderable_properties(model_file)
      width = @maxwidth || 512
      height = @maxheight || 512
      html = <<~EOF
        <iframe
          src="#{Rails.application.routes.url_helpers.model_model_file_url(model_file.model, model_file, embed: true)}"
          width="#{width}" height="#{height}" loading="lazy" referrerpolicy="no-referrer" scrolling="no"
          style="overflow:hidden; border: none" sandbox="allow-scripts allow-pointer-lock allow-same-origin">
        </iframe>
      EOF
      {
        type: "rich",
        html: html,
        width: width,
        height: height
      }
    end
  end
end
</file>

<file path="app/serializers/o_embed/collection_serializer.rb">
module OEmbed
  class CollectionSerializer < ApplicationSerializer
    def serialize
      {
        title: @object.name
      }.merge(
        generic_properties,
        author_properties(@object.creator),
        model_file_properties(@object.preview_file)
      )
    end
  end
end
</file>

<file path="app/serializers/o_embed/creator_serializer.rb">
module OEmbed
  class CreatorSerializer < ApplicationSerializer
    def serialize
      {
        title: @object.name
      }.merge(
        generic_properties,
        link_properties
      )
    end
  end
end
</file>

<file path="app/serializers/o_embed/model_serializer.rb">
module OEmbed
  class ModelSerializer < ApplicationSerializer
    def serialize
      {
        title: @object.name
      }.merge(
        generic_properties,
        author_properties(@object.creator),
        model_file_properties(@object.preview_file)
      )
    end
  end
end
</file>

<file path="app/services/activity_pub/actor_activity_handler.rb">
class ActivityPub::ActorActivityHandler
  def self.handle_create_activity(activity_hash_or_id)
    handle_activity(activity_hash_or_id, "Create")
  end

  def self.handle_update_activity(activity_hash_or_id)
    handle_activity(activity_hash_or_id, "Update")
  end

  def self.handle_activity(activity_hash_or_id, action)
    activity = Fediverse::Request.dereference(activity_hash_or_id)

    # Get object attributes and update object
    attributes = actor_object_attributes(activity)
    return unless attributes
    object = Federails::Actor.find_or_create_by_federation_url(attributes[:federated_url]) # rubocop:disable Rails/DynamicFindBy
    return if object.local? # Don't update local objects, they must have already been done
    object&.update!(attributes)

    if object.entity
      ActivityPub::ApplicationDeserializer.deserializer_for(object)&.update!
    else
      ActivityPub::ApplicationDeserializer.deserializer_for(object)&.create!
    end
  end

  def self.get_actor(activity)
    Federails::Actor.find_or_create_by_federation_url(
      activity["actor"].is_a?(Hash) ?
        activity.dig("actor", "id") :
        activity["actor"]
    )
  end

  # This is copied from Fediverse::Webfinger - that needs refactoring so we can use it directly

  def self.actor_object_attributes(activity)
    object = Fediverse::Request.dereference(activity["object"])

    # We only want to process actors
    return unless object["inbox"].present? && object["outbox"].present?

    id = object.delete("id")
    {
      federated_url: id,
      username: object.delete("preferredUsername"),
      name: object.delete("name"),
      server: server_and_port(id),
      inbox_url: object.delete("inbox"),
      outbox_url: object.delete("outbox"),
      followers_url: object.delete("followers"),
      followings_url: object.delete("following"),
      profile_url: object.delete("url"),
      public_key: object.delete("publicKey")&.dig("publicKeyPem"),
      extensions: object.except("@context")
    }
  end

  def self.server_and_port(string)
    uri = URI.parse string
    if uri.port && [80, 443].exclude?(uri.port)
      "#{uri.host}:#{uri.port}"
    else
      uri.host
    end
  end
end
</file>

<file path="app/services/search/model_search_service.rb">
class Search::ModelSearchService
  def initialize(scope)
    base = scope.includes("federails_actor")
    @scope = base.where("federails_actor.local": true).or(
      base.where("federails_actor.local": false, indexable: "yes")
    )
  end

  def search(query)
    if ApplicationRecord.connection.adapter_name == "PostgreSQL"
      @scope.where(
        id: Model.select("DISTINCT ON (models.id) models.*") # rubocop:disable Pundit/UsePolicyScope
          .search_for(query)
          .pluck(:id) # rubocop:todo Rails/PluckInWhere
      )
    else
      @scope.search_for(query).distinct
    end
  end
end
</file>

<file path="app/services/archive_download_service.rb">
class ArchiveDownloadService
  def initialize(model:, selection:)
    @model = model
    @selection = sanitize selection
  end

  def filename
    @filename ||= [
      sanitize(@model.slug),
      @selection
    ].compact.join("-") + ".zip"
  end

  def output_file
    @output_file ||= File.join(
      LibraryUploader.find_storage(:downloads).directory,
      filename
    )
  end

  def temp_file
    @temp_file ||= File.join(
      LibraryUploader.find_storage(:downloads).directory,
      Digest::SHA256.hexdigest(filename)
    )
  end

  def ready?
    File.exist?(output_file)
  end

  def preparing?
    File.exist?(temp_file)
  end

  def prepare(delay: 0.seconds, queue: nil)
    return if ready? || preparing?
    FileUtils.touch(temp_file)
    PrepareDownloadJob.set(wait: delay, queue: queue).perform_later(
      model_id: @model.id,
      selection: @selection
    )
  end

  def wait_until_ready
    loop do
      break if ready?
      sleep(1)
    end
  end

  private

  def sanitize(selection)
    selection&.gsub(/\W/, "")
  end
end
</file>

<file path="app/services/path_parser_service.rb">
class PathParserService
  def initialize(template, path)
    @template = template
    @path = path
  end

  def call
    components = @path.match(path_parse_pattern)&.named_captures&.symbolize_keys
    return {} if components.nil?
    components.merge({
      tags: components[:tags]&.split("/")&.compact_blank,
      model_id: nil # discard ID, never gonna use it in parsing
    }).compact
  end

  private

  def path_parse_pattern
    Regexp.new("^/?.*?" +
      @template.gsub(/{.+?}/) { |token|
        case token
        when "{tags}"
          "(?<tags>[[:print:]]*)"
        when "{creator}"
          "(?<creator>[[:print:]&&[^/]]*?)"
        when "{collection}"
          "(?<collection>[[:print:]&&[^/]]*?)"
        when "{modelName}"
          "(?<model_name>[[:print:]&&[^/]]*?)"
        when "{modelId}"
          "(?<model_id>#[[:digit:]]+)?"
        else
          "[[:print:]&&[^/]]*"
        end
      } + "$")
  end
end
</file>

<file path="app/services/report_handler.rb">
class ReportHandler
  def self.call(report)
    ModeratorMailer.with(report: report).new_report.deliver_later if SiteSettings.email_configured?
  end
end
</file>

<file path="app/uploaders/library_uploader.rb">
require "shrine/storage/file_system"
require "shrine/storage/s3"
require "shrine/storage/tus"

class LibraryUploader < Shrine
  plugin :activerecord
  plugin :add_metadata
  plugin :refresh_metadata
  plugin :metadata_attributes, size: "size"
  plugin :restore_cached_data
  plugin :keep_files
  plugin :determine_mime_type
  plugin :rack_response
  plugin :dynamic_storage
  plugin :tus

  self.storages = {
    cache: Shrine::Storage::FileSystem.new("tmp/shrine"),
    downloads: Shrine::Storage::FileSystem.new("tmp/downloads")
  }

  storage(/library_(\d+)/) do |m|
    Library.find(m[1]).storage # rubocop:disable Pundit/UsePolicyScope
  rescue ActiveRecord::RecordNotFound
    nil
  end

  class Attacher
    def store_key
      @record.model.library.storage_key
    end
  end

  def generate_location(io, record: nil, derivative: nil, metadata: {}, **)
    return super unless record&.valid?
    record.path_within_library
  end

  add_metadata :ctime do |io|
    Shrine.with_file(io) { |it| [it.mtime, it.ctime].compact.min }
  rescue NoMethodError
  end

  add_metadata :mtime do |io|
    Shrine.with_file(io) { |it| it.mtime }
  rescue NoMethodError
  end
end
</file>

<file path="app/validators/change_case_only_validator.rb">
class ChangeCaseOnlyValidator < ActiveModel::EachValidator
  def validate_each(record, attribute, value)
    return if value.nil? || record.send(:"#{attribute}_was").nil?
    record.errors.add attribute, :case_change_only if record.send(:"#{attribute}_changed?") && value.downcase == record.send(:"#{attribute}_was").downcase
  end
end
</file>

<file path="app/validators/disjoint_library_folder_validator.rb">
class DisjointLibraryFolderValidator < ActiveModel::EachValidator
  def validate_each(record, attribute, value)
    return if value.nil?
    value.chomp!(File::SEPARATOR)
    record.errors.add attribute, :cannot_contain if library_paths.any? { |it| it.starts_with?(value + File::SEPARATOR) }
    record.errors.add attribute, :cannot_be_contained if library_paths.any? { |it| value.starts_with?(it + File::SEPARATOR) }
  end

  private

  def library_paths
    Library.pluck(:path) # rubocop:disable Pundit/UsePolicyScope
  end
end
</file>

<file path="app/validators/existing_path_validator.rb">
class ExistingPathValidator < ActiveModel::EachValidator
  def validate_each(record, attribute, value)
    record.errors.add attribute, :not_found if value.nil? || !File.exist?(value)
  end
end
</file>

<file path="app/validators/multimodel_uniqueness_validator.rb">
class MultimodelUniquenessValidator < ActiveModel::EachValidator
  def validate_each(record, attribute, value)
    return unless value
    (options[:check] || {}).each_pair do |model_name, attr|
      # Get class constant
      model = model_name.to_s.classify.constantize
      # Work out field to query
      query = (options[:case_sensitive] == false) ?
        model.arel_table[attr].lower.eq(value.downcase) :
        model.arel_table[attr].eq(value)
      query = query.and(model.arel_table[:id].not_eq(record.id)) if record.instance_of?(model)
      # Run the check
      record.errors.add(attribute, :taken) if model.unscoped.where(query).count > 0 # rubocop:disable Pundit/AvoidUnscoped
    end
  end
end
</file>

<file path="app/validators/regex_array_validator.rb">
# frozen_string_literal: true

class RegexArrayValidator < ActiveModel::EachValidator
  def validate_each(record, attribute, value)
    return unless value.any? { |pattern| pattern.to_regexp.nil? }
    record.errors.add(attribute, :invalid)
  end
end
</file>

<file path="app/validators/safe_path_validator.rb">
class SafePathValidator < ActiveModel::EachValidator
  UNSAFE = [
    nil,
    "bin",
    "boot",
    "dev",
    "etc",
    "lib",
    "lost",
    "proc",
    "root",
    "run",
    "sbin",
    "selinux",
    "srv",
    "usr"
  ]

  def validate_each(record, attribute, value)
    return if value.nil?
    start = Pathname.new(value).each_filename.to_a.first
    record.errors.add attribute, :unsafe if UNSAFE.any?(start)
  end
end
</file>

<file path="app/validators/spdx_validator.rb">
class SpdxValidator < ActiveModel::EachValidator
  def validate_each(record, attribute, value)
    record.errors.add attribute, :invalid_spdx if !Spdx.valid?(value)
  end
end
</file>

<file path="app/validators/stable_mime_type_validator.rb">
class StableMimeTypeValidator < ActiveModel::EachValidator
  def validate_each(record, attribute, value)
    return if record.attachment.nil? || value.nil?
    record.errors.add attribute, :cannot_change_type if mime(value) != mime(record.attachment.id)
  end

  def mime(value)
    Mime::EXTENSION_LOOKUP[File.extname(value).delete(".").downcase].to_s
  end
end
</file>

<file path="app/validators/writable_validator.rb">
class WritableValidator < ActiveModel::EachValidator
  def validate_each(record, attribute, value)
    record.errors.add attribute, :non_writable unless value.nil? || FileTest.writable?(value)
  end
end
</file>

<file path="app/views/activity/index.html.erb">
<h1><%= t ".title" %></h1>

<div class="row">
  <div class='col col-auto'>
    <%= t ".description", retention_period: distance_of_time_in_words(ActiveJob::Status.options[:expires_in]) %>
  </div>
</div>

<%= paginate @jobs %>

<table class="table table-striped mt-3">
  <tr>
    <th></th>
    <th><%= t(".name") %></th>
    <th><%= t(".time") %></th>
    <th><%= t(".message") %></th>
  </tr>
  <% @jobs.each do |status| %>
    <tr class="<%= activity_row_style(status[:status]) %>">
      <td><%= status_icon(status[:status]) %></td>
      <td><%= status.read.dig(:serialized_job, "job_class") %></td>
      <td><%= time_ago_in_words status.last_activity if status.last_activity %></td>
      <td><%= status[:exception]&.fetch(:message, nil) || t(status[:step] || status[:error]) %></td>
    </tr>
  <% end %>
</table>

<%= paginate @jobs %>
</file>

<file path="app/views/application/_caber_relation_fields.html.erb">
<%= cocooned_item class: "row mb-2 input-group" do %>
  <%- if f.object.persisted? %>
    <span class="col col-auto">
      <%- case f.object.subject.class.name %>
      <%- when "User" %>
        <%= icon "person", f.object.subject.class.model_name.human %>
        <%= f.object.subject.username %>
        <%= t(".subject.you") if f.object.subject == current_user %>
      <%- when "Role" %>
        <%= icon "people", "" %>
        <%= t(".subject.role.%{name}" % {name: f.object.subject&.name}) %>
      <%- when "NilClass" %>
        <%= icon "globe", "" %>
        <%= t(".subject.role.public") %>
      <%- else %>
        what
      <%- end %>
    </span>
  <%- else %>
    <%= f.text_field :subject, class: "col col-auto form-control", placeholder: translate(".subject.placeholder"), list: "caber-relations-role-list" %>
  <%- end %>
  <%= f.select :permission, Caber.configuration.permissions.map { |p| [translate(".permissions.%{perm}" % {perm: p}), p] }, {}, {class: "form-control col-auto", disabled: (f.object.subject == current_user)} %>
  <%= cocooned_remove_item_button icon(:trash, translate(".delete")), f, class: "btn btn-outline-danger col-auto" unless f.object.subject == current_user %>
<% end %>
</file>

<file path="app/views/application/_caber_relations_form.html.erb">
<%- if SiteSettings.multiuser_enabled? && !form.object.try(:remote?) %>
  <div class="row mb-3">
    <div class="col col-auto">
      <%= t(".permissions") %>
    </div>
    <div class="col border p-3">
      <%= cocooned_container id: "cocooned-caber-relations", data: {controller: "cocooned"} do %>
        <%= form.fields_for :caber_relations do |f| %>
          <%= render "caber_relation_fields", f: f %>
        <% end %>
      <% end %>
      <div class="row">
        <%= tag.div class: "col-auto offset-sm-2 ps-0" do %>
          <%= cocooned_add_item_button t(".add"), form, :caber_relations,
                class: "btn btn-secondary",
                insertion_node: "#cocooned-caber-relations",
                insertion_method: "append" %>
        <% end %>
      </div>
    </div>
    <datalist id="caber-relations-role-list">
      <option value="role::member" label="<%= translate "application.caber_relation_fields.subject.role.member" %>"></option>
      <option value="role::public"><%= translate "application.caber_relation_fields.subject.role.public" %></option>
    </datalist>
  </div>
<%- end %>
</file>

<file path="app/views/application/_filters_card.html.erb">
<% if !@filters.empty?() %>
  <%= card :secondary, t(".title") do %>
    <% if @filters[:q] %>
      <div class="row">
        <div class="col-auto"><%= icon "search", t(".search") %></div>
        <div class="col-auto"><%= t(".search") %></div>
        <div class="col"><%= @filters[:q] %></div>
        <div class="col-auto"><%= link_to icon("trash", t(".remove_search_filter")), @filters.except(:q), {class: "text-danger"} %></div>
      </div>
    <% end %>
    <% if @filters[:collection] %>
      <div class="row">
        <div class="col-auto"><%= icon "collection", Collection.model_name.human %></div>
        <div class="col" aria-label="<%= Collection.model_name.human %>"><%= @collection ? link_to(@collection.name, {collection: @collection}) : "Unknown" %></div>
        <div class="col-auto"><%= link_to icon("trash", t(".remove_collection_filter")), @filters.except(:collection), {class: "text-danger"} %></div>
      </div>
    <% end %>
    <% if @filters[:library] %>
      <div class="row">
        <div class="col-auto"><%= icon "boxes", Library.model_name.human %></div>
        <div class="col" aria-label="<%= Library.model_name.human %>"><%= [*@filters[:library]].map { |l| Library.find_param(l).name }.join(", ") %></div>
        <div class="col-auto"><%= link_to icon("trash", t(".remove_library_filter")), @filters.except(:library), {class: "text-danger"} %></div>
      </div>
    <% end %>
    <% if @filters[:creator] %>
      <div class="row">
        <div class="col-auto"><%= icon "person", Creator.model_name.human %></div>
        <div class="col" aria-label="<%= Creator.model_name.human %>"><%= @creator ? link_to(@creator.name.careful_titleize, @creator) : t(".unknown") %></div>
        <div class="col-auto"><%= link_to icon("trash", t(".remove_creator_filter")), @filters.except(:creator), {class: "text-danger"} %></div>
      </div>
    <% end %>
    <% if @filters[:tag] %>
      <div class="row">
        <div class="col-auto"><%= icon "tag", ActsAsTaggableOn::Tag.model_name.human(count: 100) %></div>
        <div class="col" aria-label="<%= ActsAsTaggableOn::Tag.model_name.human(count: 100) %>"><span class='pe-none'><%= render "tag_list", tags: @filter_tags %></span></div>
        <div class="col-auto"><%= link_to icon("trash", t(".remove_tag_filter")), @filters.except(:tag), {class: "text-danger"} %></div>
      </div>
    <% end %>
    <% if @filters[:missingtag] %>
      <div class="row">
        <div class="col-auto"><%= icon "tag", t(".missing_tags") %></div>
        <div class="col" aria-label="<%= t(".missing_tags") %>"><span class='pe-none'><%= content_tag(:a, @filters[:missingtag].presence || "*", {class: "badge rounded-pill border border-muted text-danger tag"}) %></span></div>
        <div class="col-auto"><%= link_to icon("trash", t(".remove_missing_tag_filter")), @filters.except(:missingtag), {class: "text-danger"} %></div>
      </div>
    <% end %>
  <% end %>
<% end %>
</file>

<file path="app/views/application/_footer.html.erb">
<footer class="container-fluid mt-5 py-2 border-top" id="footer">
  <div class="row">
    <div class="col-lg-3 me-auto">
      <span class="d-inline-flex align-items-center mb-2">
        <%= image_tag "roundel.svg", width: 48, height: 48, class: "me-2", alt: translate("application.title") %>
        <span class="fs-5"><%= t(".powered_by_html", name: t("application.title")) %></span>
      </span>
      <ul class="list-unstyled small text-muted">
        <li class="mb-2"><%= t ".by_html" %></li>
        <li class="mb-2"><%= t ".open_source_html" %></li>
        <% if current_user&.is_administrator? %>
          <li class="mb-2"><%= t ".version" %>:
            <%= link_to "#{Rails.application.config.app_version} (#{Rails.application.config.git_sha.first(8)})",
                  "#{Rails.application.config.upstream_repo}/tree/#{Rails.application.config.git_sha}",
                  target: "_blank", rel: "noopener" %>
          </li>
        <% end %>
      </ul>
    </div>
    <div class="col-4 col-lg-2 mb-3">
      <h5><%= site_name(default: t(".instance_heading")) %></h5>
      <ul class="list-unstyled">
        <li class="mb-2"><%= link_to t(".about"), about_path %></li>
        <% if SiteSettings.support_link.presence %>
          <li class="mb-2"><a href="<%= SiteSettings.support_link %>" target="_blank"><%= t ".support" %></a></li>
        <% end %>
        <li class="mb-2"><%= link_to t(".api"), api_url, rel: "noopener", target: "_blank" %></li>
      </ul>
    </div>
    <div class="col-4 col-lg-2 mb-3">
      <h5><%= t "application.title" %></h5>
      <ul class="list-unstyled">
        <li class="mb-2"><a href="https://github.com/manyfold3d/manyfold/issues/new/choose" target="_blank"><%= t ".issues" %></a></li>
        <li class="mb-2"><a href="https://manyfold.app/community" target="_blank"><%= t ".community" %></a></li>
        <li class="mb-2"><a href="https://manyfold.app/donate" target="_blank"><%= t ".sponsor" %></a></li>
      </ul>
    </div>
  </div>
</footer>
</file>

<file path="app/views/application/_link_fields.html.erb">
<%= cocooned_item class: "row mb-3 input-group" do %>
  <%= f.label :url, class: "col-sm-2 col-form-label" %>
  <%= f.url_field :url, class: "form-control col-auto", placeholder: translate(".url.placeholder") %>
  <%= cocooned_remove_item_button icon(:trash, translate(".url.delete")), f, class: "btn btn-outline-danger col-auto" %>
<% end %>
</file>

<file path="app/views/application/_links_card.html.erb">
<% unless links.empty? %>
  <%= card :secondary, Link.model_name.human(count: 100) do %>
    <%= render Components::LinkList.new links: links %>
  <% end %>
<% end %>
</file>

<file path="app/views/application/_links_form.html.erb">
<%= cocooned_container id: "cocooned-links", data: {controller: "cocooned"} do %>
  <%= form.fields_for :links do |f| %>
    <%= render "link_fields", f: f %>
  <% end %>
<% end %>
<div class="row mb-3">
  <%= tag.div class: "col-auto offset-sm-2 ps-0" do %>
    <%= cocooned_add_item_button t(".add"), form, :links,
          class: "btn btn-secondary",
          insertion_node: "#cocooned-links",
          insertion_method: "append" %>
  <% end %>
</div>
</file>

<file path="app/views/application/_navbar.html.erb">
<nav class="navbar navbar-expand-md bg-primary" data-bs-theme="dark">
  <div class='container-fluid'>
    <a class="navbar-brand ms-2" href="<%= root_path %>" aria-label="<%= translate ".home" %>">
      <%= image_tag site_icon, alt: site_name, height: "40px", class: "me-2" %>
      <span class="d-md-none"><%= site_name %></span>
    </a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbar" aria-controls="navbarTogglerDemo01" aria-expanded="false" aria-label="<%= translate ".navbar.toggler.label" %>">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse row" id="navbar">
      <ul class="navbar-nav col ps-4 ps-md-0 align-self-start">
        <li class="nav-item">
          <%= nav_link "box", Model.model_name.human(count: 100), models_path(@filters), text_style: "d-md-none d-lg-inline" %>
        </li>
        <li class="nav-item">
          <%= nav_link "people", Creator.model_name.human(count: 100), creators_path(@filters&.except(:creator)), text_style: "d-md-none d-lg-inline" %>
        </li>
        <li class="nav-item">
          <%= nav_link "collection", Collection.model_name.human(count: 100), collections_path(@filters&.except(:collection)), text_style: "d-md-none d-lg-inline" %>
        </li>
        <% if SiteSettings.show_libraries %>
          <% policy_scope(Library).find_each do |library| %>
            <li class="nav-item">
              <%= nav_link(
                    library.icon.presence || "boxes",
                    library.name,
                    models_path((@filters&.except(:library) || {}).merge({library: library})),
                    title: library.caption
                  )	%>
            </li>
          <% end %>
        <% end %>
      </ul>
      <ul class="navbar-nav col-auto pe-4 align-self-start justify-content-end">
        <li class="nav-item">
          <%= nav_link "upload", t(".upload"), new_model_path, nofollow: true, style: "btn btn-warning btn-sm me-1 mt-1", text_style: "d-md-none d-lg-inline" if policy(:upload).index? %>
        </li>
        <li class="nav-item">
          <% if policy(:library).scan? %>
            <% if @scan_in_progress %>
              <%= nav_link "", t(".scanning"), activity_path, nofollow: true, style: "btn btn-outline-warning btn-sm me-1 mt-lg-1", icon_style: "spinner-border spinner-border-sm" %>
            <% else %>
              <div class="btn-group">
                <button type="button" data-bs-toggle="dropdown" aria-expanded="false"
                  class="btn btn-warning btn-sm mt-1 dropdown-toggle">
                  <%= t ".scan" %>
                </button>
                <ul class="dropdown-menu">
                  <li><%= link_to t(".scan_changes"), scan_libraries_path, method: :post, nofollow: true, class: "dropdown-item" %></li>
                  <li><%= link_to t(".check_existing"), scan_libraries_path(type: :check), method: :post, nofollow: true, class: "dropdown-item" %>
                </ul>
              </div>
            <% end %>
          <% end %>
        </li>
        <%- if current_user %>
          <% if policy(Problem).index? && Problem.visible(problem_settings).count > 0 %>
            <li class="nav-item">
              <% severity = max_problem_severity(policy_scope(Problem).all) %>
              <%= nav_link problem_icon(severity),
                    Problem.model_name.human(count: 100),
                    problems_path,
                    title: translate("problems.severities.#{severity}"), # rubocop:todo I18n/RailsI18n/DecorateStringFormattingUsingInterpolation
                    icon_style: "link-#{severity}",
                    text_style: "d-md-none",
                    aria_label: Problem.model_name.human(count: 100) %>
            </li>
          <% end %>
          <% if policy(:activity).index? %>
            <li class="nav-item">
              <%= nav_link "activity", t(".activity"), activity_path, nofollow: true, text_style: "d-md-none" %>
            </li>
          <% end %>
          <% if policy(:settings).index? %>
            <li class="nav-item">
              <%= nav_link "gear", t(".settings"), settings_path, nofollow: true, text_style: "d-md-none" %>
            </li>
          <% end %>
          <% if policy(:user).index? and not policy(:settings).index? %>
            <li class="nav-item">
              <%= nav_link "people", t(".moderator_settings"), settings_users_path, nofollow: true, text_style: "d-md-none" %>
            </li>
          <% end %>
        <% end %>
        <li class="nav-item ms-1 me-3">
          <%= form_with url: models_path, method: :get, role: "search" do |f| %>
            <%= f.search_field :q, class: "form-control", placeholder: translate(".search"), aria_label: translate(".search"), aria_describedby: "button-search", value: @query || params[:q] %>
          <% end %>
        </li>
        <%- if current_user %>
          <li class="nav-item">
            <%= nav_link "sliders", t(".account"), edit_user_registration_path, nofollow: true, text_style: "d-md-none" %>
          </li>
        <% end %>
        <%- if SiteSettings.multiuser_enabled? %>
          <li class="nav-item">
            <%- if current_user %>
              <%= nav_link "box-arrow-right", t(".log_out"), destroy_user_session_path, method: :delete, title: translate(".log_out"), text_style: "d-md-none" %>
            <% else %>
              <%= nav_link "box-arrow-in-right", t(".log_in"), new_user_session_path, title: translate(".log_in"), nofollow: true, style: "btn btn-secondary" %>
            <% end %>
          </li>
        <%- end %>
      </ul>
    </div>
  </div>
</nav>
</file>

<file path="app/views/application/_order_buttons.html.erb">
<div class="float-end mb-3">
  <%= link_to icon("book", t(".sort.name")), @filters.merge(order: "name"), class: "btn #{(session["order"] == "name") ? "btn-secondary" : "btn-outline-secondary"} btn-sm" %>
  <%= link_to icon("clock", t(".sort.time")), @filters.merge(order: "recent"), class: "btn #{(session["order"] == "recent") ? "btn-secondary" : "btn-outline-secondary"} btn-sm" %>
</div>
</file>

<file path="app/views/application/_tag_list.html.erb">
<% if defined?(kv_tags) && kv_tags %>
  <% tiers = kv_tags.map(&:name).map { |tag| tag.split(":").first }.uniq.sort %>
  <% if @models
       tierunset = tiers.map { |tier|
         reg = ActiveRecord::Base.connection.quote("^" + tier + ":")
         regact = (ApplicationRecord.connection.adapter_name == "PostgreSQL") ? "~" : "REGEXP"
         [tier, @models.where("(select count(*) from tags join taggings on tags.id=taggings.tag_id where tags.name #{regact} #{reg} and taggings.taggable_id=models.id and taggings.taggable_type='Model')<1").count]
       }.to_h
     end %>
<% end %>
<%- tag_html_opts = {data: {bulk_item_tags: defined?(model_id) ? model_id&.to_s : nil}} %>
<%- heatmap = defined?(show_count) ? heatmap : tag_cloud_settings["heatmap"] %>
<%= render_component_collection(Components::Tag, :tag, tags, filters: @filters.merge(@additional_filters), html_options: tag_html_opts, show_count: heatmap, filter_in_place: @filter_in_place) if tags %>
<% if defined?(kv_tags) && kv_tags %>
  <ul class="list-unstyled">
    <% tiers.each do |tier| %>
      <li>
        <details id="<%= tier %>" data-controller="tag-section" data-action="toggle->tag-section#saveState">
          <summary><%= tier %></summary>
          <%= render "tag_list", tags: kv_tags.select { |obj| obj.name.match?("^#{tier}:") } %>
          <%- if tierunset && tierunset[tier] > 0 %>
            <%= link_to "unset (#{tierunset[tier]})", (@filters || {}).merge(missingtag: tier), {class: "badge rounded-pill border border-muted text-danger tag"} %>
          <%- end %>
        </details>
      </li>
    <% end %>
  </ul>
<% end %>
<% if defined?(unrelated_tag_count) && unrelated_tag_count && unrelated_tag_count > 0 %>
  <p class="small"><%= t ".unrelated_tag_count", count: unrelated_tag_count %></p>
<% end %>
</file>

<file path="app/views/application/_tags_card.html.erb">
<% unless @tags.empty? %>
  <%= card :secondary, ActsAsTaggableOn::Tag.model_name.human(count: 100), collapse: "md", skip_link: {target: "footer", text: t(".skip_tags")} do %>
    <%= render "tag_list", tags: @tags, kv_tags: @kv_tags, unrelated_tag_count: @unrelated_tag_count %>
  <% end %>
<% end %>
</file>

<file path="app/views/collections/_collection.html.erb">
<div class="col mb-4">
  <div class="card preview-card">
    <% if collection.remote? %>
      <div class='card-header position-absolute w-100 top-0 z-3 bg-body-secondary text-secondary-emphasis opacity-75'>
        <%= server_indicator collection %>
      </div>
    <% end %>
    <%= render Components::PreviewFrame.new(object: collection) %>
    <div class="card-body">
      <div class="row">
        <div class="col">
          <div class="card-title">
            <%= collection.name.careful_titleize %>
            <%= render Components::AccessIndicator.new object: collection %>
          </div>
          <% if collection.caption %>
            <span class="card-subtitle mb-2 text-muted"><%= sanitize collection.caption %></span>
          <% end %>
          <%= render Components::LinkList.new links: collection.links %>
        </div>
        <div class="col col-auto">
          <small>
            <ul class="list-unstyled">
              <% if collection.remote? %>
                <% if (creator = collection.federails_actor.extensions["attributedTo"]) %>
                  <li>
                    <%= icon "person", Creator.model_name.human %>
                    <%= link_to creator["name"], creator["url"] %><br>
                  </li>
                <% end %>
                <% if (c = collection.federails_actor.extensions["context"]) %>
                  <li>
                    <%= icon "collection", Collection.model_name.human %>
                    <%= link_to c["name"], c["url"] %><br>
                  </li>
                <% end %>
              <% else %>
                <% if collection.creator %>
                  <li>
                    <%= icon "person", Creator.model_name.human %>
                    <%= link_to collection.creator.name, "collections?creator=" + collection.creator.to_param, @filters || {} %><br>
                  </li>
                <% end %>
                <% if collection.collection %>
                  <li>
                    <%= icon "collection", Collection.model_name.human %>
                    <%= link_to collection.collection.name, collection, @filters || {} %><br>
                  </li>
                <% end %>
              <% end %>
            </ul>
          </small>
        </div>
      </div>
    </div>
    <div class='card-footer'>
      <div class='row'>
        <% model_count = policy_scope(collection.models).count %>
        <% collection_count = policy_scope(collection.collections).count %>
        <div class='col'>
          <%= if policy(collection).show?
                render Components::GoButton.new(
                  label: "#{model_count} #{Model.model_name.human count: model_count}",
                  aria_label: collection.remote? ?
                    translate(".models_button.remote_label", name: collection.name) :
                    translate(".models_button.label", name: collection.name),
                  href: collection_path(collection),
                  variant: "primary"
                )
              end %>
          <%= if policy(collection).show? && !collection.collections.empty?
                render Components::GoButton.new(
                  label: "#{collection_count} #{Collection.model_name.human count: collection_count}",
                  aria_label: collection.remote? ?
                    translate(".collections_button.remote_label", name: collection.name) :
                    translate(".collections_button.label", name: collection.name),
                  href: collections_path(collection: collection),
                  variant: "primary"
                )
              end %>
        </div>
        <div class='col col-auto'>
          <%= render Components::BurgerMenu.new do %>
            <%= render Components::DropdownItem.new(icon: "pencil", label: translate("general.edit"), path: edit_collection_path(collection), aria_label: translate(".edit_button.label", name: collection.name)) if policy(collection).edit? %>
            <%= render Components::DropdownItem.new(icon: "trash", label: translate("general.delete"), path: collection_path(collection), method: :delete, aria_label: translate(".delete_button.label", name: collection.name), confirm: t("collections.destroy.confirm")) if policy(collection).destroy? %>
            <%= render Components::DropdownItem.new(icon: "flag", label: translate("general.report", type: ""), path: new_collection_report_path(collection)) if SiteSettings.multiuser_enabled? %>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>
</file>

<file path="app/views/collections/_form.html.erb">
<%- @collection.links.build if @collection.links.empty? # populate empty link %>
<%- @collection.caber_relations.build if @collection.caber_relations.empty? %>

<%= form_with model: @collection do |form| %>
  <%= text_input_row form, :name %>

  <%= collection_select_input_row form,
        :creator, @creators, :id, :name_with_domain,
        include_blank: true,
        selected: @default_creator&.id,
        button: (if policy(:creator).new?
                   {
                     path: new_creator_path,
                     label: t("creators.general.new")
                   }
                 end) %>
  <%= collection_select_input_row form,
        :collection, @collections, :id, :name_with_domain,
        include_blank: true,
        button: (if policy(:collection).new?
                   {
                     path: new_collection_path,
                     label: t("collections.general.new")
                   }
                 end) %>
  <%= render "links_form", form: form %>
  <%= text_input_row form, :caption %>
  <%= rich_text_input_row form, :notes, help: t(".notes.help_html") %>
  <%= select_input_row form, :indexable, indexable_select_options(form.object) %>
  <%= select_input_row form, :ai_indexable, ai_indexable_select_options(form.object) if SiteSettings.allow_ai_bots %>
  <%= render "caber_relations_form", form: form %>
  <%= form.submit translate("general.save"), class: "btn btn-primary float-start" %>
<% end %>

<% if @collection.persisted? %>
  <div class='float-end'>
    <%= render Components::DoButton.new(icon: "trash", label: t("general.delete"), href: collection_path(@collection), method: :delete, variant: "outline-danger", confirm: translate("collections.destroy.confirm")) if policy(@collection).destroy? %>
  </div>
<% end %>

<div class="clearfix"></div>
</file>

<file path="app/views/collections/_unassigned.html.erb">
<div class="col mb-4">
  <div class="card preview-card border-warning">
    <div class='preview-empty'> <p><%= t "collections.collection.no_preview" %></p></div>
    <div class="card-body">
      <div class="card-title"><%= t(".name") %></div>
      <span class="card-subtitle mb-2 text-muted"><%= t(".caption") %></span>
    </div>
    <div class='card-footer'>
      <%= link_to "#{@unassigned_count} #{Model.model_name.human count: @unassigned_count}", models_path(collection: ""), {class: "btn btn-primary"} %>
    </div>
  </div>
</div>
</file>

<file path="app/views/collections/edit.html.erb">
<h1><%= t "collections.general.edit" %></h1>
<% if SiteSettings.federation_enabled? %>
  <p><small>⁂ <%= @collection.federails_actor&.at_address %></small></p>
<% end %>

<%= render "form" %>
</file>

<file path="app/views/collections/index.html.erb">
<% content_for :items do %>
  <div class="skip-link-container">
    <div class="clearfix">
      <%= skip_link "sidebar", t(".skip_collections") %>
      <%= render "order_buttons" %>
      <% if pagination_settings["collections"] %>
        <%= paginate @collections %>
      <% end %>
    </div>
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 mb-4">
      <%= render "unassigned" if @unassigned_count > 0 && (!pagination_settings["collections"] || @collections.first_page?) && !(@filters[:collection] || @filters[:creator]) %>
      <% if @filters[:collection] %>
        <%= render @collections %>
      <% elsif @filters[:creator] %>
        <%= render @collections %>
      <% else %>
        <%= render @collections %>
      <% end %>
    </div>
    <% if pagination_settings["collections"] %>
      <%= paginate @collections %>
    <% end %>
  </div>
<% end %>

<% content_for :actions do %>
  <%= link_to t("collections.general.new"), new_collection_path, class: "btn btn-primary" if policy(:collection).new? %>
<% end %>

<% content_for :sidebar do %>
  <%= render "filters_card" %>
  <%= render "tags_card" %>
<% end %>
</file>

<file path="app/views/collections/new.html.erb">
<h1><%= t("collections.general.new") %></h1>

<%= render "form" %>
</file>

<file path="app/views/collections/show.html.erb">
<% content_for :head do %>
  <%= tag.meta property: "og:type", content: "website" %>
  <%= tag.meta name: "description", content: truncate(sanitize(@collection.caption), length: 80) if @collection.caption.present? %>
  <%= tag.link rel: "alternate", type: Mime[:oembed], href: collection_url(@collection, format: :oembed), title: @collection.name %>
<% end %>

<%= content_for :items do %>
  <%= turbo_stream_from @collection %>
  <div class="card mb-3 <%= "remote-actor" if @collection.remote? %>">
    <div class="card-header"><%= @collection.model_name.human %></div>
    <div class="card-body row">
      <div class="col col-auto">
        <%= content_tag(:div, class: "text-center") do %>
          <h2>
            <%= @collection.name %>
          </h2>
          <p>
            <% if @collection.remote? %>
              <small class="text-secondary"><%= link_to @collection.federails_actor.at_address, @collection.federails_actor.profile_url, target: "new" %></small>
            <% elsif SiteSettings.federation_enabled? %>
              <small class="text-secondary">
                <%= @collection.federails_actor.short_at_address %>
                <%= render Components::CopyButton.new(text: @collection.federails_actor.at_address) %>
              </small>
            <% end %>
          </p>
          <%= render Components::FollowButton.new(follower: current_user, target: @collection) %>
        <% end %>
      </div>
      <div class="col">
        <%= content_tag(:p, class: "lead") { @collection.caption } if @collection.caption %>
        <%= content_tag(:p, class: "card-text") { markdownify @collection.notes } if @collection.notes %>
        <% model_count = policy_scope(Model).where(collection: @collection).count %>
        <p><%= "#{model_count} #{Model.model_name.human count: model_count}" %></p>
        <%= content_tag(:p) { t("general.followers", count: @collection.followers.count) } if SiteSettings.social_enabled? %>
        <p><%= render Components::AccessIndicator.new(object: @collection, text: true) %></p>
      </div>
    </div>
  </div>
<% end %>

<% content_for :actions do %>
  <%= link_to safe_join([icon("pencil", t(".edit")), t(".edit")], " "), edit_collection_path(@collection), class: "btn btn-primary" if policy(@collection).edit? %>
  <%= render Components::ReportButton.new(object: @collection, path: new_collection_report_path(@collection)) %>
<% end %>

<%= render "models/list" %>
</file>

<file path="app/views/comments/show.activitypub.jbuilder">
json.set! "@context", "https://www.w3.org/ns/activitystreams"
json.merge! @comment.to_activitypub_object
</file>

<file path="app/views/creators/_creator.html.erb">
<div class="col mb-4">
  <div class="card">
    <% if creator.remote? %>
      <div class='card-header'>
        <%= server_indicator creator %>
      </div>
    <% end %>
    <div class="card-body <%= "remote-actor" if creator.remote? %>">
      <div class="card-title">
        <%= creator.name %>
        <%= render Components::AccessIndicator.new object: creator %>
      </div>
      <% if creator.caption %>
        <div>
          <span class="card-subtitle mb-2 text-muted"><%= sanitize creator.caption %></span>
        </div>
      <% end %>
      <%= render Components::LinkList.new links: creator.links %>
    </div>
    <div class='card-footer'>
      <div class='row'>
        <% model_count = policy_scope(Model).where(creator: creator).count %>
        <% collection_count = policy_scope(Collection).where(creator: creator).count %>
        <div class='col'>
          <%= if policy(creator).show?
                render Components::GoButton.new(
                  label: "#{model_count} #{Model.model_name.human count: model_count}",
                  aria_label: creator.remote? ?
                    translate(".models_button.remote_label", name: creator.name) :
                    translate(".models_button.label", name: creator.name),
                  href: creator_path(creator),
                  variant: "primary"
                )
              end %>
          <%= if policy(creator).show? && !creator.collections.empty?
                render Components::GoButton.new(
                  label: "#{collection_count} #{Collection.model_name.human count: collection_count}",
                  aria_label: creator.remote? ?
                    translate(".collections_button.remote_label", name: creator.name) :
                    translate(".collections_button.label", name: creator.name),
                  href: collections_path(creator: creator),
                  variant: "primary"
                )
              end %>
        </div>
        <div class='col col-auto'>
          <%= render Components::BurgerMenu.new do %>
            <%= render Components::DropdownItem.new(icon: "pencil", label: translate("general.edit"), path: edit_creator_path(creator), aria_label: translate(".edit_button.label", name: creator.name)) if policy(creator).edit? %>
            <%= render Components::DropdownItem.new(icon: "trash", label: translate("general.delete"), path: creator_path(creator), method: :delete, aria_label: translate(".delete_button.label", name: creator.name), confirm: t("creators.destroy.confirm")) if policy(creator).destroy? %>
            <%= render Components::DropdownItem.new(icon: "flag", label: translate("general.report", type: ""), path: new_creator_report_path(creator)) if SiteSettings.multiuser_enabled? %>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>
</file>

<file path="app/views/creators/_form.html.erb">
<%- @creator.links.build if @creator.links.empty? # populate empty link %>
<%- @creator.caber_relations.build if @creator.caber_relations.empty? %>

<%= form_with model: @creator do |form| %>
  <%= text_input_row form, :name %>
  <%= text_input_row form, :slug, help: t(".slug.help"), value: @attemped_slug || @creator.slug if @creator.slug.presence || !@creator.errors[:slug].empty? %>
  <%= render "links_form", form: form %>
  <%= text_input_row form, :caption %>
  <%= rich_text_input_row form, :notes, help: t(".notes.help_html") %>
  <%= select_input_row form, :indexable, indexable_select_options(form.object) %>
  <%= select_input_row form, :ai_indexable, ai_indexable_select_options(form.object) if SiteSettings.allow_ai_bots %>
  <%= render "caber_relations_form", form: form %>
  <%= form.submit translate("general.save"), class: "btn btn-primary float-start" %>
<% end %>

<% if @creator.persisted? %>
  <div class='float-end'>
    <%= render Components::DoButton.new(icon: "trash", label: t("general.delete"), href: creator_path(@creator), method: :delete, variant: "outline-danger", confirm: translate("creators.destroy.confirm")) if policy(@creator).destroy? %>
  </div>
<% end %>

<div class="clearfix"></div>
</file>

<file path="app/views/creators/_unassigned.html.erb">
<div class="col mb-4">
  <div class="card border-warning">
    <div class="card-body">
      <div class="card-title"><%= t(".name") %></div>
      <span class="card-subtitle mb-2 text-muted"><%= t(".caption") %></span>
    </div>
    <div class='card-footer'>
      <%= link_to "#{@unassigned_count} #{Model.model_name.human count: @unassigned_count}", models_path(creator: ""), {class: "btn btn-primary"} %>
    </div>
  </div>
</div>
</file>

<file path="app/views/creators/edit.html.erb">
<h1><%= t "creators.general.edit" %></h1>

<%= render "form" %>
</file>

<file path="app/views/creators/index.html.erb">
<% content_for :items do %>
  <div class="skip-link-container">
    <div class="clearfix">
      <%= skip_link "sidebar", t(".skip_creators") %>
      <%= render "order_buttons" %>
      <% if pagination_settings["creators"] %>
        <%= paginate @creators %>
      <% end %>
    </div>
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 mb-4">
      <%= render "unassigned" if @unassigned_count > 0 && (!pagination_settings["creators"] || @creators.first_page?) %>
      <%= render @creators %>
    </div>
    <% if pagination_settings["creators"] %>
      <%= paginate @creators %>
    <% end %>
  </div>
<% end %>

<% content_for :actions do %>
  <%= link_to t("creators.general.new"), new_creator_path, class: "btn btn-primary" if policy(:creator).new? %>
<% end %>

<% content_for :sidebar do %>
  <%= render "filters_card" %>
  <%= render "tags_card" %>
<% end %>
</file>

<file path="app/views/creators/new.html.erb">
<h1><%= t("creators.general.new") %></h1>

<%= render "form" %>
</file>

<file path="app/views/creators/show.html.erb">
<% content_for :head do %>
  <%= tag.meta property: "og:type", content: "profile" %>
  <%= tag.meta name: "description", content: truncate(sanitize(@creator.caption), length: 80) if @creator.caption.present? %>
  <%= tag.link rel: "alternate", type: Mime[:oembed], href: creator_url(@creator, format: :oembed), title: @creator.name %>
<% end %>

<%= content_for :items do %>
  <%= turbo_stream_from @creator %>
  <div class="card mb-3 <%= "remote-actor" if @creator.remote? %>">
    <div class="card-header"><%= @creator.model_name.human %></div>
    <div class="card-body row">
      <div class="col col-auto">
        <%= content_tag(:div, class: "text-center") do %>
          <h2>
            <%= @creator.name %>
          </h2>
          <% if SiteSettings.federation_enabled? %>
            <p>
              <% if @creator.remote? %>
                <small class="text-secondary"><%= link_to @creator.federails_actor.at_address, @creator.federails_actor.profile_url, target: "new" %></small>
              <% elsif SiteSettings.federation_enabled? %>
                <small class="text-secondary">
                  <%= @creator.federails_actor.short_at_address %>
                  <%= render Components::CopyButton.new(text: @creator.federails_actor.at_address) %>
                </small>
              <% end %>
            </p>
          <% end %>
          <%= render Components::FollowButton.new(follower: current_user, target: @creator) %>
        <% end %>
      </div>
      <div class="col">
        <%= content_tag(:p, class: "lead") { @creator.caption } if @creator.caption %>
        <%= content_tag(:p, class: "card-text") { markdownify @creator.notes } if @creator.notes %>
        <% model_count = policy_scope(Model).where(creator: @creator).count %>
        <p><%= "#{model_count} #{Model.model_name.human count: model_count}" %></p>
        <%= content_tag(:p) { t("general.followers", count: @creator.followers.count) } if SiteSettings.social_enabled? %>
        <p><%= render Components::AccessIndicator.new(object: @creator, text: true) %></p>
      </div>
    </div>
  </div>
<% end %>

<% content_for :actions do %>
  <%= link_to safe_join([icon("pencil", t(".edit")), t(".edit")], " "), edit_creator_path(@creator), class: "btn btn-primary" if policy(@creator).edit? %>
  <%= render Components::ReportButton.new(object: @creator, path: new_creator_report_path(@creator)) %>
<% end %>

<%= render "models/list" %>
</file>

<file path="app/views/devise/confirmations/new.html.erb">
<h2><%= t(".resend_confirmation_instructions") %></h2>

<%= form_for(resource, as: resource_name, url: confirmation_path(resource_name), html: {method: :post}) do |f| %>
  <%= render "devise/shared/error_messages", resource: resource %>

  <div class="field">
    <%= f.label :email %><br>
    <%= f.email_field :email, autofocus: true, autocomplete: "email", value: (resource.pending_reconfirmation? ? resource.unconfirmed_email : resource.email) %>
  </div>

  <div class="actions">
    <%= f.submit translate(".resend_confirmation_instructions") %>
  </div>
<% end %>

<%= render "devise/shared/links" %>
</file>

<file path="app/views/devise/mailer/confirmation_instructions.html.erb">
<p><%= t(".greeting", recipient: @email) %></p>

<p><%= t(".instruction") %></p>

<p><%= link_to t(".action"), confirmation_url(@resource, confirmation_token: @token) %></p>
</file>

<file path="app/views/devise/mailer/email_changed.html.erb">
<p><%= t(".greeting", recipient: @email) %></p>

<% if @resource.try(:unconfirmed_email?) %>
  <p><%= t(".message_unconfirmed", email: @resource.unconfirmed_email) %></p>
<% else %>
  <p><%= t(".message", email: @resource.email) %></p>
<% end %>
</file>

<file path="app/views/devise/mailer/password_change.html.erb">
<p><%= t(".greeting", recipient: @resource.email) %></p>

<p><%= t(".message") %></p>
</file>

<file path="app/views/devise/mailer/reset_password_instructions.html.erb">
<p><%= t(".greeting", recipient: @resource.email) %></p>

<p><%= t(".instruction") %></p>

<p><%= link_to t(".action"), edit_password_url(@resource, reset_password_token: @token) %></p>

<p><%= t(".instruction_2") %></p>
<p><%= t(".instruction_3") %></p>
</file>

<file path="app/views/devise/mailer/unlock_instructions.html.erb">
<p><%= t(".greeting", recipient: @resource.email) %></p>

<p><%= t(".message") %></p>

<p><%= t(".instruction") %></p>

<p><%= link_to t(".action"), unlock_url(@resource, unlock_token: @token) %></p>
</file>

<file path="app/views/devise/passwords/edit.html.erb">
<h2><%= t(".change_your_password") %></h2>

<%= form_for(resource, as: resource_name, url: password_path(resource_name), html: {method: :put}) do |f| %>
  <%= f.hidden_field :reset_password_token %>
  <%= password_input_row f, :password, autocomplete: "new-password", autofocus: true, strength_meter: true %>
  <%= password_input_row f, :password_confirmation, autocomplete: "new-password" %>
  <%= f.submit translate(".change_my_password"), class: "btn btn-primary" %>
<% end %>

<%= render "devise/shared/links" %>
</file>

<file path="app/views/devise/passwords/new.html.erb">
<h2><%= t(".forgot_your_password") %></h2>

<%= form_for(resource, as: resource_name, url: password_path(resource_name), html: {method: :post}) do |f| %>
  <%= render "devise/shared/error_messages", resource: resource %>

  <%= text_input_row f, :email, autocomplete: "email", autofocus: true %>
  <%= f.submit translate(".send_me_reset_password_instructions"), class: "btn btn-primary" %>
<% end %>

<%= render "devise/shared/links" %>
</file>

<file path="app/views/devise/registrations/_file_list_settings.html.erb">
<%= form.fields_for :file_list_settings do |file_list_settings_form| %>
  <div class="card mb-2">
    <h3 class="card-header"><%= t(".heading") %></h3>
    <div class="card-body">
      <p class="lead"><%= t(".summary") %></p>
      <div class="row">
        <%= file_list_settings_form.label nil, t(".hide_presupported_versions.label"), for: :hide_presupported_versions, class: "col col-form-label" %>
        <div class="col form-check form-switch">
          <%= file_list_settings_form.check_box :hide_presupported_versions, checked: file_list_settings["hide_presupported_versions"], class: "form-check-input" %>
        </div>
      </div>
    </div>
  </div>
<% end %>
</file>

<file path="app/views/devise/registrations/_general_settings.html.erb">
<div class="card mb-2">
  <h3 class="card-header"><%= t(".heading") %></h3>
  <div class="card-body">

    <div class="row mb-2">
      <%= form.label nil, t(".interface_language.label"), for: :interface_language, class: "col col-form-label" %>
      <div class="col">
        <%= form.select :interface_language,
              @languages,
              {selected: @user.interface_language},
              {class: "form-select"} %>
        <small class="form-text"><%= t ".interface_language.help" %></small>
      </div>
    </div>

    <div class="row">
      <%= form.label nil, t(".sensitive_content.label"), for: :sensitive_content_handling, class: "col col-form-label" %>
      <div class="col">
        <%= form.select :sensitive_content_handling,
              [
                [t(".sensitive_content.show"), nil],
                [t(".sensitive_content.mask"), "mask"],
                [t(".sensitive_content.hide"), "hide"]
              ],
              {selected: @user.sensitive_content_handling},
              {class: "form-select"} %>
        <small class="form-text"><%= t ".sensitive_content.help" %></small>
      </div>
    </div>

  </div>
</div>
</file>

<file path="app/views/devise/registrations/_pagination_settings.html.erb">
<%= form.fields_for :pagination_settings do |pagination_settings_form| %>
  <div class="card mb-2">
    <h3 class="card-header"><%= t(".heading") %></h3>
    <div class="card-body">

      <p class='lead'>
        <%= t(".description") %>
      </p>

      <div class="row">
        <%= pagination_settings_form.label nil, t(".models.label"), for: :models, class: "col col-form-label" %>
        <div class="col form-check form-switch">
          <%= pagination_settings_form.check_box :models, checked: pagination_settings["models"], class: "form-check-input" %>
        </div>
      </div>
      <div class="row">
        <%= pagination_settings_form.label nil, t(".creators.label"), for: :creators, class: "col col-form-label" %>
        <div class="col form-check form-switch">
          <%= pagination_settings_form.check_box :creators, checked: pagination_settings["creators"], class: "form-check-input" %>
        </div>
      </div>
      <div class="row">
        <%= pagination_settings_form.label nil, t(".collections.label"), for: :collections, class: "col col-form-label" %>
        <div class="col form-check form-switch">
          <%= pagination_settings_form.check_box :collections, checked: pagination_settings["collections"], class: "form-check-input" %>
        </div>
      </div>
      <div class="row">
        <%= pagination_settings_form.label nil, t(".per_page.label"), for: :per_page, class: "col col-form-label" %>
        <div class="col">
          <%= pagination_settings_form.number_field :per_page, value: pagination_settings["per_page"], in: 1..100, class: "form-control" %>
        </div>
      </div>
    </div>
  </div>
<% end %>
</file>

<file path="app/views/devise/registrations/_problem_settings.html.erb">
<%= form.fields_for :problem_settings do |problem_settings_form| %>
  <div class="card mb-2">
    <h3 class="card-header"><%= t(".title") %></h3>
    <div class="card-body">
      <p class='lead'>
        <%= t(".description") %>
      </p>
      <% Problem::CATEGORIES.each do |category| %>
        <% next if Problem::DEFAULT_SEVERITIES[category].nil? # Skip deprecated categories; they don't appear in the defaults list %>
        <div class="row">
          <%= problem_settings_form.label nil, t("problems.categories.%{c}" % {c: category}),
                for: category,
                class: "col col-form-label" %>
          <div class="col">
            <%= problem_settings_form.select category,
                  Problem::SEVERITIES.map { |s| [t("problems.severities.%{s}" % {s: s}), s] },
                  {selected: @user.problem_severity(category)},
                  class: "form-select" %>
          </div>
        </div>
      <% end %>
    </div>
  </div>
<% end %>
</file>

<file path="app/views/devise/registrations/_renderer_settings.html.erb">
<%= form.fields_for :renderer_settings do |renderer_settings_form| %>
  <div class="card mb-2">
    <h3 class="card-header"><%= t(".heading") %></h3>
    <div class="card-body">
      <p class='lead'>
        <%= t(".description") %>
      </p>
      <div class="row">
        <%= renderer_settings_form.label nil, t(".auto_load_max_size.label"), for: :auto_load_max_size, class: "col col-form-label" %>
        <div class="col">
          <%= renderer_settings_form.select :auto_load_max_size,
                [
                  [t(".auto_load_max_size.never"), 0],
                  [t(".auto_load_max_size.under_2"), 2],
                  [t(".auto_load_max_size.under_4"), 4],
                  [t(".auto_load_max_size.under_8"), 8],
                  [t(".auto_load_max_size.under_16"), 16],
                  [t(".auto_load_max_size.under_32"), 32],
                  [t(".auto_load_max_size.under_64"), 64],
                  [t(".auto_load_max_size.under_128"), 128],
                  [t(".auto_load_max_size.under_256"), 256],
                  [t(".auto_load_max_size.under_512"), 512],
                  [t(".auto_load_max_size.under_1024"), 1024],
                  [t(".auto_load_max_size.always"), 9_999_999]
                ],
                {selected: renderer_settings["auto_load_max_size"] || 9_999_999},
                {class: "form-select"} %>
        </div>
      </div>
      <div class="row">
        <%= renderer_settings_form.label nil, t(".show_grid.label"), for: :show_grid, class: "col col-form-label" %>
        <div class="col form-check form-switch">
          <%= renderer_settings_form.check_box :show_grid, checked: renderer_settings["show_grid"], class: "form-check-input" %>
        </div>
      </div>
      <div class="row">
        <%= renderer_settings_form.label nil, t(".grid_width.label"), for: :grid_width, class: "col col-form-label" %>
        <div class="col">
          <%= renderer_settings_form.number_field :grid_width, value: renderer_settings["grid_width"], class: "form-control" %>
        </div>
      </div>
      <div class="row">
        <%= renderer_settings_form.label nil, t(".enable_pan_zoom.label"), for: :enable_pan_zoom, class: "col col-form-label" %>
        <div class="col form-check form-switch">
          <%= renderer_settings_form.check_box :enable_pan_zoom, checked: renderer_settings["enable_pan_zoom"], class: "form-check-input" %>
        </div>
      </div>
      <div class="row">
        <%= renderer_settings_form.label nil, t(".background_colour.label"), for: :background_colour, class: "col col-form-label" %>
        <div class="col">
          <%= renderer_settings_form.color_field :background_colour, value: renderer_settings["background_colour"], class: "form-control" %>
        </div>
      </div>
      <div class="row">
        <%= renderer_settings_form.label nil, t(".render_style.label"), for: :render_style, class: "col col-form-label" %>
        <div class="col">
          <%= renderer_settings_form.select :render_style, [
                [t(".render_style.original"), "original"],
                [t(".render_style.normals"), "normals"],
                [t(".render_style.lambert"), "lambert"],
                [t(".render_style.shadowed"), "shadowed"]
              ], {selected: renderer_settings["render_style"]}, {class: "form-select"} %>
        </div>
      </div>
      <div class="row">
        <%= renderer_settings_form.label nil, t(".object_colour.label"), for: :object_colour, class: "col col-form-label" %>
        <div class="col">
          <%= renderer_settings_form.color_field :object_colour, value: renderer_settings["object_colour"], class: "form-control" %>
        </div>
      </div>
    </div>
  </div>
<% end %>
</file>

<file path="app/views/devise/registrations/_tag_cloud_settings.html.erb">
<%= form.fields_for :tag_cloud_settings do |tag_cloud_settings_form| %>
  <div class="card mb-2">
    <h3 class="card-header"><%= t(".heading") %></h3>
    <div class="card-body">
      <div class="row">
        <%= tag_cloud_settings_form.label nil, t(".threshold.label"), for: :threshold, class: "col col-form-label" %>
        <div class="col">
          <%= tag_cloud_settings_form.number_field :threshold, value: tag_cloud_settings["threshold"], class: "form-control" %>
        </div>
      </div>
      <div class="row">
        <%= tag_cloud_settings_form.label nil, t(".heatmap.label"), for: :heatmap, class: "col col-form-label" %>
        <div class="col form-check form-switch">
          <%= tag_cloud_settings_form.check_box :heatmap, checked: tag_cloud_settings["heatmap"], class: "form-check-input" %>
        </div>
      </div>
      <div class="row">
        <%= tag_cloud_settings_form.label nil, t(".sorting.label"), for: :sorting, class: "col col-form-label" %>
        <div class="col">
          <%= tag_cloud_settings_form.select :sorting,
                [[t(".sorting.frequency"), nil], [t(".sorting.alphabetical"), "alphabetical"]],
                {selected: tag_cloud_settings["sorting"]},
                class: "form-select" %>
        </div>
      </div>
      <div class="row mb-2">
        <%= tag_cloud_settings_form.label nil, t(".keypair.label"), for: :keypair, class: "col col-form-label" %>
        <div class="col form-check form-switch">
          <%= tag_cloud_settings_form.check_box :keypair, checked: tag_cloud_settings["keypair"], class: "form-check-input" %>
        </div>
      </div>
    </div>
  </div>
<% end %>
</file>

<file path="app/views/devise/registrations/edit.html.erb">
<h2><%= t(".title") %></h2>

<%= form_for(resource, as: resource_name, url: registration_path(resource_name), html: {method: :put}) do |f| %>
  <div class="row mb-4">
    <div class="col-12 col-sm">
      <%- if SiteSettings.multiuser_enabled? %>
        <div class="card mb-2">
          <h4 class="card-header"><%= t(".contact_info") %></h4>
          <div class="card-body">
            <%= text_input_row f, :email, autocomplete: "email",
                  help: (devise_mapping.confirmable? && resource.pending_reconfirmation?) ?
                    t(".currently_waiting_confirmation_for_email", email: resource.unconfirmed_email) :
                    nil %>
            <%= text_input_row f, :username, autocomplete: false %>
            <% if SiteSettings.federation_enabled? %>
              <div class="row mb-3">
                <div class="col-auto col-form-label"><%= t("settings.users.index.fediverse_address") %></div>
                <div class="col col-form-label">
                  <code><%= resource.federails_actor.at_address %></code>
                  <%= render Components::CopyButton.new(text: resource.federails_actor.at_address) %>
                </div>
              </div>
            <% end %>
          </div>
        </div>
        <div class="card mb-2">
          <h4 class="card-header"><%= t(".security") %></h4>
          <div class="card-body">
            <%= password_input_row f, :password, autocomplete: "new-password", strength_meter: true %>
            <%= password_input_row f, :password_confirmation, autocomplete: "new-password" %>
            <%= password_input_row f, :current_password, autocomplete: "current-password",
                  help: t(".current_password_help") %>
          </div>
        </div>
      <% end %>
      <%= render "tag_cloud_settings", form: f %>
      <%= render "problem_settings", form: f %>
    </div>
    <div class="col-12 col-sm">
      <%- if SiteSettings.multiuser_enabled? %>
        <div class="card mb-2">
          <h3 class="card-header"><%= t(".social") %></h3>
          <div class="card-body">
            <div class="row mb-3 text-center">
              <div class="col">
                <%= link_to follow_path, class: "text-reset text-decoration-none fs-5" do %>
                  <%= t("follows.index.following") %>
                  <span class="badge bg-primary"><%= current_user.federails_actor.follows.count %></span>
                <% end %>
              </div>
              <div class="col">
                <%= link_to follow_path, class: "text-reset text-decoration-none fs-5" do %>
                  <%= t("follows.index.followers") %>
                  <span class="badge bg-primary"><%= current_user.federails_actor.followers.count %></span>
                <% end %>
              </div>
            </div>
          </div>
        </div>
        <%- if @user.has_quota? %>
        <div class="card mb-2">
          <h3 class="card-header"><%= t("settings.users.quota.title") %></h3>
          <div class="card-body">
            <div class="row text-center">
              <div class="col">
                <%= render Components::DisplayUserQuota.new(current_size: @user.current_space_used, quota: @user.quota) %>
              </div>
            </div>
          </div>
        </div>
        <% end %>
      <% end %>
      <%= render "general_settings", form: f %>
      <%= render "pagination_settings", form: f %>
      <%= render "file_list_settings", form: f %>
      <%= render "renderer_settings", form: f %>
      <%- if SiteSettings.multiuser_enabled? %>
        <div class="card border-danger mt-3">
          <h4 class="card-header text-bg-danger"><%= t ".danger_zone" %></h4>
          <div class="card-body">
            <p class="card-text">
              <%= link_to t(".cancel_my_account"),
                    registration_path(resource_name),
                    data: {confirm: translate(".confirm_deletion"), turbo_confirm: translate(".confirm_deletion")},
                    method: :delete,
                    class: "btn btn-danger" %>
            </p>
          </div>
        </div>
      <% end %>
    </div>
  </div>

  <div class="row mb-4">
    <div class='col'>
      <button type="submit" class="btn btn-primary"><%= icon("save", t(".submit")) %> <%= t(".submit") %></button>
    </div>
  </div>

<% end %>
</file>

<file path="app/views/devise/registrations/first_use.html.erb">
<h2><%= t(".title") %></h2>

<p class='alert alert-info'>
 <%= t(".guidance") %>
</p>

<%= form_for(resource, as: resource_name, url: registration_path(resource_name), html: {method: :put}) do |f| %>
  <%= text_input_row f, :email, autofocus: true, autocomplete: "email", help: t(".email_help") %>
  <%= text_input_row f, :username, help: t(".username_help") %>
  <%= password_input_row f, :password, autocomplete: "new-password", help: t(".password.help_html"), strength_meter: true %>
  <%= password_input_row f, :password_confirmation, autocomplete: "new-password" %>
  <button type="submit" class="btn btn-primary"><%= icon("save", t(".submit")) %> <%= t(".submit") %></button>
<% end %>
</file>

<file path="app/views/devise/registrations/new.html.erb">
<div class="col-sm-8 offset-sm-2 col-md-6 offset-md-3">
  <h1><%= t(".sign_up") %></h1>

  <% if SiteSettings.rules.presence %>
    <h2><%= t(".rules") %></h2>
    <div class="alert alert-warning">
      <%= markdownify(SiteSettings.rules) %>
    </div>
    <p>
      <%= t(".rules_agree") %>
    </p>
  <% end %>

  <h2><%= t(".details") %></h2>
  <%= form_for(resource, as: resource_name, url: registration_path(resource_name)) do |form| %>
    <%= text_input_row form, :email, autofocus: true, autocomplete: "email" %>
    <%- if SiteSettings.default_signup_role == "contributor" && SiteSettings.autocreate_creator_for_new_users %>
      <%= form.fields_for :creators, resource.creators.first || Creator.new do |f| %>
        <%= text_input_row f, :name, autocomplete: false, help: t(".creators.name.help") %>
        <%= text_input_row f, :slug, autocomplete: "username", help: t(SiteSettings.federation_enabled? ? ".creators.slug.help_fedi" : ".creators.slug.help") %>
      <% end %>
    <%- else %>
      <%= text_input_row form, :username, autocomplete: "username", help: t(".username.help") %>
    <% end %>
    <%= password_input_row form, :password, autocomplete: "new-password", strength_meter: true %>
    <%= password_input_row form, :password_confirmation, autocomplete: "new-password" %>
    <%= content_tag :div, t(".approval_help"), class: "alert alert-info" if SiteSettings.approve_signups %>
    <%= form.submit translate(".sign_up"), class: "btn btn-primary" %>
    <div class="float-end">
      <%= render Components::AltchaWidget.new %>
    </div>
  <% end %>

  <%= render "devise/shared/links" %>
</div>
</file>

<file path="app/views/devise/sessions/new.html.erb">
<div class="col-sm-8 offset-sm-2 col-md-6 offset-md-3">
  <h1><%= t(".sign_in") %></h1>

  <% if ENV.fetch("FORCE_OIDC", nil) == "enabled" %>

    <%- if devise_mapping.omniauthable? %>
      <%- resource_class.omniauth_providers.each do |provider| %>
        <%= button_to t("devise.shared.links.sign_in_with_provider", provider: ENV.fetch("OIDC_NAME", OmniAuth::Utils.camelize(provider))), omniauth_authorize_path(resource_name, provider), method: :post, class: "btn btn-primary", data: {turbo: false} %>
      <% end %>
    <% end %>

  <% else %>
    <%= form_for(resource, as: resource_name, url: session_path(resource_name)) do |form| %>

      <%= text_input_row form, :email, autofocus: true, autocomplete: "email" %>
      <%= password_input_row form, :password, autocomplete: "current-password" %>

      <div class="row">
      <% if devise_mapping.rememberable? %>
        <div class="col field">
          <%= form.check_box :remember_me %>
          <%= form.label :remember_me %>
        </div>
      <% end %>

        <div class="col text-end">
          <%= form.submit translate(".sign_in"), class: "btn btn-primary float-end" %>
        </div>
      </div>
    <% end %>

    <%= render "devise/shared/links" %>
  <% end %>
</div>
</file>

<file path="app/views/devise/shared/_error_messages.html.erb">
<% if resource.errors.any? %>
  <div id="error_explanation" data-turbo-cache="false">
    <h2>
      <%= I18n.t("errors.messages.not_saved",
            count: resource.errors.count,
            resource: devise_i18n_fix_model_name_case(resource.model_name.human, i18n_key: "errors.messages.not_saved")) %>
    </h2>
    <ul>
      <% resource.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
    </ul>
  </div>
<% end %>
</file>

<file path="app/views/devise/shared/_links.html.erb">
<hr>
<ul class="nav">
  <%- if controller_name != 'sessions' %>
    <li class="nav-item">
      <%= link_to t(".sign_in"), new_session_path(resource_name) %>
    </li>
  <% end %>

  <%- if devise_mapping.registerable? && policy(:user).new? && controller_name != 'registrations' %>
    <li class="nav-item">
      <%= link_to t(".sign_up"), new_registration_path(resource_name), class: "nav-link" %>
    </li>
  <% end %>

  <%- if devise_mapping.recoverable? && policy(:"users/passwords").new? && controller_name != 'passwords' && controller_name != 'registrations' %>
    <li class="nav-item">
      <%= link_to t(".forgot_your_password"), new_password_path(resource_name), class: "nav-link" %>
    </li>
  <% end %>

  <%- if devise_mapping.confirmable? && controller_name != 'confirmations' %>
    <li class="nav-item">
      <%= link_to t(".didn_t_receive_confirmation_instructions"), new_confirmation_path(resource_name), class: "nav-link" %>
    </li>
  <% end %>

  <%- if devise_mapping.lockable? && resource_class.unlock_strategy_enabled?(:email) && controller_name != 'unlocks' %>
    <li class="nav-item">
      <%= link_to t(".didn_t_receive_unlock_instructions"), new_unlock_path(resource_name), class: "nav-link" %>
    </li>
  <% end %>
</ul>

<div>
  <%- if devise_mapping.omniauthable? %>
    <%- resource_class.omniauth_providers.each do |provider| %>
      <%= button_to t(".sign_in_with_provider", provider: ENV.fetch("OIDC_NAME", OmniAuth::Utils.camelize(provider))), omniauth_authorize_path(resource_name, provider), method: :post, class: "btn btn-primary", data: {turbo: false} %>
    <% end %>
  <% end %>
</div>
</file>

<file path="app/views/devise/unlocks/new.html.erb">
<h2><%= t(".resend_unlock_instructions") %></h2>

<%= form_for(resource, as: resource_name, url: unlock_path(resource_name), html: {method: :post}) do |f| %>
  <%= render "devise/shared/error_messages", resource: resource %>

  <div class="field">
    <%= f.label :email %><br>
    <%= f.email_field :email, autofocus: true, autocomplete: "email" %>
  </div>

  <div class="actions">
    <%= f.submit translate(".resend_unlock_instructions") %>
  </div>
<% end %>

<%= render "devise/shared/links" %>
</file>

<file path="app/views/doorkeeper_applications/_breadcrumb.html.erb">
<% content_for :breadcrumbs do %>
  <nav aria-label="Breadcrumb" class="container-fluid">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><%= link_to t("doorkeeper_applications.index.title"), doorkeeper_applications_path %></li>
      <% if @application&.persisted? %>
        <li class="breadcrumb-item">
          <%= link_to @application.name, @application %>
        </li>
      <% end %>
    </ol>
  </nav>
<% end %>
</file>

<file path="app/views/doorkeeper_applications/_form.html.erb">
<%= form_with model: @application do |form| %>
  <%= text_input_row form, :name, autofocus: true %>
  <%= text_input_row form, :redirect_uri, help: t(".redirect_uri.help") %>
  <div class="row mb-2">
    <%= form.label nil, t(".scopes.label"), for: "application[scopes]", class: "col col-form-label col-auto" %>
    <div class="col">
      <%= form.select :scopes, ["public", "read", "write", "delete"], {}, {class: "form-control col-auto", multiple: true} %>
    </div>
  </div>
  <%= checkbox_input_row form, :confidential, help: t(".confidential.help") %>
  <%= form.submit translate(".submit"), class: "btn btn-primary" %>
<% end %>
</file>

<file path="app/views/doorkeeper_applications/edit.html.erb">
<%= render "breadcrumb" %>
<h1><%= t(".title") %></h1>

<%= render "form" %>
</file>

<file path="app/views/doorkeeper_applications/index.html.erb">
<h1><%= t(".title") %></h1>

<p class="lead"><%= t(".description") %></p>

<table class="table table-striped">
  <tr>
    <td><%= Doorkeeper::Application.human_attribute_name(:name) %></td>
    <%= content_tag(:td) { Doorkeeper::Application.human_attribute_name(:owner) } if current_user.is_moderator? %>
    <td><%= t Doorkeeper::Application.human_attribute_name(:scopes) %></td>
    <td><%= t Doorkeeper::Application.human_attribute_name(:created_at) %></td>
  </tr>
  <% @applications.find_each do |app| %>
    <tr>
      <td><%= link_to app.name, app %></td>
      <%= content_tag(:td) { app.owner.username } if current_user.is_moderator? %>
      <td><%= app.scopes %></td>
      <td><%= app.created_at.to_fs(:long) %></td>
    </tr>
  <% end %>
</table>

<%= link_to t(".new"), new_doorkeeper_application_path, class: "btn btn-primary" %>
</file>

<file path="app/views/doorkeeper_applications/new.html.erb">
<%= render "breadcrumb" %>
<h1><%= t(".title") %></h1>

<%= render "form" %>
</file>

<file path="app/views/doorkeeper_applications/show.html.erb">
<%= render "breadcrumb" %>
<h1><%= t(".title") %></h1>

<table class="table table-striped">
  <tr>
    <td><%= Doorkeeper::Application.human_attribute_name :name %></td>
    <td><%= @application.name %></td>
  </tr>
  <tr>
    <td><%= Doorkeeper::Application.human_attribute_name :uid %></td>
    <td><code><%= @application.uid %></code></td>
  </tr>
  <tr>
    <td><%= Doorkeeper::Application.human_attribute_name :secret %></td>
    <td><code><%= @application.secret %></code></td>
  </tr>
  <tr>
    <td><%= Doorkeeper::Application.human_attribute_name :confidential %></td>
    <td><%= @application.confidential %></td>
  </tr>
  <tr>
    <td><%= Doorkeeper::Application.human_attribute_name :scopes %></td>
    <td><%= safe_join(@application.scopes.to_a.map { |it| content_tag(:code) { it } }, ", ") %></td>
  </tr>
  <tr>
    <td><%= Doorkeeper::Application.human_attribute_name :redirect_uri %></td>
    <td><code><%= @application.redirect_uri %></code></td>
  </tr>
</table>

<%= link_to t(".edit"), edit_doorkeeper_application_path(@application), class: "btn btn-primary" %>
<%= link_to t(".destroy"), doorkeeper_application_path(@application), method: :delete, class: "btn btn-outline-danger" %>
</file>

<file path="app/views/follows/_actor_table.html.erb">
<table class="table table-striped">
  <tr>
    <th></th>
    <th><%= t(".name") %></th>
    <%= content_tag(:th) { t(".address") } if SiteSettings.federation_enabled? %>
    <th><%= t(".actions") %></th>
    <th></th>
  </tr>
  <% actors.each do |actor| %>
    <tr class="align-middle">
      <td>
        <%= actor.entity ? icon(icon_for(actor.entity.class), actor.entity.class.model_name.human) : "⁂" %>
      </td>
      <td><%= link_to actor.name, actor.profile_url %></td>
      <%= content_tag(:td) { actor.short_at_address } if SiteSettings.federation_enabled? %>
      <td><%= render Components::FollowButton.new(follower: current_user, target: actor) %></td>
      <td>
        <% if !actor.local? && actor.extensions&.dig("f3di:concreteType").nil? %>
          <span class="text-warning"><%= icon("exclamation-triangle-fill", translate(".non_manyfold_account")) %></span>
        <% end %>
      </td>
    </tr>
  <% end %>
</table>
</file>

<file path="app/views/follows/_search_form.html.erb">
<div class="col-8">
  <%= form_with url: new_follow_path, method: :get, class: "mt-3" do |f| %>
    <div class="input-group mb-3">
      <%= f.text_field :uri, class: "form-control", placeholder: translate(".placeholder"), aria_label: translate(".submit"), aria_describedby: "button-search", value: query %>
      <%= f.submit translate(".submit"), class: "btn btn-primary", name: nil %>
    </div>
  <% end %>
</div>
</file>

<file path="app/views/follows/index.html.erb">
<h2><%= t(".title") %></h2>

<% if SiteSettings.federation_enabled? %>
  <p class="lead"><%= t("settings.users.index.fediverse_address") %>: <code><%= current_user.federails_actor.at_address %></code></p>
<% end %>

<div class="row">
  <div class="col">
    <h3><%= t(".following") %> <span class="badge bg-primary"><%= @followings.count %></span></h3>
    <%= render "actor_table", actors: @followings %>
  </div>
  <div class="col">
    <h3><%= t(".followers") %> <span class="badge bg-primary"><%= @followers.count %></span></h3>
    <%= render "actor_table", actors: @followers %>
  </div>
</div>
</file>

<file path="app/views/follows/new.html.erb">
<h2><%= t(".title") %></h2>
<p>
  <%= t(".help") %>
</p>

<%= render "search_form", query: @query %>

<% if @query %>

  <h3><%= t(".results") %></h3>
  <% if @actor %>
    <%= render "actor_table", actors: [@actor] %>
  <% else %>
    <div class="alert alert-info">
      <%= icon "person-arms-up", "" %>
      <%= t(".no_results", query: @query) %>
    </div>
  <% end %>
<% end %>
</file>

<file path="app/views/follows/remote_follow.html.erb">
<h2><%= t(".title", name: @name) %></h2>
<p>
  <%= t(".help", name: @name) %>
</p>

<% if @remote_account %>
  <div class="alert alert-info">
    <%= icon "person-arms-up", "" %>
    <%= t(".no_results_html", query: @remote_account) %>
  </div>
<% end %>

<div class="col-8">
  <%= form_with url: perform_remote_follow_path, class: "mt-3", data: {turbo: false} do |f| %>
    <div class="input-group mb-3">
      <%= f.hidden_field :uri, value: @uri %>
      <%= f.hidden_field :name, value: @name %>
      <%= f.text_field :remote_account, class: "form-control", placeholder: translate(".placeholder"),
            aria_label: translate(".submit"), aria_describedby: "button-search", value: @remote_account %>
      <%= f.submit translate(".submit"), class: "btn btn-primary", name: nil %>
    </div>
  <% end %>
</div>
</file>

<file path="app/views/home/_activity.html.erb">
<div class="card border-0 border-bottom">
  <div class="card-body py-2">
    <div class="row">
      <div class="col col-auto">
        <%= icon icon_for(activity.class), activity.class.model_name.human %>
      </div>
      <div class="col">
        <%- if activity.federails_actor.nil? || activity.federails_actor.local? %>
          <%= link_to activity.name, activity %>
        <%- elsif activity.federails_actor&.profile_url %>
          <%= link_to activity.name, activity.federails_actor&.profile_url %>
        <%- else %>
          <%= activity.name %>
        <%- end %>
        <%= server_indicator activity.federails_actor %>
        <%= icon("explicit", Model.human_attribute_name(:sensitive)) if activity.respond_to?(:sensitive) && activity.sensitive %>
        <%= render Components::AccessIndicator.new(object: activity) %>
      </div>
      <% if activity.is_a? Model %>
        <div class="col col-auto">
          <%= status_badges(activity) %>
        </div>
      <% end %>
      <div class="col col-auto">
        <small>
          <% if activity.updated_at >= (activity.created_at + 1.minute) %>
            <%= t(".updated", time: time_ago_in_words(activity.updated_at)) %>
          <% else %>
            <%= t(".created", time: time_ago_in_words(activity.updated_at)) %>
          <% end %>
        </small>
      </div>
    </div>
  </div>
</div>
</file>

<file path="app/views/home/_browsing.html.erb">
<div class="card">
  <h2 class="card-header">
    <%= render Components::Icon.new icon: "search" %>
    <%= t ".title" %>
  </h2>

  <div class="card-body">
    <p>
      <%= t ".content" %>
    </p>
    <%= content_tag(:p) { t ".more_access" } if current_user && !current_user&.is_contributor? %>
    <div class="text-end">
      <%= render Components::GoButton.new(label: t(".manual_link"), href: "https://manyfold.app/manual", variant: :primary, icon: "box-arrow-up-right") %>
    </div>
  </div>

</div>
</file>

<file path="app/views/home/_federation.html.erb">
<div class="card">
  <h2 class="card-header">
    ⁂
    <%= t ".title" %>
  </h2>

  <div class="card-body">
    <p>
      <%= t ".content_html" %>
    </p>
    <p>
      <% if SiteSettings.autocreate_creator_for_new_users %>
        <%= t ".creator_handle_html", handle: current_user.creators.first.federails_actor.at_address %>
        <%= render Components::CopyButton.new text: current_user.creators.first.federails_actor.at_address %>
      <% else %>
        <%= t ".handle_html", handle: current_user.federails_actor.at_address %>
        <%= render Components::CopyButton.new text: current_user.federails_actor.at_address %>
      <% end %>
    </p>
    <p>
      <%= t ".following" %>
    </p>
  </div>

</div>
</file>

<file path="app/views/home/_publishing.html.erb">
<div class="card">
  <h2 class="card-header">
    <%= render Components::Icon.new icon: "send" %>
    <%= t ".title" %>
  </h2>

  <div class="card-body">
    <p>
      <%= t ".content" %>
    </p>
    <%- if current_user.creators.empty? %>
      <p>
        <%= t ".new_creator.content" %>
      </p>
      <div class="text-end">
        <%= render Components::GoButton.new(label: t(".new_creator.button"), href: new_creator_path, variant: :primary, icon: "box-arrow-up-right") %>
      </div>
    <%- else %>
      <p>
        <%= t ".existing_creator.content" %>
      </p>
      <div class="text-end">
        <%= render Components::GoButton.new(label: t(".existing_creator.button"), href: edit_creator_path(current_user.creators.first), variant: :primary, icon: "box-arrow-up-right") %>
      </div>
    <%- end %>
  </div>

</div>
</file>

<file path="app/views/home/_support.html.erb">
<div class="card card-secondary">
  <h2 class="card-header">
    <%= render Components::Icon.new icon: "piggy-bank" %>
    <%= t ".title" %>
  </h2>

  <div class="card-body">
    <p>
      <%= t ".content" %>
    </p>
    <p>
      <%= t ".manyfold_html" %>
    </p>
    <div class="text-end">
      <%= render Components::GoButton.new(label: t(".support_link"), href: SiteSettings.support_link, variant: :primary, icon: "box-arrow-up-right") %>
    </div>
  </div>

</div>
</file>

<file path="app/views/home/_uploading.html.erb">
<div class="card">
  <h2 class="card-header">
    <%= render Components::Icon.new icon: "upload" %>
    <%= t ".title" %>
  </h2>

  <div class="card-body">
    <p>
      <%= t ".how_to_upload" %>
    </p>
    <%- if current_user.has_quota? %>
      <p>
        <%= t ".quota", quota: number_to_human_size(current_user.quota) %>
      </p>
    <% end %>
    <p>
      <%= t ".permissions.private" if SiteSettings.default_viewer_role == "" %>
      <%= t ".permissions.member" if SiteSettings.default_viewer_role == "member" %>
      <%= t ".permissions.edit" %>
    </p>
    <div class="text-end">
      <%= render Components::GoButton.new(label: t(".upload"), href: new_model_path, variant: :primary, icon: "box-arrow-up-right") %>
    </div>
  </div>

</div>
</file>

<file path="app/views/home/about.html.erb">
<div class="container">
  <h1><%= site_name %></h1>

  <article>
    <%= markdownify SiteSettings.about %>

    <% if SiteSettings.rules.presence %>
      <h2><%= t("settings.appearance.rules.label") %></h2>
      <div class="alert alert-warning">
        <%= markdownify(SiteSettings.rules) %>
      </div>
    <% end %>

  </article>
</div>
</file>

<file path="app/views/home/index.html.erb">
<div class="row mb-3 text-center">
  <h1 class="d-none d-md-block"><%= site_name %></h1>
  <p class='lead'><%= site_tagline %></p>
  <% if SiteSettings.demo_mode_enabled? %>
    <div class="alert alert-info">
      <%= t "application.demo_mode" %>
    </div>
  <% end %>
  <div class="col-8 offset-md-2 mt-3 mb-3">
    <%= form_with url: models_path, method: :get do |f| %>
      <div class="input-group">
        <%= f.text_field :q, class: "form-control", placeholder: translate(".search.placeholder"), aria_label: translate(".search.submit"), aria_describedby: "button-search", value: @query %>
        <%= f.submit translate(".search.submit"), class: "btn btn-primary", name: nil %>
      </div>
      <%= render Components::SearchHelp.new do %>
        <div class="link-secondary ms-3"><small>
          <%= t(".open_search_help") %>
        </small></div>
      <% end %>
    <% end %>
  </div>
</div>
<div class="row row-cols-2">
  <div class="col-8 offset-md-2">
    <% if !@feed.empty? %>
      <p class="lead"><%= t(".recent_activity") %></p>
      <%= render partial: "activity", collection: @feed %>
    <% else %>
      <div class="alert alert-info">
        <%= t(".no_activities") %>
      </div>
    <% end %>
  </div>
</div>
</file>

<file path="app/views/home/welcome.html.erb">
<div class="container">
  <h1><%= t ".title", site_name: site_name %></h1>

  <p class="lead">
    <%= t ".lead" %>
  </p>

  <div class="row row-cols-md-2" data-masonry='{"percentPosition": true }'>
    <%= content_tag(:article, class: "col mb-3") { render "browsing" } %>
    <%= content_tag(:article, class: "col mb-3") { render "uploading" } if current_user&.is_contributor? %>
    <%= content_tag(:article, class: "col mb-3") { render "publishing" } if current_user&.is_contributor? %>
    <%= content_tag(:article, class: "col mb-3") { render "federation" } if SiteSettings.federation_enabled? %>
    <%= content_tag(:article, class: "col mb-3") { render "support" } if SiteSettings.support_link.presence %>
  </div>

</div>
</file>

<file path="app/views/kaminari/_first_page.html.erb">
<%# Link to the "First" page
  - available local variables
    url:           url to the first page
    current_page:  a page object for the currently displayed page
    total_pages:   total number of pages
    per_page:      number of items to fetch per page
    remote:        data-remote -%>
<li class="page-item">
  <%= link_to_unless current_page.first?, t("views.pagination.first"), url, remote: remote, class: "page-link", "aria-label": translate(".label") %>
</li>
</file>

<file path="app/views/kaminari/_gap.html.erb">
<%# Non-link tag that stands for skipped pages...
  - available local variables
    current_page:  a page object for the currently displayed page
    total_pages:   total number of pages
    per_page:      number of items to fetch per page
    remote:        data-remote -%>
<li class="page-item">
  <span class="page-link"><%= t("views.pagination.truncate") %></span>
</li>
</file>

<file path="app/views/kaminari/_last_page.html.erb">
<%# Link to the "Last" page
  - available local variables
    url:           url to the last page
    current_page:  a page object for the currently displayed page
    total_pages:   total number of pages
    per_page:      number of items to fetch per page
    remote:        data-remote -%>
<li class="page-item">
  <%= link_to_unless current_page.last?, t("views.pagination.last"), url, remote: remote, class: "page-link", "aria-label": translate(".label") %>
</li>
</file>

<file path="app/views/kaminari/_next_page.html.erb">
<%# Link to the "Next" page
  - available local variables
    url:           url to the next page
    current_page:  a page object for the currently displayed page
    total_pages:   total number of pages
    per_page:      number of items to fetch per page
    remote:        data-remote -%>
<li class="page-item">
  <%= link_to_unless current_page.last?, t("views.pagination.next"), url, rel: "next", remote: remote, class: "page-link", "aria-label": translate(".label") %>
</li>
</file>

<file path="app/views/kaminari/_page.html.erb">
<%# Link showing page number
  - available local variables
    page:          a page object for "this" page
    url:           url to this page
    current_page:  a page object for the currently displayed page
    total_pages:   total number of pages
    per_page:      number of items to fetch per page
    remote:        data-remote -%>
<li class="page-item <%= " active" if page.current? %>">
  <%= link_to_unless page.current?, page, url, {remote: remote, rel: page.rel, class: "page-link", "aria-label": translate(".label", page: page)} do |name|
        content_tag(:span, name, class: "page-link", "aria-label": translate(".current_page"))
      end %>
</li>
</file>

<file path="app/views/kaminari/_paginator.html.erb">
<%# The container tag
  - available local variables
    current_page:  a page object for the currently displayed page
    total_pages:   total number of pages
    per_page:      number of items to fetch per page
    remote:        data-remote
    paginator:     the paginator that renders the pagination tags inside -%>
<%= paginator.render do -%>
  <nav aria-label="<%= translate(".label") %>">
    <ul class="pagination justify-content-center" aria-label="pager">
      <%= first_page_tag unless current_page.first? %>
      <%= prev_page_tag unless current_page.first? %>
      <% each_page do |page| -%>
        <% if page.display_tag? -%>
          <%= page_tag page %>
        <% elsif !page.was_truncated? -%>
          <%= gap_tag %>
        <% end -%>
      <% end -%>
      <% unless current_page.out_of_range? %>
        <%= next_page_tag unless current_page.last? %>
        <%= last_page_tag unless current_page.last? %>
      <% end %>
    </ul>
  </nav>
<% end -%>
</file>

<file path="app/views/kaminari/_prev_page.html.erb">
<%# Link to the "Previous" page
  - available local variables
    url:           url to the previous page
    current_page:  a page object for the currently displayed page
    total_pages:   total number of pages
    per_page:      number of items to fetch per page
    remote:        data-remote -%>
<li class="page-item">
  <%= link_to_unless current_page.first?, t("views.pagination.previous"), url, rel: "prev", remote: remote, class: "page-link", "aria-label": translate(".label") %>
</span>
</file>

<file path="app/views/layouts/application.html.erb">
<!DOCTYPE html>
<html lang="<%= I18n.locale %>" data-controller="i18n">
  <head>
    <title><%= @title || site_name %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= tag.meta name: "csp-nonce", content: content_security_policy_nonce if content_security_policy_nonce %>
    <%= favicon_link_tag "roundel.svg" %>
    <%= tag.link rel: "apple-touch-icon", href: asset_path("square-180.png") %>
    <%= tag.meta name: "apple-mobile-web-app-title", content: site_name %>
    <%= javascript_include_tag "application", nonce: true, defer: true %>
    <%= stylesheet_link_tag "themes/#{SiteSettings.theme}", nonce: true %>
    <%= turbo_refreshes_with method: :morph, scroll: :preserve %>
    <%= tag.meta name: "robots", content: @indexing_directives if @indexing_directives.presence %>
    <%= yield :head %>
  </head>

  <body>
    <%= skip_link "content", t(".skip_to_content") %>
    <%= render "application/navbar" %>
    <%= yield :breadcrumbs %>
    <main class="container-fluid" id="content">
      <div>
        <% if notice %>
          <p class="alert alert-info">
            <%= icon "info-circle-fill", t(".alert.info") %>
            <%= notice %>
          </p>
        <% end %>
        <% if alert %>
          <p class="alert alert-danger">
            <%= icon "x-octagon-fill", t(".alert.danger") %>
            <%= alert %>
          </p>
        <% end %>
      </div>
      <div class="pt-3">
        <%= yield %>
      </div>
    </main>
    <%= render "application/footer" %>
  </body>
</html>
</file>

<file path="app/views/layouts/card_list_page.html.erb">
<%= yield :page_header %>

<div class="row row-cols-md-2 mt-2">
  <div class="col-md-9" id="item_list">
    <%= yield :items %>
  </div>
  <div class="col-md-3" id="sidebar">
    <% action_content = yield :actions %>
    <%= card(:secondary, t(".actions_heading"), class: "action-card") { action_content } if action_content.present? %>
    <%= yield :sidebar %>
  </div>
</div>

<% parent_layout "application" %>
</file>

<file path="app/views/layouts/embed.html.erb">
<!DOCTYPE html>
<html lang="<%= I18n.locale %>">
  <head>
    <title><%= @title || site_name %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= tag.meta name: "csp-nonce", content: content_security_policy_nonce if content_security_policy_nonce %>
    <%= javascript_include_tag "application", nonce: true, defer: true %>
    <%= stylesheet_link_tag "themes/#{SiteSettings.theme}", nonce: true %>
    <%= yield :head %>
  </head>

  <body>
    <%= yield %>
  </body>
</html>
</file>

<file path="app/views/layouts/mailer.html.erb">
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <style>
      /* Email styles need to be inline */
    </style>
  </head>

  <body>
    <%= yield %>
  </body>
</html>
</file>

<file path="app/views/layouts/mailer.text.erb">
<%= yield %>
</file>

<file path="app/views/layouts/settings.html.erb">
<% if policy(:settings).index? %>
  <h1><%= t ".site_settings_title" %></h1>
<% elsif policy(:user).index? %>
  <h1><%= t ".moderation_settings_title" %></h1>
<% end %>
<div class="row mt-2">
  <div class="col col-auto border-end" id="sidebar">
    <ul class="nav flex-column">
      <% if policy(:settings).index? %>
        <li class="nav-item">
          <%= link_to t(".organization"), settings_path, class: "nav-link" %>
        </li>
        <li class="nav-item">
          <%= link_to t(".libraries"), settings_libraries_path, class: "nav-link" %>
        </li>
        <li class="nav-item">
          <%= link_to t(".downloads"), downloads_settings_path, class: "nav-link" %>
        </li>
        <li class="nav-item">
          <%= link_to t(".appearance"), appearance_settings_path, class: "nav-link" %>
        </li>
        <li class="nav-item">
          <%= link_to t("settings.analysis.heading"), analysis_settings_path, class: "nav-link" %>
        </li>
        <li class="nav-item">
          <%= link_to t("settings.multiuser.heading"), multiuser_settings_path, class: "nav-link" %>
        </li>
      <% end %>
      <% if SiteSettings.multiuser_enabled? %>
        <li class="nav-item">
          <%= link_to t("settings.users.index.title"), settings_users_path, class: "nav-link" %>
        </li>
        <li class="nav-item">
          <%= link_to t("settings.reports.index.title"), settings_reports_path, class: "nav-link" %>
        </li>
      <% end %>
      <% if SiteSettings.federation_enabled? %>
        <li class="nav-item">
          <%= link_to t("settings.domain_blocks.index.title"), settings_domain_blocks_path, class: "nav-link" %>
        </li>
      <% end %>

      <% if policy(:settings).index? %>
        <li class="nav-item">
          <%= link_to t("settings.discovery.heading"), discovery_settings_path, class: "nav-link" %>
        </li>
        <li class="nav-item">
          <%= link_to t("settings.reporting.heading"), reporting_settings_path, class: "nav-link" %>
        </li>
        <li class="nav-item">
          <%= link_to t("doorkeeper_applications.index.title"), doorkeeper_applications_path, class: "nav-link" %>
        </li>
      <% end %>
    </ul>
    <% if policy(:settings).index? and not SiteSettings.demo_mode_enabled? %>
      <hr>
      <h5><%= t(".tools_heading") %></h5>
      <ul class="nav flex-column">
        <li class="nav-item">
          <%= link_to t(".activeadmin"), admin_root_path, class: "nav-link" %>
        </li>
        <li class="nav-item">
          <%= link_to t(".performance"), rails_performance_path, class: "nav-link" unless Rails.env.test? %>
        </li>
        <li class="nav-item">
          <%= link_to t(".sidekiq"), sidekiq_web_path, class: "nav-link" %>
        </li>
        <% if ApplicationRecord.connection.adapter_name == "PostgreSQL" %>
          <li class="nav-item">
            <%= link_to t(".pghero"), pg_hero_path, class: "nav-link" %>
          </li>
        <% end %>
      </ul>
    <% end %>
  </div>
  <div class="col" id="content">
    <%= yield %>
  </div>
</div>

<% parent_layout "application" %>
</file>

<file path="app/views/libraries/_form.html.erb">
<%= form_with model: @library do |form| %>
  <%= text_input_row form, :name %>
  <%= checkbox_input_row form, :default, help: t(".default.help"), checked: @library.default? %>
  <% unless @library.persisted? %>
    <div class="row mb-3 input-group">
      <%= form.label :storage_service, class: "col-sm-2 col-form-label" %>
      <div class='col-sm-10 ps-0'>
        <%= form.select :storage_service, Library::STORAGE_SERVICES.map { |it| [translate("libraries.storage_services.%{service}" % {service: it}), it] }, {}, {class: "form-control col-auto form-select", "data-bs-collapse": "collapse", "data-controller": "storage-service", "data-action": "change->storage-service#onChange"} %>
        <div id="options-filesystem" class="card p-3 collapse show storage-collapse" data-bs-parent="#library_storage_service">
          <div class="row">
            <p><%= t ".filesystem_description_html" %></p>
          </div>
          <%= text_input_row form, :path, placeholder: translate(".path.placeholder") %>
          <%= checkbox_input_row form, :create_path_if_not_on_disk, help: t(".create_path_if_not_on_disk.help") %>
        </div>
        <div id="options-s3" class="card p-3 collapse show storage-collapse" data-bs-parent="#library_storage_service">
          <div class="row">
            <p><%= t ".s3_description_html" %></p>
          </div>
          <%= url_input_row form, :s3_endpoint, help: t(".s3_endpoint.help"), autocomplete: false %>
          <%= text_input_row form, :s3_bucket, help: t(".s3_bucket.help"), autocomplete: false %>
          <%= text_input_row form, :s3_region, autocomplete: false %>
          <%= text_input_row form, :s3_access_key_id, autocomplete: false %>
          <%= password_input_row form, :s3_secret_access_key, autocomplete: false %>
          <%= checkbox_input_row form, :s3_path_style, help: t(".s3_path_style.help") %>
        </div>
      </div>
    </div>
  <% end %>
  <%= text_input_row form, :caption, help: t(".caption.help") %>
  <%= text_input_row form, :icon, help: t(".icon.help_html"), placeholder: translate(".icon.placeholder") %>
  <%= rich_text_input_row form, :notes, help: t(".notes.help_html") %>

  <% if @library.persisted? %>
    <div class="row mb-3 input-group">
      <%= form.label :tag_regex, class: "col-sm-2 col-form-label mb-0" %>
      <div id="newinput" class="col-sm-10 p-0">
        <% @library.tag_regex.each do |reg| %>
          <div class="input-group">
            <%= text_field_tag "library[tag_regex][]", reg, class: "form-control col-sm-11", autocomplete: "off" %>
            <%= link_to icon(:trash, "Delete"), "", onClick: "jQuery(this).parents('div.input-group')[0].remove(); return false;", class: "input-group-text btn btn-outline-danger col-auto" %>
          </div>
        <% end %>
        <div id="regexclone" style="display: none">
          <div class="input-group">
            <%= text_field_tag "library[tag_regex][]", "", class: "form-control col-sm-11", autocomplete: "off" %>
            <%= link_to icon(:trash, "Delete"), "", onClick: "jQuery(this).parents('div.input-group')[0].remove(); return false;", class: "input-group-text btn btn-outline-danger col-auto" %>
          </div>
        </div>
      </div>
      <div class="col-sm-2"></div><div class="col-sm-10 p-0">
        <%= link_to icon("plus-square-dotted", t(".add_line")), "", onClick: "$('#newinput').append($('#regexclone').html()); return false;", class: "btn btn-primary" %>
        <span id="libraryRegexHelp" class="form-text"><%= t(".tag_regex.help") %></span>
      </div>
    </div>
  <% end %>

  <%= form.submit translate("general.save"), class: "btn btn-primary" %>

  <% if @library.persisted? %>
    <%= if policy(@library).destroy?
          link_to safe_join([icon("trash", t("general.delete")), t("general.delete")], " "),
            library_path(@library.public_id),
            {
              method: :delete,
              class: "float-end btn btn-outline-danger",
              data: {confirm: translate(".confirm_destroy.help", count: @library.models.count)}
            }
        end %>
  <% end %>
<% end %>
</file>

<file path="app/views/libraries/edit.html.erb">
<h1><%= t("libraries.general.edit") %></h1>

<%= render "form" %>
</file>

<file path="app/views/libraries/index.html.erb">
<h3><%= t(".heading") %></h3>
<%= link_to t("libraries.general.new"), new_library_path, class: "btn btn-secondary float-end" if policy(:library).new? %>
<p class='lead'>
  <%= t(".description") %>
</p>
<div class="row">
  <% Library.find_each do |library| %>
    <div class="col-md-6">
      <div class="card <%= "border-info" if library.default? %>">
        <div class="card-header">
          <%= icon(library.icon, library.icon) if library.icon %>
          <%= library.name %>
          <%= content_tag(:small, class: "text-info float-end") { t("activerecord.attributes.library.default") } if library.default? %>
        </div>
        <div class="card-body">
          <%= link_to t("general.edit"), edit_library_path(library), {class: "btn btn-secondary float-end #{policy(:library).edit? ? "" : "disabled"}"} %>
          <p>
            <%= markdownify(library.notes) if library.notes %>
          </p>
          <table class="table">
            <tr>
              <td><%= t("activerecord.attributes.library.storage_service") %></td>
              <td><%= t("libraries.storage_services.%{service}" % {service: library.storage_service}) %></td>
            </tr>
            <% if library.storage_service == "filesystem" %>
              <tr>
                <td><%= t("activerecord.attributes.library.path") %></td>
                <td><code style="word-break: break-all"><%= library.path %></code></td>
              </tr>
            <% end %>
            <% if library.storage_service == "s3" %>
              <tr>
                <td><%= t("activerecord.attributes.library.s3_endpoint") %></td>
                <td><%= library.s3_endpoint %></td>
              </tr>
              <tr>
                <td><%= t("activerecord.attributes.library.s3_bucket") %></td>
                <td><%= library.s3_bucket %></td>
              </tr>
              <tr>
                <td><%= t("activerecord.attributes.library.s3_region") %></td>
                <td><%= library.s3_region %></td>
              </tr>
            <% end %>
            <% if library.free_space %>
              <tr>
                <td><%= t(".free_space.label") %></td>
                <td><%= number_to_human_size(library.free_space, precision: 2) %></td>
              </tr>
            <% end %>
            <tr>
              <td><%= t("activerecord.attributes.library.caption") %></td>
              <td><%= library.caption %></td>
            </tr>
            <tr>
              <td><%= t("activerecord.attributes.library.tag_regex") %></td>
              <td>
                <% library.tag_regex.each do |reg| %>
                  <%= link_to t(".tag_regex.check"), models_path(library: library, missingtag: reg), {class: "btn btn-outline-secondary"} %>
                  <code><%= reg %></code><br>
                <% end %>
                <%= if !library.tag_regex.empty? then link_to t(".tag_regex.search_missing"), models_path(library: library, missingtag: ""), {class: "btn btn-outline-secondary"} end %>
              </td>
            </tr>
          </table>
          <div class="row">
            <%= render Components::StatBlock.new(title: Model, value: model_count(library: library)) %>
            <%= render Components::StatBlock.new(title: ModelFile, value: model_file_count(library: library)) %>
            <%= render Components::StatBlock.new(title: t("settings.show.total_file_size"), value: number_to_human_size(total_file_size(library: library), precision: 2)) %>
          </div>
        </div>
      </div>
    </div>
  <% end %>
</div>

<hr>

<%= form_with url: settings_path, method: :patch do |form| %>
  <h4><%= t(".settings") %></h4>
  <div class="row mb-2">
    <%= form.label nil, t(".show.label"), for: "libraries[show]", class: "col-sm-4 col-form-label" %>
    <div class="col-sm-8 form-check form-switch">
      <%= form.check_box "libraries[show]", checked: SiteSettings.show_libraries, class: "form-check-input" %>
      <small><%= t(".show.help") %></small>
    </div>
  </div>
  <%= render "settings/submit", form: form %>
<% end %>
</file>

<file path="app/views/libraries/new.html.erb">
<h1><%= t("libraries.general.new") %></h1>

<%= render "form" %>
</file>

<file path="app/views/model_files/_breadcrumb.html.erb">
<% content_for :breadcrumbs do %>
  <nav aria-label="Breadcrumb" class="container-fluid">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><%= link_to @model.name, @model %></li>
      <% if @file %>
        <li class="breadcrumb-item">
          <%= link_to @file.name, [@model, @file] %>
        </li>
      <% end %>
    </ol>
  </nav>
<% end %>
</file>

<file path="app/views/model_files/_form.html.erb">
<%= form_with model: [@model, @file] do |form| %>
  <%= text_input_row form, :filename %>
  <% if @file.is_3d_model? %>
    <%= checkbox_input_row form, :printed, checked: current_user.printed?(@file) %>
    <%= checkbox_input_row form, :presupported %>
    <%= checkbox_input_row form, :y_up %>
    <%= checkbox_input_row form, :previewable %>
    <%= unless @file.presupported
          collection_select_input_row form,
            :presupported_version, policy_scope(@model.model_files).presupported, :id, :name,
            include_blank: true
        end %>
  <% end %>
  <%= text_input_row form, :caption %>
  <%= rich_text_input_row form, :notes, help: t(".notes.help_html") %>
  <%= form.submit class: "btn btn-primary" %>
<% end %>
</file>

<file path="app/views/model_files/_problem.html.erb">
<%= card(problem_severity(problem), t("problems.model_file.%{cat}.title" % {cat: problem.category})) do %>
  <%= turbo_stream_from problem %>
  <%= t("problems.model_file.%{cat}.description" % {cat: problem.category}, note: problem.note) %>

  <% if problem.category == "duplicate" && !@duplicates.empty? %>
    <ul>
      <% @duplicates.each do |file| %>
        <li><%= link_to "#{file.model.name}/#{file.filename}", [file.model, file] %></li>
      <% end %>
    </ul>
  <% end %>

  <div class="mt-3 float-end"><%= render Components::ResolveButton.new(problem: problem, user: current_user) %></div>
<% end %>
</file>

<file path="app/views/model_files/bulk_edit.html.erb">
<%= render partial: "breadcrumb" %>
<h1><%= t(".title") %></h1>

<p class="lead"><%= t(".description") %></p>

<%= form_with url: bulk_update_model_model_files_path(@model), method: :patch do |form| %>

  <table class="table table-striped" data-controller="bulk-edit" data-action="change->bulk-edit#handleCheckboxChange">
    <tr>
      <th><input type="checkbox" aria-label="<%= translate ".select_all" %>" value="0" name="bulk-select-all"></th>
      <th><%= ModelFile.human_attribute_name(:name) %></th>
      <th><%= ModelFile.human_attribute_name(:filename) %></th>
      <th><%= ModelFile.human_attribute_name(:printed) %></th>
      <th><%= ModelFile.human_attribute_name(:presupported) %></th>
      <th><%= ModelFile.human_attribute_name(:y_up) %></th>
      <th><%= ModelFile.human_attribute_name(:previewable) %></th>
    </tr>
    <% @files.each do |file| %>
      <tr>
        <td><%= form.check_box "model_files[#{file.to_param}]", data: {bulk_item: file.to_param}, "aria-label": translate(".select", name: file.name) %></td>
        <td><%= link_to file.name, [@model, file], title: file.filename %></td>
        <td><code><%= file.filename %></code></td>
        <td><%= icon "check-circle-fill", ModelFile.human_attribute_name(:printed) if current_user.printed?(file) %></td>
        <td><%= icon "check-circle-fill", ModelFile.human_attribute_name(:presupported) if file.presupported %></td>
        <td><%= icon "check-circle-fill", ModelFile.human_attribute_name(:y_up) if file.y_up %></td>
        <td><%= icon "check-circle-fill", ModelFile.human_attribute_name(:previewable) if file.previewable %></td>
      </tr>
    <% end %>
  </table>

  <p class="lead"><%= t ".form_subtitle" %></p>

  <div class="row mb-3">
    <div class="col col-auto mt-2">
      <%= t(".rename") %>
    </div>
    <div class="col border p-3">
      <%= text_input_row form, :pattern, label: t(".pattern") %>
      <%= text_input_row form, :replacement, label: t(".replacement") %>
    </div>
  </div>

  <%= checkbox_input_row form, :printed, label: ModelFile.human_attribute_name(:printed) %>
  <%= checkbox_input_row form, :presupported, label: ModelFile.human_attribute_name(:presupported) %>
  <%= checkbox_input_row form, :y_up, label: ModelFile.human_attribute_name(:y_up) %>
  <%= checkbox_input_row form, :previewable, label: ModelFile.human_attribute_name(:previewable) %>

  <%= form.submit translate(".submit"), class: "btn btn-primary" %>
  <%= form.submit translate(".split"), name: "split", class: "btn btn-warning" %>

<% end %>
</file>

<file path="app/views/model_files/edit.html.erb">
<%= render partial: "model_files/breadcrumb" %>
<h1><%= t("model_files.general.edit") %></h1>

<%= render "form" %>
</file>

<file path="app/views/model_files/embedded.html.erb">
<% if @file.is_image? %>
  <%= image_tag model_model_file_path(@model, @file, format: @file.extension), alt: @file.name, style: "width: 100%" %>
<% elsif @file.is_video? %>
  <%= video_tag model_model_file_path(@model, @file, format: @file.extension), alt: @file.name, style: "width: 100%", controls: true %>
<% elsif @file.is_document? %>
  <%= tag.iframe src: model_model_file_path(@model, @file, format: @file.extension), alt: @file.name, style: "width: 100%; aspect-ratio: 0.707" %>
<% elsif @file.is_renderable? %>
  <%= render Components::Renderer.new(file: @file) %>
<% end %>
</file>

<file path="app/views/model_files/show.html.erb">
<% content_for :head do %>
  <%= tag.meta property: "og:type", content: "website" %>
  <%= tag.meta name: "fediverse:creator", content: @file.model.creator.federails_actor.at_address if @file.model.creator %>
<% end %>

<%= render partial: "breadcrumb" %>
<%= turbo_stream_from @file %>
<h1><%= @file.name %></h1>

<div class="row row-cols-2">

  <div class="col-9">
    <% if @file.is_image? %>
      <%= image_tag model_model_file_path(@model, @file, format: @file.extension), alt: @file.name, style: "width: 100%" %>
    <% elsif @file.is_video? %>
      <%= video_tag model_model_file_path(@model, @file, format: @file.extension), alt: @file.name, style: "width: 100%", controls: true %>
    <% elsif @file.is_document? %>
      <%= tag.iframe src: model_model_file_path(@model, @file, format: @file.extension), alt: @file.name, style: "width: 100%; aspect-ratio: 0.707" %>
    <% elsif @file.is_renderable? %>
      <% if @file.presupported_version || @file.unsupported_version %>
        <ul class="nav nav-tabs">
          <li class="nav-item">
            <% if @file.unsupported_version %>
              <%= link_to Model.human_attribute_name(:unsupported_version), [@model, @file.unsupported_version], class: "nav-link" %>
            <% else %>
              <a class="nav-link active" aria-current="page" href="#"><%= Model.human_attribute_name :unsupported_version %></a>
            <% end %>
          </li>
          <li class="nav-item">
            <% if @file.presupported_version %>
              <%= link_to Model.human_attribute_name(:presupported_version), [@model, @file.presupported_version], class: "nav-link" %>
            <% else %>
              <a class="nav-link active" aria-current="page" href="#"><%= Model.human_attribute_name :presupported_version %></a>
            <% end %>
          </li>
        </ul>
      <% end %>
      <%= render Components::Renderer.new(file: @file) %>
    <% end %>
    <% if @file.notes %>
      <%= card(:secondary, t(".notes_heading")) do %>
        <p class="card-text"><%= markdownify @file.notes %></p>
      <% end %>
    <% end %>
  </div>

  <div class="col-3">
    <%= card :secondary, t(".details_heading") do %>
      <% if @file.caption %>
        <p class='lead'><%= @file.caption %></p>
      <% end %>
      <p>
        <%= ModelFile.human_attribute_name :filename %>:
        <code><%= @file.filename %></code>
      </p>
      <% if @file.digest %>
        <p>
          <%= ModelFile.human_attribute_name :digest %>:
          <code><%= @file.digest.slice(0, 16) %></code>
        </p>
      <% end %>
      <% if @file.size %>
        <p>
          <%= ModelFile.human_attribute_name :size %>
          <code><%= number_to_human_size @file.size, precision: 2 %></code>
        </p>
      <% end %>
      <%= link_to safe_join([icon("pencil", t("general.edit")), t("general.edit")], " "), edit_model_model_file_path(@model, @file), class: "btn btn-primary" if policy(@file).edit? %>
      <%= link_to safe_join([icon("trash", t("general.delete")), t("general.delete")], " "), model_model_file_path(@model, @file), {method: "delete", data: {confirm: translate("model_files.destroy.confirm")}, class: "btn btn-outline-danger"} if policy(@file).destroy? %>
    <% end %>

    <%= render partial: "problem", collection: @file.problems.visible(problem_settings) %>

    <%= card :secondary, t("layouts.card_list_page.actions_heading") do %>

      <div class="btn-group ml-auto mr-auto">
        <%= link_to safe_join([icon("cloud-download", t("general.download")), t("general.download")], " "), model_model_file_path(@model, @file, @file.extension&.to_sym, download: "true"), {class: "btn btn-secondary", download: "download"} %>
        <button type="button" class="btn btn-lg btn-primary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
          <span class="visually-hidden">Download options</span>
        </button>
        <ul class="dropdown-menu">
          <li class="dropdown-header"><%= t(".download.menu_header") %></li>
          <%= slicer_links @file %>
        </ul>
      </div>

    <% end %>

  </div>
</div>
</file>

<file path="app/views/models/_bulk_fields.html.erb">
<%= collection_select_input_row form,
      :creator, @creators, :id, :name_with_domain,
      include_blank: true,
      selected: @new_creator&.id || @default_creator&.id,
      button: (if policy(:creator).new?
                 {
                   path: new_creator_path,
                   label: t("creators.general.new")
                 }
               end) %>
<%= collection_select_input_row form,
      :collection, @collections, :id, :name_with_domain,
      include_blank: true,
      selected: @new_collection&.id,
      button: (if policy(:collection).new?
                 {
                   path: new_collection_path,
                   label: t("collections.general.new")
                 }
               end) %>

<div class="row mb-3">
  <%= form.label :license, class: "col-sm-2 col-form-label" %>
  <div class="col-sm-10">
    <%= form.select :license, license_select_options, {include_blank: true}, {class: "form-control col-auto form-select"} %>
  </div>
</div>

<%= checkbox_input_row form, :sensitive %>

<%= render "tags_edit", form: form, name: :add_tags, selected: (defined?(default_tags) ? default_tags : nil), label: translate(".add_tags"), tags: @available_tags || [] %>
</file>

<file path="app/views/models/_file.html.erb">
<div class="col mb-4">
  <div class="card preview-card <%= (file === @model.preview_file) ? "border-primary" : "" %>">
    <% if file.is_image? %>
      <%= content_tag :div, nil, class: "card-img-top card-img-top-background", style: "background-image: url(#{model_model_file_path(@model, file, format: file.extension)})" %>
      <%= image_tag model_model_file_path(@model, file, format: file.extension), class: "card-img-top image-preview", alt: file.name %>
    <% elsif file.is_renderable? %>
      <div class="card-img-top">
        <%= render Components::Renderer.new(file: file) %>
      </div>
    <% else %>
      <%= content_tag :div, nil, class: "card-img-top", style: "aspect-ratio: 1" do %>
        <svg height="100%" width="100%" viewBox="0 0 100 100">
          <path stroke="black" stroke-linecap="round" stroke-width="0.5" fill="white" d="
            M60,15
            h-30
            q-5,0 -5,5
            v65
            q0,5 5,5
            h40
            q5,0 5,-5
            v-55
            L60,15
          " />
          <path stroke="black" stroke-linecap="round" stroke-width="0.5" fill="transparent" d="
            M60,15
            v10
            q0,5 5,5
            h10
          " />
          <text x="50%" y="80%" fill="black" dominant-baseline="middle" text-anchor="middle" style="font-size: 8px"><%= file.extension&.upcase %></text>
        </svg>
      <% end %>
    <% end %>
    <div class="card-body">
      <div class="card-title">
        <%= file.name %>
      </div>
      <div class="card-text">
        <% if file.caption %>
          <p><%= sanitize file.caption %></p>
        <% end %>
        <small><code><%= sanitize file.filename %></code></small>
      </div>
      <div class="row">
        <div class="col">
          <%= link_to t(".open_button.text"), model_model_file_path(@model, file), {class: "btn btn-primary", "aria-label": translate(".open_button.label", name: file.name)} %>
          <%= link_to icon("cloud-download", t("general.download")), model_model_file_path(@model, file, file.extension&.to_sym, download: "true"), {class: "btn btn-outline-secondary", download: "download"} %>
          <% if file.presupported || file.presupported_version %>
            <%= icon "bar-chart-line-fill", ModelFile.human_attribute_name(:presupported) %>
          <% end %>
          <%= problem_icon_tag(file.problems) if policy(Problem).show? %>
        </div>
        <div class="col col-auto">
          <div class="float-end">
            <div class="btn-group dropup">
              <a href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                <%= icon "three-dots-vertical", t("general.menu") %>
              </a>
              <ul class="dropdown-menu dropdown-menu-end">
                <%= slicer_links(file) if file.is_3d_model? %>
                <li><hr class="dropdown-divider"></li>
                <% if file.presupported_version %>
                <li><h6 class="dropdown-header"><%= t(".presupported") %></h6></li>
                  <%= link_to t("general.download"), model_model_file_path(@model, file.presupported_version, file.presupported_version.extension&.to_sym, download: "true"), {class: "dropdown-item", download: "download"} %>
                  <%= slicer_links(file.presupported_version) if file.presupported_version.is_3d_model? %>
                  <li><hr class="dropdown-divider"></li>
                <% end %>
                <li><%= link_to safe_join([icon("pencil-fill", t(".edit")), t(".edit")], " "), edit_model_model_file_path(@model, file), {class: "dropdown-item"} if policy(file).edit? %></li>
                <li><%= link_to safe_join([icon("image", t(".set_as_preview")), t(".set_as_preview")], " "), model_path(@model, "model[preview_file_id]": file.id), {method: :patch, class: "dropdown-item"} if policy(@model).edit? && file.is_renderable? || file.is_image? %></li>
                <li><%= link_to safe_join([icon("trash", t(".delete")), t(".delete")], " "), model_model_file_path(@model, file), {method: :delete, class: "dropdown-item", data: {confirm: translate("model_files.destroy.confirm")}} if policy(file).destroy? %></li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
</file>

<file path="app/views/models/_form.html.erb">
<%= form_with model: @model do |form| %>
  <%= text_input_row form, :name %>

  <%= collection_select_input_row form, :preview_file, @model.valid_preview_files, :id, :name, help: t(".preview_file.help") %>

  <%= collection_select_input_row form,
        :creator, @creators, :id, :name_with_domain,
        include_blank: true,
        selected: @default_creator&.id,
        button: (if policy(:creator).new?
                   {
                     path: new_creator_path,
                     label: t("creators.general.new")
                   }
                 end) %>

  <% if SiteSettings.show_libraries || current_user.is_administrator? %>
    <%= unless @model.contains_other_models?
          collection_select_input_row form,
            :library, policy_scope(Library).all, :id, :name,
            include_blank: true
        end %>
  <% end %>

  <%= render "tags_edit", form: form, name: "model[tag_list]", value: (@model.tags.order(taggings_count: :desc, name: :asc).map { |tag| tag.name }).join(","), label: translate(".tags"), tags: @available_tags %>

  <%= collection_select_input_row form,
        :collection, @collections, :id, :name_with_domain,
        include_blank: true,
        button: (if policy(:collection).new?
                   {
                     path: new_collection_path,
                     label: t("collections.general.new")
                   }
                 end) %>

  <%= render "links_form", form: form %>
  <%= text_input_row form, :caption %>
  <%= rich_text_input_row form, :notes, help: t(".notes.help_html") %>
  <%= select_input_row form, :license, license_select_options(selected: @model.license), include_blank: true %>
  <%= checkbox_input_row form, :sensitive %>
  <%= select_input_row form, :indexable, indexable_select_options(form.object) %>
  <%= select_input_row form, :ai_indexable, ai_indexable_select_options(form.object) if SiteSettings.allow_ai_bots %>
  <%= render "caber_relations_form", form: form %>

  <%= form.submit "Save", class: "btn btn-primary" %>
<% end %>
</file>

<file path="app/views/models/_image_carousel.html.erb">
<% unless images.empty? %>
  <div id="imageCarousel" class="carousel slide mb-3" data-bs-ride="carousel" role="group" aria-roledescription="carousel" data-controller="carousel" data-action="mouseenter->carousel#onEnter mouseleave->carousel#onLeave">
    <% if images.count > 1 %>
      <button id="rotationControl" class="carousel-control-play btn btn-secondary m-2" data-action="click->carousel#onPauseButton">
        <%= icon "pause", t(".play_pause"), id: "rotationControlIcon" %>
      </button>
      <div class="carousel-indicators" role="group" aria-label="<%= translate ".select_slide" %>">
        <% images.each_with_index do |image, index| %>
          <button type="button" data-bs-target="#imageCarousel" data-bs-slide-to="<%= index %>"
            <%= "class=active aria-current=true aria-disabled=true" if index == 0 %>
            aria-label="<%= translate ".slide_label", index: (index + 1), count: images.count, name: image.name %>"></button>
        <% end %>
      </div>
    <% end %>
    <div id="imageCarouselInner" class="carousel-inner" aria-atomic="false" aria-live="off">
      <% images.each_with_index do |image, index| %>
        <div class="carousel-item <%= "active" if index == 0 %>" role="group" aria-roledescription="slide" aria-label="<%= translate ".slide_label", index: (index + 1), count: images.count, name: image.name %>">
          <%= image_tag model_model_file_path(@model, image, format: image.extension), alt: image.name, class: "d-block w-100 carousel" %>
          <div class="carousel-caption d-none d-md-block">
            <% if @model.preview_file != image && policy(image).edit? %>
              <%= form_with model: @model, class: "d-inline" do |form| %>
                <%= form.hidden_field :preview_file_id, value: image.id %>
                <%= form.button t("models.file.set_as_preview"), class: "btn btn-sm btn-outline-warning" %>
              <% end %>
            <% end %>
            <%= link_to icon("trash", t("general.delete")), model_model_file_path(@model, image), {method: "delete", data: {confirm: translate("model_files.destroy.confirm")}, class: "btn btn-sm btn-outline-danger"} if policy(image).destroy? %>
          </div>
        </div>
      <% end %>
    </div>
    <% if images.count > 1 %>
      <button class="carousel-control-prev" type="button" data-bs-target="#imageCarousel" data-bs-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden"><%= t(".previous") %></span>
      </button>
      <button class="carousel-control-next" type="button" data-bs-target="#imageCarousel" data-bs-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden"><%= t(".next") %></span>
      </button>
    <% end %>
  </div>
<% end %>
</file>

<file path="app/views/models/_list.html.erb">
<% content_for :items do %>
  <% if @models.empty? %>
    <div class="alert alert-info">
      <%= icon "person-arms-up", "" %>
      <%= signed_in? ? t(".no_results_html") : t(".no_results_signed_out_html", link: new_user_session_path) %>
    </div>
  <% else %>
    <div class="skip-link-container">
      <div class="clearfix">
        <%= skip_link "sidebar", t(".skip_models") %>
        <%= render "order_buttons" %>
        <% if pagination_settings["models"] %>
          <%= paginate @models %>
        <% end %>
      </div>
      <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 mb-4">
        <%= render_component_collection Components::ModelCard, :model, @models %>
      </div>
      <% if pagination_settings["models"] %>
        <%= paginate @models %>
      <% end %>
    </div>
  <% end %>
<% end %>

<% content_for :actions do %>
  <%= link_to t(".bulk_edit"), edit_models_path(@filters.merge(@additional_filters)), class: "btn btn-secondary" if policy(:model).edit? %>
<% end %>

<% content_for :sidebar do %>
  <%= render "filters_card" %>
  <%= render "tags_card" %>
<% end %>
</file>

<file path="app/views/models/_problem.html.erb">
<% if policy(@model).merge? %>
  <%= card(problem_severity(problem), t("problems.model.%{cat}.title" % {cat: problem.category})) do %>
    <%= turbo_stream_from problem %>
    <%= t("problems.model.%{cat}.description" % {cat: problem.category}, note: problem.note) %>

    <% if problem.category == "nesting" && @model.contains_other_models? %>
      <ul>
        <% @model.contained_models.each do |target| %>
          <li><%= link_to target.name, model_path(target) %></li>
        <% end %>
      </ul>
      <p>
        <%= t("problems.model.nesting.warning") %>
      </p>
    <% end %>
    <div class="mt-3 float-end"><%= render Components::ResolveButton.new(problem: problem, user: current_user) %></div>
  <% end %>
<% end %>
</file>

<file path="app/views/models/_tags_edit.html.erb">
<div class="row mb-3 input-group">
  <%= form.label label, class: "col-sm-2 col-form-label" %>
  <div class="form-control col-auto tag-container">
    <%= form.collection_select :tag_list, tags,
          :name, :name, {
            selected: defined?(selected) ? selected : nil
          }.compact, {
            multiple: true,
            class: "form-select",
            name: name ? "#{name}[]" : nil,
            data: {controller: "tag-input", action: "turbo:morph@window->tag-input#reconnect"}
          } %>
  </div>
</div>
</file>

<file path="app/views/models/bulk_edit.html.erb">
<h1><%= t(".title") %></h1>

<p class="lead"><%= t(".description") %></p>

<% if pagination_settings["models"] %>
  <%= paginate @models %>
<% end %>

<%= form_with url: update_models_path, method: :patch do |form| %>

  <table class="table table-striped" data-controller="bulk-edit" data-action="change->bulk-edit#handleCheckboxChange">
    <tr>
      <th><input type="checkbox" aria-label="<%= translate ".select_all" %>" value="0" name="bulk-select-all"></th>
      <th><%= Model.human_attribute_name(:name) %></th>
      <th><%= Model.human_attribute_name(:collection) %></th>
      <th><%= Model.human_attribute_name(:tags) %></th>
      <th><%= Model.human_attribute_name(:creator) %></th>
      <th><%= Model.human_attribute_name(:sensitive) %></th>
      <th><%= t(".needs_organizing") %></th>
    </tr>
    <% @models.each do |model| %>
      <tr>
        <td><%= form.check_box "models[#{model.to_param}]", data: {bulk_item: model.to_param}, "aria-label": translate(".select", name: model.name) %></td>
        <td><%= link_to model.name, model, title: model.path %></td>
        <td><%= link_to model.collection.name, model.collection if model.collection %></td>
        <td><%= render "tag_list", tags: model.tags.order(taggings_count: :desc, name: :asc), model_id: model.to_param, show_count: false %></td>
        <td><%= link_to model.creator.name, model.creator if model.creator %></td>
        <td><%= icon("explicit", Model.human_attribute_name(:sensitive)) if model.sensitive %></td>
        <td><%= icon("exclamation-triangle", t(".needs_organizing")) if model.needs_organizing? %></td>
      </tr>
    <% end %>
  </table>

  <p class="lead"><%= t ".form_subtitle" %></p>

  <div class="row">
    <div class="col">
      <%= render "bulk_fields", form: form %>

      <%= render "tags_edit", form: form, name: :remove_tags, label: translate(".remove_tags"), tags: [] %>

      <% if SiteSettings.show_libraries || current_user.is_administrator? %>
        <div class="row mb-3">
          <%= form.label :new_library_id, class: "col-sm-2 col-form-label" %>
          <div class="col-sm-10">
            <%= form.collection_select :new_library_id, policy_scope(Library).all, :id, :name, {include_blank: true}, {class: "form-control col-auto form-select"} %>
          </div>
        </div>
      <% end %>

      <%= checkbox_input_row form, :organize %>

      <% if @filters[:tag] %>
        <% @filters[:tag].each do |tag| %>
          <%= form.hidden_field :tag, multiple: true, value: tag %>
        <% end %>
      <% end %>
      <%= form.hidden_field :q, value: @filters[:q] if @filters[:q] %>
      <%= form.hidden_field :collection, value: @filters[:collection] if @filters[:collection] %>
      <%= form.hidden_field :library, value: @filters[:library] if @filters[:library] %>
      <%= form.hidden_field :creator, value: @filters[:creator] if @filters[:creator] %>
      <%= form.submit translate(".submit"), class: "btn btn-primary" %>
      <%= form.submit translate(".update_all", count: @models.total_count), class: "btn btn-secondary", name: "update_all" %>

    </div>
    <% if !@filters.empty? %>
      <div class="col col-md-3">
        <%= render "filters_card" %>
      </div>
    <% end %>
  </div>

<% end %>
</file>

<file path="app/views/models/edit.html.erb">
<%= render partial: "model_files/breadcrumb" %>
<h1><%= t("models.general.edit") %></h1>

<%= render "form" %>
</file>

<file path="app/views/models/index.html.erb">
<%= render "list" %>
</file>

<file path="app/views/models/new.html.erb">
<h1><%= t ".title" %></h1>

<p><%= t ".description" %></p>

<%= form_with url: models_path, id: "upload-form" do |form| %>

  <% if SiteSettings.show_libraries %>
    <div class="row mb-3 input-group">
      <%= form.label :library, Library.model_name.human, class: "col-sm-2 col-form-label" %>
      <div class='col-sm-10 ps-0'>
        <%= form.select :library,
              policy_scope(Library).all.map { |lib| [library_select_title(lib), lib.to_param] },
              {include_blank: false, selected: Library.default.to_param},
              {class: "form-control form-select"} %>
        <span class="form-text"><%= t ".library.help" %></span>
      </div>
    </div>
  <% end %>

  <div class="row mb-3 input-group" data-turbo-permanent>
    <%= form.label :files, t(".files.label"), class: "col-sm-2 col-form-label" %>
    <div class='col-sm-10 ps-0'>
      <%= content_tag :div, nil, data: {
            controller: "upload",
            action: "turbo:morph@window->upload#reconnect",
            max_file_size: SiteSettings.max_file_upload_size,
            allowed_file_types: input_accept_string,
            upload_endpoint: upload_path
          } %>
    </div>
  </div>

  <%= render "bulk_fields", form: form, default_tags: SiteSettings.model_tags_auto_tag_new %>

  <div class="row mb-3 input-group">
    <div class='offset-sm-2 col-sm-10 ps-0'>
      <%= submit_tag translate(".submit"), class: "btn btn-primary" %>
    </div>
  </div>
<% end %>
</file>

<file path="app/views/models/show.html.erb">
<% content_for :head do %>
  <%= tag.meta property: "og:type", content: "website" %>
  <%= tag.meta property: "og:image", content: model_model_file_url(@model, @model.preview_file, format: @model.preview_file.extension) if @model.preview_file&.is_image? && !@model.sensitive %>
  <%= tag.meta name: "description", content: truncate(sanitize(@model.notes), length: 80) if @model.notes.present? %>
  <%= tag.meta name: "fediverse:creator", content: @model.creator.federails_actor.at_address if @model.creator %>
  <%= tag.link rel: "alternate", type: Mime[:oembed], href: model_url(@model, format: :oembed), title: @model.name %>
<% end %>

<div itemscope itemtype="https://schema.org/3DModel">
  <%= turbo_stream_from @model %>
  <h1>
    <span itemprop="name">
      <a contenteditable="plaintext-only"
          data-controller="editable"
          data-action="focus->editable#onFocus blur->editable#onBlur"
          data-editable-field="model[name]"
          data-editable-path="<%= model_path(@model) %>"><%= @model.name %></a>
    </span>
    <%= link_to icon("search", t(".search")),
          "https://yeggi.com/q/#{ERB::Util.url_encode(@model.name)}/",
          class: "btn btn-outline", target: "manyfold_search" %>
  </h1>

  <div class="row row-cols-md-2 mt-2">
    <div class="col-md-9" id="item_list">
      <% if @locked_files > 0 %>
        <div class="alert alert-info"><%= t(".preview", count: @locked_files) %></div>
      <% end %>

      <%= render "image_carousel", images: @images %>

      <%= card(:secondary) do %>
        <p class="card-text" itemprop="description"><%= markdownify @model.notes %></p>
      <% end if @model.notes.present? %>

      <% if @num_files > 0 %>
        <h2><a name="files"><%= t(".files") %></a></h2>
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 mb-4">
          <%= render partial: "file", collection: @groups.delete(nil) %>
        </div>
        <% @groups.each_pair do |group, files| %>
          <h3><a name="<%= group.parameterize %>"><%= group.strip.careful_titleize %>*</a></h3>
          <div class="row  row-cols-1 row-cols-md-2 row-cols-lg-3 mb-4">
            <%= render partial: "file", collection: files %>
          </div>
        <% end %>
      <% end %>
    </div>
    <div class="col-md-3" id="sidebar">
      <%= card :secondary, t(".model_details") do %>
        <table class="table table-borderless table-sm">
          <% if SiteSettings.federation_enabled? %>
            <tr>
              <td>⁂</td>
              <td><% if @model.remote? %>
                <small><%= link_to @model.federails_actor.at_address, @model.federails_actor.profile_url, target: "new" %></small>
              <% else %>
                <small>
                  <%= @model.federails_actor.short_at_address %>
                  <%= render Components::CopyButton.new(text: @model.federails_actor.at_address) %>
                </small>
              <% end %></td>
            </tr>
          <% end %>
          <% if @model.creator %>
            <tr>
              <td><%= icon "person", Creator.model_name.human %></td>
              <td><%= link_to @model.creator.name, @model.creator, itemprop: "author" %></td>
            </tr>
          <% end %>
          <% if @model.collection %>
            <tr>
              <td><%= icon "collection", Collection.model_name.human(count: 100) %></td>
              <td><%= link_to @model.collection.name, models_path((@filters || {}).merge(collection: @model.collection)) %></td>
            </tr>
          <% end %>
          <% if SiteSettings.show_libraries || current_user&.is_administrator? %>
            <tr>
              <td><%= icon "boxes", Library.model_name.human %></td>
              <td><%= link_to @model.library.name, models_path((@filters || {}).merge(library: @model.library)) %></td>
            </tr>
          <% end %>
          <% if @model.license %>
            <tr>
              <td><%= icon "card-heading", t(".license") %></td>
              <td>
                <%= Spdx.licenses[@model.license]&.fetch("reference") ?
                  link_to(t_license(@model.license), Spdx.licenses[@model.license]["reference"], itemprop: "license") :
                  t_license(@model.license) %>
              </td>
            </tr>
          <% end %>
          <% if @model.sensitive %>
            <tr>
              <td><%= icon("explicit", Model.human_attribute_name(:sensitive)) %></td>
              <td>
                <%= Model.human_attribute_name(:sensitive) %>
              </td>
            </tr>
          <% end %>
          <tr>
            <td><%= icon "folder", t(".path") %></td>
            <td>
              <%= content_tag(:code, class: "path") { safe_join @model.path.split("/"), safe_join([tag.wbr, "/"]) } %>
              <% unless @model.contains_other_models? %>
              <div><%= button_tag(t(".organize.button_text"), class: "btn btn-warning btn-sm", "data-bs-toggle": "modal", "data-bs-target": "#confirm-move") if @model.needs_organizing? && policy(@model).edit? %></div>
              <% end %>
            </td>
          </tr>
          <tr>
            <td><%= icon "tag", t(".tags") %></td>
            <td><%= render "tag_list", tags: @model.tags.order(taggings_count: :desc, name: :asc) %></td>
          </tr>
          <% if SiteSettings.social_enabled? %>
            <tr>
              <td><%= icon "people", t(".followers") %></td>
              <td><%= t("general.followers", count: @model.followers.count) %></td>
            </tr>
          <% end %>
          <tr>
            <td><%= render Components::AccessIndicator.new(object: @model, text: false) %></td>
            <td><%= render Components::AccessIndicator.new(object: @model, text: true, icon: false) %></td>
          </tr>
        </table>
        <%= render Components::FollowButton.new(follower: current_user, target: @model) unless @model.remote? %>
        <%= render Components::GoButton.new(icon: "pencil", label: t("general.edit"), href: edit_model_path(@model), variant: "primary") if policy(@model).edit? %>
        <%= render Components::DoButton.new(icon: "trash", label: t("general.delete"), href: model_path(@model), method: :delete, variant: "outline-danger", confirm: translate("models.destroy.confirm")) if policy(@model).destroy? %>
      <% end %>

      <div class="mb-3 w-100 text-center">
        <%= render Components::DownloadButton.new(model: @model) %>
      </div>

      <%= card :secondary, t("layouts.card_list_page.actions_heading") do %>
        <%= render Components::ReportButton.new(object: @model, path: new_model_report_path(@model)) %>
      <% end if SiteSettings.multiuser_enabled? %>

      <% if !@model.parents.empty? && policy(@model).merge? %>
        <%= card :danger, t(".merge.heading") do %>
          <p>
            <%= t(".merge.warning") %>
          </p>
          <strong><%= t(".merge.with") %>:</strong>
          <% @model.parents.each do |target| %>
            <%= link_to target.name, merge_model_path(@model, target: target), class: "btn btn-danger", method: :post %>
          <% end %>
        <% end %>
      <% end %>

      <%= render partial: "problem", collection: @model.problems.visible(problem_settings) %>

      <%= card :secondary, t(".files_card.heading") do %>
        <a href="#files">Top</a>
        <ul>
          <% @groups.each_pair do |group, files| %>
            <li><a href="#<%= group.parameterize %>"><%= group.strip.careful_titleize %>*</a></li>
          <% end %>
        </ul>
        <%= link_to t(".files_card.bulk_edit"), bulk_edit_model_model_files_path(@model), class: "btn btn-secondary" if policy(@model).edit? %>
        <%= link_to t(".rescan"), scan_model_path(@model), class: "btn btn-warning", method: :post if policy(@model).scan? %>
      <% end %>

      <%= render "links_card", links: @model.links %>

      <div class="modal fade" id="confirm-move" data-bs-backdrop='static' tabindex="-1" aria-labelledby="confirmMoveLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <div class="modal-title" id="confirmMoveLabel"><%= t(".organize.button_text") %></div>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <p>
                <%= t(".organize.confirm.summary_html", from: @model.path, to: @model.formatted_path) %>
              </p>
              <p>
                <%= t(".organize.confirm.are_you_sure") %>
              </p>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><%= t(".organize.confirm.no") %></button>
              <%= button_to t(".organize.confirm.yes"), model_path(@model, "model[organize]": true), method: :patch, class: "btn btn-warning" %>
            </div>
          </div>
        </div>
      </div>

      <% if policy(@model).upload? %>
        <%= card :warning, t(".upload_card.heading") do %>
          <%= form_with url: model_model_files_path(@model), id: "upload-form", class: "d-grid" do |form| %>

            <%= content_tag :div, nil, class: "mb-3", data: {
                  controller: "upload",
                  action: "turbo:morph@window->upload#reconnect",
                  max_file_size: SiteSettings.max_file_upload_size,
                  allowed_file_types: input_accept_string,
                  upload_endpoint: upload_path
                } %>
            <%= submit_tag translate(".submit"), class: "btn btn-primary d-block" %>
          <% end %>
        <% end %>
      <% end %>
    </div>
  </div>
</div>
</file>

<file path="app/views/moderator_mailer/new_approval.text.erb">
<%= translate(".greeting") %>

<%= translate(".message", link: settings_user_url(@user)) %>
</file>

<file path="app/views/moderator_mailer/new_report.text.erb">
<%= translate(".greeting") %>

<%= translate(".message", link: settings_report_url(@report)) %>
</file>

<file path="app/views/problems/_filters.html.erb">
<form action="<%= problems_path %>" method="GET">

  <div class="accordion accordion-flush mb-2">
    <div class="accordion-item">
      <h2 class="accordion-header">
        <button class="accordion-button <%= "collapsed" unless @filters_applied %>" type="button" data-bs-toggle="collapse" data-bs-target="#filters" aria-controls="filters">
          <%= icon("filter", t(".title")) %>
          <%= t ".title" %>
        </button>
      </h2>
      <div id="filters" class="accordion-collapse collapse <%= "show" if @filters_applied %>">
        <div class="accordion-body">
          <div class="row mb-2">
            <div class="col col-sm-6 col-md-4">
              <label><%= Problem.human_attribute_name :category %></label>
              <select name="category[]" class="form-select" multiple=true>
                <% Problem::CATEGORIES # rubocop:disable Pundit/UsePolicyScope
                     .select { |it| Problem::DEFAULT_SEVERITIES[it].present? }
                     .select { |it| current_user.problem_severity(it) != :silent }
                     .each do |cat| %>
                  <option
                    value="<%= cat %>"
                    <%= "selected" if params[:category]&.include?(cat.to_s) %>><%= t("problems.categories.%{cat}" % {cat: cat}) %></option>
                <% end %>
              </select>
            </div>
            <div class="col col-sm-auto col-md-4">
              <label><%= Problem.human_attribute_name :severity %></label>
              <select name="severity[]" class="form-select" multiple=true>
                <% (Problem::SEVERITIES - [:silent]).each do |sev| %>
                  <option
                    value="<%= sev %>"
                    <%= "selected" if params[:severity]&.include?(sev.to_s) %>><%= t("problems.severities.%{sev}" % {sev: sev}) %></option>
                <% end %>
              </select>
            </div>
            <div class="col col-sm-auto col-md-4">
              <label><%= Problem.human_attribute_name :problematic_type %></label>
              <select name="type[]" class="form-select" multiple=true>
                <option value="<%= Model.model_name.param_key %>"
                  <%= "selected" if params[:type]&.include?(Model.model_name.param_key) %>><%= Model.model_name.human %></option>
                <option value="<%= ModelFile.model_name.param_key %>"
                  <%= "selected" if params[:type]&.include?(ModelFile.model_name.param_key) %>><%= ModelFile.model_name.human %></option>
              </select>
            </div>
          </div>
          <div class="row">
            <div class="col">
              <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" name="show_ignored" value="true"
                  <%= "checked" if params[:show_ignored] == "true" %>>
                <label class="form-check-label" for="show_ignored">
                  <%= t(".show_ignored") %>
                </label>
              </div>
            </div>
            <div class="col text-end">
              <button type="submit" class="btn btn-primary"><%= t ".apply_filters" %></button>
              <a href='/problems' class="btn btn-secondary"><%= t ".clear_filters" %></a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</form>
</file>

<file path="app/views/problems/index.html.erb">
<h1><%= Problem.model_name.human(count: 100) %></h1>

<%= render "filters" %>

<%= paginate @problems %>

<% if @problems.empty? %>
  <div class="alert alert-info">
    <%= t(".no_problems") %>
  </div>
<% end %>

<%= form_with url: resolve_problems_path, method: :post, class: "mb-3" do |form| %>
  <table class="table table-striped" data-controller="bulk-edit" data-action="change->bulk-edit#handleCheckboxChange">
    <tr>
      <th><input type="checkbox" aria-label="<%= translate ".select_all" %>" value="0" name="bulk-select-all"></th>
      <th colspan=2><%= t(".item") %></th>
      <th><%= t(".description") %></th>
      <th><span id="resolve-heading"><%= t(".resolve") %></span></th>
      <th><%= t(".ignore") %></th>
    </tr>
    <% @problems.each do |problem| %>
      <% next unless problem.problematic %>
      <tr id="problem-<%= problem.id %>" class="collapse show table-<%= problem_severity(problem) %> <%= problem.ignored && "opacity-50" %>">
        <%= turbo_stream_from problem %>
        <td><%= form.check_box "problems[#{problem.to_param}]", data: {resolution_strategy: problem.resolution_strategy, bulk_item: problem.to_param}, "aria-label": translate(".select") %></td>
        <% if problem.parent %>
          <td><%= link_to problem.parent.name, problem.parent, class: "link-dark" %></td>
          <td><%= link_to problem.problematic.name, [problem.parent, problem.problematic], class: "link-dark" %></td>
        <% else %>
          <td colspan=2><%= link_to problem.problematic.name, problem.problematic, class: "link-dark" %></td>
        <% end %>
        <td>
          <%= t "problems.%{type}.%{category}.title" % {type: problem.problematic_type.underscore, category: problem.category} %>
          <% if problem.note %>
            <br>
            <small><%= problem.note %></small>
          <% end %>
        </td>
        <td><%= render Components::ResolveButton.new(problem: problem, user: current_user) %></td>
        <td>
          <% if problem.ignored %>
            <%= link_to icon("eye-fill", t(".unignore")), problem_path(problem, problem: {ignored: false}), method: :patch, class: "btn btn-outline-secondary" %>
          <% else %>
            <%= link_to icon("eye-slash", t(".ignore")), problem_path(problem, problem: {ignored: true}), method: :patch, class: "btn btn-outline-secondary", data: {bs_toggle: "collapse", bs_target: "#problem-#{problem.id}"} %>
          <% end %>
        </td>
      </tr>
    <% end %>
  </table>

  <%= form.submit translate(".bulk_resolve"), name: "resolve", class: "btn btn-danger", data: {confirm: translate(".bulk_confirm")} %>
  <%= form.submit translate(".bulk_ignore"), name: "ignore", class: "btn btn-secondary" %>
<% end %>

<%= paginate @problems %>
</file>

<file path="app/views/reports/new.html.erb">
<h3><%= t(".title", type: @reportable.model_name.human, name: @reportable.name) %></h3>

<p class="lead"><%= t ".description" %></p>

<%= form_with model: [@reportable, @report] do |form| %>

  <%= text_input_row form, :content %>

  <%= form.submit translate(".submit"), class: "btn btn-primary" %>

<% end %>
</file>

<file path="app/views/robots/index.text.erb">
<%- unless SiteSettings.allow_ai_bots %>
# Block all known AI crawlers and assistants
# from using content for training AI models.
# Source: https://robotstxt.com/ai
User-Agent: GPTBot
User-Agent: ClaudeBot
User-Agent: Claude-User
User-Agent: Claude-SearchBot
User-Agent: CCBot
User-Agent: Google-Extended
User-Agent: Applebot-Extended
User-Agent: Facebookbot
User-Agent: Meta-ExternalAgent
User-Agent: Meta-ExternalFetcher
User-Agent: diffbot
User-Agent: PerplexityBot
User-Agent: Perplexity-User
User-Agent: Omgili
User-Agent: Omgilibot
User-Agent: webzio-extended
User-Agent: ImagesiftBot
User-Agent: Bytespider
User-Agent: TikTokSpider
User-Agent: Amazonbot
User-Agent: Youbot
User-Agent: SemrushBot-OCOB
User-Agent: Petalbot
User-Agent: VelenPublicWebCrawler
User-Agent: TurnitinBot
User-Agent: Timpibot
User-Agent: OAI-SearchBot
User-Agent: ICC-Crawler
User-Agent: AI2Bot
User-Agent: AI2Bot-Dolma
User-Agent: DataForSeoBot
User-Agent: AwarioBot
User-Agent: AwarioSmartBot
User-Agent: AwarioRssBot
User-Agent: Google-CloudVertexBot
User-Agent: PanguBot
User-Agent: Kangaroo Bot
User-Agent: Sentibot
User-Agent: img2dataset
User-Agent: Meltwater
User-Agent: Seekr
User-Agent: peer39_crawler
User-Agent: cohere-ai
User-Agent: cohere-training-data-crawler
User-Agent: DuckAssistBot
User-Agent: Scrapy
User-Agent: Cotoyogi
User-Agent: aiHitBot
User-Agent: Factset_spyderbot
User-Agent: FirecrawlAgent
Disallow: /
Content-Usage: ai=n
DisallowAITraining: /
<%- end %>

User-Agent: *
<%- unless SiteSettings.allow_ai_bots %>
# Include generic "do not train" directives
DisallowAITraining: /
Content-Usage: ai=n
<%- end %>
<%= SiteSettings.allow_robots ? "Allow" : "Disallow" %>: /

<%- if SiteSettings.allow_robots %>
Sitemap: <%= sitemap_url format: :xml %>
<%- end %>
</file>

<file path="app/views/robots/sitemap.xml.builder">
xml.instruct!
xml.urlset "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance",
  "xsi:schemaLocation": "http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd",
  xmlns: "http://www.sitemaps.org/schemas/sitemap/0.9" do
  xml.url { xml.loc creators_url }
  xml.url { xml.loc collections_url }
  xml.url { xml.loc models_url }
  @creators.each do |it|
    xml.url do
      xml.loc creator_url(it)
      xml.lastmod it.updated_at.iso8601
    end
  end
  @collections.each do |it|
    xml.url do
      xml.loc collection_url(it)
      xml.lastmod it.updated_at.iso8601
    end
  end
  @models.each do |it|
    xml.url do
      xml.loc model_url(it)
      xml.lastmod it.updated_at.iso8601
    end
  end
end
</file>

<file path="app/views/settings/domain_blocks/index.html.erb">
<h3><%= t(".title") %></h3>

<p class="lead"><%= t(".description") %></p>

<table class="table table-striped">
  <tr>
    <th><%= Federails::Moderation::DomainBlock.human_attribute_name(:domain) %></th>
    <th><%= Federails::Moderation::DomainBlock.human_attribute_name(:created_at) %></th>
    <th></th>
  </tr>
  <% @blocks.each do |block| %>
    <tr>
      <td><%= block.domain %></td>
      <td><%= block.created_at %></td>
      <td><%= link_to safe_join([icon("trash", t("general.delete")), t("general.delete")], " "), settings_domain_block_path(block), {method: :delete, class: "float-end btn btn-outline-danger", data: {confirm: translate(".confirm_destroy")}} if policy(block).destroy? %></td>
    </tr>
  <% end %>
</table>

<%= link_to t(".new"), new_settings_domain_block_path, class: "btn btn-primary" if policy(Federails::Moderation::DomainBlock).new? %>
</file>

<file path="app/views/settings/domain_blocks/new.html.erb">
<h3><%= t(".title") %></h3>

<%= form_with model: [:settings, @domain_block] do |form| %>

  <%= text_input_row form, :domain %>

  <%= form.submit translate(".submit"), class: "btn btn-primary" %>

<% end %>
</file>

<file path="app/views/settings/reports/index.html.erb">
<h3><%= t(".title") %></h3>

<p class="lead"><%= t(".description") %></p>

<table class="table table-striped">
  <tr>
    <th colspan="2"><%= Federails::Moderation::Report.human_attribute_name(:object) %></th>
    <th colspan="2"><%= Federails::Moderation::Report.human_attribute_name(:federails_actor) %></th>
    <th><%= Federails::Moderation::Report.human_attribute_name(:created_at) %></th>
    <th></th>
  </tr>
  <% @reports.each do |report|
    next unless report.object %>
    <tr>
      <td><%= icon icon_for(report.object.entity.class), "" %></td>
      <td><%= link_to report.object.entity.name, report.object.entity if report.object&.entity %></td>
      <td>
        <%= icon (report.local? ? "house" : "globe"), "" %>
      </td>
      <td><%= report.reporter_address %></td>
      <td><%= report.created_at %></td>
      <td><%= link_to safe_join([icon("search", t("general.view")), t("general.view")], " "), settings_report_path(report), {class: "float-end btn btn-primary"} %></td>
    </tr>
  <% end %>
</table>
</file>

<file path="app/views/settings/reports/show.html.erb">
<h3><%= Federails::Moderation::Report.model_name.human %> #<%= @report.id %></h3>

<ul>
  <li>
    <%= Federails::Moderation::Report.human_attribute_name(:created_at) %>:
    <%= @report.created_at %>
  </li>
  <li>
    <%= Federails::Moderation::Report.human_attribute_name(:federails_actor) %>:
    <%= @report.reporter_address %>
  </li>
</ul>

<% if @report.content.present? %>
  <h4><%= Federails::Moderation::Report.human_attribute_name(:content) %>:</h4>
  <div class="alert alert-warning">
    <%= @report.content %>
  </div>
<% end %>

<h4><%= Federails::Moderation::Report.human_attribute_name(:object) %></h4>
<table class="table table-striped">
  <% Array(@report.object).each do |object| %>
    <tr>
      <% if @report.object&.entity %>
        <td>
          <%= @report.object.entity.model_name.human %>
        </td>
        <td>
          <%= link_to @report.object.entity.name, @report.object.entity %>
        </td>
      <% end %>
    </tr>
  <% end %>
</table>

<div class="mt-3">
  <%= link_to t(".resolve"), settings_report_path(@report, resolve: true), method: :patch, class: "btn btn-primary" %>
  <%= link_to t(".ignore"), settings_report_path(@report, ignore: true), method: :patch, class: "btn btn-danger" %>
</div>
</file>

<file path="app/views/settings/users/_form.html.erb">
<%= form_with model: [:settings, user] do |form| %>

  <%= text_input_row form, :username %>
  <%= text_input_row form, :email %>

  <% if !user.persisted? %>
    <% if SiteSettings.email_configured? %>
      <div class="row mb-3 input-group">
        <div class="alert alert-info">
          <%= t(".password_reset_help") %>
        </div>
      </div>
    <% else %>
      <%= text_input_row form, :password %>
      <%= text_input_row form, :password_confirmation %>
    <% end %>
  <% end %>

  <div class="row mb-3 input-group">
    <%= form.label :roles, class: "col-auto col-form-label" %>
    <div class="form-control col-auto">
      <%= form.collection_check_boxes :role_ids, @available_roles, :id, :name do |b| # rubocop:disable Pundit/UsePolicyScope
            content_tag :div, class: "form-check" do
              b.check_box(class: "form-check-input") +
                b.label(class: "form-check-label")
            end
          end %>
    </div>
  </div>

  <% if SiteSettings.enable_user_quota %>
    <h3><%= t("settings.users.quota.title") %></h3>
    <div class="row">
      <%= form.label nil, t("settings.users.quota.using_site_default"), class: "col-sm-4 col-form-label" %>
      <div class="col-sm-8">
        <%= form.check_box "quota_use_site_default", value: :quota_use_site_default, class: "form-check-input" %>
      </div>
    </div>
    <div class="row">
      <%= form.label nil, t("settings.users.quota.current_quota"), class: "col-sm-4 col-form-label" %>
      <div class="col-sm-8">
        <%= form.number_field "quota", min: 0, step: 1, value: (user.quota.to_i / 1.megabyte) %>
      </div>
    </div>
  <% end %>

  <%= form.submit translate(".submit"), class: "btn btn-primary" %>

<% end %>
</file>

<file path="app/views/settings/users/edit.html.erb">
<h3><%= t(".title", username: @user.username) %></h3>

<%= render "form", user: @user %>
</file>

<file path="app/views/settings/users/index.html.erb">
<h3><%= t(".title") %></h3>

<p class="lead"><%= t(".description") %></p>

<table class="table table-striped">
  <tr>
    <th><%= User.human_attribute_name(:username) %></th>
    <th><%= User.human_attribute_name(:email) %></th>
    <%= content_tag :th, User.human_attribute_name(:auth_uid) if SiteSettings.oidc_enabled? %>
    <%= content_tag :th, t(".local") if SiteSettings.federation_enabled? %>
    <%= content_tag :th, t(".fediverse_address") if SiteSettings.federation_enabled? %>
    <th><%= User.human_attribute_name(:roles) %></th>
    <th></th>
  </tr>
  <% @users.each do |user| %>
    <tr class="<%= user.entity&.approved? ? "" : "table-info" %>">
      <td>
        <%= icon("hourglass", "") unless user.entity&.approved? %>
        <%= user.entity.is_a?(User) ? user.entity&.username : user.username %>
      </td>
      <td><%= user.entity.is_a?(User) ? masked_email(user.entity&.email) : nil %></td>
      <%= content_tag :td, (user.entity&.auth_uid ? "✅" : "❌") if SiteSettings.oidc_enabled? %>
      <%= content_tag :td, (user.local? ? "✅" : "❌") if SiteSettings.federation_enabled? %>
      <%= content_tag :td, user.at_address if SiteSettings.federation_enabled? %>
      <td><%= user.entity&.roles&.map(&:name)&.join(", ") if user.entity&.is_a?(User) %></td>
      <td><%= link_to safe_join([icon("search", t(".view")), t(".view")], " "), settings_user_path(user.entity), class: "btn btn-primary" if user.entity %></td>
    </tr>
  <% end %>
</table>

<%= link_to t(".new"), new_settings_user_path, class: "btn btn-primary" if policy(:user).new? %>
</file>

<file path="app/views/settings/users/new.html.erb">
<h3><%= t(".title") %></h3>

<%= render "form", user: @user %>
</file>

<file path="app/views/settings/users/show.html.erb">
<h3><%= t(".title", username: @user.username) %></h3>
<table class="table table-striped">
  <tr>
    <th><%= User.human_attribute_name(:username) %></th>
    <td><%= @user.username %></td>
  </tr>
  <tr>
    <th><%= User.human_attribute_name(:email) %></th>
    <td><%= @user.email %></td>
  </tr>
  <% unless @user.approved? %>
    <tr>
      <th><%= User.human_attribute_name(:approved) %></th>
      <td>
        <%= link_to safe_join([icon("person-check", t(".approve")), t(".approve")], " "), settings_user_path(@user, approve: true), method: :patch, class: "btn btn-primary btn-sm" if policy(@user).edit? %>
      </td>
    </tr>
  <% end %>
  <tr>
    <th><%= User.human_attribute_name(:created_at) %></th>
    <td><%= @user.created_at.to_fs(:long) %></td>
  </tr>
  <tr>
    <th><%= User.human_attribute_name(:updated_at) %></th>
    <td><%= @user.updated_at.to_fs(:long) %></td>
  </tr>
  <tr>
    <th><%= t("settings.users.quota.current_space_used") %></th>
    <td><%= @user.current_space_used.to_fs(:human_size, precision: 2) %></td>
  </tr>
  <% if SiteSettings.enable_user_quota %>
    <tr>
      <th><%= t("settings.users.quota.using_site_default") %></th>
      <td><%= @user.quota_use_site_default? ? "✅" : "❌" %></td>
    </tr>
    <tr>
      <th><%= t("settings.users.quota.title") %></th>
      <td><%= @user.has_quota? ? @user.quota.to_fs(:human_size) : t("settings.users.quota.unlimited_quota") %></td>
    </tr>
  <% end %>
  <tr>
    <th><%= User.human_attribute_name(:interface_language) %></th>
    <td><%= @user.interface_language.present? ? I18nData.languages(@user.interface_language)[@user.interface_language.to_s]&.capitalize : t("devise.registrations.general_settings.interface_language.autodetect") %></td>
  </tr>
  <% if SiteSettings.oidc_enabled? %>
    <tr>
      <th><%= User.human_attribute_name(:auth_uid) %></th>
      <td><%= (@user.auth_uid ? "✅" : "❌") %></td>
    </tr>
  <% end %>
  <% if SiteSettings.federation_enabled? %>
    <tr>
      <th><%= t("settings.users.index.fediverse_address") %></th>
      <td><%= @user.federails_actor.at_address %></td>
    </tr>
  <% else %>
    <tr>
      <th><%= User.human_attribute_name(:public_id) %></th>
      <td><%= @user.public_id %></td>
    </tr>
  <% end %>
  <tr>
    <th><%= User.human_attribute_name(:roles) %></th>
    <td><%= @user.roles.map(&:name).join(", ") %></td>
  </tr>
</table>

<%= link_to safe_join([icon("pencil", t("general.edit")), t("general.edit")], " "), edit_settings_user_path(@user), class: "btn btn-primary" if policy(@user).edit? %>
<%= link_to safe_join([icon("key", t(".reset_password")), t(".reset_password")], " "), settings_user_path(@user, reset: true), method: :patch, class: "btn btn-warning" if policy(@user).edit? %>
<%= link_to safe_join([icon("trash", t("general.delete")), t("general.delete")], " "), settings_user_path(@user), {method: :delete, class: "float-end btn btn-outline-danger", data: {confirm: translate(".confirm_destroy")}} if policy(@user).destroy? && @user != current_user %>
</file>

<file path="app/views/settings/_file_settings.html.erb">
<h3><%= t(".title") %></h3>
<p class='lead'>
  <%= t ".summary" %>
</p>
<div class="row mb-2">
  <%= rich_text_input_row form, "files[model_ignored_files]",
        label: t(".custom_ignore_filters.label"),
        help: t(".custom_ignore_filters.details"),
        value: SiteSettings.model_ignored_files.map(&:inspect).join("\n").delete("\"") %>
</div>
</file>

<file path="app/views/settings/_folder_settings.html.erb">
<h3><%= t(".title") %></h3>
<p class='lead'>
  <%= t ".summary" %>
</p>
<p>
  <%= t ".details" %>
</p>
<ul>
  <li>
    <code>{tags}</code>: <%= t ".tokens.tags_html" %>
  </li>
  <li>
    <code>{creator}</code>: <%= t ".tokens.creator" %>
  </li>
  <li>
    <code>{collection}</code>: <%= t ".tokens.collection" %>
  </li>
  <li>
    <code>{modelName}</code>: <%= t ".tokens.model_name" %>
  </li>
  <li>
    <code>{modelId}</code>: <%= t ".tokens.model_id" %>
  </li>
</ul>
<div class="row mb-2">
  <%= form.label nil, t(".model_path_template.label"), for: "folders[model_path_template]", class: "col-sm-4 col-form-label" %>
  <div class="col-sm-8 form-check form-switch">
    <%= form.text_field "folders[model_path_template]", value: SiteSettings.model_path_template, class: "form-control" %>
  </div>
</div>
<div class="row mb-2">
  <%= form.label nil, t(".parse_metadata_from_path.label"), for: "folders[parse_metadata_from_path]", class: "col-sm-4 col-form-label" %>
  <div class="col-sm-8 form-check form-switch">
    <%= form.check_box "folders[parse_metadata_from_path]", checked: SiteSettings.parse_metadata_from_path, class: "form-check-input" %>
    <small><%= t ".parse_metadata_from_path.help" %></small>
  </div>
</div>
<div class="row mb-2">
  <%= form.label nil, t(".safe_folder_names.label"), for: "folders[safe_folder_names]", class: "col-sm-4 col-form-label" %>
  <div class="col-sm-8 form-check form-switch">
    <%= form.check_box "folders[safe_folder_names]", checked: SiteSettings.safe_folder_names, class: "form-check-input" %>
    <small><%= t(".safe_folder_names.help_html") %></small>
  </div>
</div>
</file>

<file path="app/views/settings/_submit.html.erb">
<hr>
  <div class='mt-3'>
    <button type="submit" class="btn btn-primary"><%= icon("save", t("settings.general.submit")) %> <%= t("settings.general.submit") %></button>
  </div>
</file>

<file path="app/views/settings/_tag_settings.html.erb">
<h3><%= t(".heading") %></h3>
<p class='lead'>
  <%= t(".description") %>
</p>
<div class="row mb-2">
  <%= form.label nil, t(".auto_tag_new.label"), for: "model_tags[auto_tag_new]", class: "col-sm-4 col-form-label" %>
  <div class="col-sm-8">
    <%= form.text_field "model_tags[auto_tag_new]", value: SiteSettings.model_tags_auto_tag_new, class: "form-control" %>
  </div>
</div>
<div class="row mb-2">
  <%= form.label nil, t(".tag_model_directory_name.label"), for: "model_tags[tag_model_directory_name]", class: "col-sm-4 col-form-label" %>
  <div class="col-sm-8 form-check form-switch">
    <%= form.check_box "model_tags[tag_model_directory_name]", checked: SiteSettings.model_tags_tag_model_directory_name, class: "form-check-input" %>
    <small><%= t(".tag_model_directory_name.help") %></small>
  </div>
</div>
<div class="row mb-2">
  <%= form.label nil, t(".filter_stop_words.label"), for: "model_tags[filter_stop_words]", class: "col-sm-4 col-form-label" %>
  <div class="col-sm-8 form-check form-switch">
    <%= form.check_box "model_tags[filter_stop_words]", checked: SiteSettings.model_tags_filter_stop_words, class: "form-check-input" %>
  </div>
</div>
<div class="row mb-2">
  <%= form.label nil, t(".stop_words_locale.label"), for: "model_tags[stop_words_locale]", class: "col-sm-4 col-form-label" %>
  <div class="col-sm-8">
    <%= form.text_field "model_tags[stop_words_locale]", value: SiteSettings.model_tags_stop_words_locale, class: "form-control" %>
  </div>
</div>
<div class="row mb-2">
  <%= form.label nil, t(".custom_stop_words.label"), for: "model_tags[custom_stop_words]", class: "col-sm-4 col-form-label" %>
  <div class="col-sm-8">
    <%= form.text_field "model_tags[custom_stop_words]", value: SiteSettings.model_tags_custom_stop_words, class: "form-control" %>
  </div>
</div>
</file>

<file path="app/views/settings/analysis.html.erb">
<%= form_with url: settings_path, method: :patch do |form| %>
  <h3><%= t(".heading") %></h3>
  <p class='lead'>
    <%= t(".description") %>
  </p>
  <div class="row mb-2">
    <%= form.label nil, t(".manifold.label"), for: "analysis[manifold]", class: "col-sm-4 col-form-label" %>
    <div class="col-sm-8 form-check form-switch">
      <%= form.check_box "analysis[manifold]", checked: SiteSettings.analyse_manifold, class: "form-check-input" %>
      <small><%= t(".manifold.help") %></small>
    </div>
  </div>
  <%= render "submit", form: form %>
<% end %>
</file>

<file path="app/views/settings/appearance.html.erb">
<%= form_with url: settings_path, method: :patch do |form| %>
  <h3><%= t(".heading") %></h3>
  <p class="lead"><%= t(".summary") %></p>
  <%= text_input_row form, "appearance[site_name]", label: t(".site_name.label"), value: SiteSettings.site_name, placeholder: t("application.title"), help: t(".site_name.help") %>
  <%= text_input_row form, "appearance[site_tagline]", label: t(".site_tagline.label"), value: SiteSettings.site_tagline, placeholder: t("application.tagline"), help: t(".site_tagline.help") %>
  <%= url_input_row form, "appearance[site_icon]", label: t(".site_icon.label"), value: SiteSettings.site_icon, help: t(".site_icon.help") %>
  <%= url_input_row form, "appearance[support_link]", label: t(".support_link.label"), value: SiteSettings.support_link, help: t(".support_link.help") %>
  <div class="row mb-3 input-group">
    <%= form.label nil, t(".theme.label"), for: "appearance[theme]", class: "col-auto col-form-label" %>
    <div class="col p-0">
      <%= form.select "appearance[theme]",
            [
              "brite",
              "cerulean",
              "cosmo",
              "cyborg",
              "darkly",
              "default",
              "flatly",
              "journal",
              "litera",
              "lumen",
              "lux",
              "materia",
              "minty",
              "morph",
              "pulse",
              "quartz",
              "sandstone",
              "simplex",
              "sketchy",
              "slate",
              "solar",
              "spacelab",
              "superhero",
              "united",
              "vapor",
              "yeti",
              "zephyr"
            ].map { |it| [it.titleize, it] },
            {selected: SiteSettings.theme},
            {class: "form-select"} %>
      <span class="form-text"><%= t(".theme.help_html") %></span>
    </div>
  </div>
  <hr>
  <h4><%= t(".information") %></h4>
  <%= rich_text_input_row form, "appearance[about]", label: t(".about.label"), value: SiteSettings.about, help: t(".about.help_html") %>
  <%= rich_text_input_row form, "appearance[rules]", label: t(".rules.label"), value: SiteSettings.rules, help: t(".rules.help_html") %>
  <%= render "submit", form: form %>
<% end %>
</file>

<file path="app/views/settings/discovery.html.erb">
<%= form_with url: settings_path, method: :patch do |form| %>
  <h3><%= t(".heading") %></h3>
  <p class='lead'>
    <%= t(".description") %>
  </p>
  <div class="row mb-2">
    <%= form.label nil, t(".allow_robots.label"), for: "discovery[allow_robots]", class: "col-sm-4 col-form-label" %>
    <div class="col-sm-8 form-check form-switch">
      <%= form.check_box "discovery[allow_robots]", checked: SiteSettings.allow_robots, class: "form-check-input" %>
      <small><%= t(".allow_robots.help") %></small>
    </div>
  </div>
  <div class="row mb-2">
    <%= form.label nil, t(".allow_ai_bots.label"), for: "discovery[allow_ai_bots]", class: "col-sm-4 col-form-label" %>
    <div class="col-sm-8 form-check form-switch">
      <%= form.check_box "discovery[allow_ai_bots]", checked: SiteSettings.allow_ai_bots, class: "form-check-input" %>
      <small><%= t(".allow_ai_bots.help") %></small>
    </div>
  </div>
  <hr>
  <h4><%= t(".indexing.heading") %></h4>
  <p>
    <%= t(".indexing.description") %>
  </p>
  <div class="row mb-2">
    <%= form.label nil, t(".default_indexable.label"), for: "discovery[default_indexable]", class: "col-sm-4 col-form-label" %>
    <div class="col-sm-8 form-check form-switch">
      <%= form.check_box "discovery[default_indexable]", checked: SiteSettings.default_indexable, class: "form-check-input" %>
      <small><%= t(".default_indexable.help") %></small>
    </div>
  </div>
  <div class="row mb-2">
    <%= form.label nil, t(".default_ai_indexable.label"), for: "discovery[default_ai_indexable]", class: "col-sm-4 col-form-label" %>
    <div class="col-sm-8 form-check form-switch">
      <%= form.check_box "discovery[default_ai_indexable]", checked: SiteSettings.default_ai_indexable, class: "form-check-input" %>
      <small><%= t(".default_ai_indexable.help_html") %></small>
    </div>
  </div>
  <%= render "submit", form: form %>
<% end %>
</file>

<file path="app/views/settings/downloads.html.erb">
<%= form_with url: settings_path, method: :patch do |form| %>
  <h3><%= t(".heading") %></h3>
  <p class='lead'>
    <%= t(".description") %>
  </p>
  <div class="row mb-2">
    <%= form.label nil, t(".pregenerate.label"), for: "downloads[pregenerate]", class: "col-sm-4 col-form-label" %>
    <div class="col-sm-8 form-check form-switch">
      <%= form.check_box "downloads[pregenerate]", checked: SiteSettings.pregenerate_downloads, class: "form-check-input" %>
      <small><%= t(".pregenerate.help") %></small>
    </div>
  </div>
  <div class="row mb-2">
    <%= form.label nil, t(".expiry.label"), for: "downloads[expiry]", class: "col-sm-4 col-form-label" %>
    <div class="col-sm-8">
      <div class="input-group">
        <%= form.number_field "downloads[expiry]", min: 0, step: 1, value: SiteSettings.download_expiry_time_in_hours, class: "form-control" %>
        <span class="input-group-text"><%= t(".expiry.hours") %></span>
      </div>
      <small><%= t(".expiry.help") %></small>
    </div>
  </div>
  <%= render "submit", form: form %>
<% end %>
</file>

<file path="app/views/settings/multiuser.html.erb">
<%= form_with url: settings_path, method: :patch do |form| %>
  <h3><%= t(".heading") %></h3>
  <p class='lead'>
    <%= SiteSettings.multiuser_enabled? ? t(".multiuser_mode") : t(".single_user_mode") %>
  </p>
  <table class='table table-striped'>
    <tr>
      <td><%= t(".multiuser") %></td>
      <td><%= SiteSettings.multiuser_enabled? ? "✅" : "❌" %></td>
    </tr>
    <tr>
      <td><%= t(".federation") %></td>
      <td><%= SiteSettings.federation_enabled? ? "✅" : "❌" %></td>
    </tr>
    <tr>
      <td><%= t(".email") %></td>
      <td><%= SiteSettings.email_configured? ? "✅" : "❌" %></td>
    </tr>
    <tr>
      <td><%= t(".oidc") %></td>
      <td><%= SiteSettings.oidc_enabled? ? "✅" : "❌" %></td>
    </tr>
  </table>
  <p>
    <%= t(".details_html") %>
  </p>
  <hr>

  <h3><%= t(".registration") %></h3>
  <div class="row">
    <%= form.label nil, t(".registration_open.label"), for: "multiuser[registration_open]", class: "col-sm-4 col-form-label" %>
    <div class="col-sm-8 form-check form-switch">
      <%= form.check_box "multiuser[registration_open]", checked: SiteSettings.registration_enabled, class: "form-check-input" %>
      <small><%= t(".registration_open.help") %></small>
    </div>
  </div>
  <div class="row">
    <%= form.label nil, t(".approve_signups.label"), for: "multiuser[approve_signups]", class: "col-sm-4 col-form-label" %>
    <div class="col-sm-8 form-check form-switch">
      <%= form.check_box "multiuser[approve_signups]", checked: SiteSettings.approve_signups, class: "form-check-input" %>
      <small><%= t(".approve_signups.help") %></small>
    </div>
  </div>
  <div class="row">
    <%= form.label nil, t(".autocreate_creator.label"), for: "multiuser[autocreate_creator_for_new_users]", class: "col-sm-4 col-form-label" %>
    <div class="col-sm-8 form-check form-switch">
      <%= form.check_box "multiuser[autocreate_creator_for_new_users]", checked: SiteSettings.autocreate_creator_for_new_users, class: "form-check-input" %>
      <small><%= t(".autocreate_creator.help") %></small>
    </div>
  </div>
  <div class="row">
    <%= form.label nil, t(".default_signup_role.label"), for: "multiuser[default_signup_role]", class: "col-sm-4 col-form-label" %>
    <div class="col-sm-8">
      <%= form.select "multiuser[default_signup_role]",
            [[translate(".default_signup_role.options.member"), "member"],
              [translate(".default_signup_role.options.contributor"), "contributor"]],
            {selected: SiteSettings.default_signup_role},
            {class: "form-select"} %>
      <small><%= t(".default_signup_role.help") %></small>
    </div>
  </div>
  <hr>

  <h3><%= t(".permissions") %></h3>
  <div class="row">
    <%= form.label nil, t(".default_viewer_role.label"), for: "multiuser[default_viewer_role]", class: "col-sm-4 col-form-label" %>
    <div class="col-sm-8">
      <%= form.select "multiuser[default_viewer_role]",
            [[translate(".default_viewer_role.options.none"), ""],
              [translate(".default_viewer_role.options.member"), "member"]],
            {selected: SiteSettings.default_viewer_role.to_s},
            {class: "form-select"} %>
      <small><%= t(".default_viewer_role.help") %></small>
    </div>
  </div>
  <hr>

  <h3><%= t(".user_quotas") %></h3>
  <div class="row">
    <%= form.label nil, t(".user_quotas_enable_quota"), for: "multiuser[enable_user_quota]", class: "col-sm-4 col-form-label" %>
    <div class="col-sm-8">
      <%= form.check_box "multiuser[enable_user_quota]", checked: SiteSettings.enable_user_quota, class: "form-check-input" %>
    </div>
  </div>
  <div class="row">
    <%= form.label nil, t(".user_quotas_site_default"), for: "multiuser[default_user_quota]", class: "col-sm-4 col-form-label" %>
    <div class="col-sm-8">
      <%= form.number_field "multiuser[default_user_quota]", min: 0, step: 1, value: (SiteSettings.default_user_quota.to_i / 1.megabyte) %>
    </div>
  </div>
  <%= render "submit", form: form %>
<% end %>
</file>

<file path="app/views/settings/reporting.html.erb">
<%= form_with url: settings_path, method: :patch do |form| %>
  <h3><%= t(".heading") %></h3>
  <p class="lead"><%= t(".summary") %></p>
  <p><%= t(".description_html", endpoint: UsageReport.endpoint) %></p>
  <div class='alert'>
    <code><%= UsageReport.generate %></code>
  </div>
  <p><%= t(".use_of_data") %></p>
  <p><%= t(".verification_html") %></p>
  <div class="row">
    <%= form.label nil, t(".report_usage.label"), for: "usage[report]", class: "col col-form-label" %>
    <div class="col form-check form-switch">
      <%= form.check_box "usage[report]", checked: SiteSettings.anonymous_usage_id.present?, class: "form-check-input" %>
    </div>
  </div>
  <%= render "submit", form: form %>
<% end %>
</file>

<file path="app/views/settings/show.html.erb">
<h3><%= t(".stats") %></h3>

<div class="row">
  <%= render Components::StatBlock.new(title: Model, value: model_count) %>
  <%= render Components::StatBlock.new(title: ModelFile, value: model_file_count) %>
  <%= render Components::StatBlock.new(title: Creator, value: creator_count) %>
  <%= render Components::StatBlock.new(title: Collection, value: collection_count) %>
  <%= render Components::StatBlock.new(title: User, value: user_count) %>
  <%= render Components::StatBlock.new(title: ActsAsTaggableOn::Tag, value: tag_count) %>
  <%= render Components::StatBlock.new(title: t(".total_file_size"), value: number_to_human_size(total_file_size, precision: 2)) %>
</div>

<hr>

<%= form_with url: settings_path, method: :patch do |form| %>

  <%= render "folder_settings", form: form %>
  <hr>
  <%= render "file_settings", form: form %>
  <hr>
  <%= render "tag_settings", form: form %>

  <%= render "submit", form: form %>
<% end %>
</file>

<file path="app/views/user_mailer/account_approved.text.erb">
<%= translate(".greeting") %>

<%= translate(".message", link: welcome_url) %>
</file>

<file path="app/views/user_mailer/test_email.text.erb">
<%= translate(".test_email_message") %>
</file>

<file path="app/views/base.rb">
# frozen_string_literal: true

class Views::Base < Components::Base
  # The `Views::Base` is an abstract class for all your views.

  # By default, it inherits from `Components::Base`, but you
  # can change that to `Phlex::HTML` if you want to keep views and
  # components independent.
end
</file>

<file path="bin/brakeman">
#!/usr/bin/env ruby
require "rubygems"
require "bundler/setup"

ARGV.unshift("--ensure-latest")

load Gem.bin_path("brakeman", "brakeman")
</file>

<file path="bin/bundle">
#!/usr/bin/env ruby
# frozen_string_literal: true

#
# This file was generated by Bundler.
#
# The application 'bundle' is installed as part of a gem, and
# this file is here to facilitate running it.
#

require "rubygems"

m = Module.new do
  module_function

  def invoked_as_script?
    File.expand_path($0) == File.expand_path(__FILE__)
  end

  def env_var_version
    ENV["BUNDLER_VERSION"]
  end

  def cli_arg_version
    return unless invoked_as_script? # don't want to hijack other binstubs
    return unless "update".start_with?(ARGV.first || " ") # must be running `bundle update`
    bundler_version = nil
    update_index = nil
    ARGV.each_with_index do |a, i|
      if update_index && update_index.succ == i && a =~ Gem::Version::ANCHORED_VERSION_PATTERN
        bundler_version = a
      end
      next unless a =~ /\A--bundler(?:[= ](#{Gem::Version::VERSION_PATTERN}))?\z/
      bundler_version = $1
      update_index = i
    end
    bundler_version
  end

  def gemfile
    gemfile = ENV["BUNDLE_GEMFILE"]
    return gemfile if gemfile && !gemfile.empty?

    File.expand_path("../../Gemfile", __FILE__)
  end

  def lockfile
    lockfile =
      case File.basename(gemfile)
      when "gems.rb" then gemfile.sub(/\.rb$/, gemfile)
      else "#{gemfile}.lock"
      end
    File.expand_path(lockfile)
  end

  def lockfile_version
    return unless File.file?(lockfile)
    lockfile_contents = File.read(lockfile)
    return unless lockfile_contents =~ /\n\nBUNDLED WITH\n\s{2,}(#{Gem::Version::VERSION_PATTERN})\n/
    Regexp.last_match(1)
  end

  def bundler_version
    @bundler_version ||=
      env_var_version || cli_arg_version ||
        lockfile_version
  end

  def bundler_requirement
    return "#{Gem::Requirement.default}.a" unless bundler_version

    bundler_gem_version = Gem::Version.new(bundler_version)

    requirement = bundler_gem_version.approximate_recommendation

    return requirement unless Gem::Version.new(Gem::VERSION) < Gem::Version.new("2.7.0")

    requirement += ".a" if bundler_gem_version.prerelease?

    requirement
  end

  def load_bundler!
    ENV["BUNDLE_GEMFILE"] ||= gemfile

    activate_bundler
  end

  def activate_bundler
    gem_error = activation_error_handling do
      gem "bundler", bundler_requirement
    end
    return if gem_error.nil?
    require_error = activation_error_handling do
      require "bundler/version"
    end
    return if require_error.nil? && Gem::Requirement.new(bundler_requirement).satisfied_by?(Gem::Version.new(Bundler::VERSION))
    warn "Activating bundler (#{bundler_requirement}) failed:\n#{gem_error.message}\n\nTo install the version of bundler this project requires, run `gem install bundler -v '#{bundler_requirement}'`"
    exit 42
  end

  def activation_error_handling
    yield
    nil
  rescue StandardError, LoadError => e
    e
  end
end

m.load_bundler!

if m.invoked_as_script?
  load Gem.bin_path("bundler", "bundle")
end
</file>

<file path="bin/dev">
#!/usr/bin/env sh

if gem list --no-installed --exact --silent foreman; then
  echo "Installing foreman..."
  gem install foreman
fi

bin/setup --skip-server
export PORT="${PORT:-5000}"
export RAILS_PORT=$PORT
exec foreman start -f Procfile.dev --env /dev/null "$@"
</file>

<file path="bin/docker-entrypoint.sh">
#!/bin/ash
set -e
if [ -f tmp/pids/server.pid ]; then
  rm tmp/pids/server.pid
fi

echo "Preparing database..."
bundle exec rails db:prepare:with_data

echo "Setting database file ownership (SQLite3 only)..."
bundle exec rake db:chown

echo "Cleaning up old cache files..."
bundle exec rake tmp:cache:clear

echo "Setting temporary directory permissions..."
chown -R $PUID:$PGID tmp log

echo "Launching application..."
export RAILS_PORT=$PORT
export RAILS_LOG_TO_STDOUT=true
exec s6-setuidgid $PUID:$PGID $@
</file>

<file path="bin/manyfold">
#!/usr/bin/env ruby
require "thor"
require File.expand_path("../../config/environment", __FILE__)

class CollectionCLI < Thor
  desc "prune", "removes all empty collections"
  def prune
    Collection.find_each { |it| it.destroy if it.models.empty? && it.collections.empty? }
  end
end

class CreatorCLI < Thor
  desc "prune", "removes all creators that aren't associated with any models"
  def prune
    Creator.find_each { |it| it.destroy if it.models.empty? }
  end
end

class MailCLI < Thor
  desc "test_email", "sends test email"
  def test
    UserMailer.with(user: User.find(1)).account_approved.deliver_now # rubocop:disable Pundit/UsePolicyScope
  end
end

class ModelCLI < Thor
  desc "update_metadata", "reruns the metadata parser for all models"
  option :search, required: false, type: :string
  def update_metadata
    scope = Model
    scope = Search::ModelSearchService.new(scope).search(options[:search]) if options[:search]
    scope.find_each do |it|
      Scan::Model::ParseMetadataJob.perform_later(it.id)
      print "."
      sleep 0.01 # Slows down connections a bit so as not to saturate Redis
    end
    puts "\n#{scope.count} models queued for metadata parsing" # rubocop:disable Pundit/UsePolicyScope
  end

  desc "pregenerate_downloads", "generate downloadable ZIP files for all models"
  option :search, required: false, type: :string
  def pregenerate_downloads
    if !SiteSettings.pregenerate_downloads
      puts "ERROR: Enable proactive ZIP download creation in admin settings."
      return
    end
    scope = Model
    scope = Search::ModelSearchService.new(scope).search(options[:search]) if options[:search]
    scope.find_each do |it|
      it.pregenerate_downloads delay: 5.seconds, queue: :low
      print "."
      sleep 0.01 # Slows down connections a bit so as not to saturate Redis
    end
    puts "\n#{scope.count} models queued for download creation" # rubocop:disable Pundit/UsePolicyScope
  end
end

class ProblemCLI < Thor
  desc "prune", "removes any problems without an associated problematic object"
  def prune
    Problem.find_each { |it| it.destroy if it.problematic.nil? }
  end

  desc "purge", "removes all problem records"
  option :type, required: false, type: :string, default: nil, aliases: :t, enum: Problem::CATEGORIES
  option :class, required: false, type: :string, default: nil, aliases: :c, enum: %w[Model ModelFile Library]
  def purge
    return unless ask("Are you sure you want to remove all problems", limited_to: %w[y n]) == "y"
    scope = Problem
    scope = scope.where(type: options[:type]) if options[:type]
    scope = scope.where(problematic_type: options[:class]) if options[:class]
    scope.destroy_all
  end
end

class TagCLI < Thor
  desc "purge", "removes all tags"
  def purge
    return unless ask("Are you sure you want to remove all tags?", limited_to: %w[y n]) == "y"
    ActsAsTaggableOn::Tagging.destroy_all
    ActsAsTaggableOn::Tag.destroy_all
  end
end

class UserCLI < Thor
  desc "approve", "approves a user"
  option :email, required: true, type: :string, aliases: :mail
  def approve
    u = User.find_by(email: options[:email])
    raise "User not found" if u.nil?
    u.update(approved: true)
    puts "\nUser #{u.email} approved"
  rescue RuntimeError
    puts "\nUser #{options[:email]} not found"
  end

  desc "password", "resets password for user"
  option :email, required: true, type: :string, aliases: :mail
  def password
    u = User.find_by(email: options[:email])
    raise "User not found" if u.nil?
    u.password = ask("Enter password: ", echo: false)
    puts "\n"
    u.password_confirmation = ask("Confirm password: ", echo: false)
    puts "\nPassword changed!" if u.save!
  rescue ActiveRecord::RecordInvalid => e
    puts "\n#{e}"
  rescue RuntimeError => e
    puts "\n#{e}"
  end
end

class LinksCommand < Thor
  desc "deduplicate", "removes duplicate links"
  def deduplicate
    Link.find_duplicated.each(&:remove_duplicates!)
  end
end

class ManyfoldCLI < Thor
  desc "creators", "manage creators"
  subcommand "creators", CreatorCLI

  desc "collections", "manage collections"
  subcommand "collections", CollectionCLI

  desc "email", "test email"
  subcommand "email", MailCLI

  desc "links", "manage links"
  subcommand "links", LinksCommand

  desc "models", "manage models"
  subcommand "models", ModelCLI

  desc "problems", "manage problems"
  subcommand "problems", ProblemCLI

  desc "tags", "manage tags"
  subcommand "tags", TagCLI

  desc "user", "manage users"
  subcommand "user", UserCLI
end

ManyfoldCLI.start(ARGV)
</file>

<file path="bin/rails">
#!/usr/bin/env ruby
APP_PATH = File.expand_path("../config/application", __dir__)
require_relative "../config/boot"
require "rails/commands"
</file>

<file path="bin/rake">
#!/usr/bin/env ruby
require_relative "../config/boot"
require "rake"
Rake.application.run
</file>

<file path="bin/rubocop">
#!/usr/bin/env ruby
require "rubygems"
require "bundler/setup"

# explicit rubocop config increases performance slightly while avoiding config confusion.
ARGV.unshift("--config", File.expand_path("../.rubocop.yml", __dir__))

load Gem.bin_path("rubocop", "rubocop")
</file>

<file path="bin/setup">
#!/usr/bin/env ruby
require "fileutils"

APP_ROOT = File.expand_path("..", __dir__)

def system!(*args)
  system(*args, exception: true)
end

FileUtils.chdir APP_ROOT do
  # This script is a way to set up or update your development environment automatically.
  # This script is idempotent, so that you can run it at any time and get an expectable outcome.
  # Add necessary setup steps to this file.

  puts "== Installing dependencies =="
  system("bundle check") || system!("bundle install")

  # puts "\n== Copying sample files =="
  # unless File.exist?("config/database.yml")
  #   FileUtils.cp "config/database.yml.sample", "config/database.yml"
  # end

  puts "\n== Preparing database =="
  system! "bin/rails db:prepare:with_data"

  puts "\n== Removing old logs and tempfiles =="
  system! "bin/rails log:clear tmp:clear"

  unless ARGV.include?("--skip-server")
    puts "\n== Starting development server =="
    $stdout.flush # flush the output before exec(2) so that it displays
    exec "bin/dev"
  end
end
</file>

<file path="bin/spring">
#!/usr/bin/env ruby
if !defined?(Spring) && [nil, "development", "test"].include?(ENV["RAILS_ENV"])
  gem "bundler"
  require "bundler"

  # Load Spring without loading other gems in the Gemfile, for speed.
  Bundler.locked_gems.specs.find { |spec| spec.name == "spring" }&.tap do |spring|
    Gem.use_paths Gem.dir, Bundler.bundle_path.to_s, *Gem.path
    gem "spring", spring.version
    require "spring/binstub"
  rescue Gem::LoadError
    # Ignore when Spring is not installed.
  end
end
</file>

<file path="bin/yarn">
#!/usr/bin/env ruby
APP_ROOT = File.expand_path('..', __dir__)
Dir.chdir(APP_ROOT) do
  yarn = ENV["PATH"].split(File::PATH_SEPARATOR).
    select { |dir| File.expand_path(dir) != __dir__ }.
    product(["yarn", "yarn.exe"]).
    map { |dir, file| File.expand_path(file, dir) }.
    find { |file| File.executable?(file) }

  if yarn
    exec yarn, *ARGV
  else
    $stderr.puts "Yarn executable was not detected in the system."
    $stderr.puts "Download Yarn at https://yarnpkg.com/en/docs/install"
    exit 1
  end
end
</file>

<file path="config/credentials/test.yml.enc">
KWJHVgWFVdueg51OV0VEzPKlfXz6xO9WyOqcbgnWTvoeMglduX5nXgY=--IS3pOKdwEInJ9YBi--ZAneKyX1FI4nwsuEpMCr8A==
</file>

<file path="config/environments/development.rb">
require "active_support/core_ext/integer/time"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # Make code changes take effect immediately without server restart.
  config.enable_reloading = true

  # Do not eager load code on boot.
  config.eager_load = false

  # Show full error reports.
  config.consider_all_requests_local = true

  # Enable server timing.
  config.server_timing = true

  # Configure SSL and hostname in dev mode for use with ngrok tunnels
  config.assume_ssl = config.force_ssl = (ENV.fetch("HTTPS_ONLY", nil) === "enabled")
  config.hosts << ENV["PUBLIC_HOSTNAME"] if ENV.key?("PUBLIC_HOSTNAME")

  # Enable/disable Action Controller caching. By default Action Controller caching is disabled.
  # Run rails dev:cache to toggle Action Controller caching.
  if Rails.root.join("tmp/caching-dev.txt").exist?
    config.action_controller.perform_caching = true
    config.action_controller.enable_fragment_cache_logging = true

    config.cache_store = :memory_store
    config.public_file_server.headers = {
      "Cache-Control" => "public, max-age=#{2.days.to_i}"
    }
  else
    config.action_controller.perform_caching = false

    config.cache_store = :null_store
  end

  # Use letter_opener for emails
  config.action_mailer.delivery_method = :letter_opener
  config.action_mailer.perform_deliveries = true

  # Make template changes take effect immediately.
  config.action_mailer.perform_caching = false

  # Print deprecation notices to the Rails logger.
  config.active_support.deprecation = :log

  # Raise an error on page load if there are pending migrations.
  config.active_record.migration_error = :page_load

  # Highlight code that triggered database queries in logs.
  config.active_record.verbose_query_logs = true

  # Append comments with runtime information tags to SQL queries in logs.
  config.active_record.query_log_tags_enabled = true

  # Highlight code that enqueued background job in logs.
  config.active_job.verbose_enqueue_logs = true

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  # config.action_view.annotate_rendered_view_with_filenames = true

  # Raise error when a before_action's only/except options reference missing actions.
  config.action_controller.raise_on_missing_callback_actions = true

  config.active_job.queue_adapter = :sidekiq

  # Apply autocorrection by RuboCop to files generated by `bin/rails generate`.
  config.generators.apply_rubocop_autocorrect_after_generate!
end
</file>

<file path="config/environments/production.rb">
require "active_support/core_ext/integer/time"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # Code is not reloaded between requests.
  config.enable_reloading = false

  # Eager load code on boot for better performance and memory savings (ignored by Rake tasks).
  config.eager_load = true

  # Full error reports are disabled.
  config.consider_all_requests_local = false

  # Turn on fragment caching in view templates.
  config.action_controller.perform_caching = true

  # Cache assets for far-future expiry since they are all digest stamped.
  config.public_file_server.headers = {"cache-control" => "public, max-age=#{1.year.to_i}"}
  # Do not fallback to assets pipeline if a precompiled asset is missed.
  config.assets.compile = false

  # Enable serving of images, stylesheets, and JavaScripts from an asset server.
  # config.asset_host = "http://assets.example.com"

  # Assume all access to the app is happening through a SSL-terminating reverse proxy.
  config.assume_ssl = ENV.fetch("PUBLIC_HOSTNAME", nil).present?

  # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
  config.force_ssl = (ENV.fetch("HTTPS_ONLY", nil) === "enabled")

  # Skip http-to-https redirect for the default health check endpoint.
  config.ssl_options = {
    redirect: {exclude: ->(request) { request.path == "/health" }}
  }

  # Log to STDOUT with the current request id as a default log tag.
  config.log_tags = [:request_id]

  config.logger = ActiveSupport::TaggedLogging.logger($stdout)

  # Change to "debug" to log everything (including potentially personally-identifiable information!)
  config.log_level = ENV.fetch("MANYFOLD_LOG_LEVEL", "info").to_sym

  # Prevent health checks from clogging up the logs.
  config.silence_healthcheck_path = "/health"

  # Don't log any deprecations.
  config.active_support.report_deprecations = false

  # Replace the default in-process memory cache store with a durable alternative.
  # config.cache_store = :mem_cache_store

  # Replace the default in-process and non-durable queuing backend for Active Job.
  config.active_job.queue_adapter = :sidekiq

  # Ignore bad email addresses and do not raise email delivery errors.
  # Set this to true and configure the email server for immediate delivery to raise delivery errors.
  # config.action_mailer.raise_delivery_errors = false

  # Enable locale fallbacks for I18n (makes lookups for any locale fall back to
  # the I18n.default_locale when a translation cannot be found).
  config.i18n.fallbacks = true

  # Do not dump schema after migrations.
  config.active_record.dump_schema_after_migration = false

  # Only use :id for inspections in production.
  config.active_record.attributes_for_inspect = [:id]

  # Enable DNS rebinding protection and other `Host` header attacks.
  # config.hosts = [
  #   "example.com",     # Allow requests from example.com
  #   /.*\.example\.com/ # Allow requests from subdomains like `www.example.com`
  # ]
  #
  # Skip DNS rebinding protection for the default health check endpoint.
  # config.host_authorization = { exclude: ->(request) { request.path == "/up" } }
end
</file>

<file path="config/environments/test.rb">
# The test environment is used exclusively to run your application's
# test suite. You never need to work with it otherwise. Remember that
# your test database is "scratch space" for the test suite and is wiped
# and recreated between test runs. Don't rely on the data there!

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # While tests run files are not watched, reloading is not necessary.
  config.enable_reloading = false

  # Eager loading loads your entire application. When running a single test locally,
  # this is usually not necessary, and can slow down your test suite. However, it's
  # recommended that you enable it in continuous integration systems to ensure eager
  # loading is working properly before deploying your code.
  config.eager_load = ENV["CI"].present?

  # Configure public file server for tests with cache-control for performance.
  config.public_file_server.headers = {"cache-control" => "public, max-age=3600"}

  # Show full error reports.
  config.consider_all_requests_local = true
  config.cache_store = :null_store

  # Render exception templates for rescuable exceptions and raise for other exceptions.
  config.action_dispatch.show_exceptions = :rescuable

  # Disable request forgery protection in test environment.
  config.action_controller.allow_forgery_protection = false

  # Tell Action Mailer not to deliver emails to the real world.
  # The :test delivery method accumulates sent emails in the
  # ActionMailer::Base.deliveries array.
  config.action_mailer.delivery_method = :test

  # Set host to be used by links generated in mailer templates.
  config.action_mailer.default_url_options = {host: "example.com"}

  # Print deprecation notices to the stderr.
  config.active_support.deprecation = :stderr

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  # config.action_view.annotate_rendered_view_with_filenames = true

  # Raise error when a before_action's only/except options reference missing actions.
  config.action_controller.raise_on_missing_callback_actions = true
end
</file>

<file path="config/initializers/active_admin.rb">
ActiveAdmin.setup do |config|
  # == Site Title
  #
  # Set the title that is displayed on the main layout
  # for each of the active admin pages. Can also be customized
  # by extracting the _site_header partial into your project
  # to use your own logo, styles, etc.
  #
  config.site_title = proc { I18n.t("application.title") }

  # == Load Paths
  #
  # By default Active Admin files go inside app/admin/.
  # You can change this directory.
  #
  # eg:
  #   config.load_paths = [File.join(Rails.root, 'app', 'ui')]
  #
  # Or, you can also load more directories.
  # Useful when setting namespaces with users that are not your main AdminUser entity.
  #
  # eg:
  #   config.load_paths = [
  #     File.join(Rails.root, 'app', 'admin'),
  #     File.join(Rails.root, 'app', 'cashier')
  #   ]

  # == Default Namespace
  #
  # Set the default namespace each administration resource
  # will be added to.
  #
  # eg:
  #   config.default_namespace = :hello_world
  #
  # This will create resources in the HelloWorld module and
  # will namespace routes to /hello_world/*
  #
  # To set no namespace by default, use:
  #   config.default_namespace = false
  #
  # Default:
  # config.default_namespace = :admin
  #
  # You can customize the settings for each namespace by using
  # a namespace block. For example, to change the site title
  # within a namespace:
  #
  #   config.namespace :admin do |admin|
  #     admin.site_title = "Custom Admin Title"
  #   end
  #
  # This will ONLY change the title for the admin section. Other
  # namespaces will continue to use the main "site_title" configuration.

  # == User Authentication
  #
  # Active Admin will automatically call an authentication
  # method in a before filter of all controller actions to
  # ensure that there is a currently logged in admin user.
  #
  # This setting changes the method which Active Admin calls
  # within the application controller.
  config.authentication_method = :authenticate_admin_user!

  # == User Authorization
  #
  # Active Admin will automatically call an authorization
  # method in a before filter of all controller actions to
  # ensure that there is a user with proper rights. You can use
  # CanCanAdapter, PunditAdapter, or make your own. Please
  # refer to the documentation.
  # config.authorization_adapter = ActiveAdmin::CanCanAdapter
  config.authorization_adapter = ActiveAdmin::PunditAdapter

  # In case you prefer Pundit over other solutions you can here pass
  # the name of default policy class. This policy will be used in every
  # case when Pundit is unable to find suitable policy.
  # config.pundit_default_policy = "MyDefaultPunditPolicy"

  # If you wish to maintain a separate set of Pundit policies for admin
  # resources, you may set a namespace here that Pundit will search
  # within when looking for a resource's policy.
  # config.pundit_policy_namespace = :admin

  # You can customize your CanCan Ability class name here.
  # config.cancan_ability_class = "Ability"

  # You can specify a method to be called on unauthorized access.
  # This is necessary in order to prevent a redirect loop which happens
  # because, by default, user gets redirected to Dashboard. If user
  # doesn't have access to Dashboard, he'll end up in a redirect loop.
  # Method provided here should be defined in application_controller.rb.
  # config.on_unauthorized_access = :access_denied

  # == Current User
  #
  # Active Admin will associate actions with the current
  # user performing them.
  #
  # This setting changes the method which Active Admin calls
  # (within the application controller) to return the currently logged in user.
  config.current_user_method = :current_user

  # == Logging Out
  #
  # Active Admin displays a logout link on each screen. These
  # settings configure the location and method used for the link.
  #
  # This setting changes the path where the link points to. If it's
  # a string, the string is used as the path. If it's a Symbol, we
  # will call the method to return the path.
  #
  # Default:
  config.logout_link_path = :destroy_user_session_path

  # == Root
  #
  # Set the action to call for the root path. You can set different
  # roots for each namespace.
  #
  # Default:
  # config.root_to = 'dashboard#index'

  # == Admin Comments
  #
  # This allows your users to comment on any resource registered with Active Admin.
  #
  # You can completely disable comments:
  config.comments = false
  #
  # You can change the name under which comments are registered:
  # config.comments_registration_name = 'AdminComment'
  #
  # You can change the order for the comments and you can change the column
  # to be used for ordering:
  # config.comments_order = 'created_at ASC'
  #
  # You can disable the menu item for the comments index page:
  # config.comments_menu = false
  #
  # You can customize the comment menu:
  # config.comments_menu = { parent: 'Admin', priority: 1 }

  # == Batch Actions
  #
  # Enable and disable Batch Actions
  #
  config.batch_actions = true

  # == Controller Filters
  #
  # You can add before, after and around filters to all of your
  # Active Admin resources and pages from here.
  #
  config.before_action do
    raise Pundit::NotAuthorizedError, I18n.t("active_admin.demo_mode") if SiteSettings.demo_mode_enabled?
  end

  # == Attribute Filters
  #
  # You can exclude possibly sensitive model attributes from being displayed,
  # added to forms, or exported by default by ActiveAdmin
  #
  config.filter_attributes = [:encrypted_password, :password, :password_confirmation, :s3_access_key_id, :s3_secret_access_key]

  # == Localize Date/Time Format
  #
  # Set the localize format to display dates and times.
  # To understand how to localize your app with I18n, read more at
  # https://guides.rubyonrails.org/i18n.html
  #
  # You can run `bin/rails runner 'puts I18n.t("date.formats")'` to see the
  # available formats in your application.
  #
  config.localize_format = :long

  # == Removing Breadcrumbs
  #
  # Breadcrumbs are enabled by default. You can customize them for individual
  # resources or you can disable them globally from here.
  #
  # config.breadcrumb = false

  # == Create Another Checkbox
  #
  # Create another checkbox is disabled by default. You can customize it for individual
  # resources or you can enable them globally from here.
  #
  # config.create_another = true

  # == CSV options
  #
  # Set the CSV builder separator
  # config.csv_options = { col_sep: ';' }
  #
  # Force the use of quotes
  # config.csv_options = { force_quotes: true }

  # == Menu System
  #
  # You can add a navigation menu to be used in your application, or configure a provided menu
  #
  # If you wanted to add a static menu item to the default menu provided:
  #
  #   config.namespace :admin do |admin|
  #     admin.build_menu :default do |menu|
  #       menu.add label: "My Great Website", url: "https://mygreatwebsite.example.com", html_options: { target: "_blank" }
  #     end
  #   end

  # == Download Links
  #
  # You can disable download links on resource listing pages,
  # or customize the formats shown per namespace/globally
  #
  # To disable/customize for the :admin namespace:
  #
  #   config.namespace :admin do |admin|
  #
  #     # Disable the links entirely
  #     admin.download_links = false
  #
  #     # Only show XML & PDF options. You must register the format mime type with `Mime::Type.register`.
  #     admin.download_links = [:xml, :pdf]
  #
  #     # Enable/disable the links based on block (for example, with cancan)
  #     admin.download_links = proc { can?(:view_download_links) }
  #
  #   end

  # == Pagination
  #
  # Pagination is enabled by default for all resources.
  # You can control the default per page count for all resources here.
  #
  # config.default_per_page = 30
  #
  # You can control the max per page count too.
  #
  # config.max_per_page = 10_000

  # == Filters
  #
  # By default the index screen includes a "Filters" sidebar on the right
  # hand side with a filter for each attribute of the registered model.
  # You can enable or disable them for all resources here.
  #
  # config.filters = true
  #
  # By default the filters include associations in a select, which means
  # that every record will be loaded for each association (up
  # to the value of config.maximum_association_filter_arity).
  # You can enabled or disable the inclusion
  # of those filters by default here.
  #
  # config.include_default_association_filters = true

  # config.maximum_association_filter_arity = 256 # default value of :unlimited will change to 256 in a future version
  # config.filter_columns_for_large_association = [
  #    :display_name,
  #    :full_name,
  #    :name,
  #    :username,
  #    :login,
  #    :title,
  #    :email,
  #  ]
  # config.filter_method_for_large_association = '_start'

  # == Sorting
  #
  # By default ActiveAdmin::OrderClause is used for sorting logic
  # You can inherit it with own class and inject it for all resources
  #
  # config.order_clause = MyOrderClause

  config.namespace :admin do |admin|
    admin.build_menu :utility_navigation do |menu|
      menu.add label: I18n.t("active_admin.exit"), url: "/"
    end
  end
end
</file>

<file path="config/initializers/active_job_status.rb">
# Sidekiq and Rails communicate via redis, so we should always use that.
ActiveJob::Status.store = :redis_cache_store, {
  url: ENV.fetch("REDIS_URL", nil),
  pool: {
    size: ActiveRecord::Base.connection.pool.size
  }
}

ActiveJob::Status.options = {
  includes: %i[status serialized_job exception],
  expires_in: 24.hours.to_i
}

module ActiveJob::Status
  def self.all
    store.redis.with do |conn|
      conn.keys("activejob:status:*").map { |it| ActiveJob::Status.get(it.split(":").last) }
    end
  end
end

class ActiveJob::Status::Status
  def last_activity
    [
      read.dig(:serialized_job, "enqueued_at"),
      read[:started_at],
      read[:finished_at]
    ].compact.max
  end
end
</file>

<file path="config/initializers/active_job_uniqueness.rb">
# frozen_string_literal: true

ActiveJob::Uniqueness.configure do |config|
  # Global default expiration for lock keys. Each job can define its own ttl via :lock_ttl option.
  # Strategy :until_and_while_executing also accepts :on_runtime_ttl option.
  #
  # config.lock_ttl = 1.day

  # Prefix for lock keys. Can not be set per job.
  #
  # config.lock_prefix = 'activejob_uniqueness'

  # Default action on lock conflict. Can be set per job.
  # Strategy :until_and_while_executing also accepts :on_runtime_conflict option.
  # Allowed values are
  #   :raise - raises ActiveJob::Uniqueness::JobNotUnique
  #   :log - instruments ActiveSupport::Notifications and logs event to the ActiveJob::Logger
  #   proc - custom Proc. For example, ->(job) { job.logger.info("Job already in queue: #{job.class.name} #{job.arguments.inspect} (#{job.job_id})") }
  #
  config.on_conflict = :log

  # Default action on redis connection error. Can be set per job.
  # Allowed values are
  #   :raise - raises ActiveJob::Uniqueness::JobNotUnique
  #   proc - custom Proc. For example, ->(job, resource: _, error: _) { job.logger.info("Job already in queue: #{job.class.name} #{job.arguments.inspect} (#{job.job_id})") }
  #
  # config.on_redis_connection_error = :raise

  # Digest method for lock keys generating. Expected to have `hexdigest` class method.
  #
  # config.digest_method = OpenSSL::Digest::MD5

  # Array of redis servers for Redlock quorum.
  # Read more at https://github.com/leandromoreira/redlock-rb#redis-client-configuration
  #
  # config.redlock_servers = [ENV.fetch('REDIS_URL', 'redis://localhost:6379')]

  # Custom options for Redlock.
  # Read more at https://github.com/leandromoreira/redlock-rb#redlock-configuration
  #
  # config.redlock_options = { retry_count: 0 }

  # Custom strategies.
  # config.lock_strategies = { my_strategy: MyStrategy }
  #
  # config.lock_strategies = {}
end
</file>

<file path="config/initializers/acts_as_favoritor.rb">
# frozen_string_literal: true

ActsAsFavoritor.configure do |config|
  # Specify your default scope. Learn more about scopes here: https://github.com/jonhue/acts_as_favoritor#scopes
  config.default_scope = :printed

  # Enable caching. Learn more about caching here: https://github.com/jonhue/acts_as_favoritor#caching
  # config.cache = false
end
</file>

<file path="config/initializers/acts_as_taggable_on.rb">
ActsAsTaggableOn.remove_unused_tags = true
ActsAsTaggableOn.force_lowercase = false

module ActsAsTaggableOn
  class Tag
    def self.ransackable_attributes(auth_object = nil)
      ["created_at", "id", "name", "taggings_count", "updated_at"]
    end

    def self.ransackable_associations(auth_object = nil)
      ["taggings"]
    end
  end

  class Tagging
    def self.ransackable_attributes(auth_object = nil)
      ["context", "created_at", "id", "tag_id", "taggable_id", "taggable_type", "tagger_id", "tagger_type"]
    end
  end

  class CustomParser < GenericParser
    def parse
      string = @tag_list

      string = string.join(ActsAsTaggableOn.glue) if string.respond_to?(:join)
      TagList.new.tap do |tag_list|
        string = string.to_s.dup
        string.gsub!(/(^\\*|\\*$)/, "").gsub!(/(, \\*|\\*, )/, ",")

        tag_list.add(string.split(ActsAsTaggableOn.delimiter))
      end
    end
  end
end

ActsAsTaggableOn.default_parser = ActsAsTaggableOn::CustomParser
</file>

<file path="config/initializers/altcha.rb">
# frozen_string_literal: true

Altcha.setup do |config|
  config.algorithm = "SHA-256"
  config.num_range = (50_000..500_000)
  config.timeout = 5.minutes
  config.hmac_key = ENV.fetch("SECRET_KEY_BASE", SecureRandom.hex(32))
end
</file>

<file path="config/initializers/api.rb">
# Configuration options for our API endpoints

# oEmbed
Mime::Type.register "application/json+oembed", :oembed

# API format
Mime::Type.register "application/vnd.manyfold.v0+json", :manyfold_api_v0
</file>

<file path="config/initializers/app_version.rb">
# frozen_string_literal: true

Rails.application.config.upstream_repo = ENV.fetch("UPSTREAM_REPO", "https://github.com/manyfold3d/manyfold")
Rails.application.config.app_version = ENV.fetch("APP_VERSION", "unknown").split(":")[-1]
Rails.application.config.git_sha = ENV.fetch("GIT_SHA", "main")

if Rails.env.development?
  if File.directory? File.expand_path(".git")
    system("git fetch #{Rails.application.config.upstream_repo}")
    git_sha = `git rev-parse HEAD`
    git_sha.strip!
    app_version = `git describe --tags --abbrev=0 #{git_sha}`
    app_version.strip!

    Rails.application.config.git_sha = git_sha
    Rails.application.config.app_version = app_version
  end
end
</file>

<file path="config/initializers/application_controller_renderer.rb">
# Be sure to restart your server when you modify this file.

# ActiveSupport::Reloader.to_prepare do
#   ApplicationController.renderer.defaults.merge!(
#     http_host: 'example.org',
#     https: false
#   )
# end
</file>

<file path="config/initializers/assets.rb">
# Be sure to restart your server when you modify this file.

# Version of your assets, change this if you want to expire all your assets.
Rails.application.config.assets.version = "1.0"
</file>

<file path="config/initializers/backtrace_silencers.rb">
# Be sure to restart your server when you modify this file.

# You can add backtrace silencers for libraries that you're using but don't wish to see in your backtraces.
# Rails.backtrace_cleaner.add_silencer { |line| /my_noisy_library/.match?(line) }

# You can also remove all the silencers if you're trying to debug a problem that might stem from framework code
# by setting BACKTRACE=1 before calling your invocation, like "BACKTRACE=1 ./bin/rails runner 'MyClass.perform'".
Rails.backtrace_cleaner.remove_silencers! if ENV["BACKTRACE"]
</file>

<file path="config/initializers/bullet.rb">
Rails.application.config.after_initialize do
  if Rails.env.development?
    Bullet.enable = true
    Bullet.rails_logger = true

    # Features
    Bullet.n_plus_one_query_enable = true
    Bullet.unused_eager_loading_enable = true
    Bullet.counter_cache_enable = true
  end
end
</file>

<file path="config/initializers/caber.rb">
# Autogenerated configuration for Caber
Caber.configure do |config|
  # List the object-level permissions you want
  config.permissions = [
    "preview",
    "view",
    "edit",
    "own"
  ]
end
</file>

<file path="config/initializers/content_security_policy.rb">
# Define an application-wide content security policy.
# See the Securing Rails Applications Guide for more information:
# https://guides.rubyonrails.org/security.html#content-security-policy-header

# Configured dynamically in ApplicationController#configure_content_security_policy

Rails.application.configure do
  # Disable CSP nonce if we're pulling in Scout DevTrace
  unless Rails.env.development? && ENV.fetch("SCOUT_DEV_TRACE", false) === "true"
    config.content_security_policy_nonce_generator = ->(request) { request.session.id.to_s }
  end
end
</file>

<file path="config/initializers/cookies_serializer.rb">
# Be sure to restart your server when you modify this file.

# Specify a serializer for the signed and encrypted cookie jars.
# Valid options are :json, :marshal, and :hybrid.
Rails.application.config.action_dispatch.cookies_serializer = :json
</file>

<file path="config/initializers/core_extensions.rb">
# Mixing in some extensions to core classes
class String
  include TrimPathSeparators
  include LocaleAwareness
  include CarefulTitleize
end
</file>

<file path="config/initializers/cors.rb">
Rails.application.config.middleware.insert_before 0, Rack::Cors do
  # Allow cross-origin requests for API content types
  allow do
    origins "*"
    resource "*",
      headers: [:any],
      methods: [:get, :options, :head],
      if: ->(env) { env["HTTP_ACCEPT"]&.split(", ")&.include? Mime[:manyfold_api_v0].to_s }
  end
end
</file>

<file path="config/initializers/devise.rb">
# frozen_string_literal: true

# Assuming you have not yet modified this file, each configuration option below
# is set to its default value. Note that some are commented out while others
# are not: uncommented lines are intended to protect your configuration from
# breaking changes in upgrades (i.e., in the event that future versions of
# Devise change the default values for those options).
#
# Use this hook to configure devise mailer, warden hooks and so forth.
# Many of these configuration options can be set straight in your model.
Devise.setup do |config|
  # The secret key used by Devise. Devise uses this key to generate
  # random tokens. Changing this key will render invalid all existing
  # confirmation, reset password and unlock tokens in the database.
  # Devise will use the `secret_key_base` as its `secret_key`
  # by default. You can change it below and use your own secret key.
  # config.secret_key = 'a28eda2ce1a57ae7e35adfe612eda571bdbba9f70579043c472170c2a5e847ea7387ceb4fdedada84dad23882026c47224c787b777428dea7bf4645a5fd80ab9'

  # ==> Controller configuration
  # Configure the parent class to the devise controllers.
  # config.parent_controller = 'DeviseController'

  # ==> Mailer Configuration
  # Configure the e-mail address which will be shown in Devise::Mailer,
  # note that it will be overwritten if you use your own mailer class
  # with default "from" parameter.
  config.mailer_sender = ENV.fetch("SMTP_FROM_ADDRESS", "notifications@#{ENV.fetch("PUBLIC_HOSTNAME", "localhost")}")

  # Configure the class responsible to send e-mails.
  # config.mailer = 'Devise::Mailer'

  # Configure the parent class responsible to send e-mails.
  # config.parent_mailer = 'ActionMailer::Base'

  # ==> ORM configuration
  # Load and configure the ORM. Supports :active_record (default) and
  # :mongoid (bson_ext recommended) by default. Other ORMs may be
  # available as additional gems.
  require "devise/orm/active_record"

  # ==> Configuration for any authentication mechanism
  # Configure which keys are used when authenticating a user. The default is
  # just :email. You can configure it to use [:username, :subdomain], so for
  # authenticating a user, both parameters are required. Remember that those
  # parameters are used only when authenticating and not when retrieving from
  # session. If you need permissions, you should implement that in a before filter.
  # You can also supply a hash where the value is a boolean determining whether
  # or not authentication should be aborted when the value is not present.
  # config.authentication_keys = [:email]

  # Configure parameters from the request object used for authentication. Each entry
  # given should be a request method and it will automatically be passed to the
  # find_for_authentication method and considered in your model lookup. For instance,
  # if you set :request_keys to [:subdomain], :subdomain will be used on authentication.
  # The same considerations mentioned for authentication_keys also apply to request_keys.
  # config.request_keys = []

  # Configure which authentication keys should be case-insensitive.
  # These keys will be downcased upon creating or modifying a user and when used
  # to authenticate or find a user. Default is :email.
  config.case_insensitive_keys = [:email]

  # Configure which authentication keys should have whitespace stripped.
  # These keys will have whitespace before and after removed upon creating or
  # modifying a user and when used to authenticate or find a user. Default is :email.
  config.strip_whitespace_keys = [:email]

  # Tell if authentication through request.params is enabled. True by default.
  # It can be set to an array that will enable params authentication only for the
  # given strategies, for example, `config.params_authenticatable = [:database]` will
  # enable it only for database (email + password) authentication.
  # config.params_authenticatable = true

  # Tell if authentication through HTTP Auth is enabled. False by default.
  # It can be set to an array that will enable http authentication only for the
  # given strategies, for example, `config.http_authenticatable = [:database]` will
  # enable it only for database authentication.
  # For API-only applications to support authentication "out-of-the-box", you will likely want to
  # enable this with :database unless you are using a custom strategy.
  # The supported strategies are:
  # :database      = Support basic authentication with authentication key + password
  # config.http_authenticatable = false

  # If 401 status code should be returned for AJAX requests. True by default.
  # config.http_authenticatable_on_xhr = true

  # The realm used in Http Basic Authentication. 'Application' by default.
  # config.http_authentication_realm = 'Application'

  # It will change confirmation, password recovery and other workflows
  # to behave the same regardless if the e-mail provided was right or wrong.
  # Does not affect registerable.
  # config.paranoid = true

  # By default Devise will store the user in session. You can skip storage for
  # particular strategies by setting this option.
  # Notice that if you are skipping storage for all authentication paths, you
  # may want to disable generating routes to Devise's sessions controller by
  # passing skip: :sessions to `devise_for` in your config/routes.rb
  config.skip_session_storage = [:http_auth]

  # By default, Devise cleans up the CSRF token on authentication to
  # avoid CSRF token fixation attacks. This means that, when using AJAX
  # requests for sign in and sign up, you need to get a new CSRF token
  # from the server. You can disable this option at your own risk.
  # config.clean_up_csrf_token_on_authentication = true

  # When false, Devise will not attempt to reload routes on eager load.
  # This can reduce the time taken to boot the app but if your application
  # requires the Devise mappings to be loaded during boot time the application
  # won't boot properly.
  # config.reload_routes = true

  # ==> Configuration for :database_authenticatable
  # For bcrypt, this is the cost for hashing the password and defaults to 12. If
  # using other algorithms, it sets how many times you want the password to be hashed.
  # The number of stretches used for generating the hashed password are stored
  # with the hashed password. This allows you to change the stretches without
  # invalidating existing passwords.
  #
  # Limiting the stretches to just one in testing will increase the performance of
  # your test suite dramatically. However, it is STRONGLY RECOMMENDED to not use
  # a value less than 10 in other environments. Note that, for bcrypt (the default
  # algorithm), the cost increases exponentially with the number of stretches (e.g.
  # a value of 20 is already extremely slow: approx. 60 seconds for 1 calculation).
  config.stretches = Rails.env.test? ? 1 : 12

  # Set up a pepper to generate the hashed password.
  # config.pepper = '50a9e0d37397e03a118db4c94a6eca69cd193ed63d69942fa6a13e1b44edd39eb8d41fe69668b1a2722ba7cadaf839e363c06f85d48c909d896e2ab41e9dff56'

  # Send a notification to the original email when the user's email is changed.
  # config.send_email_changed_notification = false

  # Send a notification email when the user's password is changed.
  # config.send_password_change_notification = false

  # ==> Configuration for :confirmable
  # A period that the user is allowed to access the website even without
  # confirming their account. For instance, if set to 2.days, the user will be
  # able to access the website for two days without confirming their account,
  # access will be blocked just in the third day.
  # You can also set it to nil, which will allow the user to access the website
  # without confirming their account.
  # Default is 0.days, meaning the user cannot access the website without
  # confirming their account.
  # config.allow_unconfirmed_access_for = 2.days

  # A period that the user is allowed to confirm their account before their
  # token becomes invalid. For example, if set to 3.days, the user can confirm
  # their account within 3 days after the mail was sent, but on the fourth day
  # their account can't be confirmed with the token any more.
  # Default is nil, meaning there is no restriction on how long a user can take
  # before confirming their account.
  # config.confirm_within = 3.days

  # If true, requires any email changes to be confirmed (exactly the same way as
  # initial account confirmation) to be applied. Requires additional unconfirmed_email
  # db field (see migrations). Until confirmed, new email is stored in
  # unconfirmed_email column, and copied to email column on successful confirmation.
  config.reconfirmable = true

  # Defines which key will be used when confirming an account
  # config.confirmation_keys = [:email]

  # ==> Configuration for :rememberable
  # The time the user will be remembered without asking for credentials again.
  # config.remember_for = 2.weeks

  # Invalidates all the remember me tokens when the user signs out.
  config.expire_all_remember_me_on_sign_out = true

  # If true, extends the user's remember period when remembered via cookie.
  # config.extend_remember_period = false

  # Options to be passed to the created cookie. For instance, you can set
  # secure: true in order to force SSL only cookies.
  config.rememberable_options = {
    same_site: :lax,
    secure: Rails.application.config.force_ssl
  }

  # ==> Configuration for :timeoutable
  # The time you want to timeout the user session without activity. After this
  # time the user will be asked for credentials again. Default is 30 minutes.
  config.timeout_in = 30.minutes

  # ==> Configuration for :lockable
  # Defines which strategy will be used to lock an account.
  # :failed_attempts = Locks an account after a number of failed attempts to sign in.
  # :none            = No lock strategy. You should handle locking by yourself.
  config.lock_strategy = :failed_attempts

  # Defines which key will be used when locking and unlocking an account
  # config.unlock_keys = [:email]

  # Defines which strategy will be used to unlock an account.
  # :email = Sends an unlock link to the user email
  # :time  = Re-enables login after a certain amount of time (see :unlock_in below)
  # :both  = Enables both strategies
  # :none  = No unlock strategy. You should handle unlocking by yourself.
  config.unlock_strategy = :time

  # Number of authentication tries before locking an account if lock_strategy
  # is failed attempts.
  config.maximum_attempts = 5

  # Time interval to unlock the account if :time is enabled as unlock_strategy.
  config.unlock_in = 1.hour

  # Warn on the last attempt before the account is locked.
  config.last_attempt_warning = true

  # ==> Configuration for :recoverable
  #
  # Defines which key will be used when recovering the password for an account
  # config.reset_password_keys = [:email]

  # Time interval you can reset your password with a reset password key.
  # Don't put a too small interval or your users won't have the time to
  # change their passwords.
  config.reset_password_within = 6.hours

  # When set to false, does not sign a user in automatically after their password is
  # reset. Defaults to true, so a user is signed in automatically after a reset.
  # config.sign_in_after_reset_password = true

  # ==> Configuration for :zxcvbnable
  # Change the minimum zxcvbn score for passwords. This determines the strength of
  # the password that is required. The default is 4, which is the recommended
  # minimum for a secure password.
  # Must be a number between 0 and 5.
  config.min_password_score = ENV.fetch("MIN_PASSWORD_SCORE", "4")&.to_i

  # ==> Configuration for :encryptable
  # Allow you to use another hashing or encryption algorithm besides bcrypt (default).
  # You can use :sha1, :sha512 or algorithms from others authentication tools as
  # :clearance_sha1, :authlogic_sha512 (then you should set stretches above to 20
  # for default behavior) and :restful_authentication_sha1 (then you should set
  # stretches to 10, and copy REST_AUTH_SITE_KEY to pepper).
  #
  # Require the `devise-encryptable` gem when using anything other than bcrypt
  # config.encryptor = :sha512

  # ==> Scopes configuration
  # Turn scoped views on. Before rendering "sessions/new", it will first check for
  # "users/sessions/new". It's turned off by default because it's slower if you
  # are using only default views.
  # config.scoped_views = false

  # Configure the default scope given to Warden. By default it's the first
  # devise role declared in your routes (usually :user).
  # config.default_scope = :user

  # Set this configuration to false if you want /users/sign_out to sign out
  # only the current scope. By default, Devise signs out all scopes.
  # config.sign_out_all_scopes = true

  # ==> Navigation configuration
  # Lists the formats that should be treated as navigational. Formats like
  # :html, should redirect to the sign in page when the user does not have
  # access, but formats like :xml or :json, should return 401.
  #
  # If you have any extra navigational formats, like :iphone or :mobile, you
  # should add them to the navigational formats lists.
  #
  # The "*/*" below is required to match Internet Explorer requests.
  # config.navigational_formats = ['*/*', :html]

  # The default HTTP method used to sign out a resource. Default is :delete.
  config.sign_out_via = :delete

  # ==> OmniAuth
  # Add a new OmniAuth provider. Check the wiki for more information on setting
  # up on your models and hooks.

  if Rails.application.config.manyfold_features[:oidc]
    scheme = Rails.application.config.force_ssl ? "https" : "http"
    issuer_uri = URI.parse(ENV.fetch("OIDC_ISSUER"))
    config.omniauth :openid_connect, {
      name: :openid_connect,
      issuer: ENV.fetch("OIDC_ISSUER"),
      scope: [:openid, :email, :profile],
      response_type: :code,
      discovery: true,
      client_options: {
        scheme: issuer_uri.scheme,
        port: issuer_uri.port,
        host: issuer_uri.host,
        identifier: ENV.fetch("OIDC_CLIENT_ID"),
        secret: ENV.fetch("OIDC_CLIENT_SECRET"),
        redirect_uri: [
          "#{scheme}://#{[Rails.application.default_url_options[:host], Rails.application.default_url_options[:port]].compact.join(":")}",
          Rails.application.config.relative_url_root&.delete_prefix("/")&.delete_suffix("/"),
          "users/auth/openid_connect/callback"
        ].compact.join("/") # This code is horrible, there must be a better way??
      }
    }
  end

  # ==> Warden configuration
  # If you want to use other strategies, that are not supported by Devise, or
  # change the failure app, you can configure them inside the config.warden block.
  #
  # config.warden do |manager|
  #   manager.intercept_401 = false
  #   manager.default_strategies(scope: :user).unshift :some_external_strategy
  # end

  # ==> Mountable engine configurations
  # When using Devise inside an engine, let's call it `MyEngine`, and this engine
  # is mountable, there are some extra configurations to be taken into account.
  # The following options are available, assuming the engine is mounted as:
  #
  #     mount MyEngine, at: '/my_engine'
  #
  # The router that invoked `devise_for`, in the example above, would be:
  # config.router_name = :my_engine
  #
  # When using OmniAuth, Devise cannot automatically set OmniAuth path,
  # so you need to do it manually. For the users scope, it would be:
  # config.omniauth_path_prefix = '/my_engine/users/auth'

  # ==> Hotwire/Turbo configuration
  # When using Devise with Hotwire/Turbo, the http status for error responses
  # and some redirects must match the following. The default in Devise for existing
  # apps is `200 OK` and `302 Found` respectively, but new apps are generated with
  # these new defaults that match Hotwire/Turbo behavior.
  # Note: These might become the new default in future versions of Devise.
  config.responder.error_status = :unprocessable_entity
  config.responder.redirect_status = :see_other

  # ==> Configuration for :registerable

  # When set to false, does not sign a user in automatically after their password is
  # changed. Defaults to true, so a user is signed in automatically after changing a password.
  # config.sign_in_after_change_password = true

  # Register our API token custom auth strategy
  Warden::Strategies.add(:client_credentials, ClientCredentialsStrategy)

  config.warden do |config|
    config.default_strategies(scope: :user).unshift :client_credentials

    config.failure_app = AuthFailureApp
  end
end
</file>

<file path="config/initializers/doorkeeper.rb">
# frozen_string_literal: true

Doorkeeper.configure do
  orm :active_record
  base_controller "ActionController::Base"

  # Enabled grant flows
  grant_flows %w[client_credentials]

  # Security
  hash_token_secrets
  authorization_code_expires_in 10.minutes
  access_token_expires_in 2.hours
  forbid_redirect_uri { |uri| %w[data vbscript javascript].include?(uri.scheme.to_s.downcase) }

  # Authentication
  resource_owner_from_credentials { nil }

  # Available scopes
  default_scopes :public
  optional_scopes :read, :write, :delete
  enforce_configured_scopes

  # Per-user applications
  enable_application_owner confirmation: true
end
</file>

<file path="config/initializers/federails.rb">
# frozen_string_literal: true

require "fediverse/inbox"

Federails.configure do |conf|
  conf.app_name = "Manyfold"
  conf.app_version = Rails.application.config.app_version

  scheme = Rails.application.config.force_ssl ? "https" : "http"
  conf.site_host = "#{scheme}://#{Rails.application.default_url_options[:host]}"
  conf.site_port = Rails.application.default_url_options[:port]
  conf.force_ssl = Rails.application.config.force_ssl

  conf.enable_discovery = Rails.application.config.manyfold_features[:federation] || Rails.env.test?
  conf.open_registrations = -> { SiteSettings.registration_enabled? }
  conf.server_routes_path = "federation"
  conf.client_routes_path = "client"

  conf.remote_follow_url_method = :new_follow_url
end

Federails::Moderation.configure do |conf|
  conf.after_report_created = ->(report) { ReportHandler.call(report) }
end

Rails.application.config.after_initialize do
  Fediverse::Inbox.register_handler("Create", "*", ActivityPub::ActorActivityHandler, :handle_create_activity)
  Fediverse::Inbox.register_handler("Update", "*", ActivityPub::ActorActivityHandler, :handle_update_activity)
end
</file>

<file path="config/initializers/field_with_errors.rb">
ActionView::Base.field_error_proc = proc do |html_tag, _instance|
  html_tag.gsub(/class="(.*?)"/, 'class="\1 is-invalid"').html_safe # rubocop:disable Rails/OutputSafety
end
</file>

<file path="config/initializers/filter_parameter_logging.rb">
# Be sure to restart your server when you modify this file.

# Configure parameters to be partially matched (e.g. passw matches password) and filtered from the log file.
# Use this to limit dissemination of sensitive information.
# See the ActiveSupport::ParameterFilter documentation for supported notations and behaviors.
Rails.application.config.filter_parameters += [
  :passw, :email, :secret, :token, :_key, :crypt, :salt, :certificate, :otp, :ssn, :cvv, :cvc
]
</file>

<file path="config/initializers/i18n.rb">
# Monkeypatch fallbacks to add locale to returned strings
module I18n::Backend::Fallbacks
  def translate(locale, key, options = EMPTY_HASH)
    return super unless options.fetch(:fallback, true)
    return super if options[:fallback_in_progress]
    default = extract_non_symbol_default!(options) if options[:default]

    fallback_options = options.merge(fallback_in_progress: true, fallback_original_locale: locale)
    I18n.fallbacks[locale].each do |fallback|
      catch(:exception) do
        result = super(fallback, key, fallback_options).dup
        result.locale = fallback if locale.to_s != fallback.to_s
        unless result.nil?
          on_fallback(locale, fallback, key, options) if locale.to_s != fallback.to_s
          return result
        end
      end
    rescue I18n::InvalidLocale
      # we do nothing when the locale is invalid, as this is a fallback anyways.
    end

    return if options.key?(:default) && options[:default].nil?

    return super(locale, nil, options.merge(default: default)) if default
    throw(:exception, I18n::MissingTranslation.new(locale, key, options))
  end
end
</file>

<file path="config/initializers/inflections.rb">
# Be sure to restart your server when you modify this file.

# Add new inflection rules using the following format. Inflections
# are locale specific, and you may define rules for as many different
# locales as you wish. All of these examples are active by default:
# ActiveSupport::Inflector.inflections(:en) do |inflect|
#   inflect.plural /^(ox)$/i, "\\1en"
#   inflect.singular /^(ox)en/i, "\\1"
#   inflect.irregular "person", "people"
#   inflect.uncountable %w( fish sheep )
# end

# These inflection rules are supported but not enabled by default:
# ActiveSupport::Inflector.inflections(:en) do |inflect|
#   inflect.acronym "RESTful"
# end
</file>

<file path="config/initializers/libarchive_security.rb">
module Archive
  # Create a preset "secure extraction" flag combination for libarchive to make sure we avoid security problems
  # See https://github.com/libarchive/libarchive/blob/6ee1eebefdf41f36ef1a548c9a7000d132c453f3/libarchive/archive.h#L662
  EXTRACT_SECURE = [
    Archive::EXTRACT_TIME,
    Archive::EXTRACT_NO_OVERWRITE,
    Archive::EXTRACT_NO_OVERWRITE_NEWER,
    Archive::EXTRACT_SECURE_NODOTDOT
  ].reduce(:|).to_i
end
</file>

<file path="config/initializers/lograge.rb">
Rails.application.configure do
  config.lograge.enabled = true
  config.lograge.formatter = Lograge::Formatters::Logstash.new if Rails.env.production?
end
</file>

<file path="config/initializers/mime_types.rb">
# Extra MIME types that Rails doesn't already know about

# 3D Models
Mime::Type.register "application/x-3ds", :threeds, ["image/x-3ds"], ["3ds"]
Mime::Type.register "application/x-3dsmax", :max
Mime::Type.register "application/x-amf", :amf
Mime::Type.register "application/x-ldraw", :ldr, [], ["mpd"]
Mime::Type.register "application/x-openscad", :scad
Mime::Type.register "image/vnd.dwg", :dwg
Mime::Type.register "image/vnd.dxf", :dxf
Mime::Type.register "model/3mf", :threemf, [], ["3mf"]
Mime::Type.register "model/gltf", :gltf, ["model/gltf+json", "model/gltf+binary", "model/gltf-binary"], ["glb"]
Mime::Type.register "model/iges", :iges, [], ["igs"]
Mime::Type.register "model/mtl", :mtl
Mime::Type.register "model/obj", :obj
Mime::Type.register "model/step", :step, ["model/step+xml", "model/step+zip", "model/step-xml+zip"], ["stp"]
Mime::Type.register "model/stl", :stl
Mime::Type.register "model/vnd.collada+xml", :collada, [], ["dae"]
Mime::Type.register "model/vnd.google.draco", :draco, [], ["drc"]
Mime::Type.register "model/vrml", :vrml, [], ["wrl"]
Mime::Type.register "model/x-alembic", :abc
Mime::Type.register "model/x-blender", :blend
Mime::Type.register "model/x-brep", :brep
Mime::Type.register "model/x-cheetah3d", :cheetah3d, [], ["jas"]
Mime::Type.register "model/x-fbx", :fbx
Mime::Type.register "model/x-freecad", :fcstd
Mime::Type.register "model/x-fusion", :f3d, [], ["f3z"]
Mime::Type.register "model/x-inventor-part", :ipt
Mime::Type.register "model/x-inventor-assembly", :iam
Mime::Type.register "model/x-maya", :maya, [], ["ma", "mb"]
Mime::Type.register "model/x-meshmixer", :mix
Mime::Type.register "model/x-modo", :modo, [], ["lxo"]
Mime::Type.register "model/x-ply", :ply
Mime::Type.register "model/x-sketchup", :sketchup, [], ["skp"]
Mime::Type.register "model/x-solidworks-part", :sldprt
Mime::Type.register "model/x-hfp", :hfp
Mime::Type.register "model/x-speedtree", :speedtree, [], ["spm"]
Mime::Type.register "model/x3d", :x3d, ["model/x3d+xml", "model/x3d-vrml", "model/x3d+fastinfoset"]

# Slicer formats
Mime::Type.register "text/x-gcode", :gcode, [], ["bgcode"]
Mime::Type.register "model/x-lychee", :lychee, [], ["lys", "lyt"]
Mime::Type.register "model/x-chitubox", :chitubox, [], ["ctb"]

# Images
Mime::Type.register "image/webp", :webp

# Archive formats
Mime::Type.register "application/vnd.rar", :rar
Mime::Type.register "application/x-7z-compressed", :sevenz, [], ["7z"]
Mime::Type.register "application/x-bzip2", :bz2

# Document formats
Mime::Type.register "text/markdown", :md
Mime::Type.register "application/msword", :doc
Mime::Type.register "application/vnd.openxmlformats-officedocument.wordprocessingml.document", :docx
Mime::Type.register "application/octet-stream", :bin

# Hardware files, using types from KiCad source:
# https://gitlab.com/kicad/code/kicad/-/tree/master/resources/linux/mime
Mime::Type.register "application/x-gerber", :gbr, ["application/vnd.gerber"], ["gerber", "geb", "gb"]
Mime::Type.register "application/x-gerber-job", :gbrjob
Mime::Type.register "application/x-excellon", :drl
Mime::Type.register "application/x-kicad-project", :kicad_pro, [], ["pro"]
Mime::Type.register "application/x-kicad-footprint", :kicad_mod
Mime::Type.register "application/x-kicad-pcb", :kicad_pcb
Mime::Type.register "application/x-kicad-symbol", :kicad_sym
Mime::Type.register "application/x-kicad-schematic", :kicad_sch, [], ["sch"]
Mime::Type.register "application/x-kicad-worksheet", :kicad_wks
</file>

<file path="config/initializers/openssl.rb">
# Ignore OpenSSL EOF errors that are very common with OpenSSL 3 because the Internet is terrible.
# This solution is a horrible hack from https://stackoverflow.com/questions/76183622/since-a-ruby-container-upgrade-we-expirience-a-lot-of-opensslsslsslerror
# but it seems the quickest and most global solution without rewriting a bunch of lower-level code.
# It'll do for now.
if defined?(OpenSSL::SSL::OP_IGNORE_UNEXPECTED_EOF)
  OpenSSL::SSL::SSLContext::DEFAULT_PARAMS[:options] =
    OpenSSL::SSL::SSLContext::DEFAULT_PARAMS[:options] + OpenSSL::SSL::OP_IGNORE_UNEXPECTED_EOF
end
</file>

<file path="config/initializers/parameter_parsers.rb">
ActionDispatch::Request.parameter_parsers[:manyfold_api_v0] = ->(body) {
  {json: JSON.parse(body)}
}
</file>

<file path="config/initializers/permissions_policy.rb">
# Define an application-wide HTTP permissions policy. For further
# information see https://developers.google.com/web/updates/2018/06/feature-policy
#
# Rails.application.config.permissions_policy do |f|
#   f.camera      :none
#   f.gyroscope   :none
#   f.microphone  :none
#   f.usb         :none
#   f.fullscreen  :self
#   f.payment     :self, "https://secure.example.com"
# end
</file>

<file path="config/initializers/phlex.rb">
# frozen_string_literal: true

module Views
end

module Components
  extend Phlex::Kit
end

Rails.autoloaders.main.push_dir(
  Rails.root.join("app/views"), namespace: Views
)

Rails.autoloaders.main.push_dir(
  Rails.root.join("app/components"), namespace: Components
)
</file>

<file path="config/initializers/rails_performance.rb">
if defined?(RailsPerformance) && !Rails.env.test? && ENV["RAILS_ASSETS_PRECOMPILE"].blank?
  RailsPerformance.setup do |config|
    config.redis = Redis::Namespace.new("#{Rails.env}-rails-performance", redis: Redis.new)
    config.duration = 4.hours

    config.enabled = true

    config.ignored_paths = ["/admin", "/health"]

    # configure Recent tab (time window and limit of requests)
    config.recent_requests_time_window = 60.minutes
    # config.recent_requests_limit = nil # or 1000

    # configure Slow Requests tab (time window, limit of requests and threshold)
    config.slow_requests_time_window = 60.minutes
    # config.slow_requests_limit = 500 # number of max rows
    # config.slow_requests_threshold = 500 # number of ms

    # store custom data for the request
    # config.custom_data_proc = proc do |env|
    # end

    # config home button link
    config.home_link = "/"

    # To skip some Rake tasks from monitoring
    config.skipable_rake_tasks = ["webpacker:compile"]

    # To monitor rake tasks performance, you need to include rake tasks
    # config.include_rake_tasks = false

    # To monitor custom events with `RailsPerformance.measure` block
    # config.include_custom_events = true
  end
end
</file>

<file path="config/initializers/rolify.rb">
Rolify.configure do |config|
  # Dynamic shortcuts for User class (user.is_admin? like methods). Default is: false
  # config.use_dynamic_shortcuts

  # Configuration to remove roles from database once the last resource is removed. Default is: true
  # config.remove_role_if_empty = false
end

Rails.application.config.after_initialize do
  Role::ROLES.each do |r|
    Role.find_or_create_by name: r
  end
rescue ActiveRecord::StatementInvalid
  # Not migrated yet
end
</file>

<file path="config/initializers/rswag_api.rb">
Rswag::Api.configure do |c|
  # Specify a root folder where Swagger JSON files are located
  # This is used by the Swagger middleware to serve requests for API descriptions
  # NOTE: If you're using rswag-specs to generate Swagger, you'll need to ensure
  # that it's configured to generate files in the same folder
  c.openapi_root = Rails.root.to_s + "/app/api"

  # Inject a lambda function to alter the returned Swagger prior to serialization
  # The function will have access to the rack env for the current request
  # For example, you could leverage this to dynamically assign the "host" property
  c.swagger_filter = lambda { |swagger, env|
    swagger["servers"][0]["url"] = Rails.application.routes.url_helpers.root_url
  }
end
</file>

<file path="config/initializers/rswag_ui.rb">
Rswag::Ui.configure do |c|
  # List the Swagger endpoints that you want to be documented through the
  # swagger-ui. The first parameter is the path (absolute or relative to the UI
  # host) to the corresponding endpoint and the second is a title that will be
  # displayed in the document selector.
  # NOTE: If you're using rspec-api to expose Swagger files
  # (under openapi_root) as JSON or YAML endpoints, then the list below should
  # correspond to the relative paths for those endpoints.

  c.openapi_endpoint "v0/openapi.json", "Manyfold API v0 Documentation"

  # Add Basic Auth in case your API is private
  # c.basic_auth_enabled = true
  # c.basic_auth_credentials 'username', 'password'
end
</file>

<file path="config/initializers/session_storage.rb">
Rails.application.config.session_store :cookie_store,
  expire_after: 14.days,
  key: "_manyfold_session",
  same_site: :lax,
  secure: Rails.application.config.force_ssl
</file>

<file path="config/initializers/shrine.rb">
require "tus/server"
require "tus/storage/filesystem"

Rails.application.config.after_initialize do
  Library.register_all_storage

  Tus::Server.opts[:storage] = Tus::Storage::Filesystem.new("tmp/shrine")
  Tus::Server.opts[:max_size] = SiteSettings.max_file_upload_size

  begin
    upload_options = {cache: {move: true}}
    Library.all.map do |l|
      upload_options[l.storage_key] = {move: true} if l.storage_service == "filesystem"
    end
    LibraryUploader.plugin :upload_options, **upload_options unless Rails.env.test?
  rescue ActiveRecord::StatementInvalid, NameError
    nil # migrations probably haven't run yet to create library table
  end

  begin
    Sidekiq::Cron::Job.create(
      name: "clear-shrine-cache",
      cron: "every hour",
      class: "CacheSweepJob"
    )
    Sidekiq::Cron::Job.create(
      name: "clear-downloads",
      cron: "every hour",
      class: "DownloadsSweepJob"
    )
  rescue RedisClient::CannotConnectError
  end
end
</file>

<file path="config/initializers/translation.rb">
if Rails.env.development?
  TranslationIO.configure do |config|
    config.api_key = ENV["TRANSLATION_IO_API_KEY"]
    config.disable_gettext = true
    config.ignored_key_prefixes = [
      # No ActiveAdmin for now, too much cruft
      "active_admin",
      "activerecord.attributes.active_admin",
      "activerecord.models.active_admin",
      "activerecord.models.comment",
      "activerecord.errors.messages.record_invalid",
      "activerecord.errors.messages.restrict_dependent_destroy",
      "formtastic",
      "ransack",
      # Other things we don't want to translate or don't know what they are
      "i18n_tasks",
      "number",
      "errors",
      "flash",
      "helpers.page_entries_info",
      "datetime",
      "date",
      "time",
      "helpers"
    ]
    config.source_locale = "en"
    config.target_locales = ["ru", "es", "fr", "de", "pl", "pt", "ja", "nl", "cs"]
  end
end
</file>

<file path="config/initializers/turbo_streams.rb">
Turbo::Streams::BroadcastStreamJob.queue_name = "critical"
</file>

<file path="config/initializers/upgrade.rb">
Rails.application.config.after_initialize do
  # Attempt to connect to Redis first before queueing, and fail early
  Sidekiq.redis { |conn| conn.info }
  # Queue upgrade jobs if Redis is good to go
  # and if in server mode
  if Rails.const_defined?(:Server)
    Upgrade::FixNilFileSizeValues.set(queue: :upgrade).perform_later
    Upgrade::BackfillDataPackages.set(queue: :upgrade).perform_later
    Upgrade::DisambiguateUsernamesJob.set(queue: :upgrade).perform_later
    Upgrade::UpdateActorsJob.set(queue: :upgrade).perform_later
    Upgrade::FixParentCollections.set(queue: :upgrade).perform_later
  end
rescue RedisClient::CannotConnectError
end
</file>

<file path="config/initializers/usage_reports.rb">
Rails.application.config.after_initialize do
  # Make sure the schedule is loaded correctly
  UsageReport.set_schedule!
rescue RedisClient::CannotConnectError
end
</file>

<file path="config/initializers/user_agent.rb">
Faraday.default_connection_options.headers = {"User-Agent" => "Manyfold/#{Rails.application.config.app_version.tr("v", "")}"}
</file>

<file path="config/initializers/warnings.rb">
SQLite3::ForkSafety.suppress_warnings!
</file>

<file path="config/initializers/wrap_parameters.rb">
# Be sure to restart your server when you modify this file.

# This file contains settings for ActionController::ParamsWrapper which
# is enabled by default.

# Enable parameter wrapping for JSON. You can disable this by setting :format to an empty array.
ActiveSupport.on_load(:action_controller) do
  wrap_parameters format: [:json]
end

# To enable root element in JSON for ActiveRecord objects.
# ActiveSupport.on_load(:active_record) do
#   self.include_root_in_json = true
# end
</file>

<file path="config/locales/active_admin/en.yml">
---
en:
  active_admin:
    dashboard: Dashboard
    exit: Exit admin interface
    recent_models: Recent models
</file>

<file path="config/locales/active_admin/nl.yml">
---
nl:
  active_admin:
    dashboard: Dashboard
    exit: Verlaat beheerdersinterface
    recent_models: Recente modellen
</file>

<file path="config/locales/collections/cs.yml">
---
cs:
  collections:
    collection:
      collections_button:
        label: Zobrazit podkolekce v %{name}
        remote_label:
      delete_button:
        label:
      edit_button:
        label: Upravit kolekci %{name}
      models_button:
        label: Zobrazit modely v %{name}
        remote_label:
      no_preview: Není k dispozici žádný náhled
    create:
      success: Nové údaje o kolekci uloženy.
    destroy:
      confirm:
      success: Kolekce smazána!
    form:
      notes:
        help_html: Můžete použít <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
    general:
      edit: Upravit kolekci
      new: Nová kolekce
    get_collection:
      unknown: Neznámé
    index:
      skip_collections: Přeskočit seznam kolekcí
    show:
      edit: Upravit kolekci
    unassigned:
      caption: Všechny modely mimo kolekci.
      name: Nepřiřazeno
    update:
      success: Detaily kolekce uloženy.
</file>

<file path="config/locales/collections/de.yml">
---
de:
  collections:
    collection:
      collections_button:
        label: Untersammlungen in %{name} anzeigen
        remote_label: Lokale Untersammlungen in %{name} anzeigen
      delete_button:
        label: Sammlung löschen %{name}
      edit_button:
        label: Sammlung bearbeiten %{name}
      models_button:
        label: Modelle in %{name} anzeigen
        remote_label: Lokale Modelle in %{name} anzeigen
      no_preview: keine Vorschau verfügbar
    create:
      success: Neue Kollektionsdetails gespeichert.
    destroy:
      confirm: Bist du sicher, dass du dieses Element entfernen möchtest? Es werden keine Dateien betroffen sein.
      success: Kollektion gelöscht!
    form:
      notes:
        help_html: Du kannst <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a> verwenden.
    general:
      edit: Kollektion bearbeiten
      new: Neue Kollektion
    get_collection:
      unknown: Unbekannt
    index:
      skip_collections: Sammlungsliste überspringen
    show:
      edit: Kollektion bearbeiten
    unassigned:
      caption: Alle Modelle, die sich nicht in einer Sammlung befinden.
      name: Nicht zugewiesen
    update:
      success: Kollektionsdetails gespeichert.
</file>

<file path="config/locales/collections/en.yml">
---
en:
  collections:
    collection:
      collections_button:
        label: Show sub-collections in %{name}
        remote_label: Show local sub-collections in %{name}
      delete_button:
        label: Delete collection %{name}
      edit_button:
        label: Edit collection %{name}
      models_button:
        label: Show models in %{name}
        remote_label: Show local models in %{name}
      no_preview: No preview availiable
    create:
      success: New collection details saved.
    destroy:
      confirm: Are you sure you want to remove this item? No files will be affected.
      success: Collection deleted!
    form:
      notes:
        help_html: You can use <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
    general:
      edit: Edit Collection
      new: New Collection
    get_collection:
      unknown: Unknown
    index:
      skip_collections: Skip collection list
    show:
      edit: Edit Collection
    unassigned:
      caption: All the models not in a collection.
      name: Unassigned
    update:
      success: Collection details saved.
</file>

<file path="config/locales/collections/es.yml">
---
es:
  collections:
    collection:
      collections_button:
        label: Mostrar subcolecciones en %{name}
        remote_label: Mostrar subcolecciones locales en %{name}
      delete_button:
        label: Borrar colección %{name}
      edit_button:
        label: Editar colección %{name}
      models_button:
        label: Mostrar modelos en %{name}
        remote_label: Mostrar modelos locales en %{name}
      no_preview: vista previa no disponible
    create:
      success: Detalles de la nueva colección guardados.
    destroy:
      confirm: "¿Está seguro de que desea eliminar este elemento? Ningún archivo se verá afectado."
      success: "¡Colección eliminada!"
    form:
      notes:
        help_html: Puedes utilizar <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
    general:
      edit: Editar colección
      new: Nueva colección
    get_collection:
      unknown: Desconocido
    index:
      skip_collections: Saltar lista de colección
    show:
      edit: Editar colección
    unassigned:
      caption: Todos los modelos sin una colección asignada.
      name: Sin asignar
    update:
      success: Detalles de la colección guardados.
</file>

<file path="config/locales/collections/fr.yml">
---
fr:
  collections:
    collection:
      collections_button:
        label: Montrer les sous-collections dans %{name}
        remote_label:
      delete_button:
        label:
      edit_button:
        label: Modifier la collection %{name}
      models_button:
        label: Voir les modèles dans %{name}
        remote_label:
      no_preview: pas d'aperçu disponible
    create:
      success: Détails de la nouvelle collection enregistrés.
    destroy:
      confirm:
      success: Collection supprimée !
    form:
      notes:
        help_html: Vous pouvez utiliser du <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
    general:
      edit: Modifier la collection
      new: Nouvelle collection
    get_collection:
      unknown: Inconnu
    index:
      skip_collections: Sauter la liste de collections
    show:
      edit: Modifier la collection
    unassigned:
      caption: Tous les modèles ne faisant pas partie d'une collection.
      name: Non attribué
    update:
      success: Détails de la collection sauvegardés.
</file>

<file path="config/locales/collections/ja.yml">
---
ja:
  collections:
    collection:
      collections_button:
        label: "%{name}]のサブコレクションを表示する"
        remote_label:
      delete_button:
        label:
      edit_button:
        label: コレクション%{name}を編集する
      models_button:
        label: "%{name}]のモデルを表示"
        remote_label:
      no_preview: プレビュー不可
    create:
      success: 新しいコレクションの詳細が保存された。
    destroy:
      confirm:
      success: コレクションは削除された！
    form:
      notes:
        help_html: <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdownが</a>使える。
    general:
      edit: コレクションを編集する
      new: 新作コレクション
    get_collection:
      unknown: 不明
    index:
      skip_collections: コレクションのリストをスキップ
    show:
      edit: コレクションを編集する
    unassigned:
      caption: コレクションにないすべてのモデル
      name: 未指定
    update:
      success: コレクションの詳細を保存された
</file>

<file path="config/locales/collections/nl.yml">
---
nl:
  collections:
    collection:
      collections_button:
        label: Toon subcollecties in %{name}
        remote_label:
      delete_button:
        label:
      edit_button:
        label: Bewerk collectie %{name}
      models_button:
        label: Toon modellen in %{name}
        remote_label:
      no_preview: Geen voorbeeld beschikbaar
    create:
      success: Nieuwe collectiedetails opgeslagen.
    destroy:
      confirm:
      success: Collectie verwijderd!
    form:
      notes:
        help_html: Je kunt <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a> gebruiken.
    general:
      edit: Collectie Bewerken
      new: Nieuwe Collectie
    get_collection:
      unknown: Onbekend
    index:
      skip_collections: Collectielijst overslaan
    show:
      edit: Collectie Bewerken
    unassigned:
      caption: Alle modellen die niet in een collectie zitten.
      name: Niet toegewezen
    update:
      success: Collectiedetails opgeslagen.
</file>

<file path="config/locales/collections/pl.yml">
---
pl:
  collections:
    collection:
      collections_button:
        label: Pokaż podkolekcję w %{name}
        remote_label:
      delete_button:
        label: Usuń kolekcję %{name}
      edit_button:
        label: Edytuj kolekcję %{name}
      models_button:
        label: Pokaż modele w %{name}
        remote_label: Pokaż lokalne modele w %{name}
      no_preview: Podgląd jest niedostępny
    create:
      success: Szczegóły nowej kolekcji zostały zapisane.
    destroy:
      confirm: Czy na pewno chcesz usunąć ten element? Nie będzie to miało wpływu na żadne pliki.
      success: Kolekcja usunięta!
    form:
      notes:
        help_html: Możesz używać <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
    general:
      edit: Edytuj Kolekcję
      new: Nowa Kolekcja
    get_collection:
      unknown: Nieznany
    index:
      skip_collections: Pomiń listę kolekcji
    show:
      edit: Edytuj Kolekcję
    unassigned:
      caption: Wszystkie modele spoza kolekcji.
      name: Nieprzypisany
    update:
      success: Szczegóły kolekcji zostały zapisane.
</file>

<file path="config/locales/creators/cs.yml">
---
cs:
  creators:
    create:
      success: Detaily nového autora uloženy.
    creator:
      collections_button:
        label:
        remote_label:
      delete_button:
        label:
      edit_button:
        label: Upravit autora%{name}
      models_button:
        label: Zobrazit modely podle %{name}
        remote_label: Zobrazit lokální modely podle %{name}
    destroy:
      confirm:
      success: Autor smazán!
    form:
      notes:
        help_html: Můžete použít <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
      slug:
        help: Používá se v adresách URL a jako uživatelské jméno Fediverse (je-li povoleno).
    general:
      edit: Upravit autora
      new: Nový autor
    get_creator:
      unknown: Neznámý
    index:
      skip_creators: Přeskočit seznam autorů
    show:
      edit: Upravit profil autora
    unassigned:
      caption: Všechny modely bez známého autora.
      name: Nepřiřazeno
    update:
      success: Detaily autora uloženy.
</file>

<file path="config/locales/creators/de.yml">
---
de:
  creators:
    create:
      success: Neue Erstellerdetails gespeichert.
    creator:
      collections_button:
        label: Sammlungen anzeigen von %{name}
        remote_label: Lokale Sammlungen anzeigen von %{name}
      delete_button:
        label: Ersteller löschen %{name}
      edit_button:
        label: Bearbeite ersteller %{name}
      models_button:
        label: Modelle von %{name} anzeigen
        remote_label: Lokale Modelle nach %{name} anzeigen
    destroy:
      confirm: Bist du sicher, dass du dieses Element entfernen möchtest? Es werden keine Dateien betroffen sein.
      success: Ersteller gelöscht!
    form:
      notes:
        help_html: Du kannst <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a> verwenden.
      slug:
        help: Wird in URLs und als Fediverse-Handle (falls aktiviert) verwendet.
    general:
      edit: Bearbeite den Ersteller
      new: Neuer Ersteller
    get_creator:
      unknown: Unbekannt
    index:
      skip_creators: Erstellerliste überspringen
    show:
      edit: Erstellerprofil bearbeiten
    unassigned:
      caption: Alle Modelle ohne bekannten Ersteller.
      name: Nicht zugewiesen
    update:
      success: Ersteller details gespeichert.
</file>

<file path="config/locales/creators/en.yml">
---
en:
  creators:
    create:
      success: New creator details saved.
    creator:
      collections_button:
        label: Show collections by %{name}
        remote_label: Show local collections by %{name}
      delete_button:
        label: Delete creator %{name}
      edit_button:
        label: Edit creator %{name}
      models_button:
        label: Show models by %{name}
        remote_label: Show local models by %{name}
    destroy:
      confirm: Are you sure you want to remove this item? No files will be affected.
      success: Creator deleted!
    form:
      notes:
        help_html: You can use <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
      slug:
        help: Used in URLs and as Fediverse handle (if enabled). Leave blank to autogenerate from name.
    general:
      edit: Edit Creator
      new: New Creator
    get_creator:
      unknown: Unknown
    index:
      skip_creators: Skip creator list
    show:
      edit: Edit Creator Profile
    unassigned:
      caption: All the models without a known creator.
      name: Unassigned
    update:
      success: Creator details saved.
</file>

<file path="config/locales/creators/es.yml">
---
es:
  creators:
    create:
      success: Nuevos detalles del creador guardados.
    creator:
      collections_button:
        label: Mostrar colecciones por %{name}
        remote_label: Mostrar colecciones locales por %{name}
      delete_button:
        label: Borrar creador %{name}
      edit_button:
        label: Editar creador %{name}
      models_button:
        label: Mostrar modelos de %{name}
        remote_label: Mostrar modelos locales por %{name}
    destroy:
      confirm: "¿Está seguro de que desea eliminar este elemento? Ningún archivo se verá afectado."
      success: "¡Creador eliminado!"
    form:
      notes:
        help_html: Puedes utilizar <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
      slug:
        help: Se utiliza en las URL y como nombre de usuario de Fediverse (si está activado).
    general:
      edit: Editar Creador
      new: Nuevo creador
    get_creator:
      unknown: Desconocido
    index:
      skip_creators: Omitir lista de creadores
    show:
      edit: Editar Perfil de Creador
    unassigned:
      caption: Todos los modelos sin creador asignado.
      name: Sin asignar
    update:
      success: Detalles del creador guardados.
</file>

<file path="config/locales/creators/fr.yml">
---
fr:
  creators:
    create:
      success: Détails du nouveau créateur sauvegardés.
    creator:
      collections_button:
        label:
        remote_label:
      delete_button:
        label:
      edit_button:
        label: Modifier le créateur %{name}
      models_button:
        label: Afficher les modèles par %{name}
        remote_label: Afficher les modèles locaux de %{name}
    destroy:
      confirm:
      success: Créateur supprimé !
    form:
      notes:
        help_html: Vous pouvez utiliser du <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
      slug:
        help:
    general:
      edit: Modifier le créateur
      new: Nouveau créateur
    get_creator:
      unknown: Inconnu
    index:
      skip_creators: Sauter la liste des créateurs
    show:
      edit: Modifier le profil du créateur
    unassigned:
      caption: Tous les modèles sans créateur connu.
      name: Non attribué
    update:
      success: Détails du créateur sauvegardés.
</file>

<file path="config/locales/creators/ja.yml">
---
ja:
  creators:
    create:
      success: 新しいクリエイターの詳細が保存されました。
    creator:
      collections_button:
        label:
        remote_label:
      delete_button:
        label:
      edit_button:
        label: クリエイター%{name}を編集する
      models_button:
        label: "%{name}のモデルを表示"
        remote_label: "%{name}によるローカルモデルの表示"
    destroy:
      confirm:
      success: クリエイターは削除された！
    form:
      notes:
        help_html: <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdownが</a>使える。
      slug:
        help: URLおよびFediverseハンドルネーム（有効な場合）として使用されます。
    general:
      edit: クリエイターを編集する
      new: 新作クリエイター
    get_creator:
      unknown: 不明
    index:
      skip_creators: クリエイターリストをスキップ
    show:
      edit: クリエイタープロフィールを編集
    unassigned:
      caption: クリエイターは不明の全てモデル。
      name: 未指定
    update:
      success: クリエイターの詳細が保存されました。
</file>

<file path="config/locales/creators/nl.yml">
---
nl:
  creators:
    create:
      success: Nieuwe makerdetails opgeslagen.
    creator:
      collections_button:
        label:
        remote_label:
      delete_button:
        label:
      edit_button:
        label: Bewerk maker %{name}
      models_button:
        label: Toon modellen van %{name}
        remote_label:
    destroy:
      confirm:
      success: Maker verwijderd!
    form:
      notes:
        help_html: Je kunt <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a> gebruiken.
      slug:
        help:
    general:
      edit: Maker Bewerken
      new: Nieuwe Maker
    get_creator:
      unknown: Onbekend
    index:
      skip_creators: Makerslijst overslaan
    show:
      edit: Makerprofiel Bewerken
    unassigned:
      caption: Alle modellen zonder bekende maker.
      name: Niet toegewezen
    update:
      success: Makerdetails opgeslagen.
</file>

<file path="config/locales/creators/pl.yml">
---
pl:
  creators:
    create:
      success: Szczegóły nowego twórcy zostały zapisane.
    creator:
      collections_button:
        label:
        remote_label:
      delete_button:
        label:
      edit_button:
        label: Edytuj twórcę %{name}
      models_button:
        label: Pokaż modele według %{name}
        remote_label: Pokaż lokalne modele według %{name}
    destroy:
      confirm: Czy na pewno chcesz usunąć ten element? Nie będzie to miało wpływu na żadne pliki.
      success: Twórca usunięty!
    form:
      notes:
        help_html: Możesz używać <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
      slug:
        help: Używany w adresach URL i jako nazwa użytkownika Fediverse (jeśli jest włączona).
    general:
      edit: Edytuj Twórcę
      new: Nowy Twórca
    get_creator:
      unknown: Nieznany
    index:
      skip_creators: Pomiń listę twórców
    show:
      edit: Edytuj Profil Twórcy
    unassigned:
      caption: Wszystkie modele bez znanego twórcy.
      name: Nieprzypisany
    update:
      success: Szczegóły twórcy zostały zapisane.
</file>

<file path="config/locales/devise/cs.yml">
---
cs:
  devise:
    confirmations:
      confirmed: Vaše e-mailová adresa byla úspěšně potvrzena.
      new:
        resend_confirmation_instructions: Opět poslat instrukce pro potvrzení
      send_instructions: Za několik minut obdržíte e-mail s instrukcemi k potvrzení Vašeho účtu.
      send_paranoid_instructions: Pokud Váš e-mail existuje v naší databázi, za několik minut obdržíte e-mail s pokyny o tom, jak potvrdit svůj účet.
    failure:
      already_authenticated: Jste již přihlášen(a).
      inactive: Váš účet ještě nebyl aktivován.
      invalid: Neplatné %{authentication_keys} nebo heslo.
      last_attempt: Máte ještě jeden pokus než bude Váš účet uzamčen.
      locked: Váš účet je uzamčen.
      not_approved: Váš účet ještě nebyl schválen moderátorem.
      not_found_in_database: Neplatné %{authentication_keys} nebo heslo.
      timeout: Vaše relace vypršela, přihlaste se znovu, pro pokračování.
      unauthenticated: Musíte se zaregistrovat nebo přihlásit, teprve poté budete moct pokračovat.
      unconfirmed: Musíte potvrdit svoji e-mailovou adresu, teprve poté budete moct pokračovat.
    mailer:
      confirmation_instructions:
        action: Potvrdit můj účet
        greeting: Vítejte, %{recipient}!
        instruction: 'Můžete potvrdit e-mailovou adresu pomocí níže uvedeného odkazu:'
        subject: Instrukce k potvrzení
      email_changed:
        greeting: Ahoj, %{recipient}!
        message: Kontaktovali jsme Vás, abychom Vás upozornili, že Vaše e-mailová adresa byla změněna na %{email}.
        message_unconfirmed: Kontaktujeme vás, abychom vám oznámili, že váš e-mail byl změněn na %{email}.
        subject: E-mail změněn
      password_change:
        greeting: Ahoj %{recipient}!
        message: Dáváme vám vědět, že Vaše heslo bylo změněno.
        subject: Heslo změněno
      reset_password_instructions:
        action: Změna hesla
        greeting: Ahoj %{recipient}!
        instruction: Někdo si vyžádal odkaz pro změnu Vašeho hesla. Změnu můžete provést pomocí odkazu níže.
        instruction_2: Pokud jste si toto nevyžádali, ignorujte tento e-mail.
        instruction_3: Vaše heslo se nezmění dokud neotevřete výše uvedený odkaz a nevytvoříte si nové heslo.
        subject: Instrukce k nastavení nového hesla
      unlock_instructions:
        action: Odblokovat můj účet
        greeting: Ahoj %{recipient}!
        instruction: 'Účet odblokujete kliknutím na níže uvedený odkaz:'
        message: Váš účet byl zablokován pro nadměrný počet neúspěšných pokusů o přihlášení.
        subject: Instrukce k odemknutí účtu
    omniauth_callbacks:
      failure: Není možná autentizace z %{kind}, protože "%{reason}".
      success: Úspěšná autentizace z účtu %{kind}.
    passwords:
      edit:
        change_my_password: Změnit mé heslo
        change_your_password: Změna Vašeho hesla
        confirm_new_password: Potvrdit nové heslo
        new_password: Nové heslo
      new:
        forgot_your_password: Zapomněli jste heslo?
        send_me_reset_password_instructions: Poslat instrukce pro obnovení hesla
      no_token: Na tuto stránku se nelze dostat jinak než z e-mailu pro resetování hesla. Pokud jste přišli z takového e-mailu, přesvědčte se že jste použili celou URL adresu.
      send_instructions: Za několik minut obdržíte e-mail s instrukcemi pro nastavení nového hesla.
      send_paranoid_instructions: Pokud Vaše e-mailová adresa existuje v naší databázi, za několik minut obdržíte e-mail s instrukcemi pro nastavení nového hesla.
      updated: Vaše heslo bylo změněno. Nyní jste přihlášen(a).
      updated_not_active: Vaše heslo bylo změněno.
    registrations:
      destroyed: Mějte se! Váš účet byl úspěšně zrušen. Doufáme, že se brzy opět uvidíme.
      edit:
        are_you_sure: Jste si jist(á)?
        cancel_my_account: Zrušit můj účet
        confirm_deletion: Opravdu chcete svůj účet odstranit?
        contact_info: Kontaktní informace
        current_password_help: Aktuální heslo vyžadované pro zabezpečení
        currently_waiting_confirmation_for_email: 'Čeká na potvrzení pro: %{email}'
        danger_zone: Nebezpečná zóna!
        leave_blank_if_you_don_t_want_to_change_it: nevyplňujte, pokud nechcete měnit
        security: Zabezpečení
        social: Social
        submit: Uložení změn
        title: Moje nastavení
        unhappy: Nespokojení?
        update: Aktualizovat
        we_need_your_current_password_to_confirm_your_changes: k potvrzení změn potřebujeme vaše aktuální heslo
      file_list_settings:
        heading: Seznamy souborů
        hide_presupported_versions:
          label: Kombinovat propojené nepodporované a předběžně podporované soubory
        summary: Ovládání zobrazení seznamů souborů modelů
      first_use:
        email_help: Nikdy se nezobrazuje veřejně; používá se pouze pro přihlašovací a bezpečnostní e-maily.
        guidance: Při prvním použití je třeba nastavit uživatelské jméno, kontaktní e-mail a heslo hlavního administrátora. Pokud používáte jednouživatelský režim, nemusíte tyto údaje pro přihlášení běžně zadávat, ale ve víceuživatelském režimu bez nich nebudete mít přístup k aplikaci Manyfold.
        password:
          help_html: Ve výchozím nastavení požadujeme silné heslo; chcete-li v soukromé instanci povolit jednodušší heslo, nastavte proměnnou prostředí <a href="https://manyfold.app/sysadmin/configuration.html#min_password_score">MIN_PASSWORD_SCORE</a>.
        submit: Uložit
        title: Nastavení
        username_help: Jedinečné uživatelské jméno; použijte předem vygenerované nebo si zvolte vlastní.
      general_settings:
        heading: Obecné
        interface_language:
          autodetect: Použít nastavení prohlížeče
          help: 'Poznámka: některé nepřeložené texty se mohou stále zobrazovat v angličtině.'
          label: Jazyk rozhraní
        sensitive_content:
          help: Ovlivňuje způsob zobrazení obsahu označeného jako "citlivý"
          hide: Úplně skrýt
          label: Citlivý obsah
          mask: Rozmazání v seznamech
          show: Zobrazit normálně
      new:
        approval_help: Po vytvoření účtu jej ručně zkontrolují naši moderátoři. Po dokončení schvalování Vám dáme vědět a budete se moci přihlásit.
        creators:
          name:
            help:
            label:
          slug:
            help:
            help_fedi:
        details: Vaše údaje
        rules: Pravidla serveru
        rules_agree: Registrací účtu souhlasíte s dodržováním výše uvedených pravidel.
        sign_up: Zaregistrovat se
        username:
          help:
      pagination_settings:
        collections:
          label: Stránkovat kolekce
        creators:
          label: Stránkovat autory
        description: Na stránkách se seznamem zobrazit pouze určitý počet položek najednou, nikoli vše najednou. To může urychlit načítání.
        heading: Stránkování
        models:
          label: Stránkovat modelů
        per_page:
          label: Položky na stránku
      problem_settings:
        description: Změnit závažnost zjištěných problémů nebo je zcela ignorovat.
        title: Detekce problémů
      renderer_settings:
        auto_load_max_size:
          always: Vždy
          label: Automaticky načítat náhledy
          never: Nikdy
          under_1024: Až 1024 MB
          under_128: Až 128 MB
          under_16: Až 16 MB
          under_2: Až 2 MB
          under_256: Až 256 MB
          under_32: Až 32 MB
          under_4: Až 4 MB
          under_512: Až 512 MB
          under_64: Až 64 MB
          under_8: Až 8 MB
        background_colour:
          label: Barva pozadí
        description: Přizpůsobení nastavení pro 3D náhledy.
        enable_pan_zoom:
          label: Povolit ovládání posunu/zvětšení
        grid_width:
          label: Velikost podlahové roviny (mm)
        heading: Renderer
        object_colour:
          label: Barva objektu
        render_style:
          label: Styl vykreslování
          lambert: Hladké stínování
          normals: Směr povrchu
          original:
          shadowed: Realistické se stíny
        show_grid:
          label: Ukázat podlahovou rovinu
      signed_up: Vítejte! Úspěšně jste se zaregistroval(a).
      signed_up_but_inactive: Úspěšně jste se zaregistroval(a). Bohužel se nemůžete přihlásit, protože Váš účet ještě není aktivován.
      signed_up_but_locked: Úspěšně jste se zaregistroval(a). Bohužel se nemůžete přihlásit, protože Váš účet je zamknutý.
      signed_up_but_unconfirmed: Byl vám zaslán potvrzovací e-mail. Pro dokončení klikněte na aktivační odkaz zaslaný na Váš e-mail.
      tag_cloud_settings:
        heading: Štítkový cloud
        heatmap:
          label: Zobrazení počtu štítků pro jednotlivé štítky
        keypair:
          label: Použít oddělovač pro reprezentaci dvojic klíčů
        sorting:
          alphabetical: abecední
          frequency: frekvence
          label: Třídění
        threshold:
          label: Minimální počet štítků pro zobrazení
      update:
        setup_complete: Nastavení dokončeno!
      update_needs_confirmation: Úspěšně jste aktualizovali svůj účet, ale ještě musíte ověřit svou novou e-mailovou adresu. Zkontrolujte svou schránku a klikněte na odkaz pro dokončení ověření Vaší nové e-mailové adresy.
      updated: Váš účet byl úspěšně aktualizován.
      updated_but_not_signed_in: Vaše nastavení bylo úspěšně aktualizováno, ale protože bylo změněno Vaše heslo, musíte se znovu přihlásit.
      user:
        signed_up_but_not_approved: Úspěšně jste se zaregistrovali. Váš účet brzy zkontroluje moderátor a poté se budete moci přihlásit.
    sessions:
      already_signed_out: Úspěšně odhlášen(a).
      new:
        sign_in: Přihlásit se
      signed_in: Úspěšně přihlášen(a).
      signed_out: Úspěšně odhlášen(a).
    shared:
      links:
        back: Zpět
        didn_t_receive_confirmation_instructions: Nedostali jste instrukce pro potvrzení?
        didn_t_receive_unlock_instructions: Nedostali jste instrukce pro odblokování?
        forgot_your_password: Zapomněli jste heslo?
        sign_in: Přihlásit se
        sign_in_with_provider: Přihlásit se přes %{provider}
        sign_up: Zaregistrovat se
      minimum_password_length:
        one: "(minimálně %{count} znak)"
        other: "(minimálně %{count} znaků)"
    unlocks:
      new:
        resend_unlock_instructions: Znovu odeslat instrukce pro odblokování
      send_instructions: Za několik minut obdržíte e-mail s instrukcemi, jak odemknout svůj účet.
      send_paranoid_instructions: Pokud Váš e-mail existuje v naší databázi, za několik minut obdržíte e-mail s instrukcemi pro odemknutí účtu.
      unlocked: Váš účet byl úspěšně odblokován.
</file>

<file path="config/locales/devise/de.yml">
---
de:
  devise:
    confirmations:
      confirmed: Deine E-Mail-Adresse wurde erfolgreich bestätigt.
      new:
        resend_confirmation_instructions: Anleitung zur Bestätigung noch einmal senden
      send_instructions: Du erhältst in wenigen Minuten eine E-Mail, mit der du deine Registrierung bestätigen kannst.
      send_paranoid_instructions: Falls deine E-Mail-Adresse in unserer Datenbank existiert, erhältst du in wenigen Minuten eine E-Mail, mit der du deine Registrierung bestätigen kannst.
    failure:
      already_authenticated: Du bist bereits angemeldet.
      inactive: Dein Konto ist noch nicht aktiviert.
      invalid: "%{authentication_keys} oder Passwort ungültig."
      last_attempt: Du hast einen weiteren Versuch, bevor dein Konto vorübergehend gesperrt wird.
      locked: Dein Konto ist für eine Stunde gesperrt; versuche es später noch einmal.
      not_approved: Dein Konto ist noch nicht von einem Moderator genehmigt worden.
      not_found_in_database: "%{authentication_keys} oder Passwort ungültig."
      timeout: Deine Sitzung ist abgelaufen. Bitte melden dich erneut an.
      unauthenticated: Du musst dich anmelden oder registrieren, bevor du fortfahren kannst.
      unconfirmed: Du musst dein Konto bestätigen, bevor du fortfahren kannst.
    mailer:
      confirmation_instructions:
        action: Mein Konto bestätigen
        greeting: Willkommen %{recipient}!
        instruction: 'Folge dem untenstehenden Link, um dein Konto zu bestätigen:'
        subject: Anleitung zur Bestätigung deines Kontos
      email_changed:
        greeting: Hallo %{recipient}!
        message: Wir kontaktieren dich, um dich darüber zu informieren, dass deine E-Mail-Adresse zu %{email} geändert wurde.
        message_unconfirmed: Wir kontaktieren dich, um dich darüber zu informieren, dass deine Email Adresse zu %{email} geändert wurde.
        subject: E-Mail-Adresse geändert
      password_change:
        greeting: Hallo %{recipient}!
        message: Wir kontaktieren dich, um dich darüber zu informieren, dass dein Passwort geändert wurde.
        subject: Passwort geändert
      reset_password_instructions:
        action: Mein Passwort ändern
        greeting: Hallo %{recipient}!
        instruction: Jemand hat einen Link angefordert, um dein Passwort zu ändern. Klicke auf den unten aufgeführten Link um dein Passwort zu ändern.
        instruction_2: Bitte ignoriere diese E-Mail, wenn du kein neues Passwort angefordert haben.
        instruction_3: Das Passwort wird nicht geändert, bis du den obenstehenden Link aufgerufen hast, und ein neues Passwort festgelegt hast.
        subject: Anleitung zum zurücksetzen deines Passworts
      unlock_instructions:
        action: Mein Konto entsperren
        greeting: Hallo %{recipient}!
        instruction: 'Folge dem untenstehenden Link, um dein Konto zu entsperren:'
        message: Dein Konto wurde aufgrund einer großen Anzahl von fehlgeschlagenen Anmeldeversuchen gesperrt.
        subject: Anleitung zur Konto-Freischaltung
    omniauth_callbacks:
      failure: Du konnten nicht mit deinem %{kind}-Konto angemeldet werden, weil "%{reason}".
      success: Du hast sich erfolgreich mit deinem %{kind}-Konto angemeldet.
    passwords:
      edit:
        change_my_password: Ändere mein Passwort
        change_your_password: Ändere dein passwort
        confirm_new_password: Neues Passwort bestätigen
        new_password: Neues Passwort
      new:
        forgot_your_password: Passwort vergessen?
        send_me_reset_password_instructions: Schicke mir die Anleitung, um mein Passwort zurückzusetzen
      no_token: Du kannst dich nicht auf dieser Seite anmelden, wenn du nicht von einer Passwort-Zurücksetzen-E-Mail kommst. Wenn du von solch einer E-Mail kommst, überprüfen bitte, ob du die gesamte URL kopiert hast.
      send_instructions: Du erhältst in wenigen Minuten eine E-Mail mit einer Anleitung, wie du dein Passwort zurücksetzen kannst.
      send_paranoid_instructions: Falls deine E-Mail-Adresse in unserer Datenbank existiert, erhältst du in wenigen Minuten eine E-Mail mit einer Anleitung, wie du dein Passwort zurücksetzen können.
      updated: Dein Passwort wurde geändert. Du sind jetzt angemeldet.
      updated_not_active: Dein Passwort wurde erfolgreich geändert.
    registrations:
      destroyed: Dein Konto wurde gelöscht. Wir hoffen, dass wir dich bald wiedersehen.
      edit:
        are_you_sure: Bist du sicher?
        cancel_my_account: Mein Konto löschen
        confirm_deletion: Bist du sicher, dass du dein Konto löschen möchtest?
        contact_info: Kontaktinformationen
        current_password_help: Aktuelles Passwort aus Sicherheitsgründen erforderlich
        currently_waiting_confirmation_for_email: Warte auf Bestätigung von %{email}.
        danger_zone: Achtung!
        leave_blank_if_you_don_t_want_to_change_it: freilassen, wenn du das nicht ändern willst
        security: Sicherheit
        social: Soziales
        submit: Änderungen speichern
        title: Meine Einstellungen
        unhappy: Unzufrieden?
        update: Aktualisieren
        we_need_your_current_password_to_confirm_your_changes: wir benötigen dein aktuelles Passwort, um die Änderung zu bestätigen
      file_list_settings:
        heading: Datei-Listen
        hide_presupported_versions:
          label: Kombiniere verknüpfte Dateien mit und ohne Support struktur.
        summary: Steuere, wie Modelle und Datei Listen angezeigt werden
      first_use:
        email_help: Wird nie öffentlich angezeigt; wird nur für Anmelde- und Kontosicherheits-E-Mails verwendet.
        guidance: Bei der ersten Verwendung musst du einen Accountnamen, eine Kontakt-E-Mail und ein Passwort für den Administrator festlegen. Im Einzelbenutzermodus musst du diese Angaben normalerweise nicht machen, um dich anzumelden, aber im Mehrbenutzermodus kannst du ohne diese Angaben nicht auf Manyfold zugreifen.
        password:
          help_html: Wir verlangen standardmäßig ein starkes Passwort; um ein einfacheres Passwort auf einer privaten Instanz zu erlauben, setze die Umgebungsvariable <a href="https://manyfold.app/sysadmin/configuration.html#min_password_score">MIN_PASSWORD_SCORE</a>.
        submit: Speichern
        title: Einrichtung
        username_help: Einen eindeutigen Accountnamen; verwende den vordefinierten oder wähle einen eigenen.
      general_settings:
        heading: Allgemein
        interface_language:
          autodetect: Browsereinstellungen verwenden
          help: 'Hinweis: Einige nicht übersetzte Texte werden möglicherweise noch auf Englisch angezeigt.'
          label: Sprache der Oberfläche
        sensitive_content:
          help: Beeinflusst die Anzeige von als "Möglicherweise verstörender Inhalt" gekennzeichneten Inhalten
          hide: Vollständig ausblenden
          label: Möglicherweise verstörender Inhalt
          mask: In der Übersicht Zensieren
          show: Ganz normal anzeigen
      new:
        approval_help: Nachdem du dein Konto erstellt hast, wird es manuell von unseren Moderatoren überprüft. Wir werden dich benachrichtigen, wenn die Prüfung abgeschlossen ist und dich anmelden kannst.
        creators:
          name:
            help:
            label:
          slug:
            help:
            help_fedi:
        details: Deine Details
        rules: Server-Regeln
        rules_agree: Indem du dich für ein Konto anmelden, erklärst du die oben genannten Regeln einzuhalten.
        sign_up: Account erstellen
        username:
          help:
      pagination_settings:
        collections:
          label: Kollektionen auf Seiten verteilen
        creators:
          label: Ersteller auf Seiten verteilen
        description: Zeige auf der Listenseiten immer nur eine bestimmte Anzahl von Elementen an, anstatt alles auf einmal. Dies kann das Laden der Seiten beschleunigen.
        heading: Seitenaufteilung
        models:
          label: Modelle auf Seiten verteilen
        per_page:
          label: Elemente Pro seite
      problem_settings:
        description: Ändere den Schweregrad der erkannten Probleme oder ignoriere sie ganz.
        title: Problem-Erkennung
      renderer_settings:
        auto_load_max_size:
          always: Immer
          label: Automatisches Laden von Vorschaubildern
          never: Niemals
          under_1024: Bis zu 1024 MB
          under_128: Bis zu 128 MB
          under_16: Bis zu 16 MB
          under_2: Bis zu 2 MB
          under_256: Bis zu 256 MB
          under_32: Bis zu 32 MB
          under_4: Bis zu 4 MB
          under_512: Bis zu 512 MB
          under_64: Bis zu 64 MB
          under_8: Bis zu 8 MB
        background_colour:
          label: Hintergrundfarbe
        description: Passe die Einstellungen für die 3D-Vorschau an.
        enable_pan_zoom:
          label: Zoom aktivieren
        grid_width:
          label: Größe der Grundplatte (mm)
        heading: Renderer
        object_colour:
          label: Objekt Farbe
        render_style:
          label: Rendering-Stil
          lambert: Glatt schattiert
          normals: Richtung der Oberfläche
          original: Original (aus Datei)
          shadowed: Realistisch mit Schatten
        show_grid:
          label: Grundplatte anzeigen
      signed_up: Du hast dich erfolgreich registriert.
      signed_up_but_inactive: Du hast sich erfolgreich registriert. Wir konnten dich jedoch nicht anmelden, weil dein Konto noch nicht aktiviert ist.
      signed_up_but_locked: Du hast sich erfolgreich registriert. Wir konnten dich jedoch nicht anmelden, weil dein Konto gesperrt ist.
      signed_up_but_unconfirmed: Du erhältst in wenigen Minuten eine E-Mail mit einem Link für die Bestätigung deiner Registrierung. Klicke auf den Link um dein Konto zu aktivieren.
      tag_cloud_settings:
        heading: Tag Liste
        heatmap:
          label: Tag-Anzahl für einzelne Tags anzeigen
        keypair:
          label: Begrenzungszeichen zur Darstellung von Schlüsselpaaren verwenden
        sorting:
          alphabetical: alphabetisch
          frequency: frequenz
          label: Sortieren
        threshold:
          label: Mindestanzahl der Tags, um Angezeigt zu werden
      update:
        setup_complete: Einrichtung abgeschlossen!
      update_needs_confirmation: Deine Account-Daten wurden erfolgreich aktualisiert, aber du musst deine neue E-Mail-Adresse bestätigen. Du erhältst in wenigen Minuten eine E-Mail, mit der du die Änderungen bestätigen kannst.
      updated: Deine Einstellungen wurden erfolgreich aktualisiert.
      updated_but_not_signed_in: Deine Einstellungen wurden erfolgreich aktualisiert, aber da sich dein Passwort geändert hat, musst du dich erneut anmelden
      user:
        signed_up_but_not_approved: Du hast dich erfolgreich angemeldet. Ein Moderator wird dein Konto in Kürze überprüfen. Danach kannst du dich anmelden.
    sessions:
      already_signed_out: Erfolgreich abgemeldet.
      new:
        sign_in: Anmelden
      signed_in: Erfolgreich angemeldet.
      signed_out: Erfolgreich abgemeldet.
    shared:
      links:
        back: Zurück
        didn_t_receive_confirmation_instructions: Keine Anleitung zur Bestätigung erhalten?
        didn_t_receive_unlock_instructions: Keine Anleitung zum Entsperren erhalten?
        forgot_your_password: Passwort vergessen?
        sign_in: Anmelden
        sign_in_with_provider: Mit %{provider} anmelden
        sign_up: Account erstellen
      minimum_password_length:
        one: "(mindestens %{count} Zeichen)"
        other: "(mindestens %{count} Zeichen)"
    unlocks:
      new:
        resend_unlock_instructions: Anleitung zum Entsperren noch mal schicken
      send_instructions: Du erhältst in wenigen Minuten eine E-Mail mit einer Anleitung, wie du dein Konto entsperren kannst.
      send_paranoid_instructions: Falls deine E-Mail-Adresse registriert ist, erhältst du in wenigen Minuten eine E-Mail, mit einer Anleitung, wie du dein Konto entsperren kannst.
      unlocked: Dein Konto wurde entsperrt. Bitte melden dich an, um fortzufahren.
</file>

<file path="config/locales/devise/en.yml">
---
en:
  devise:
    confirmations:
      confirmed: Your email address has been successfully confirmed.
      new:
        resend_confirmation_instructions: Resend confirmation instructions
      send_instructions: You will receive an email with instructions for how to confirm your email address in a few minutes.
      send_paranoid_instructions: If your email address exists in our database, you will receive an email with instructions for how to confirm your email address in a few minutes.
    failure:
      already_authenticated: You are already signed in.
      inactive: Your account is not activated yet.
      invalid: Invalid %{authentication_keys} or password.
      last_attempt: You have one more attempt before your account is temporarily locked.
      locked: Your account is locked for an hour; try again later.
      not_approved: Your account has not yet been approved by a moderator.
      not_found_in_database: Invalid %{authentication_keys} or password.
      timeout: Your session expired. Please sign in again to continue.
      unauthenticated: You need to sign in or sign up before continuing.
      unconfirmed: You have to confirm your email address before continuing.
    mailer:
      confirmation_instructions:
        action: Confirm my account
        greeting: Welcome %{recipient}!
        instruction: 'You can confirm your account email through the link below:'
        subject: Confirmation instructions
      email_changed:
        greeting: Hello %{recipient}!
        message: We're contacting you to notify you that your email has been changed to %{email}.
        message_unconfirmed: We're contacting you to notify you that your email is being changed to %{email}.
        subject: Email Changed
      password_change:
        greeting: Hello %{recipient}!
        message: We're contacting you to notify you that your password has been changed.
        subject: Password Changed
      reset_password_instructions:
        action: Change my password
        greeting: Hello %{recipient}!
        instruction: Someone has requested a link to change your password. You can do this through the link below.
        instruction_2: If you didn't request this, please ignore this email.
        instruction_3: Your password won't change until you access the link above and create a new one.
        subject: Reset password instructions
      unlock_instructions:
        action: Unlock my account
        greeting: Hello %{recipient}!
        instruction: 'Click the link below to unlock your account:'
        message: Your account has been locked due to an excessive number of unsuccessful sign in attempts.
        subject: Unlock instructions
    omniauth_callbacks:
      failure: Could not authenticate you from %{kind} because "%{reason}".
      success: Successfully authenticated from %{kind} account.
    passwords:
      edit:
        change_my_password: Change my password
        change_your_password: Change your password
        confirm_new_password: Confirm new password
        new_password: New password
      new:
        forgot_your_password: Forgot your password?
        send_me_reset_password_instructions: Send me reset password instructions
      no_token: You can't access this page without coming from a password reset email. If you do come from a password reset email, please make sure you used the full URL provided.
      send_instructions: You will receive an email with instructions on how to reset your password in a few minutes.
      send_paranoid_instructions: If your email address exists in our database, you will receive a password recovery link at your email address in a few minutes.
      updated: Your password has been changed successfully. You are now signed in.
      updated_not_active: Your password has been changed successfully.
    registrations:
      destroyed: Bye! Your account has been successfully cancelled. We hope to see you again soon.
      edit:
        are_you_sure: Are you sure?
        cancel_my_account: Delete my account
        confirm_deletion: Are you sure you want to delete your account?
        contact_info: Contact information
        current_password_help: Current password required for security
        currently_waiting_confirmation_for_email: 'Awaiting confirmation for: %{email}'
        danger_zone: Danger zone!
        leave_blank_if_you_don_t_want_to_change_it: leave blank if you don't want to change it
        security: Security
        social: Social
        submit: Save changes
        title: My Settings
        unhappy: Unhappy?
        update: Update
        we_need_your_current_password_to_confirm_your_changes: we need your current password to confirm your changes
      file_list_settings:
        heading: File Lists
        hide_presupported_versions:
          label: Combine linked unsupported and presupported files
        summary: Control how model file lists are displayed
      first_use:
        email_help: Never shown publicly; only used for login and account security emails.
        guidance: On first use, you need to set an account name, contact email and password for the main administrator account. If you're running single-user mode, you will not normally need to enter these details to sign in, but in multiuser mode you will not be able to access Manyfold without them.
        password:
          help_html: We ask for a strong password by default; to allow a simpler one on a private instance, set the <a href="https://manyfold.app/sysadmin/configuration.html#min_password_score">MIN_PASSWORD_SCORE</a> environment variable.
        submit: Save
        title: Setup
        username_help: A unique account name; use the pregenerated one, or choose your own.
      general_settings:
        heading: General
        interface_language:
          autodetect: Use browser settings
          help: 'Note: some untranslated text may still show in English.'
          label: Interface language
        sensitive_content:
          help: Affects how content marked as "sensitive" will be displayed
          hide: Hide completely
          label: Sensitive Content
          mask: Blur in lists
          show: Show as normal
      new:
        approval_help: After creating your account, it will be manually reviewed by our moderators. We'll let you know when approval is complete and you can sign in.
        creators:
          name:
            help: This will be shown publicly, as the title of your Creator profile.
            label: Creator name
          slug:
            help: A short username for your creator profile, used in the URL.
            help_fedi: A short username for your creator profile, used in the URL and Fediverse address.
        details: Your Details
        rules: Server Rules
        rules_agree: By signing up for an account, you agree to abide by the rules above.
        sign_up: Create account
        username:
          help: A short username for your personal account; if later you make a creator profile for publishing your models, it will need a different account name.
      pagination_settings:
        collections:
          label: Paginate collections
        creators:
          label: Paginate creators
        description: Show only a certain number of items at a time in list pages, rather than everything at once. This can make things quicker to load.
        heading: Pagination
        models:
          label: Paginate models
        per_page:
          label: Items per page
      problem_settings:
        description: Change the severity of detected problems, or ignore them completely.
        title: Problem Detection
      renderer_settings:
        auto_load_max_size:
          always: Always
          label: Automatically load previews
          never: Never
          under_1024: Up to 1024 MB
          under_128: Up to 128 MB
          under_16: Up to 16 MB
          under_2: Up to 2 MB
          under_256: Up to 256 MB
          under_32: Up to 32 MB
          under_4: Up to 4 MB
          under_512: Up to 512 MB
          under_64: Up to 64 MB
          under_8: Up to 8 MB
        background_colour:
          label: Background colour
        description: Customise settings for 3d rendered previews.
        enable_pan_zoom:
          label: Enable pan/zoom controls
        grid_width:
          label: Ground plane size (mm)
        heading: Renderer
        object_colour:
          label: Object colour
        render_style:
          label: Rendering style
          lambert: Smooth shading
          normals: Surface direction
          original: Original (from file)
          shadowed: Realistic with shadows
        show_grid:
          label: Show ground plane
      signed_up: Welcome! You have signed up successfully.
      signed_up_but_inactive: You have signed up successfully. However, we could not sign you in because your account is not yet activated.
      signed_up_but_locked: You have signed up successfully. However, we could not sign you in because your account is locked.
      signed_up_but_unconfirmed: A message with a confirmation link has been sent to your email address. Please follow the link to activate your account.
      tag_cloud_settings:
        heading: Tag Cloud
        heatmap:
          label: Display tag count for individual tags
        keypair:
          label: Use delimiter to represent keypairs
        sorting:
          alphabetical: alphabetical
          frequency: frequency
          label: Sorting
        threshold:
          label: Minimum count of tag for display
      update:
        setup_complete: Setup complete!
      update_needs_confirmation: You updated your account successfully, but we need to verify your new email address. Please check your email and follow the confirmation link to confirm your new email address.
      updated: Your settings have been updated successfully.
      updated_but_not_signed_in: Your settings have been updated successfully, but since your password was changed, you need to sign in again.
      user:
        signed_up_but_not_approved: You have signed up successfully. A moderator will review your account soon, after which you will be able to sign in.
    sessions:
      already_signed_out: Signed out successfully.
      new:
        sign_in: Sign in
      signed_in: Signed in successfully.
      signed_out: Signed out successfully.
    shared:
      links:
        back: Back
        didn_t_receive_confirmation_instructions: Didn't receive confirmation instructions?
        didn_t_receive_unlock_instructions: Didn't receive unlock instructions?
        forgot_your_password: Forgot your password?
        sign_in: Sign in
        sign_in_with_provider: Sign in with %{provider}
        sign_up: Create account
      minimum_password_length:
        one: "(%{count} character minimum)"
        other: "(%{count} characters minimum)"
    unlocks:
      new:
        resend_unlock_instructions: Resend unlock instructions
      send_instructions: You will receive an email with instructions for how to unlock your account in a few minutes.
      send_paranoid_instructions: If your account exists, you will receive an email with instructions for how to unlock it in a few minutes.
      unlocked: Your account has been unlocked successfully. Please sign in to continue.
</file>

<file path="config/locales/devise/es.yml">
---
es:
  devise:
    confirmations:
      confirmed: Tu cuenta ha sido confirmada correctamente.
      new:
        resend_confirmation_instructions: Reenviar instrucciones de confirmación
      send_instructions: Vas a recibir un correo con instrucciones sobre cómo confirmar tu cuenta en unos minutos.
      send_paranoid_instructions: Si tu correo existe en nuestra base de datos, en unos minutos recibirás un correo con instrucciones sobre cómo confirmar tu cuenta.
    failure:
      already_authenticated: Ya estás registrado.
      inactive: Tu cuenta aún no ha sido activada.
      invalid: "%{authentication_keys} o contraseña incorrectos."
      last_attempt: Tienes un intento más antes de que tu cuenta quede bloqueada.
      locked: Su cuenta ha sido bloqueada durante una hora. Inténtelo más tarde.
      not_approved: Tu cuenta aún no ha sido aprobada por un moderador.
      not_found_in_database: "%{authentication_keys} o contraseña incorrectos."
      timeout: Tu sesión expiró. Por favor, inicia sesión nuevamente para continuar.
      unauthenticated: Tienes que iniciar sesión o registrarte para poder continuar.
      unconfirmed: Tienes que confirmar tu cuenta para poder continuar.
    mailer:
      confirmation_instructions:
        action: Confirmar mi cuenta
        greeting: "¡Bienvenido %{recipient}!"
        instruction: 'Usted puede confirmar el correo electrónico de su cuenta a través de este enlace:'
        subject: Instrucciones de confirmación
      email_changed:
        greeting: "¡Hola %{recipient}! "
        message: Nos ponemos en contactando contigo para notificarle que su email ha sido modificada a %{email}.
        message_unconfirmed: Nos ponemos en contacto contigo para notificarle que su email cambiará a %{email}.
        subject: Email cambiado
      password_change:
        greeting: "¡Hola %{recipient}!"
        message: Nos ponemos en contacto contigo para notificarle que su contraseña ha sido modificada.
        subject: Contraseña modificada
      reset_password_instructions:
        action: Cambiar mi contraseña
        greeting: "¡Hola %{recipient}!"
        instruction: Alguien ha solicitado un enlace para cambiar su contraseña, lo que se puede realizar a través del siguiente enlace.
        instruction_2: Si usted no lo ha solicitado, por favor ignore este correo electrónico.
        instruction_3: Su contraseña no será modificada hasta que usted acceda al enlace y cree una nueva.
        subject: Instrucciones para restablecer la contraseña
      unlock_instructions:
        action: Desbloquear mi cuenta
        greeting: "¡Hola %{recipient}!"
        instruction: 'Haga click en el siguiente enlace para desbloquear su cuenta:'
        message: Tu cuenta ha sido bloqueada debido a un número excesivo de intentos de inicio de sesión fallidos.
        subject: Instrucciones para desbloquear
    omniauth_callbacks:
      failure: No se pudo verificar su cuenta %{kind} porque "%{reason}".
      success: Has sido autorizado correctamente en su cuenta %{kind}.
    passwords:
      edit:
        change_my_password: Cambiar mi contraseña
        change_your_password: Cambie su contraseña
        confirm_new_password: Confirme la nueva contraseña
        new_password: Nueva contraseña
      new:
        forgot_your_password: "¿Ha olvidado su contraseña?"
        send_me_reset_password_instructions: Enviar instrucciones para resetear mi contraseña
      no_token: No puedes acceder a esta página si no es a través de un enlace para resetear tu contraseña. Si has llegado hasta aquí desde el email para resetear tu contraseña, por favor asegúrate de que la URL introducida es la proporcionada y esté completa.
      send_instructions: Recibirás un correo con instrucciones sobre cómo resetear tu contraseña en unos minutos.
      send_paranoid_instructions: Si su email existe en nuestra base de datos, recibirá un enlace para recuperar su contraseña en unos minutos.
      updated: Su contraseña ha sido modificada correctamente. Ahora has iniciado sesión.
      updated_not_active: Tu contraseña ha sido modificada correctamente.
    registrations:
      destroyed: "¡Adiós! Tu cuenta ha sido cancelada correctamente. Esperamos verte pronto."
      edit:
        are_you_sure: "¿Está usted seguro?"
        cancel_my_account: Eliminar mi cuenta
        confirm_deletion: "¿Seguro que quieres eliminar tu cuenta?"
        contact_info: Información de contacto
        current_password_help: Se requiere la contraseña actual por razones de seguridad
        currently_waiting_confirmation_for_email: 'Esperando confirmación para: %{email} '
        danger_zone: "¡Zona peligrosa!"
        leave_blank_if_you_don_t_want_to_change_it: dejar en blanco si no desea modificarlo
        security: Seguridad
        social: Social
        submit: Guardar cambios
        title: Configuración de la cuenta
        unhappy: "¿Descontento?"
        update: Actualizar
        we_need_your_current_password_to_confirm_your_changes: necesitamos su contraseña actual para confirmar los cambios
      file_list_settings:
        heading: Listas de archivos
        hide_presupported_versions:
          label: Combina archivos vinculados sin soporte y con soporte predefinido.
        summary: Controla cómo se muestra la lista de ficheros de un modelo
      first_use:
        email_help: Nunca se muestra públicamente; sólo se utiliza para los correos electrónicos de inicio de sesión y seguridad de su cuenta.
        guidance: En el primer uso, necesitas establecer un nombre de usuario, un correo electrónico de contacto y una contraseña para el usuario administrador. Si estás ejecutando el modo usuario único, normalmente no necesitarás ingresar estos datos para iniciar sesión, pero en modo multiusuario no podrás acceder a Manyfold sin ellos
        password:
          help_html: Pedimos una contraseña segura por defecto. Para permitir una contraseña más simple en una instancia privada, establezca la variable de entorno <a href="https://manyfold.app/sysadmin/configuration.html#min_password_score">MIN_PASSWORD_SCORE</a>.
        submit: Guardar
        title: Instalación
        username_help: Un nombre de usuario único; utilice el preestablecido o cree el suyo propio.
      general_settings:
        heading: General
        interface_language:
          autodetect: Utilizar la configuración del navegador
          help: 'Nota: es posible que algunos textos no traducidos sigan apareciendo en inglés.'
          label: Idioma de la aplicación
        sensitive_content:
          help: Afecta al modo en que se mostrará el contenido marcado como "sensible"
          hide: Ocultar completamente
          label: Contenido Sensible
          mask: Desenfocar en las listas
          show: Mostrar como normal
      new:
        approval_help: Después de crear tu cuenta, será revisada manualmente por nuestros moderadores. Te avisaremos cuando se haya aprobado y puedas iniciar sesión.
        creators:
          name:
            help: Esto se mostrará públicamente, como el título de su perfil de Creador.
            label: Nombre del creador
          slug:
            help: Un nombre de usuario corto para tu perfil de creador, utilizado en la URL.
            help_fedi: Un nombre de usuario corto para tu perfil de creador, utilizado en la URL y Fediverse.
        details: Sus datos
        rules: Normas del servidor
        rules_agree: Al crear una cuenta, acepta cumplir las normas anteriores.
        sign_up: Registrarse
        username:
          help: Un nombre de usuario corto para tu cuenta personal; si más adelante creas un perfil de creador para publicar tus modelos, necesitará un nombre diferente.
      pagination_settings:
        collections:
          label: Paginar colecciones
        creators:
          label: Paginar creadores
        description: Mostrar sólo un cierto número de elementos a la vez en las páginas de lista, en lugar de todo a la vez. Esto puede acelerar la carga.
        heading: Paginación
        models:
          label: Paginar modelos
        per_page:
          label: Artículos por página
      problem_settings:
        description: Cambie la gravedad de los problemas detectados o ignórelos por completo.
        title: Detección de problemas
      renderer_settings:
        auto_load_max_size:
          always: Siempre
          label: Carga automáticamente la vista previa
          never: Nunca
          under_1024: Hasta 1024 MB
          under_128: Hasta 128 MB
          under_16: Hasta 16 MB
          under_2: Hasta 2 MB
          under_256: Hasta 256 MB
          under_32: Hasta 32 MB
          under_4: Hasta 4 MB
          under_512: Hasta 512 MB
          under_64: Hasta 64 MB
          under_8: Hasta 8 MB
        background_colour:
          label: Color de fondo
        description: Personaliza la configuración para las vistas previas renderizadas en 3D.
        enable_pan_zoom:
          label: Activar Panorámica/Zoom
        grid_width:
          label: Tamaño del plano de tierra (mm)
        heading: Renderizado
        object_colour:
          label: Color del objeto
        render_style:
          label: Estilo de renderizado
          lambert: Sombreado realista
          normals: Dirección de la superficie
          original: Original (de archivo)
          shadowed: Realista con sombras
        show_grid:
          label: Mostrar plano de tierra
      signed_up: Bienvenido. Su cuenta ha sido creada correctamente.
      signed_up_but_inactive: Su cuenta ha sido creada correctamente. Sin embargo, no hemos podido iniciar la sesión porque su cuenta aún no está activada.
      signed_up_but_locked: Su cuenta ha sido creada correctamente. Sin embargo, no hemos podido iniciar la sesión porque su cuenta está bloqueada.
      signed_up_but_unconfirmed: Se ha enviado un mensaje con un enlace de confirmación a su correo electrónico. Abra el enlace para activar su cuenta.
      tag_cloud_settings:
        heading: Panel de etiquetas
        heatmap:
          label: Mostrar el número de etiquetas individuales
        keypair:
          label: Utilizar delimitadores para representar pares de claves
        sorting:
          alphabetical: alfabético
          frequency: frecuencia
          label: Ordenar
        threshold:
          label: Número mínimo de etiquetas para la visualización
      update:
        setup_complete: "¡Instalación completada!"
      update_needs_confirmation: Su cuenta ha sido actualizada correctamente, pero es necesario verificar su nueva dirección de correo. Por favor, revise su correo y sigue el enlace de confirmación para finalizar la comprobación.
      updated: Su cuenta se ha actualizado correctamente.
      updated_but_not_signed_in: Su cuenta ha sido actualizada correctamente, pero como cambió su contraseña, debe iniciar sesión nuevamente.
      user:
        signed_up_but_not_approved: Se ha registrado correctamente. Un moderador revisará su cuenta en breve, tras lo cual podrá iniciar sesión.
    sessions:
      already_signed_out: Sesión finalizada correctamente.
      new:
        sign_in: Iniciar sesión
      signed_in: Sesión iniciada correctamente.
      signed_out: Sesión finalizada correctamente.
    shared:
      links:
        back: Atrás
        didn_t_receive_confirmation_instructions: "¿No ha recibido las instrucciones de confirmación?"
        didn_t_receive_unlock_instructions: "¿No ha recibido las instrucciones para desbloquear?"
        forgot_your_password: "¿Ha olvidado su contraseña?"
        sign_in: Iniciar sesión
        sign_in_with_provider: Iniciar sesión con %{provider}
        sign_up: Registrarse
      minimum_password_length:
        one: "(mínimo %{count} caracteres)"
        other: "(mínimo %{count} caracteres)"
    unlocks:
      new:
        resend_unlock_instructions: Reenviar instrucciones para desbloquear
      send_instructions: Recibirá un email con las instrucciones para desbloquear su cuenta en unos minutos.
      send_paranoid_instructions: Si su cuenta existe, recibirá un email con las instrucciones para desbloquear su cuenta en unos minutos.
      unlocked: Su cuenta ha sido desbloqueada. Por favor, inicie sesión para continuar.
</file>

<file path="config/locales/devise/fr.yml">
---
fr:
  devise:
    confirmations:
      confirmed: Votre compte a bien été confirmé.
      new:
        resend_confirmation_instructions: Renvoyer les instructions de confirmation
      send_instructions: Vous allez recevoir sous quelques minutes un email comportant des instructions pour confirmer votre compte.
      send_paranoid_instructions: Si votre email existe sur notre base de données, vous recevrez sous quelques minutes un message avec des instructions pour confirmer votre compte.
    failure:
      already_authenticated: Vous êtes déjà connecté(e).
      inactive: Votre compte n’est pas encore activé.
      invalid: "%{authentication_keys} ou mot de passe incorrect."
      last_attempt: Il vous reste une chance avant que votre compte soit bloqué.
      locked: Votre compte est verrouillé.
      not_approved: Votre compte n'a pas encore été approuvé par un modérateur.
      not_found_in_database: "%{authentication_keys} ou mot de passe incorrect."
      timeout: Votre session est expirée, veuillez vous reconnecter pour continuer.
      unauthenticated: Vous devez vous connecter ou vous enregistrer pour continuer.
      unconfirmed: Vous devez confirmer votre compte par email.
    mailer:
      confirmation_instructions:
        action: Confirmer mon email
        greeting: Bienvenue %{recipient} !
        instruction: 'Vous pouvez confirmer votre email grâce au lien ci-dessous :'
        subject: Instructions de confirmation
      email_changed:
        greeting: Bonjour %{recipient} !
        message: Nous vous contactons pour vous notifier que votre adresse email a été changée en %{email}.
        message_unconfirmed: Nous vous contactons pour vous notifier que votre adresse email a été changée en %{email}.
        subject: Email modifié
      password_change:
        greeting: Bonjour %{recipient} !
        message: Nous vous contactons pour vous notifier que votre mot de passe a été modifié.
        subject: Mot de passe modifié
      reset_password_instructions:
        action: Changer mon mot de passe
        greeting: Bonjour %{recipient} !
        instruction: 'Quelqu''un a demandé un lien pour changer votre mot de passe, le voici :'
        instruction_2: Si vous n'avez pas émis cette demande, merci d'ignorer cet email.
        instruction_3: Votre mot de passe ne changera pas tant que vous n'aurez pas cliqué sur ce lien et renseigné un nouveau mot de passe.
        subject: Instructions pour changer le mot de passe
      unlock_instructions:
        action: Débloquer mon compte
        greeting: Bonjour %{recipient} !
        instruction: 'Suivez ce lien pour débloquer votre compte :'
        message: Votre compte a été bloqué suite à un nombre d'essais de connexions manquées trop important.
        subject: Instructions pour déverrouiller le compte
    omniauth_callbacks:
      failure: 'Nous ne pouvons pas vous authentifier depuis %{kind} pour la raison suivante : ''%{reason}''.'
      success: Autorisé par votre compte %{kind}.
    passwords:
      edit:
        change_my_password: Changer mon mot de passe
        change_your_password: Changer votre mot de passe
        confirm_new_password: Confirmez votre nouveau mot de passe
        new_password: Nouveau mot de passe
      new:
        forgot_your_password: Mot de passe oublié ?
        send_me_reset_password_instructions: Envoyez-moi des instructions pour réinitialiser mon mot de passe
      no_token: Vous ne pouvez pas accéder à cette page si vous n’y accédez pas depuis un email de réinitialisation de mot de passe. Si vous venez en effet d’un tel email, vérifiez que vous avez copié l’adresse URL en entier.
      send_instructions: Vous allez recevoir sous quelques minutes un email vous indiquant comment réinitialiser votre mot de passe.
      send_paranoid_instructions: Si votre email existe dans notre base de données, vous recevrez un lien vous permettant de récupérer votre mot de passe.
      updated: Votre mot de passe a bien été modifié. Vous êtes maintenant connecté(e).
      updated_not_active: Votre mot de passe a bien été modifié.
    registrations:
      destroyed: Au revoir ! Votre compte a bien été supprimé. Nous espérons vous revoir bientôt.
      edit:
        are_you_sure: Êtes-vous sûr ?
        cancel_my_account: Supprimer mon compte
        confirm_deletion: Êtes-vous sûr de vouloir supprimer votre compte ?
        contact_info: Informations de contact
        current_password_help: Mot de passe actuel requis pour la sécurité
        currently_waiting_confirmation_for_email: 'Confirmation en attente pour: %{email}'
        danger_zone: Zone de danger !
        leave_blank_if_you_don_t_want_to_change_it: laissez ce champ vide pour le laisser inchangé
        security: Sécurité
        social:
        submit: Enregistrer les modifications
        title: Paramètres du compte
        unhappy: Pas content ?
        update: Modifier
        we_need_your_current_password_to_confirm_your_changes: nous avons besoin de votre mot de passe actuel pour valider ces modifications
      file_list_settings:
        heading: Listes de fichiers
        hide_presupported_versions:
          label: Combiner les fichiers non supportés et supportés
        summary: Contrôle de l'affichage des listes de fichiers de modèles
      first_use:
        email_help: Jamais affiché publiquement ; utilisé uniquement pour se connecter et les mails de sécurité du compte.
        guidance: Lors de la première utilisation, vous devez définir un nom d'utilisateur, une adresse mail de contact et un mot de passe pour l'administrateur principal. Si vous travaillez en mode mono-utilisateur, vous n'aurez normalement pas besoin d'entrer ces informations pour vous connecter, mais en mode multi-utilisateur, vous ne pourrez pas accéder à Manyfold sans ces informations.
        password:
          help_html:
        submit: Sauvegarder
        title: Installation
        username_help: Un nom d'utilisateur unique ; utilisez le nom prédéfini ou choisissez le vôtre.
      general_settings:
        heading: Général
        interface_language:
          autodetect: Utiliser les paramètres du navigateur
          help: 'Remarque : certains textes non traduits peuvent encore s''afficher en anglais.'
          label: Langue de l'interface
        sensitive_content:
          help: Affecte l'affichage du contenu marqué comme "sensible"
          hide: Cacher complètement
          label: Contenu sensible
          mask: Flouter dans les listes
          show: Afficher comme les autres
      new:
        approval_help: Après la création de votre compte, celui-ci sera examiné manuellement par nos modérateurs. Nous vous informerons lorsque le processus d'approbation sera terminé et que vous pourrez vous connecter.
        creators:
          name:
            help:
            label:
          slug:
            help:
            help_fedi:
        details:
        rules:
        rules_agree:
        sign_up: Inscription
        username:
          help:
      pagination_settings:
        collections:
          label: Paginer les collections
        creators:
          label: Paginer les créateurs
        description: N'affichez qu'un certain nombre d'éléments à la fois dans les pages de liste, plutôt que tout en même temps. Cela peut accélérer le chargement.
        heading: Pagination
        models:
          label: Paginer les modèles
        per_page:
          label: Articles par page
      problem_settings:
        description: Modifier la gravité des problèmes détectés ou les ignorer complètement.
        title: Détection des problèmes
      renderer_settings:
        auto_load_max_size:
          always: Toujours
          label: Chargement automatique des aperçus
          never: Jamais
          under_1024: Jusqu'à 1024 Mo
          under_128: Jusqu'à 128 Mo
          under_16: Jusqu'à 16 Mo
          under_2: Jusqu'à 2 Mo
          under_256: Jusqu'à 256 Mo
          under_32: Jusqu'à 32 Mo
          under_4: Jusqu'à 4 Mo
          under_512: Jusqu'à 512 Mo
          under_64: Jusqu'à 64 Mo
          under_8: Jusqu'à 8 Mo
        background_colour:
          label: Couleur de fond
        description: Personnalisation des paramètres pour les aperçus 3D.
        enable_pan_zoom:
          label: Activer les commandes de panoramique/zoom
        grid_width:
          label: Taille du plan de masse (mm)
        heading: Rendu
        object_colour:
          label: Couleur de l'objet
        render_style:
          label: Style de rendu
          lambert: Ombres réalistes
          normals: Direction de la surface
          original:
          shadowed: Ombré réaliste
        show_grid:
          label: Afficher le plan de masse
      signed_up: Bienvenue ! Vous vous êtes bien enregistré(e).
      signed_up_but_inactive: Vous vous êtes bien enregistré(e). Cependant, nous n’avons pas pu vous connecter car votre compte n’a pas encore été activé.
      signed_up_but_locked: Vous vous êtes bien enregistré(e). Cependant, nous n’avons pas pu vous connecter car votre compte est verrouillé.
      signed_up_but_unconfirmed: Un message avec un lien de confirmation vous a été envoyé par mail. Veuillez suivre ce lien pour activer votre compte.
      tag_cloud_settings:
        heading: Nuages de mots-clés
        heatmap:
          label: Afficher le nombre d'étiquette pour chaque étiquette
        keypair:
          label: Utiliser un délimiteur pour représenter les paires de clés
        sorting:
          alphabetical:
          frequency:
          label: Trier
        threshold:
          label: Nombre minimum d'étiquettes à afficher
      update:
        setup_complete: Installation terminée !
      update_needs_confirmation: Vous avez bien modifié votre compte, mais nous devons vérifier votre nouvelle adresse email. Veuillez consulter vos emails et cliquer sur le lien de confirmation pour confirmer votre nouvelle adresse.
      updated: Votre compte a bien été modifié.
      updated_but_not_signed_in: Votre compte a été mis à jour avec succès. Vous devez vous reconnecter car votre mot de passe a été modifié.
      user:
        signed_up_but_not_approved: Vous vous êtes inscrit avec succès. Un modérateur examinera bientôt votre compte, après quoi vous pourrez vous connecter.
    sessions:
      already_signed_out: Déconnecté(e).
      new:
        sign_in: Connexion
      signed_in: Connecté(e).
      signed_out: Déconnecté(e).
    shared:
      links:
        back: Retour
        didn_t_receive_confirmation_instructions: Vous n'avez pas reçu l'email de confirmation ?
        didn_t_receive_unlock_instructions: Vous n'avez pas reçu l'email de déblocage ?
        forgot_your_password: Mot de passe oublié ?
        sign_in: Connexion
        sign_in_with_provider: Connexion avec %{provider}
        sign_up: Inscription
      minimum_password_length:
        one: "(%{count} caractère au moins)"
        other: "(%{count} caractères au moins)"
    unlocks:
      new:
        resend_unlock_instructions: Renvoyer les instructions de déblocage
      send_instructions: Vous allez recevoir sous quelques minutes un email comportant des instructions pour déverrouiller votre compte.
      send_paranoid_instructions: Si votre email existe sur notre base de données, vous recevrez sous quelques minutes un message avec des instructions pour déverrouiller votre compte.
      unlocked: Votre compte a bien été déverrouillé. Veuillez vous connecter.
</file>

<file path="config/locales/devise/ja.yml">
---
ja:
  devise:
    confirmations:
      confirmed: メールアドレスが確認できました。
      new:
        resend_confirmation_instructions: アカウント確認メール再送
      send_instructions: アカウントの有効化について数分以内にメールでご連絡します。
      send_paranoid_instructions: メールアドレスが登録済みの場合、本人確認用のメールが数分以内に送信されます。
    failure:
      already_authenticated: すでにログインしています。
      inactive: アカウントが有効化されていません。メールに記載された手順にしたがって、アカウントを有効化してください。
      invalid: "%{authentication_keys}またはパスワードが違います。"
      last_attempt: もう一回誤るとアカウントがロックされます。
      locked: アカウントはロックされています。
      not_approved: あなたのアカウントはまだモデレーターによって承認されていません。
      not_found_in_database: "%{authentication_keys}またはパスワードが違います。"
      timeout: セッションがタイムアウトしました。もう一度ログインしてください。
      unauthenticated: アカウント登録もしくはログインしてください。
      unconfirmed: メールアドレスの本人確認が必要です。
    mailer:
      confirmation_instructions:
        action: メールアドレスの確認
        greeting: "%{recipient}様"
        instruction: 以下のリンクをクリックし、メールアドレスの確認手続を完了させてください。
        subject: メールアドレス確認メール
      email_changed:
        greeting: こんにちは、%{recipient}様。
        message: あなたのメールの変更（%{email}）をお知らせいたします。
        message_unconfirmed:
        subject: メール変更完了
      password_change:
        greeting: "%{recipient}様"
        message: パスワードが再設定されました。
        subject: パスワードの変更について
      reset_password_instructions:
        action: パスワード変更
        greeting: "%{recipient}様"
        instruction: パスワード再設定の依頼を受けたため、メールを送信しています。下のリンクからパスワードの再設定ができます。
        instruction_2: パスワード再設定の依頼をしていない場合、このメールを無視してください。
        instruction_3: パスワードの再設定は、上のリンクから新しいパスワードを登録するまで完了しません。
        subject: パスワードの再設定について
      unlock_instructions:
        action: アカウントのロック解除
        greeting: "%{recipient}様"
        instruction: アカウントのロックを解除するには下のリンクをクリックしてください。
        message: ログイン失敗が繰り返されたため、アカウントはロックされています。
        subject: アカウントのロック解除について
    omniauth_callbacks:
      failure: "%{kind} アカウントによる認証に失敗しました。理由：（%{reason}）"
      success: "%{kind} アカウントによる認証に成功しました。"
    passwords:
      edit:
        change_my_password: パスワードを変更する
        change_your_password: パスワードを変更
        confirm_new_password: 確認用新しいパスワード
        new_password: 新しいパスワード
      new:
        forgot_your_password: パスワードを忘れましたか？
        send_me_reset_password_instructions: パスワードの再設定方法を送信する
      no_token: このページにはアクセスできません。パスワード再設定メールのリンクからアクセスされた場合には、URL をご確認ください。
      send_instructions: パスワードの再設定について数分以内にメールでご連絡いたします。
      send_paranoid_instructions: メールアドレスが登録済みの場合、パスワード再設定用のメールが数分以内に送信されます。
      updated: パスワードが正しく変更されました。
      updated_not_active: パスワードが正しく変更されました。
    registrations:
      destroyed: アカウントを削除しました。またのご利用をお待ちしております。
      edit:
        are_you_sure: 本当によろしいですか？
        cancel_my_account: アカウント削除
        confirm_deletion: 本当にアカウントを削除しますか？
        contact_info: 連絡先
        current_password_help: セキュリティのために現在のパスワードが必要
        currently_waiting_confirmation_for_email: "%{email} の確認待ち"
        danger_zone: 危険！
        leave_blank_if_you_don_t_want_to_change_it: 空欄のままなら変更しません
        security: セキュリティ
        social: ソーシャル
        submit: 変更を保存する
        title: 設定
        unhappy: 不満ですか？
        update: 更新
        we_need_your_current_password_to_confirm_your_changes: 変更を反映するには現在のパスワードを入力してください
      file_list_settings:
        heading: ファイル一覧
        hide_presupported_versions:
          label: リンクされたサポート材付きファイルとサポート材無しファイルを結合する
        summary: モデルファイル一覧の表示方法を制御する
      first_use:
        email_help: 一般に公開されることはなく、ログインとアカウントのセキュリティメールにのみ使用されます。
        guidance: 初回使用時には、メイン管理者アカウントのアカウント名、連絡先メールアドレス、パスワードを設定する必要があります。シングルユーザモードで使用している場合、通常はこれらの情報を入力してサインインする必要はありませんが、マルチユーザモードではこれらの情報がないとManyfoldにアクセスできません。
        password:
          help_html: デフォルトでは強力パスワードは必要です。プライベートインスタンスでより簡単なパスワードを許可するには、<a href="https://manyfold.app/sysadmin/configuration.html#min_password_score">MIN_PASSWORD_SCORE</a>　env変数を設定する。
        submit: 保存
        title: セットアップ
        username_help: 一意のアカウント名です。あらかじめ用意されているものを使用するか、自分で選択してください。
      general_settings:
        heading: 一般
        interface_language:
          autodetect: ブラウザの設定を使用する
          help: 注：未翻訳のテキストが英語で表示される場合があります。
          label: 言語
        sensitive_content:
          help: "「センシティブ」とマークされたコンテンツがどのように表示されるかに影響します。"
          hide: 完全に隠す
          label: センシティブコンテンツ
          mask: リストでぼかし
          show: 通常通り表示
      new:
        approval_help: アカウント作成後、モデレーターによる手動審査が行われます。承認が完了し、サインインできるようになったらお知らせします。
        creators:
          name:
            help:
            label:
          slug:
            help:
            help_fedi:
        details: あなたの詳細
        rules: サーバールール
        rules_agree: アカウントにサインアップすると、上記のルールに従うことに同意します。
        sign_up: アカウント登録
        username:
          help:
      pagination_settings:
        collections:
          label: コレクションをページ分割
        creators:
          label: クリエイターをページ分割
        description: リストページでは、一度にすべてを表示するのではなく、一度に一定のアイテム数だけを表示します。これにより、ロード時間を短縮することができます。
        heading: ページ分割
        models:
          label: モデルをページ分割
        per_page:
          label: ページごとの項目
      problem_settings:
        description: 検出された問題の深刻度を変更するか、完全に無視する。
        title: 問題の検出
      renderer_settings:
        auto_load_max_size:
          always: 常に
          label: プレビューを自動的に読み込む
          never: 決して
          under_1024: 最大1024 MB
          under_128: 最大128MB
          under_16: 最大16MB
          under_2: 最大2MB
          under_256: 最大256MB
          under_32: 最大32MB
          under_4: 最大4MB
          under_512: 最大512MB
          under_64: 最大64MB
          under_8: 最大8MB
        background_colour:
          label: バックグラウンド色
        description: 3Dレンダリングプレビューの設定をカスタマイズする。
        enable_pan_zoom:
          label: パン/ズームコントロールを有効にする
        grid_width:
          label: グランドプレーンサイズ（mm）
        heading: レンダラ
        object_colour:
          label: オブジェクトの色
        render_style:
          label: レンダリングスタイル
          lambert: 滑らかなシェーディング
          normals: サーフェス方向
          original: オリジナル（ファイルより）
          shadowed: リアルな影
        show_grid:
          label: グランドプレーンを表示
      signed_up: アカウント登録が完了しました。
      signed_up_but_inactive: ログインするためには、アカウントを有効化してください。
      signed_up_but_locked: アカウントがロックされているためログインできません。
      signed_up_but_unconfirmed: 本人確認用のメールを送信しました。メール内のリンクからアカウントを有効化させてください。
      tag_cloud_settings:
        heading: タグクラウド
        heatmap:
          label: 個々のタグ数を表示する
        keypair:
          label: デリミタを使ってキーペアを表す
        sorting:
          alphabetical: アルファベット順
          frequency: 頻度
          label: ソート
        threshold:
          label: タグの最小表示数
      update:
        setup_complete: セットアップ完了！
      update_needs_confirmation: アカウント情報を変更しました。変更されたメールアドレスの本人確認のため、本人確認用メールより確認処理をおこなってください。
      updated: アカウント情報を変更しました。
      updated_but_not_signed_in: あなたのアカウントは正常に更新されましたが、パスワードが変更されたため、再度ログインしてください。
      user:
        signed_up_but_not_approved: サインアップに成功しました。モデレーターがあなたのアカウントを確認します。
    sessions:
      already_signed_out: 既にログアウト済みです。
      new:
        sign_in: ログイン
      signed_in: ログインしました。
      signed_out: ログアウトしました。
    shared:
      links:
        back: 戻る
        didn_t_receive_confirmation_instructions: アカウント確認のメールを受け取っていませんか？
        didn_t_receive_unlock_instructions: アカウントのロック解除方法のメールを受け取っていませんか？
        forgot_your_password: パスワードを忘れましたか？
        sign_in: ログイン
        sign_in_with_provider: "%{provider}でログイン"
        sign_up: アカウント登録
      minimum_password_length:
        one:
        other:
    unlocks:
      new:
        resend_unlock_instructions: アカウントのロック解除方法を再送する
      send_instructions: アカウントのロック解除方法を数分以内にメールでご連絡します。
      send_paranoid_instructions: アカウントが見つかった場合、アカウントのロック解除方法を数分以内にメールでご連絡します。
      unlocked: アカウントをロック解除しました。
</file>

<file path="config/locales/devise/nl.yml">
---
nl:
  devise:
    confirmations:
      confirmed: Je e-mailadres is succesvol bevestigd.
      new:
        resend_confirmation_instructions: Verstuur bevestigingsinstructies opnieuw
      send_instructions: Je ontvangt binnen enkele minuten een e-mail met instructies om je e-mailadres te bevestigen.
      send_paranoid_instructions: Als je e-mailadres in onze database bestaat, ontvang je binnen enkele minuten een e-mail met instructies om je e-mailadres te bevestigen.
    failure:
      already_authenticated: Je bent al ingelogd.
      inactive: Je account is nog niet geactiveerd.
      invalid: Ongeldig %{authentication_keys} of wachtwoord.
      last_attempt: Je hebt nog één poging voordat je account tijdelijk wordt vergrendeld.
      locked: Je account is voor een uur vergrendeld; probeer het later opnieuw.
      not_approved: Je account is nog niet goedgekeurd door een moderator.
      not_found_in_database: Ongeldig %{authentication_keys} of wachtwoord.
      timeout: Je sessie is verlopen. Log opnieuw in om door te gaan.
      unauthenticated: Je moet inloggen of registreren om door te gaan.
      unconfirmed: Je moet je e-mailadres bevestigen voordat je door kunt gaan.
    mailer:
      confirmation_instructions:
        action: Bevestig mijn account
        greeting: Welkom %{recipient}!
        instruction: 'Je kunt je account bevestigen via onderstaande link:'
        subject: Bevestigingsinstructies
      email_changed:
        greeting: Hallo %{recipient}!
        message: We nemen contact op om je te laten weten dat je e-mailadres is gewijzigd naar %{email}.
        message_unconfirmed: We nemen contact op om je te laten weten dat je e-mailadres wordt gewijzigd naar %{email}.
        subject: E-mail Gewijzigd
      password_change:
        greeting: Hallo %{recipient}!
        message: We nemen contact op om je te laten weten dat je wachtwoord is gewijzigd.
        subject: Wachtwoord Gewijzigd
      reset_password_instructions:
        action: Wijzig mijn wachtwoord
        greeting: Hallo %{recipient}!
        instruction: Iemand heeft een link aangevraagd om je wachtwoord te wijzigen. Dit kun je doen via onderstaande link.
        instruction_2: Als je dit niet hebt aangevraagd, negeer dan deze e-mail.
        instruction_3: Je wachtwoord wordt niet gewijzigd totdat je de bovenstaande link opent en een nieuw wachtwoord aanmaakt.
        subject: Instructies voor het opnieuw instellen van je wachtwoord
      unlock_instructions:
        action: Ontgrendel mijn account
        greeting: Hallo %{recipient}!
        instruction: 'Klik op onderstaande link om je account te ontgrendelen:'
        message: Je account is vergrendeld vanwege te veel mislukte inlogpogingen.
        subject: Ontgrendelingsinstructies
    omniauth_callbacks:
      failure: We konden je niet authenticeren via %{kind} omdat "%{reason}".
      success: Succesvol geauthenticeerd via %{kind} account.
    passwords:
      edit:
        change_my_password: Wijzig mijn wachtwoord
        change_your_password: Wijzig je wachtwoord
        confirm_new_password: Bevestig nieuw wachtwoord
        new_password: Nieuw wachtwoord
      new:
        forgot_your_password: Wachtwoord vergeten?
        send_me_reset_password_instructions: Stuur me instructies voor het opnieuw instellen van mijn wachtwoord
      no_token: Je kunt deze pagina niet bezoeken zonder te komen van een wachtwoord reset e-mail. Als je wel van een wachtwoord reset e-mail komt, zorg er dan voor dat je de volledige URL gebruikt.
      send_instructions: Je ontvangt binnen enkele minuten een e-mail met instructies om je wachtwoord opnieuw in te stellen.
      send_paranoid_instructions: Als je e-mailadres in onze database bestaat, ontvang je binnen enkele minuten een link om je wachtwoord te herstellen in je e-mail.
      updated: Je wachtwoord is succesvol gewijzigd. Je bent nu ingelogd.
      updated_not_active: Je wachtwoord is succesvol gewijzigd.
    registrations:
      destroyed: Tot ziens! Je account is succesvol verwijderd. We hopen je snel weer te zien.
      edit:
        are_you_sure: Weet je het zeker?
        cancel_my_account: Verwijder mijn account
        confirm_deletion: Weet je zeker dat je je account wilt verwijderen?
        contact_info: Contactinformatie
        current_password_help: Huidig wachtwoord vereist voor beveiliging
        currently_waiting_confirmation_for_email: 'Wacht op bevestiging voor: %{email}'
        danger_zone: Gevarenzone!
        leave_blank_if_you_don_t_want_to_change_it: laat leeg als je het niet wilt wijzigen
        security: Beveiliging
        social:
        submit: Wijzigingen opslaan
        title: Mijn Instellingen
        unhappy: Ontevreden?
        update: Bijwerken
        we_need_your_current_password_to_confirm_your_changes: we hebben je huidige wachtwoord nodig om je wijzigingen te bevestigen
      file_list_settings:
        heading: Bestandslijsten
        hide_presupported_versions:
          label: Combineer gekoppelde niet-ondersteunde en voorondersteunde bestanden
        summary: Bepaal hoe modelbestandslijsten worden weergegeven
      first_use:
        email_help: Nooit publiekelijk zichtbaar; alleen gebruikt voor inloggen en account beveiligingsmails.
        guidance: Bij eerste gebruik moet je een gebruikersnaam, contact e-mail en wachtwoord instellen voor de hoofdbeheerder. Als je in enkele-gebruiker modus draait, hoef je deze gegevens normaal gesproken niet in te voeren om in te loggen, maar in multi-gebruiker modus kun je Manyfold niet gebruiken zonder deze gegevens.
        password:
          help_html:
        submit: Opslaan
        title: Setup
        username_help: Een unieke gebruikersnaam; gebruik de vooraf gegenereerde of kies je eigen.
      general_settings:
        heading: Algemeen
        interface_language:
          autodetect: Gebruik browserinstellingen
          help: 'Let op: sommige onvertaalde teksten kunnen nog steeds in het Engels verschijnen.'
          label: Interfacetaal
        sensitive_content:
          help: Beïnvloedt hoe inhoud gemarkeerd als "gevoelig" wordt weergegeven
          hide: Volledig verbergen
          label: Gevoelige Inhoud
          mask: Vervagen in lijsten
          show: Normaal weergeven
      new:
        approval_help: Na het aanmaken van je account wordt het handmatig beoordeeld door onze moderators. We laten je weten wanneer de goedkeuring voltooid is en je kunt inloggen.
        creators:
          name:
            help:
            label:
          slug:
            help:
            help_fedi:
        details:
        rules:
        rules_agree:
        sign_up: Registreren
        username:
          help:
      pagination_settings:
        collections:
          label: Pagineer collecties
        creators:
          label: Pagineer makers
        description: Toon slechts een bepaald aantal items tegelijk in lijstpagina's, in plaats van alles in één keer. Dit kan het laden versnellen.
        heading: Paginering
        models:
          label: Pagineer modellen
        per_page:
          label: Items per pagina
      problem_settings:
        description: Wijzig de ernst van gedetecteerde problemen of negeer ze volledig.
        title: Probleemdetectie
      renderer_settings:
        auto_load_max_size:
          always: Altijd
          label: Automatisch voorbeelden laden
          never: Nooit
          under_1024: Tot 1024 MB
          under_128: Tot 128 MB
          under_16: Tot 16 MB
          under_2: Tot 2 MB
          under_256: Tot 256 MB
          under_32: Tot 32 MB
          under_4: Tot 4 MB
          under_512: Tot 512 MB
          under_64: Tot 64 MB
          under_8: Tot 8 MB
        background_colour:
          label: Achtergrondkleur
        description: Pas instellingen aan voor 3D-gerenderde voorbeelden.
        enable_pan_zoom:
          label: Pan/zoom-besturing inschakelen
        grid_width:
          label: Grondvlak grootte (mm)
        heading: Renderer
        object_colour:
          label: Objectkleur
        render_style:
          label: Renderingstijl
          lambert: Vloeiende schaduw
          normals: Oppervlakterichting
          original:
          shadowed: Realistisch met schaduwen
        show_grid:
          label: Toon grondvlak
      signed_up: Welkom! Je hebt je succesvol geregistreerd.
      signed_up_but_inactive: Je hebt je succesvol geregistreerd. We konden je echter niet inloggen omdat je account nog niet is geactiveerd.
      signed_up_but_locked: Je hebt je succesvol geregistreerd. We konden je echter niet inloggen omdat je account is vergrendeld.
      signed_up_but_unconfirmed: Een bericht met een bevestigingslink is verzonden naar je e-mailadres. Volg de link om je account te activeren.
      tag_cloud_settings:
        heading: Tag Cloud
        heatmap:
          label: Toon tagaantal voor individuele tags
        keypair:
          label: Gebruik scheidingsteken voor sleutel-waarde paren
        sorting:
          alphabetical:
          frequency:
          label: Sortering
        threshold:
          label: Minimaal aantal van tag voor weergave
      update:
        setup_complete: Setup voltooid!
      update_needs_confirmation: Je hebt je account succesvol bijgewerkt, maar we moeten je nieuwe e-mailadres verifiëren. Controleer je e-mail en volg de bevestigingslink om je nieuwe e-mailadres te bevestigen.
      updated: Je instellingen zijn succesvol bijgewerkt.
      updated_but_not_signed_in: Je instellingen zijn succesvol bijgewerkt, maar omdat je wachtwoord is gewijzigd, moet je opnieuw inloggen.
      user:
        signed_up_but_not_approved: Je hebt je succesvol geregistreerd. Een moderator zal je account binnenkort beoordelen, waarna je kunt inloggen.
    sessions:
      already_signed_out: Je bent al uitgelogd.
      new:
        sign_in: Inloggen
      signed_in: Je bent succesvol ingelogd.
      signed_out: Je bent succesvol uitgelogd.
    shared:
      links:
        back: Terug
        didn_t_receive_confirmation_instructions: Geen bevestigingsinstructies ontvangen?
        didn_t_receive_unlock_instructions: Geen ontgrendelingsinstructies ontvangen?
        forgot_your_password: Wachtwoord vergeten?
        sign_in: Inloggen
        sign_in_with_provider: Inloggen met %{provider}
        sign_up: Registreren
      minimum_password_length:
        one: "(minimaal %{count} teken)"
        other: "(minimaal %{count} tekens)"
    unlocks:
      new:
        resend_unlock_instructions: Verstuur ontgrendelingsinstructies opnieuw
      send_instructions: Je ontvangt binnen enkele minuten een e-mail met instructies om je account te ontgrendelen.
      send_paranoid_instructions: Als je account bestaat, ontvang je binnen enkele minuten een e-mail met instructies om het te ontgrendelen.
      unlocked: Je account is succesvol ontgrendeld. Log in om door te gaan.
</file>

<file path="config/locales/devise/pl.yml">
---
pl:
  devise:
    confirmations:
      confirmed: Twój adres e-mail został potwierdzony.
      new:
        resend_confirmation_instructions: Wyślij ponownie instrukcje aktywacji
      send_instructions: Instrukcja jak aktywować konto zostanie niezwłocznie wysłana na podany adres e-mail.
      send_paranoid_instructions: Jeśli Twój adres e-mail istnieje w naszej bazie, w ciągu najbliższych minut otrzymasz instrukcje jak aktywować konto.
    failure:
      already_authenticated: Jesteś już zalogowany.
      inactive: Twoje konto nie zostało jeszcze aktywowane.
      invalid: Błędny adres %{authentication_keys} lub hasło.
      last_attempt: Masz jeszcze jedną próbę nim Twoje konto zostanie tymczasowo zablokowane.
      locked: Twoje konto zostało zablokowane na godzinę; spróbuj ponownie później.
      not_approved: Twoje konto nie zostało jeszcze zatwierdzone przez moderatora.
      not_found_in_database: Błędny adres %{authentication_keys} lub hasło.
      timeout: Sesja wygasła, aby kontynuować zaloguj się ponownie.
      unauthenticated: Aby kontynuować zaloguj lub zarejestruj się.
      unconfirmed: Aby kontynuować aktywuj konto.
    mailer:
      confirmation_instructions:
        action: Potwierdź swoje konto
        greeting: Witaj %{recipient}!
        instruction: 'Możesz potwierdzić swoje konto przy pomocy poniższego linku:'
        subject: Instrukcja aktywacji konta
      email_changed:
        greeting: Witaj %{recipient}!
        message: Kontaktujemy się z Tobą, aby Cię poinformować o zmianie Twojego adresu e-mail na %{email}.
        message_unconfirmed: Kontaktujemy się z Tobą, aby Cię poinformować cię, że twój adresu e-mail jest zmieniany na %{email}.
        subject: E-mail zmieniony
      password_change:
        greeting: Witaj %{recipient}!
        message: Kontaktujemy się z Tobą w celu poinformowania cię, że twoje hasło zostało zmienione.
        subject: Hasło zostało zmienione
      reset_password_instructions:
        action: Zmień moje hasło
        greeting: Witaj %{recipient}!
        instruction: Ktoś zażądał zmiany hasła do Twojego konta. Hasło możesz zmienić wchodząc na poniższy link.
        instruction_2: Jeśli to nie Ty zażądałeś zmiany hasła, proszę zignoruj tę wiadomość.
        instruction_3: Twoje hasło nie ulegnie zmianie dopóki nie wejdziesz na poniższy link i nie ustawisz nowego.
        subject: Instrukcja ustawienia nowego hasła
      unlock_instructions:
        action: Odblokuj moje konto
        greeting: Cześć %{recipient}!
        instruction: 'Kliknij poniższy link, aby odblokować swoje konto:'
        message: Twoje konto zostało zablokowane z powodu zbyt dużej liczby nieudanych prób logowania.
        subject: Instrukcja odblokowania konta
    omniauth_callbacks:
      failure: Logowanie przez konto %{kind} zakończyło się błędem z powodu "%{reason}".
      success: Logowanie przez konto %{kind} zakończyło się pomyślnie.
    passwords:
      edit:
        change_my_password: Zmień moje hasło
        change_your_password: Zmień swoje hasło
        confirm_new_password: Powtórz nowe hasło
        new_password: Nowe hasło
      new:
        forgot_your_password: Zapomniałeś swojego hasła?
        send_me_reset_password_instructions: Wyślij instrukcje zmiany hasła
      no_token: Do tej strony możesz dostać się tylko poprzez wiadomość e-mail resetującą hasło. Jeśli to z niej tu trafiłeś, upewnij się, że użyłeś pełnego adresu.
      send_instructions: Instrukcja zmiany hasła zostanie niezwłocznie wysłana na podany adres e-mail.
      send_paranoid_instructions: Jeśli Twój adres e-mail istnieje w naszej bazie, otrzymasz zaraz wiadomość z instrukcjami odzyskiwania hasła.
      updated: Hasło zmienione poprawnie. Zostałeś automatycznie zalogowany.
      updated_not_active: Hasło zostało pomyślnie zmienione.
    registrations:
      destroyed: Twoje konto zostało usunięte.
      edit:
        are_you_sure: Jesteś pewny?
        cancel_my_account: Usuń moje konto
        confirm_deletion: Czy na pewno chcesz usunąć swoje konto?
        contact_info: Informacje kontaktowe
        current_password_help: Aktualne hasło wymagane dla bezpieczeństwa
        currently_waiting_confirmation_for_email: 'Oczekujemy na potwierdzenie dla: %{email}'
        danger_zone: Strefa zagrożenia!
        leave_blank_if_you_don_t_want_to_change_it: pozostaw puste, jeśli nie chcesz wprowadzać zmian
        security: Bezpieczeństwo
        social:
        submit: Zapisz zmiany
        title: Moje Ustawienia
        unhappy: Niezadowolony?
        update: Aktualizuj
        we_need_your_current_password_to_confirm_your_changes: potrzebujemy Twojego bieżącego hasła, aby potwierdzić zmiany
      file_list_settings:
        heading: Lista Plików
        hide_presupported_versions:
          label:
        summary: Kontroluj sposób wyświetlania list plików modeli
      first_use:
        email_help: Nigdy nie pokazywany publicznie; używany tylko do logowania i wiadomości e-mail dotyczących bezpieczeństwa konta.
        guidance: Przy pierwszym użyciu należy ustawić nazwę konta, kontaktowy adres e-mail i hasło dla konta głównego administratora. Jeśli korzystasz z trybu pojedynczego użytkownika, zwykle nie będziesz musiał wprowadzać tych danych, aby się zalogować, ale w trybie wielu użytkowników nie będziesz mógł uzyskać dostępu do Manyfold bez nich.
        password:
          help_html: Domyślnie wymagamy silnego hasła; aby zezwolić na prostsze hasło w prywatnej instancji, należy ustawić zmienną środowiskową <a href="https://manyfold.app/sysadmin/configuration.html#min_password_score">MIN_PASSWORD_SCORE</a>.
        submit: Zapisz
        title: Konfiguracja
        username_help: Unikalna nazwa konta; użyj wstępnie wygenerowanej lub wybierz własną.
      general_settings:
        heading: Główne
        interface_language:
          autodetect: Użyj ustawień przeglądarki
          help: 'Uwaga: niektóre nieprzetłumaczone teksty mogą nadal wyświetlać się w języku angielskim.'
          label: Język interfejsu
        sensitive_content:
          help: Wpływa na sposób wyświetlania treści oznaczonych jako "wrażliwych"
          hide: Ukryj całkowicie
          label: Wrażliwa Treść
          mask: Rozmyj w liście
          show: Pokaż jak zwykle
      new:
        approval_help: Po utworzeniu konta zostanie ono ręcznie sprawdzone przez naszych moderatorów. Powiadomimy Cię, gdy zostanie ono zatwierdzenie i będziesz mógł się zalogować.
        creators:
          name:
            help:
            label:
          slug:
            help:
            help_fedi:
        details: Twoje Dane
        rules: Zasady Serwera
        rules_agree: Zakładając konto, użytkownik zgadza się przestrzegać powyższych zasad.
        sign_up: Utwórz konto
        username:
          help:
      pagination_settings:
        collections:
          label: Paginuj kolekcję
        creators:
          label: Paginuj twórców
        description: Pokazuj jedynie określoną liczbę elementów na raz na stronie, a nie wszytko na raz. Może to przyspieszyć ładowanie stron.
        heading: Paginacja
        models:
          label: Paginuj modele
        per_page:
          label: Liczba elementów na stronę
      problem_settings:
        description: Zmienić wagę wykrytych problemów lub całkowicie je zignoruj.
        title: Wykrywanie Problemów
      renderer_settings:
        auto_load_max_size:
          always: Zawsze
          label: Automatycznie ładuj podglądy
          never: Nigdy
          under_1024: Do 1024 MB
          under_128: Do 128 MB
          under_16: Do 16 MB
          under_2: Do 2 MB
          under_256: Do 256 MB
          under_32: Do 32 MB
          under_4: Do 4 MB
          under_512: Do 512 MB
          under_64: Do 64 MB
          under_8: Do 8 MB
        background_colour:
          label: Kolor tła
        description: Dostosuj ustawienia dla podglądów 3D.
        enable_pan_zoom:
          label: Włącz sterowanie obrotem/zbliżeniem
        grid_width:
          label: Rozmiar płaszczyzny podłoża (mm)
        heading: Renderer
        object_colour:
          label: Kolor obiektu
        render_style:
          label: Styl renderowania
          lambert: Płynnie cieniowany
          normals: Kierunek powierzchni
          original:
          shadowed: Realistyczne z cieniami
        show_grid:
          label: Pokaż płaszczyznę podłoża
      signed_up: Witaj! Rejestracja zakończyła się pomyślnie.
      signed_up_but_inactive: Konto zostało utworzone pomyślnie. Zanim się jednak zalogujesz, musi ono zostać jeszcze aktywowane.
      signed_up_but_locked: Konto zostało utworzone pomyślnie. Nie możesz się jednak zalogować, ponieważ jest ono zablokowane.
      signed_up_but_unconfirmed: Wiadomość z linkiem aktywacyjnym została wysłana na podany adres e-mail. Otwórz link w celu aktywacji konta.
      tag_cloud_settings:
        heading: Chmura tagów
        heatmap:
          label: Wyświetl liczbe tagów dla poszczególnych tagów
        keypair:
          label: Użyj separatora do reprezentowania par kluczy
        sorting:
          alphabetical: alfabetycznie
          frequency: częstotliwość
          label: Sortowanie
        threshold:
          label: Minimalna liczba tagów do wyświetlenia
      update:
        setup_complete: Konfiguracja zakończona!
      update_needs_confirmation: Konto zostało zaktualizowane, musimy jednak potwierdzić nowy adres e-mail. Sprawdź swoją skrzynkę pocztową i otwórz link aktywacyjny, aby ukończyć zmianę adresu.
      updated: Twoje ustawienia zostały pomyślnie zaktualizowane.
      updated_but_not_signed_in: Twoje ustawienia zostały pomyślnie zaktualizowane, ale ponieważ twoje hasło zostało zmienione, musisz zalogować się ponownie.
      user:
        signed_up_but_not_approved: Rejestracja przebiegła pomyślnie. Wkrótce moderator sprawdzi Twoje konto, po czym będziesz mógł się zalogować.
    sessions:
      already_signed_out: Wylogowano pomyślnie.
      new:
        sign_in: Zaloguj się
      signed_in: Zalogowano pomyślnie.
      signed_out: Wylogowano pomyślnie.
    shared:
      links:
        back: Powrót
        didn_t_receive_confirmation_instructions: Nie otrzymałeś instrukcji aktywacji konta?
        didn_t_receive_unlock_instructions: Nie otrzymałeś instrukcji odblokowania konta?
        forgot_your_password: Zapomniałeś hasła?
        sign_in: Zaloguj się
        sign_in_with_provider: Zaloguj się przez %{provider}
        sign_up: Utwórz konto
      minimum_password_length:
        one: "(%{count} znak minimum)"
        other: "(%{count} znaków minimum)"
    unlocks:
      new:
        resend_unlock_instructions: Wyślij instrukcje odblokowania konta
      send_instructions: Wkrótce powinieneś otrzymać e-mail z instrukcjami jak odblokować swoje konto.
      send_paranoid_instructions: Jeśli Twoje konto istnieje w naszej bazie, otrzymasz zaraz e-mail z instrukcjami jak odblokować swoje konto.
      unlocked: Twoje konto zostało odblokowane. Zaloguj się, aby kontynuować.
</file>

<file path="config/locales/libraries/cs.yml">
---
cs:
  libraries:
    create:
      failure: Došlo k chybě a knihovnu nebylo možné uložit.
      success: Vytvořena nová knihovna!
    destroy:
      success: Knihovna smazána!
    form:
      add_line: Přidat řádek
      caption:
        help: Nepovinné; zobrazuje se jako tooltip u odkazů na knihovny.
      confirm_destroy:
        help: Odstraněním této knihovny se odstraní také %{count} modelů a jejich dat. Soubory na disku nebudou odstraněny. Jste si jisti, že chcete knihovnu odstranit?
      create_path_if_not_on_disk:
        help: Vytvoří výše zadanou složku knihovny, pokud na disku ještě neexistuje.
      default:
        help: Nastavit tuto knihovnu jako výchozí pro nahrávání
      filesystem_description_html: Chcete-li použít úložiště na místním souborovém systému, nejprve se ujistěte, že je připojen jako <a href="https://docs.docker.com/storage/bind-mounts/">bind mount</a> nebo jiný svazek uvnitř kontejneru Docker, a poté zadejte cestu Dockeru; nikoli cestu na hostitelském serveru! Například pokud máte na hostitelském serveru složku plnou souborů v adresáři <code>/mnt/media/3d/models</code> a v konfiguraci Dockeru jste připojili <code>/mnt/media/3d</code> k <code>/libraries</code>, požadovaná cesta bude <code>/libraries/models</code>.
      icon:
        help_html: Nepovinné; libovolná ikona z <a href="https://icons.getbootstrap.com/" target="_blank">ikon Boostrap</a> nebo <a href="https://nagoshiashumari.github.io/Rpg-Awesome/" target="_blank">RPG-Awesome</a>.
        placeholder: boxy
      notes:
        help_html: Nepovinné; zobrazeno pouze správcům na stránce nastavení. Můžete použít <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
      path:
        placeholder: "/libraries/models"
      s3_bucket:
        help: Pouze název bucketu, nikoli celá adresa URL
      s3_description_html: Manyfold může pro vaši knihovnu použít libovolné úložiště objektů kompatibilní s S3; může to být některá z velkého počtu <a href="https://github.com/okhosting/awesome-storage?tab=readme-ov-file#s3-compatible-file-servers">open source</a> nebo <a href="https://www.storageprovider.info/blog/all-s3-storage-providers/">komerčních</a> služeb.
      s3_endpoint:
        help: Nepovinné; nutné pouze pro služby kompatibilní s S3, nikoli s AWS.
      s3_path_style:
        help: Vypnout používání adres URL bucketu ve stylu hostitele. Používá se pouze pro služby kompatibilní s S3, nikoli s AWS.
      tag_regex:
        help: Kontrola, zda modelům chybí štítky odpovídající těmto regexům.
    general:
      edit: Upravit knihovnu
      new: Nová knihovna
    index:
      description: Podívejte se na podrobnosti o knihovně a upravte.
      free_space:
        label: Volné místo
      heading: Knihovny
      settings: Nastavení
      show:
        help: Zobrazí nebo skryje knihovny na navigačním panelu a ve formulářích. Volba knihovny ve formulářích pro úpravy se vždy zobrazí správcům.
        label: Zobrazit knihovny
      tag_regex:
        check: Kontrola
        search_missing: Vyhledávání chybějících
    scan:
      success: Spuštěna kontrola knihovny.
    scan_all:
      success: Spuštěna kontrola všech knihoven.
    storage_services:
      filesystem: Místní souborový systém
      s3: Cloudové úložiště kompatibilní s S3
    update:
      failure: Došlo k chybě a knihovnu nebylo možné uložit.
      success: Detaily knihovny uloženy.
</file>

<file path="config/locales/libraries/de.yml">
---
de:
  libraries:
    create:
      failure: Es ist ein Fehler aufgetreten, und die Sammlung konnte nicht gespeichert werden.
      success: Neue Sammlung erstellt!
    destroy:
      success: Sammlung gelöscht!
    form:
      add_line: Zeile hinzufügen
      caption:
        help: Optional; wird als Tooltip auf Bibliothekslinks angezeigt.
      confirm_destroy:
        help: Beim Löschen dieser Bibliothek werden auch %{count} Modelle und deren Daten entfernt. Die Dateien auf der Festplatte werden nicht entfernt. Bist du sicher, dass du die Bibliothek löschen möchtest?
      create_path_if_not_on_disk:
        help: Erstellt den oben angegebenen Bibliotheksordner, wenn er nicht bereits existiert.
      default:
        help: Diese Bibliothek als Standard für Uploads festlegen
      filesystem_description_html: Um Speicherplatz auf deinem lokalen Dateisystem zu verwenden, stelle zunächst sicher, dass er als <a href="https://docs.docker.com/storage/bind-mounts/">Bind-Mount</a> oder anderes Volume in deinem Docker-Container eingehängt ist, und gebe dann den Docker-Pfad ein; nicht den Pfad auf dem Host-Server! Wenn du zum Beispiel einen Ordner voller Dateien unter <code>/mnt/media/3d/models</code> auf deinem Host hast und <code>/mnt/media/3d</code> in deinem Docker-Konfiguration an <code>/libraries</code> gebunden hast, wäre der erforderliche Pfad <code>/libraries/models</code>.
      icon:
        help_html: Optional; ein beliebiges Symbol von <a href="https://icons.getbootstrap.com/" target="_blank">Boostrap icons</a> or <a href="https://nagoshiashumari.github.io/Rpg-Awesome/" target="_blank">RPG-Awesome</a>.
        placeholder: boxes
      notes:
        help_html: Optional, Wird nur Administratoren in den Einstellungen angezeigt. Du kannst <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a> benutzten.
      path:
        placeholder: "/samlungen/modelle"
      s3_bucket:
        help: Nur den bucket, nicht die vollständige URL
      s3_description_html: Manyfold kann jeden S3-kompatiblen Objektspeicher für Ihre Bibliothek verwenden; dies kann einer der zahlreichen <a href="https://github.com/okhosting/awesome-storage?tab=readme-ov-file#s3-compatible-file-servers">Open-Source-</a> oder <a href="https://www.storageprovider.info/blog/all-s3-storage-providers/">kommerziellen</a> Dienste sein.
      s3_endpoint:
        help: Optional; nur für S3-kompatible Dienste erforderlich, nicht für AWS. Gib die vollständige URL ein, beginnend mit "https://"
      s3_path_style:
        help: Deaktivieren, um Bucket-URLs im Vhost-Stil zu verwenden. Wird nur für S3-kompatible Dienste verwendet, nicht für AWS.
      tag_regex:
        help: Suche nach Modellen, die diese Regex erfüllen.
    general:
      edit: Sammlung bearbeiten
      new: Neue Sammlung
    index:
      description: Siehe Details der Bibliothek und ändere sie.
      free_space:
        label: Freier Speicherplatz
      heading: Sammlungen
      settings: Einstellungen
      show:
        help: Zeigt oder versteckt Bibliotheken in der Navigationsleiste und in Formularen. Die Bibliotheksauswahl in Bearbeitungsformularen wird immer für Administratoren angezeigt.
        label: Bibliotheken anzeigen
      tag_regex:
        check: Check
        search_missing: Suche Fehlende
    scan:
      success: Sammlungs-Scan wurde gestartet.
    scan_all:
      success: Scan für alle Sammlungen gestartet.
    storage_services:
      filesystem: Lokales Dateisystem
      s3: S3-kompatibler Cloud-Speicher
    update:
      failure: Es ist ein Fehler aufgetreten, und die Sammlung konnte nicht gespeichert werden.
      success: Sammlungsdetails gespeichert.
</file>

<file path="config/locales/libraries/en.yml">
---
en:
  libraries:
    create:
      failure: An error occurred, and the library could not be saved.
      success: New library created!
    destroy:
      success: Library deleted!
    form:
      add_line: Add Line
      caption:
        help: Optional; shown as a tooltip on library links.
      confirm_destroy:
        help: Deleting this library will also remove %{count} models and their data. Files on disk will not be removed. Are you sure you want to delete the library?
      create_path_if_not_on_disk:
        help: Creates the library folder specified above if it doesn't already exist on disk.
      default:
        help: Set this library as the default for uploads
      filesystem_description_html: To use storage on your local filesystem, firstly make sure it is mounted as a <a href="https://docs.docker.com/storage/bind-mounts/">bind mount</a> or other volume inside your Docker container, then enter the Docker path; not the path on your host server! For instance, if you have a folder full of files at <code>/mnt/media/3d/models</code> on your host, and have bound <code>/mnt/media/3d</code> to <code>/libraries</code> in your Docker configuration, the required path would be <code>/libraries/models</code>.
      icon:
        help_html: Optional; any icon from <a href="https://icons.getbootstrap.com/" target="_blank">Boostrap icons</a> or <a href="https://nagoshiashumari.github.io/Rpg-Awesome/" target="_blank">RPG-Awesome</a>.
        placeholder: boxes
      notes:
        help_html: Optional; shown only to administrators on the settings page. You can use <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
      path:
        placeholder: "/libraries/models"
      s3_bucket:
        help: Just the bucket name, not the full URL
      s3_description_html: Manyfold can use any S3-compatible object storage for your library; this could be from any of a large number of <a href="https://github.com/okhosting/awesome-storage?tab=readme-ov-file#s3-compatible-file-servers">open source</a> or <a href="https://www.storageprovider.info/blog/all-s3-storage-providers/">commercial</a> services.
      s3_endpoint:
        help: Optional; only needed for S3-compatible services, not AWS. Enter the full URL, starting with "https://"
      s3_path_style:
        help: Disable to use vhost-style bucket URLs. Only used for S3-compatible services, not AWS.
      tag_regex:
        help: Check for models missing tags matching these regex.
    general:
      edit: Edit Library
      new: New Library
    index:
      description: See library details and modify.
      free_space:
        label: Free Space
      heading: Libraries
      settings: Settings
      show:
        help: Shows or hides libraries in the navigation bar and forms. Library choice in edit forms will always be shown to administrators.
        label: Show libraries
      tag_regex:
        check: Check
        search_missing: Search Missing
    scan:
      success: Library scan started.
    scan_all:
      success: Scan started for all libraries.
    storage_services:
      filesystem: Local filesystem
      s3: S3-compatible cloud storage
    update:
      failure: An error occurred, and the library could not be saved.
      success: Library details saved.
</file>

<file path="config/locales/libraries/es.yml">
---
es:
  libraries:
    create:
      failure: Se ha producido un error y no se ha podido guardar la biblioteca.
      success: "¡Nueva biblioteca creada!"
    destroy:
      success: "¡Biblioteca eliminada!"
    form:
      add_line: Añadir línea
      caption:
        help: Opcional - Se muestra como un mensaje emergente en los enlaces de la biblioteca.
      confirm_destroy:
        help: Al borrar esta biblioteca también se eliminarán %{count} modelos y sus datos. Los archivos en disco no se eliminarán. ¿Está seguro de que desea eliminar la biblioteca?
      create_path_if_not_on_disk:
        help: Crea la carpeta de la biblioteca especificada anteriormente si aún no existe en el disco.
      default:
        help: Establecer esta biblioteca como la predeterminada para las cargas
      filesystem_description_html: Para utilizar el almacenamiento de tu sistema local, en primer lugar asegúrate de que está montado como un <a href="https://docs.docker.com/storage/bind-mounts/">bind mount</a> u otro volumen dentro de tu contenedor Docker, luego introduce la ruta Docker; ¡no la ruta del servidor host! Por ejemplo, si tienes una carpeta llena de archivos en <code>/mnt/media/3d/models</code> en tu host, y has enlazado <code>/mnt/media/3d</code> a <code>/libraries</code> en tu configuración Docker, la ruta requerida sería <code>/libraries/models</code>.
      icon:
        help_html: Opcional - Cualquier icono de <a href="https://icons.getbootstrap.com/" target="_blank">Boostrap icons</a> o <a href="https://nagoshiashumari.github.io/Rpg-Awesome/" target="_blank">RPG-Awesome</a>.
        placeholder: boxes
      notes:
        help_html: Opcional - sólo se muestra a los administradores en la página de configuración. Puede utilizar <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
      path:
        placeholder: "/libraries/models"
      s3_bucket:
        help: Sólo el nombre del bucket, no la URL completa
      s3_description_html: Manyfold puede utilizar cualquier almacenamiento de objetos compatible con S3 para su biblioteca, incluyendo una amplia gama de servicios <a href="https://github.com/okhosting/awesome-storage?tab=readme-ov-file#s3-compatible-file-servers">open source</a> o <a href="https://www.storageprovider.info/blog/all-s3-storage-providers/">comerciales</a>.
      s3_endpoint:
        help: Opcional - Sólo necesario para servicios compatibles con S3, no con AWS.
      s3_path_style:
        help: Deshabilitar el uso de URLs de buckets con estilo vhost. Solo se utilizan para servicios compatibles con S3, no para AWS.
      tag_regex:
        help: Compruebe si faltan etiquetas en los modelos que coincidan con estas expresiones regulares (regex).
    general:
      edit: Editar biblioteca
      new: Nueva biblioteca
    index:
      description: Ver detalles de la biblioteca y modificar.
      free_space:
        label: Espacio libre
      heading: Bibliotecas
      settings: Ajustes
      show:
        help: Muestra u oculta las bibliotecas en la barra de navegación y en los formularios. La elección de biblioteca en los formularios de edición siempre se mostrará a los administradores.
        label: Mostrar bibliotecas
      tag_regex:
        check: Revisar
        search_missing: Buscar Desaparecidos
    scan:
      success: Se ha iniciado el escaneo de la biblioteca.
    scan_all:
      success: Escaneado iniciado para todas las bibliotecas.
    storage_services:
      filesystem: Sistema de archivos local
      s3: Almacenamiento en la nube compatible con S3
    update:
      failure: Se ha producido un error y no se ha podido guardar la biblioteca.
      success: Información de la biblioteca guardados.
</file>

<file path="config/locales/libraries/fr.yml">
---
fr:
  libraries:
    create:
      failure: Une erreur s'est produite et la bibliothèque n'a pas pu être sauvegardée.
      success: Nouvelle bibliothèque créée !
    destroy:
      success: Bibliothèque supprimée !
    form:
      add_line: Ajouter une ligne
      caption:
        help: Facultatif ; s'affiche sous forme d'info-bulle sur les liens de la bibliothèque.
      confirm_destroy:
        help:
      create_path_if_not_on_disk:
        help:
      default:
        help:
      filesystem_description_html: Pour utiliser le stockage sur votre système de fichiers local, assurez-vous tout d'abord qu'il est monté en tant que <a href="https://docs.docker.com/storage/bind-mounts/">"bind mount"</a> ou autre volume dans votre conteneur Docker, puis entrez le chemin d'accès Docker ; pas le chemin d'accès sur votre serveur hôte ! Par exemple, si vous avez un répertoire plein de fichiers dans <code>/mnt/media/3d/models</code> sur votre hôte, et que vous avez lié <code>/mnt/media/3d</code> à <code>/libraries</code> dans votre configuration Docker, le chemin requis serait <code>/libraries/models</code>.
      icon:
        help_html: Icônes par la <a href="https://icons.getbootstrap.com/" target="_blank">bibliothèque Bootstrap </a> ou <a href="https://nagoshiashumari.github.io/Rpg-Awesome/" target="_blank">RPG-Awesome</a>.
        placeholder: boxes
      notes:
        help_html: Facultatif ; affiché uniquement par les administrateurs sur la page des paramètres. Vous pouvez utiliser du <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
      path:
        placeholder: "/libraries/models"
      s3_bucket:
        help: Juste le nom du bucket, pas l'URL complète
      s3_description_html: Manyfold peut utiliser n'importe quel stockage d'objets compatible avec S3 pour votre bibliothèque ; il peut s'agir d'un grand nombre de services <a href="https://github.com/okhosting/awesome-storage?tab=readme-ov-file#s3-compatible-file-servers">open source</a> ou <a href="https://www.storageprovider.info/blog/all-s3-storage-providers/">commerciaux</a>.
      s3_endpoint:
        help: Facultatif ; nécessaire uniquement pour les services compatibles S3, pas pour AWS.
      s3_path_style:
        help: Désactiver pour utiliser des URL de bucket de type "vhost". Cette option n'est utilisée que pour les services compatibles S3, et non pour AWS.
      tag_regex:
        help: Vérifier si les étiquettes des modèles manquant correspondent à cette expression régulière.
    general:
      edit: Editer la bibliothèque
      new: Nouvelle bibliothèque
    index:
      description: Voir les détails de la bibliothèque et modifier.
      free_space:
        label: Espace libre
      heading: Bibliothèques
      settings:
      show:
        help:
        label:
      tag_regex:
        check: Vérifier
        search_missing: Recherche manquante
    scan:
      success: L'analyse de la bibliothèque a commencé.
    scan_all:
      success: L'analyse de toutes les bibliothèques a commencé.
    storage_services:
      filesystem: Système de fichiers local
      s3: Stockage en cloud compatible S3
    update:
      failure: Une erreur s'est produite et la bibliothèque n'a pas pu être sauvegardée.
      success: Détails de la bibliothèque sauvegardés.
</file>

<file path="config/locales/libraries/ja.yml">
---
ja:
  libraries:
    create:
      failure:
      success:
    destroy:
      success:
    form:
      add_line:
      caption:
        help:
      confirm_destroy:
        help:
      create_path_if_not_on_disk:
        help:
      default:
        help:
      filesystem_description_html:
      icon:
        help_html:
        placeholder:
      notes:
        help_html:
      path:
        placeholder:
      s3_bucket:
        help:
      s3_description_html:
      s3_endpoint:
        help:
      s3_path_style:
        help:
      tag_regex:
        help:
    general:
      edit:
      new:
    index:
      description:
      free_space:
        label:
      heading:
      settings:
      show:
        help:
        label:
      tag_regex:
        check:
        search_missing:
    scan:
      success:
    scan_all:
      success:
    storage_services:
      filesystem:
      s3:
    update:
      failure:
      success:
</file>

<file path="config/locales/libraries/nl.yml">
---
nl:
  libraries:
    create:
      failure: Er is een fout opgetreden en de bibliotheek kon niet worden opgeslagen.
      success: Nieuwe bibliotheek aangemaakt!
    destroy:
      success: Bibliotheek verwijderd!
    form:
      add_line: Regel toevoegen
      caption:
        help: Optioneel; wordt weergegeven als tooltip op bibliotheeklinks.
      confirm_destroy:
        help:
      create_path_if_not_on_disk:
        help:
      default:
        help:
      filesystem_description_html: Om opslag op je lokale bestandssysteem te gebruiken, zorg er eerst voor dat het is gekoppeld als een <a href="https://docs.docker.com/storage/bind-mounts/">bind mount</a> of ander volume in je Docker container, en voer dan het Docker-pad in; niet het pad op je hostserver! Bijvoorbeeld, als je een map met bestanden hebt op <code>/mnt/media/3d/models</code> op je host, en <code>/mnt/media/3d</code> hebt gekoppeld aan <code>/libraries</code> in je Docker-configuratie, dan zou het vereiste pad <code>/libraries/models</code> zijn.
      icon:
        help_html: Optioneel; elk pictogram van <a href="https://icons.getbootstrap.com/" target="_blank">Boostrap icons</a> of <a href="https://nagoshiashumari.github.io/Rpg-Awesome/" target="_blank">RPG-Awesome</a>.
        placeholder: boxes
      notes:
        help_html: Optioneel; alleen zichtbaar voor beheerders op de instellingenpagina. Je kunt <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a> gebruiken.
      path:
        placeholder: "/libraries/models"
      s3_bucket:
        help: Alleen de bucket-naam, niet de volledige URL
      s3_description_html: Manyfold kan elke S3-compatibele objectopslag gebruiken voor je bibliotheek; dit kan van een groot aantal <a href="https://github.com/okhosting/awesome-storage?tab=readme-ov-file#s3-compatible-file-servers">open source</a> of <a href="https://www.storageprovider.info/blog/all-s3-storage-providers/">commerciële</a> diensten zijn.
      s3_endpoint:
        help: Optioneel; alleen nodig voor S3-compatibele diensten, niet voor AWS.
      s3_path_style:
        help:
      tag_regex:
        help: Controleer op modellen die tags missen die overeenkomen met deze regex.
    general:
      edit: Bibliotheek Bewerken
      new: Nieuwe Bibliotheek
    index:
      description: Bekijk bibliotheekdetails en wijzig.
      free_space:
        label: Vrije Ruimte
      heading: Bibliotheken
      settings:
      show:
        help:
        label:
      tag_regex:
        check: Controleren
        search_missing: Zoek Ontbrekende
    scan:
      success: Bibliotheekscan gestart.
    scan_all:
      success: Scan gestart voor alle bibliotheken.
    storage_services:
      filesystem: Lokaal bestandssysteem
      s3: S3-compatibele cloudopslag
    update:
      failure: Er is een fout opgetreden en de bibliotheek kon niet worden opgeslagen.
      success: Bibliotheekdetails opgeslagen.
</file>

<file path="config/locales/libraries/pl.yml">
---
pl:
  libraries:
    create:
      failure: Wystąpił błąd i nie można było zapisać biblioteki.
      success: Utworzono nową bibliotekę!
    destroy:
      success: Biblioteka została usunięta!
    form:
      add_line: Dodaj linię
      caption:
        help: Opcjonalne; wyświetlane jako tooltip na linkach do biblioteki.
      confirm_destroy:
        help: Usunięcie tej biblioteki spowoduje również usunięcie %{count} modeli i ich danych. Pliki na dysku nie zostaną usunięte. Czy na pewno chcesz usunąć tą bibliotekę?
      create_path_if_not_on_disk:
        help: Tworzy folder biblioteki określony powyżej, jeśli nie istnieje już na dysku.
      default:
        help: Ustaw tę bibliotekę jako domyślną dla przesyłanych plików
      filesystem_description_html: Aby użyć przestrzeni w lokalnym systemie plików, najpierw upewnij się, że jest on zamontowany jako <a href="https://docs.docker.com/storage/bind-mounts/">bind mount</a> lub inny wolumin wewnątrz twojego kontenera Dockera, a następnie wprowadź ścieżkę Dockera, a nie ścieżkę na serwerze hosta! Na przykład, jeśli masz folder pełen plików w <code>/mnt/media/3d/models</code> na hoście i powiązałeś <code>/mnt/media/3d</code> z <code>/libraries</code> w konfiguracji Dockera, wymaganą ścieżką będzie <code>/libraries/models</code>.
      icon:
        help_html: Opcjonalne; wszystkie ikony z <a href="https://icons.getbootstrap.com/" target="_blank">Boostrap icons</a> lub <a href="https://nagoshiashumari.github.io/Rpg-Awesome/" target="_blank">RPG-Awesome</a>.
        placeholder: boxes
      notes:
        help_html: Opcjonalne; widoczne tylko dla administratorów na stronie ustawień. Możesz używać <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
      path:
        placeholder: "/libraries/models"
      s3_bucket:
        help:
      s3_description_html:
      s3_endpoint:
        help:
      s3_path_style:
        help:
      tag_regex:
        help: Sprawdź modele pod kątem brakujących tagów pasujących do tego regexa.
    general:
      edit: Edytuj Bibliotekę
      new: Nowa Biblioteka
    index:
      description: Zobacz szczegóły biblioteki i ją zmodyfikuj.
      free_space:
        label: Wolna przestrzeń
      heading: Biblioteki
      settings: Ustawienia
      show:
        help: Pokazuje lub ukrywa biblioteki na pasku nawigacyjnym i w formularzach. Wybór biblioteki w formularzach edycji będzie zawsze widoczny dla administratorów.
        label: Pokaż biblioteki
      tag_regex:
        check: Sprawdź
        search_missing: Wyszukaj Brakujące
    scan:
      success: Rozpoczęto skanowanie biblioteki.
    scan_all:
      success: Rozpoczęto skanowanie wszystkich bibliotek.
    storage_services:
      filesystem: Lokalny system plików
      s3:
    update:
      failure: Wystąpił błąd i nie można było zapisać biblioteki.
      success: Zapisano szczegóły biblioteki.
</file>

<file path="config/locales/model_files/cs.yml">
---
cs:
  model_files:
    bulk_edit:
      description: 'Vyberte soubory, které chcete změnit:'
      form_subtitle: 'Vyberte změny, které chcete provést:'
      pattern: Najít
      rename: Přejmenovat soubory
      replacement: Nahradit
      select: Vybrat soubor '%{name}'
      select_all: Vybrat všechny soubory
      split: Rozdělit vybrané soubory do nového modelu
      submit: Aktualizace vybraných souborů
      title: Hromadné úpravy souborů
    bulk_update:
      success: Soubory byly úspěšně aktualizovány.
    create:
      conversion_started: Konverze souborů byla zahájena. Převedený soubor by měl být brzy k dispozici.
      success: Soubory byly úspěšně nahrány!
    destroy:
      confirm: Opravdu chcete tento soubor odstranit ze svého souborového systému?
      success: Soubor smazán!
    download:
      bambu: Otevřít v Bambu Studio
      cura: Otevřít v Ultimaker Cura
      elegoo: Otevřít v ElegooSlicer
      orca: Otevřít v OrcaSlicer
      prusa: Otevřít v PrusaSlicer
      superslicer: Otevřít v SuperSlicer
    form:
      notes:
        help_html: Můžete použít <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
    general:
      edit: Upravit informace o souboru
    show:
      convert: Převést do 3MF
      details_heading: Detaily
      download:
        menu_header: Možnosti stahování
      notes_heading: Poznámky
    update:
      failure: Došlo k chybě a údaje o souboru nelze uložit.
      success: Detaily souboru uloženy.
</file>

<file path="config/locales/model_files/de.yml">
---
de:
  model_files:
    bulk_edit:
      description: 'Wähle die zu ändernden Dateien aus:'
      form_subtitle: 'Wähle die Änderungen aus, die du vornehmen möchtest:'
      pattern: Finden
      rename: Dateien umbenennen
      replacement: Ersetzen durch
      select: Datei '%{name}' auswählen
      select_all: Alle Dateien auswählen
      split: Ausgewählte Dateien in ein neues Modell aufteilen
      submit: Ausgewählte Dateien aktualisieren
      title: Dateien massenweise bearbeiten
    bulk_update:
      success: Dateien erfolgreich aktualisiert.
    create:
      conversion_started: Die Dateikonvertierung hat begonnen. Die konvertierte Datei sollte in Kürze verfügbar sein.
      success: Die Datei(en) wurde(n) erfolgreich hochgeladen.
    destroy:
      confirm: Bist du sicher, dass du diese Datei aus Ihrem Dateisystem entfernen möchtest?
      success: Datei gelöscht!
    download:
      bambu: in Bambu Studio öffnen
      cura: in Ultimaker Cura öffnen
      elegoo: Im ElegooSlicer öffnen
      orca: in OrcaSlicer öffnen
      prusa: in PrusaSlicer öffnen
      superslicer: Im SuperSlicer öffnen
    form:
      notes:
        help_html: 'Du kannst <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a> verwenden. '
    general:
      edit: Dateiinformationen bearbeiten
    show:
      convert: zu 3MF konvertieren
      details_heading: Details
      download:
        menu_header: Download optionen
      notes_heading: Notizen
    update:
      failure: Es ist ein Fehler aufgetreten und die Dateidetails konnten nicht gespeichert werden.
      success: Datei-eigenschaften gespeichert.
</file>

<file path="config/locales/model_files/en.yml">
---
en:
  model_files:
    bulk_edit:
      description: 'Select files to change:'
      form_subtitle: 'Select changes to make:'
      pattern: Find
      rename: Rename files
      replacement: Replace with
      select: Select file '%{name}'
      select_all: Select all files
      split: Split selected files into new model
      submit: Update selected files
      title: Bulk Edit Files
    bulk_update:
      success: Files updated successfully.
    create:
      conversion_started: File conversion started. The converted file should be available shortly.
      success: File(s) uploaded successfully!
    destroy:
      confirm: Are you sure you want to remove this file from your filesystem?
      success: File deleted!
    download:
      bambu: Open in Bambu Studio
      cura: Open in Ultimaker Cura
      elegoo: Open in ElegooSlicer
      orca: Open in OrcaSlicer
      prusa: Open in PrusaSlicer
      superslicer: Open in SuperSlicer
    form:
      notes:
        help_html: You can use <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
    general:
      edit: Edit File Information
    show:
      convert: Convert to 3MF
      details_heading: Details
      download:
        menu_header: Download options
      notes_heading: Notes
    update:
      failure: An error occurred and file details could not be saved.
      success: File details saved.
</file>

<file path="config/locales/model_files/es.yml">
---
es:
  model_files:
    bulk_edit:
      description: 'Seleccione los archivos que desea modificar:'
      form_subtitle: 'Seleccione los cambios a realizar:'
      pattern: Encontrar
      rename: Renombrar archivos
      replacement: Sustituir por
      select: Seleccionar fichero '%{name}'
      select_all: Seleccionar todos los archivos
      split: Dividir los archivos seleccionados en un nuevo modelo
      submit: Actualizar archivos seleccionados
      title: Edición masiva de archivos
    bulk_update:
      success: Archivos actualizados correctamente.
    create:
      conversion_started: Se ha iniciado la conversión del archivo. El archivo convertido debería estar disponible en poco tiempo.
      success: Archivo(s) cargado(s) correctamente.
    destroy:
      confirm: "¿Estás seguro de que quieres eliminar este archivo del sistema?"
      success: "¡Fichero eliminado!"
    download:
      bambu: Abrir en Bambu Studio
      cura: Abrir en Ultimaker Cura
      elegoo: Abrir en ElegooSlicer
      orca: Abrir en OrcaSlicer
      prusa: Abrir en PrusaSlicer
      superslicer: Abrir en SuperSlicer
    form:
      notes:
        help_html: Puedes utilizar <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
    general:
      edit: Editar la información del archivo
    show:
      convert: Convertir a 3MF
      details_heading: Detalles
      download:
        menu_header: Opciones de Descarga
      notes_heading: Notas
    update:
      failure: Se ha producido un error y no se ha podido guardar la información del fichero.
      success: Información del fichero guardada.
</file>

<file path="config/locales/model_files/fr.yml">
---
fr:
  model_files:
    bulk_edit:
      description: 'Sélectionnez les fichiers à modifier :'
      form_subtitle: 'Sélectionnez les modifications à apporter :'
      pattern: Trouver
      rename: Renommer les fichiers
      replacement: Remplacer par
      select: Sélectionner le fichier '%{name}'
      select_all: Sélectionner tous les fichiers
      split: Éclater les fichiers sélectionnés en un nouveau modèle
      submit: Mettre à jour les fichiers sélectionnés
      title: Modifier les fichiers en lot
    bulk_update:
      success: Les fichiers ont été mis à jour avec succès.
    create:
      conversion_started: La conversion du fichier a commencé. Le fichier converti devrait être disponible sous peu.
      success: Fichier(s) téléversé(s) avec succès !
    destroy:
      confirm: Êtes-vous sûr de vouloir supprimer ce fichier de votre système de fichiers ?
      success: Fichier supprimé !
    download:
      bambu:
      cura:
      elegoo:
      orca:
      prusa:
      superslicer:
    form:
      notes:
        help_html: Vous pouvez utiliser du <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
    general:
      edit: Modifier les informations du fichier
    show:
      convert: Convertir en 3MF
      details_heading: Détails
      download:
        menu_header:
      notes_heading: Notes
    update:
      failure: Une erreur s'est produite et les détails du fichier n'ont pas pu être sauvegardés.
      success: Détails du fichier sauvegardé.
</file>

<file path="config/locales/model_files/ja.yml">
---
ja:
  model_files:
    bulk_edit:
      description:
      form_subtitle:
      pattern:
      rename:
      replacement:
      select:
      select_all:
      split:
      submit:
      title:
    bulk_update:
      success:
    create:
      conversion_started:
      success:
    destroy:
      confirm:
      success:
    download:
      bambu: Bambu Studioにオープン
      cura: Ultimaker Curaにオープン
      elegoo: ElegooSlicerにオープン
      orca: OrcaSlicerにオープン
      prusa: PrusaSlicerにオープン
      superslicer: SuperSlicerにオープン
    form:
      notes:
        help_html:
    general:
      edit:
    show:
      convert: 3MFに変換
      details_heading:
      download:
        menu_header:
      notes_heading:
    update:
      failure:
      success:
</file>

<file path="config/locales/model_files/nl.yml">
---
nl:
  model_files:
    bulk_edit:
      description: 'Selecteer bestanden om te wijzigen:'
      form_subtitle: 'Selecteer aan te brengen wijzigingen:'
      pattern:
      rename:
      replacement:
      select: Selecteer bestand '%{name}'
      select_all: Selecteer alle bestanden
      split: Splits geselecteerde bestanden in nieuw model
      submit: Geselecteerde bestanden bijwerken
      title: Bestanden Bulksgewijs Bewerken
    bulk_update:
      success: Bestanden succesvol bijgewerkt.
    create:
      conversion_started: Bestandsconversie gestart. Het geconverteerde bestand zou binnenkort beschikbaar moeten zijn.
      success: Bestand(en) succesvol geüpload!
    destroy:
      confirm: Weet je zeker dat je dit bestand wilt verwijderen van je bestandssysteem?
      success: Bestand verwijderd!
    download:
      bambu:
      cura:
      elegoo:
      orca:
      prusa:
      superslicer:
    form:
      notes:
        help_html: Je kunt <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a> gebruiken.
    general:
      edit: Bestandsinformatie Bewerken
    show:
      convert: Converteren naar 3MF
      details_heading: Details
      download:
        menu_header:
      notes_heading: Notities
    update:
      failure: Er is een fout opgetreden en de bestandsdetails konden niet worden opgeslagen.
      success: Bestandsdetails opgeslagen.
</file>

<file path="config/locales/model_files/pl.yml">
---
pl:
  model_files:
    bulk_edit:
      description: 'Wybierz pliki do zmiany:'
      form_subtitle: 'Wybierz zmiany do wprowadzenia:'
      pattern: Znajdź
      rename: Zmień nazwę plików
      replacement: Zastąp przez
      select: Zaznacz plik '%{name}'
      select_all: Zaznacz wszystkie pliki
      split: Rozdziel wybrane pliki na nowy model
      submit: Zaktualizuj zaznaczone pliki
      title: Zbiorczo edytuj pliki
    bulk_update:
      success: Pliki zaktualizowane pomyślnie.
    create:
      conversion_started: Konwersja pliku została rozpoczęta. Przekonwertowany plik powinien być wkrótce dostępny.
      success: Plik(i) przesłany(e) pomyślnie.
    destroy:
      confirm: Czy na pewno chcesz usunąć ten plik z systemu plików?
      success: Plik usunięty!
    download:
      bambu: Otwórz w Bambu Studio
      cura: Otwórz w Ultimaker Cura
      elegoo: Otwórz w ElegooSlicer
      orca: Otwórz w OrcaSlicer
      prusa: Otwórz w PrusaSlicer
      superslicer: Otwórz w SuperSlicer
    form:
      notes:
        help_html: Możesz używać <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
    general:
      edit: Edytuj informacje o pliku
    show:
      convert: Konwertuj do 3MF
      details_heading: Szczegóły
      download:
        menu_header: Opcje pobierania
      notes_heading: Notatki
    update:
      failure: Wystąpił błąd i nie można było zapisać szczegółów pliku.
      success: Szczegóły pliku zostały zapisane.
</file>

<file path="config/locales/models/cs.yml">
---
cs:
  models:
    bulk_edit:
      description: 'Vyberte modely, které chcete změnit:'
      form_subtitle: 'Vyberte změny, které chcete provést:'
      needs_organizing: Potřebuje uspořádat
      remove_tags: Odstranit štítky
      select: Vybrat model '%{name}'
      select_all: Vybrat všechny modely
      submit: Aktualizace vybraných modelů
      title: Hromadné úpravy modelů
      update_all: Aktualizace všech %{count} modelů
    bulk_fields:
      add_tags: Přidat štítky
    bulk_update:
      success: Modely byly úspěšně aktualizovány.
    create:
      success: Soubory byly úspěšně nahrány!
    destroy:
      confirm: Tím se odstraní související soubory, pokud na disku existují. Určitě chcete pokračovat?
      success: Model smazán!
    file:
      delete: Smazat soubor
      edit: Upravit soubor
      open_button:
        label: Zobrazit podrobnosti pro %{name}
        text: Otevřít
      presupported: Předběžně podporovaná verze
      set_as_preview: Nastavit jako náhled
    form:
      notes:
        help_html: Můžete použít <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
      preview_file:
        help: Soubor zobrazený jako náhled modelu na stránkách knihovny
      tags: Štítky
    general:
      edit: Upravit model
    image_carousel:
      next: Další
      play_pause: Přehrávání nebo pozastavení obrázků
      previous: Předchozí
      select_slide: Vyberte obrázek ke zobrazení
      slide_label: "%{name} (%{index} z %{count})"
    list:
      bulk_edit: Upravit všechny modely
      no_results_html: Je nám líto, ale nenašli jsme nic, co bychom Vám mohli ukázat! Zkuste změnit filtry nebo vyhledávací filtry nebo nahrát nějaké modely.
      no_results_signed_out_html:
      skip_models: Přeskočit seznam modelů
    merge:
      success: Modely byly úspěšně sloučeny.
    new:
      description: Přidávejte nové modely nahráváním souborů! Pokud nahrajete komprimovaný archiv, bude rozbalen a stane se z něj jeden model obsahující všechny soubory. Pokud nahrajete jednotlivé soubory, každý z nich se stane samostatným modelem.
      files:
        label: Vybrat soubory
      free_space: "(%{available} volných)"
      library:
        help: Knihovna, do které se má nahrávat.
      submit: Vytvořit modely
      title: Nahrát
    problem:
      merge_all: Sloučit vše
    scan:
      success: Spuštěna kontrola modelu.
    show:
      download_preparing:
      download_requested:
      files: Soubory
      files_card:
        bulk_edit: Upravit všechny soubory
        heading: Soubory
      followers: Sledující
      license: Licence
      merge:
        heading: Sloučit
        warning: Sloučení přesune všechny soubory z tohoto modelu do cílového a odstraní tento model. Metadata souborů zůstanou zachována, ale všechna metadata modelu budou ztracena!
        with: Sloučit s
      model_details: Detaily modelu
      organize:
        button_text: Uspořádání souborů
        confirm:
          are_you_sure: Jste si jistí, že to chcete udělat?
          'no': Ne, zrušit
          summary_html: Složka a soubory, které tvoří tento model, budou přesunuty z:<br> <code>%{from}</code><br> do<br> <code>%{to}</code>
          'yes': Ano, přesunout soubory
      path: Cesta
      preview:
      rescan: Znovu zkontrolovat soubory
      search: Vyhledávání modelů s tímto názvem na internetu
      submit: Nahrát soubory
      tags: Štítky
      upload_card:
        heading: Nahrát
    update:
      success: Detaily modelu uloženy.
</file>

<file path="config/locales/models/de.yml">
---
de:
  models:
    bulk_edit:
      description: 'Wähle die zu ändernden Modelle aus:'
      form_subtitle: 'Wähle die Änderungen aus, die du vornehmen möchtest:'
      needs_organizing: Muss organisiert werden
      remove_tags: Tags entfernen
      select: Modell '%{name}' auswählen
      select_all: Alle Modelle auswählen
      submit: Ausgewählte Modelle aktualisieren
      title: Modelle massenweise bearbeiten
      update_all: Alle %{count}-Modelle aktualisieren
    bulk_fields:
      add_tags: Tags hinzufügen
    bulk_update:
      success: Modelle erfolgreich aktualisiert.
    create:
      success: Die Datei(en) wurde(n) erfolgreich hochgeladen.
    destroy:
      confirm: Hiermit werden alle Dateien gelöscht, welche mit dieser in Relation stehen. bist du sicher, dass du fortfahren möchtest?
      success: Modell gelöscht!
    file:
      delete: Datei löschen
      edit: Datei bearbeiten
      open_button:
        label: Details für %{name} anzeigen
        text: Öffnen
      presupported: Version mit Support struktur
      set_as_preview: Als Vorschau setzen
    form:
      notes:
        help_html: 'Du kannst <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a> verwenden. '
      preview_file:
        help: Die Datei wird als Modellvorschau auf den Sammlungsseiten angezeigt
      tags: Tags
    general:
      edit: Modell bearbeiten
    image_carousel:
      next: Weiter
      play_pause: Pausiere oder Starte Diashow
      previous: Zurück
      select_slide: Bild zum Anzeigen auswählen
      slide_label: "%{name} (%{index} von %{count})"
    list:
      bulk_edit: Alle Modelle bearbeiten
      no_results_html: Wir konnten leider nichts finden, was wir dir zeigen könnten! Versuche, deine Filter oder Suchbegriffe zu ändern, oder lade ein einige Modelle hoch.
      no_results_signed_out_html: Wir konnten leider nichts finden, was wir dir zeigen können! Vielleicht gibt es mehr zu sehen, wenn du <a href="%{link}">sign in</a>.
      skip_models: Modellliste überspringen
    merge:
      success: Die Modelle wurden erfolgreich zusammengeführt.
    new:
      description: Lade neue Modelle hoch. Jedes hochgeladene Archiv wird extrahiert und zu einem einzigen Modell, das alle Dateien enthält. Wenn du einzelne Dateien Hochlädst, werden sie zu einzelnen Modellen.
      files:
        label: Dateien auswählen
      free_space: "(%{available} frei)"
      library:
        help: Die Sammlung, in die hochgeladen werden soll.
      submit: Modelle erstellen
      title: Hochladen
    problem:
      merge_all: Alle zusammenführen
    scan:
      success: Modell-Scan gestartet
    show:
      download_preparing: Download wird vorbereitet, bitte warten
      download_requested: Der Download wurde angefordert und wird in Kürze verfügbar sein, bitte warten.
      files: Dateien
      files_card:
        bulk_edit: Alle Dateien bearbeiten
        heading: Dateien
      followers: Follower
      license: Lizenz
      merge:
        heading: Zusammenführen
        warning: Bei der Zusammenführung werden alle Dateien dieses Modells auf das Ziel verschoben und das Modell wird entfernt. Die Metadaten der Dateien bleiben erhalten, aber alle Metadaten des Modelle gehen verloren!
        with: Zusammenführen mit
      model_details: Modelldetails
      organize:
        button_text: Dateien organisieren
        confirm:
          are_you_sure: Bist du sicher?
          'no': Nein, abbrechen
          summary_html: Der Ordner und die Dateien, aus denen dieses Modell besteht, werden verschoben von:<br> <code>%{from}</code><br> nach<br> <code>%{to}</code>
          'yes': Ja, verschiebe die Dateien
      path: Pfad
      preview: Dies ist nur eine Vorschau des vollständigen Modells, das %{count} weitere Dateien enthält. Wende dich an den Eigentümer des Modells, um vollen Zugriff zu erhalten.
      rescan: Dateien neu scannen
      search: Suche im Internet nach Modellen mit diesem Namen
      submit: Dateien hochladen
      tags: Tags
      upload_card:
        heading: Hochladen
    update:
      success: Modelldetails gespeichert.
</file>

<file path="config/locales/models/en.yml">
---
en:
  models:
    bulk_edit:
      description: 'Select models to change:'
      form_subtitle: 'Select changes to make:'
      needs_organizing: Needs organizing
      remove_tags: Remove tags
      select: Select model '%{name}'
      select_all: Select all models
      submit: Update Selected Models
      title: Bulk Edit Models
      update_all: Update All %{count} Models
    bulk_fields:
      add_tags: Add tags
    bulk_update:
      success: Models updated successfully.
    create:
      success: File(s) uploaded successfully.
    destroy:
      confirm: This will delete associated files if they exist on disk. Are you sure you want to continue?
      success: Model deleted!
    file:
      delete: Delete file
      edit: Edit file
      open_button:
        label: View details for %{name}
        text: Open
      presupported: Presupported Version
      set_as_preview: Set as preview
    form:
      notes:
        help_html: You can use <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
      preview_file:
        help: The file displayed as a model preview in library pages
      tags: Tags
    general:
      edit: Edit Model
    image_carousel:
      next: Next
      play_pause: Play or pause images
      previous: Previous
      select_slide: Choose image to display
      slide_label: "%{name} (%{index} of %{count})"
    list:
      bulk_edit: Edit All Models
      no_results_html: Sorry, we couldn't find anything to show you! Try changing your filters or search terms, or uploading some models.
      no_results_signed_out_html: Sorry, we couldn't find anything to show you! There might be more to see if you <a href="%{link}">sign in</a>.
      skip_models: Skip model list
    merge:
      success: Models merged successfully.
    new:
      description: Add new models by uploading files! If you upload a compressed archive, it will be extracted and become a single model containing all the files. If you upload individual files, they will each become a separate model.
      files:
        label: Select Files
      free_space: "(%{available} free)"
      library:
        help: The library to upload to.
      submit: Create models
      title: Upload
    problem:
      merge_all: Merge all
    scan:
      success: Model scan started
    show:
      download_preparing: Download is being prepared, please wait.
      download_requested: Download requested and will be ready soon, please wait.
      files: Files
      files_card:
        bulk_edit: Edit all files
        heading: Files
      followers: Followers
      license: License
      merge:
        heading: Merge
        warning: Merging moves all files from this model to the target, and removes this model. File metadata is preserved, but any model metadata will be lost!
        with: Merge with
      model_details: Model Details
      organize:
        button_text: Organize files
        confirm:
          are_you_sure: Are you sure you want to do this?
          'no': No, cancel
          summary_html: The folder and files that make up this model will be moved from:<br> <code>%{from}</code><br> to<br> <code>%{to}</code>
          'yes': Yes, move the files
      path: Path
      preview: This is just a preview of the complete model, which contains %{count} more files. Contact the model owner to get full access.
      rescan: Rescan files
      search: Search the Internet for models with this name
      submit: Upload Files
      tags: Tags
      upload_card:
        heading: Upload
    update:
      success: Model details saved.
</file>

<file path="config/locales/models/es.yml">
---
es:
  models:
    bulk_edit:
      description: 'Seleccione los modelos que desea modificar:'
      form_subtitle: 'Seleccione los cambios a realizar:'
      needs_organizing: Necesita organización
      remove_tags: Eliminar etiquetas
      select: Seleccione el modelo '%{name}'
      select_all: Seleccione todos los modelos
      submit: Actualizar modelos seleccionados
      title: Edición masiva de modelos
      update_all: Actualizar los %{count} modelos
    bulk_fields:
      add_tags: Añadir etiquetas
    bulk_update:
      success: Modelos actualizados correctamente.
    create:
      success: Archivo(s) cargado(s) correctamente.
    destroy:
      confirm: Esto borrará los archivos. ¿Estás seguro de que quieres continuar?
      success: "¡Modelo eliminado!"
    file:
      delete: Eliminar fichero
      edit: Editar fichero
      open_button:
        label: Ver detalles de %{name}
        text: Abrir
      presupported: Versión con soporte predefinido
      set_as_preview: Establecer como vista previa
    form:
      notes:
        help_html: Puedes utilizar <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
      preview_file:
        help: El archivo que se mostrará como vista previa del modelo en las páginas de la biblioteca
      tags: Etiquetas
    general:
      edit: Editar modelo
    image_carousel:
      next: Siguiente
      play_pause: Reproducir o pausar imágenes
      previous: Anterior
      select_slide: Elija la imagen que desea mostrar
      slide_label: "%{name} (%{index} de %{count})"
    list:
      bulk_edit: Editar todos los modelos
      no_results_html: Lo sentimos, ¡no hemos encontrado nada que mostrarte! Prueba a cambiar los filtros o los términos de búsqueda, o a subir algunos modelos.
      no_results_signed_out_html: Lo sentimos, no hemos encontrado nada que mostrarte. Puede que haya más cosas que ver si <a href="%{link}">inicias sesión</a>.
      skip_models: Omitir lista de modelos
    merge:
      success: Modelos fusionados correctamente.
    new:
      description: Añade nuevos modelos subiendo archivos. Si subes un archivo comprimido, se extraerá y se convertirá en un único modelo que contendrá todos los archivos. Si subes archivos individuales, cada uno de ellos se convertirá en un modelo independiente.
      files:
        label: Seleccionar archivos
      free_space: "(%{available} disponible)"
      library:
        help: Biblioteca donde se cargará el archivo.
      submit: Crear modelos
      title: Cargar
    problem:
      merge_all: Fusionar todo
    scan:
      success: Escaneo de modelos iniciado
    show:
      download_preparing: Se está preparando la descarga, por favor espere.
      download_requested: Descarga solicitada y estará lista en breve, por favor espere.
      files: Archivos
      files_card:
        bulk_edit: Editar todos los archivos
        heading: Archivos
      followers: Seguidores
      license: Licencia
      merge:
        heading: Fusionar
        warning: La fusión mueve todos los archivos de este modelo al destino y elimina este modelo. Los metadatos de los archivos se conservan, pero los metadatos del modelo se pierden
        with: Fusionar con
      model_details: Información del modelo
      organize:
        button_text: Organizar archivos
        confirm:
          are_you_sure: "¿Seguro que quieres hacer  esto?"
          'no': No, cancelar
          summary_html: La carpeta y los archivos que componen este modelo se moverán de:<br> <code>%{from}</code><br> a<br> <code>%{to}</code>
          'yes': Sí, mueve los archivos
      path: Ruta
      preview: Esta es solo una vista previa del modelo completo, que contiene %{count} archivos más. Contacte con el propietario del modelo para obtener acceso completo.
      rescan: Re-escanear archivos
      search: Busca en Internet modelos con este nombre
      submit: Cargar archivos
      tags: Etiquetas
      upload_card:
        heading: Cargar
    update:
      success: Información del modelo guardada.
</file>

<file path="config/locales/models/fr.yml">
---
fr:
  models:
    bulk_edit:
      description: 'Sélectionner les modèles à modifier :'
      form_subtitle: 'Sélectionnez les modifications à apporter :'
      needs_organizing: Besoin d'organisation
      remove_tags: Supprimer les étiquettes
      select: Sélectionner le modèle '%{name}'
      select_all: Sélectionner tous les modèles
      submit: Mettre à jour les modèles sélectionnés
      title: Modifier les modèles en lot
      update_all: Mettre à jour les %{count} modèles
    bulk_fields:
      add_tags: Ajouter des étiquettes
    bulk_update:
      success: Les modèles ont été mis à jour avec succès.
    create:
      success: Fichier(s) téléchargé(s) avec succès.
    destroy:
      confirm: Cette opération supprimera les fichiers. Êtes-vous sûr de vouloir continuer ?
      success: Modèle supprimé !
    file:
      delete:
      edit:
      open_button:
        label: Voir les détails pour %{name}
        text: Ouvrir
      presupported:
      set_as_preview: Définir comme aperçu
    form:
      notes:
        help_html: Vous pouvez utiliser du <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
      preview_file:
        help: Le fichier affiché en tant qu'aperçu du modèle dans les pages de la bibliothèque
      tags: Étiquette
    general:
      edit: Modifier le modèle
    image_carousel:
      next: Suivant
      play_pause: Lire/mettre en pause les images
      previous: Précédent
      select_slide: Choisir l'image à afficher
      slide_label: "%{name} (%{index} sur %{count})"
    list:
      bulk_edit: Modifier tous les modèles
      no_results_html: Désolé, nous n'avons rien à vous montrer ! Essayez de modifier les filtres ou les termes de recherche, ou de télécharger des modèles.
      no_results_signed_out_html:
      skip_models: Sauter la liste des modèles
    merge:
      success: Les modèles ont été fusionnés avec succès.
    new:
      description: Ajoutez de nouveaux modèles en téléversant des fichiers ! Si vous téléversez une archive compressée, elle sera extraite et deviendra un modèle unique contenant tous les fichiers. Si vous téléversez des fichiers individuels, ils deviendront chacun un modèle distinct.
      files:
        label: Sélectionner un fichier
      free_space: "(%{available} libre)"
      library:
        help: La bibliothèque vers laquelle télécharger.
      submit: Créer des modèles
      title: Télécharger
    problem:
      merge_all: Tous fusionner
    scan:
      success: Début de l'analyse du modèle
    show:
      download_preparing:
      download_requested:
      files: Fichiers
      files_card:
        bulk_edit: Modifier tous les fichiers
        heading: Fichiers
      followers:
      license: Licence
      merge:
        heading: Fusionner
        warning: La fusion déplace tous les fichiers de ce modèle vers la cible et supprime ce modèle. Les métadonnées des fichiers sont préservées, mais toutes les métadonnées du modèle sont perdues !
        with: Fusionner avec
      model_details: Détails du modèle
      organize:
        button_text: Organiser les fichiers
        confirm:
          are_you_sure: Êtes-vous sûr de vouloir faire cela ?
          'no': Non, annuler
          summary_html: Le dossier et les fichiers qui composent ce modèle seront déplacés de :<br> <code>%{from}</code><br> à<br> <code>%{to}</code>
          'yes': Oui, déplacer les fichiers
      path: Chemin
      preview:
      rescan: Rescanner les fichiers
      search: Recherchez sur Internet des modèles portant ce nom
      submit: Téléverser les fichiers
      tags: Étiquettes
      upload_card:
        heading: Télécharger
    update:
      success: Détails du modèle sauvegardés.
</file>

<file path="config/locales/models/ja.yml">
---
ja:
  models:
    bulk_edit:
      description:
      form_subtitle:
      needs_organizing:
      remove_tags:
      select:
      select_all:
      submit:
      title:
      update_all:
    bulk_fields:
      add_tags:
    bulk_update:
      success:
    create:
      success:
    destroy:
      confirm:
      success:
    file:
      delete:
      edit:
      open_button:
        label:
        text:
      presupported:
      set_as_preview:
    form:
      notes:
        help_html:
      preview_file:
        help:
      tags:
    general:
      edit:
    image_carousel:
      next:
      play_pause:
      previous:
      select_slide:
      slide_label:
    list:
      bulk_edit:
      no_results_html:
      no_results_signed_out_html:
      skip_models:
    merge:
      success: モデルは正常にマージされた。
    new:
      description:
      files:
        label: ファイルを選択
      free_space:
      library:
        help: アップロード先のライブラリー。
      submit: モデルの作成
      title: アップロード
    problem:
      merge_all: すべてをマージする
    scan:
      success: モデルスキャン開始
    show:
      download_preparing:
      download_requested:
      files:
      files_card:
        bulk_edit:
        heading:
      followers:
      license:
      merge:
        heading:
        warning:
        with:
      model_details:
      organize:
        button_text:
        confirm:
          are_you_sure:
          'no':
          summary_html:
          'yes':
      path:
      preview:
      rescan:
      search:
      submit:
      tags:
      upload_card:
        heading:
    update:
      success:
</file>

<file path="config/locales/models/nl.yml">
---
nl:
  models:
    bulk_edit:
      description: 'Selecteer modellen om te wijzigen:'
      form_subtitle: 'Selecteer aan te brengen wijzigingen:'
      needs_organizing: Moet worden georganiseerd
      remove_tags: Tags verwijderen
      select: Selecteer model '%{name}'
      select_all: Selecteer alle modellen
      submit: Geselecteerde Modellen Bijwerken
      title: Modellen Bulksgewijs Bewerken
      update_all:
    bulk_fields:
      add_tags: Tags toevoegen
    bulk_update:
      success: Modellen succesvol bijgewerkt.
    create:
      success: Bestand(en) succesvol geüpload.
    destroy:
      confirm: Dit zal bijbehorende bestanden verwijderen als ze op schijf bestaan. Weet je zeker dat je wilt doorgaan?
      success: Model verwijderd!
    file:
      delete:
      edit:
      open_button:
        label: Bekijk details voor %{name}
        text: Openen
      presupported:
      set_as_preview: Als voorbeeld instellen
    form:
      notes:
        help_html: Je kunt <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a> gebruiken.
      preview_file:
        help: Het bestand dat wordt weergegeven als modelvoorbeeld op bibliotheekpagina's
      tags: Tags
    general:
      edit: Model Bewerken
    image_carousel:
      next: Volgende
      play_pause: Afbeeldingen afspelen of pauzeren
      previous: Vorige
      select_slide: Kies weer te geven afbeelding
      slide_label: "%{name} (%{index} van %{count})"
    list:
      bulk_edit: Alle Modellen Bewerken
      no_results_html: Sorry, we konden niets vinden om te tonen! Probeer je filters of zoektermen aan te passen, of upload wat modellen.
      no_results_signed_out_html:
      skip_models: Modellijst overslaan
    merge:
      success: Modellen succesvol samengevoegd.
    new:
      description: Voeg nieuwe modellen toe door bestanden te uploaden! Als je een gecomprimeerd archief uploadt, wordt het uitgepakt en wordt het één model met alle bestanden. Als je losse bestanden uploadt, wordt elk bestand een apart model.
      files:
        label: Selecteer Bestanden
      free_space: "(%{available} vrij)"
      library:
        help: De bibliotheek om naar te uploaden.
      submit: Modellen aanmaken
      title: Uploaden
    problem:
      merge_all: Alles samenvoegen
    scan:
      success: Modelscan gestart
    show:
      download_preparing:
      download_requested:
      files: Bestanden
      files_card:
        bulk_edit: Alle bestanden bewerken
        heading: Bestanden
      followers:
      license: Licentie
      merge:
        heading: Samenvoegen
        warning: Samenvoegen verplaatst alle bestanden van dit model naar het doelmodel en verwijdert dit model. Bestandsmetadata blijft behouden, maar modelmetadata gaat verloren!
        with: Samenvoegen met
      model_details: Modeldetails
      organize:
        button_text: Bestanden organiseren
        confirm:
          are_you_sure: Weet je zeker dat je dit wilt doen?
          'no': Nee, annuleren
          summary_html: De map en bestanden die dit model vormen worden verplaatst van:<br> <code>%{from}</code><br> naar<br> <code>%{to}</code>
          'yes': Ja, verplaats de bestanden
      path: Pad
      preview:
      rescan: Bestanden opnieuw scannen
      search: Zoek op internet naar modellen met deze naam
      submit: Bestanden Uploaden
      tags: Tags
      upload_card:
        heading: Uploaden
    update:
      success: Modeldetails opgeslagen.
</file>

<file path="config/locales/models/pl.yml">
---
pl:
  models:
    bulk_edit:
      description: 'Wybierz modele do zmiany:'
      form_subtitle: 'Wybierz zmiany do wprowadzenia:'
      needs_organizing: Wymaga uporządkowania
      remove_tags: Usuń tagi
      select: Zaznacz model '%{name}'
      select_all: Zaznacz wszystkie modele
      submit: Aktualizuj zaznaczone modele
      title: Edytuj zbiorczo modele
      update_all: Zaktualizuj Wszystkie %{count} Modele(i)
    bulk_fields:
      add_tags: Dodaj tagi
    bulk_update:
      success: Modele zaktualizowane pomyślnie.
    create:
      success: Plik(i) przesłany(e) pomyślnie.
    destroy:
      confirm: Spowoduje to usunięciem powiązanych plików, jeśli istnieją na dysku. Czy na pewno chcesz kontynuować?
      success: Model usunięty!
    file:
      delete: Usuń plik
      edit: Edytuj plik
      open_button:
        label: Wyświetl szczegóły %{name}
        text: Otwórz
      presupported:
      set_as_preview: Ustaw jako podgląd
    form:
      notes:
        help_html: Możesz używać <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
      preview_file:
        help: Plik wyświetlany jako podgląd modelu na stronach biblioteki
      tags: Tagi
    general:
      edit: Edytuj Model
    image_carousel:
      next: Następna
      play_pause: Odtwórz lub wstrzymaj obrazy
      previous: Poprzednia
      select_slide: Wybierz obraz do wyświetlenia
      slide_label: "%{name} (%{index} z %{count})"
    list:
      bulk_edit: Edytuj Wszystkie Modele
      no_results_html: Przepraszamy, nie mogliśmy znaleźć niczego do pokazania! Spróbuj zmienić filtry lub wyszukiwane hasło albo przesłać kilka modeli.
      no_results_signed_out_html:
      skip_models: Pomiń listę modeli
    merge:
      success: Modele zostały pomyślnie połączone.
    new:
      description: Dodawaj nowe modele poprzez przesyłanie plików! Jeśli prześlesz skompresowane archiwum, zostanie ono wyodrębnione i stanie się pojedynczym modelem zawierającym wszystkie pliki. Jeśli prześlesz pojedyncze pliki, każdy z nich stanie się osobnym modelem.
      files:
        label: Wybierz Pliki
      free_space: "(%{available} wolne)"
      library:
        help: Biblioteka, do której ma zostać przesłany plik.
      submit: Stwórz modele
      title: Prześlij
    problem:
      merge_all: Połącz wszystko
    scan:
      success: Rozpoczęto skanowanie modelów
    show:
      download_preparing:
      download_requested:
      files: Pliki
      files_card:
        bulk_edit: Edytuj wszystkie pliki
        heading: Pliki
      followers: Obserwujący
      license: Licencja
      merge:
        heading: Połącz
        warning: Scalanie przenosi wszystkie pliki z tego modelu do docelowego i usuwa ten model. Metadane plików zostaną zachowane, ale wszelkie metadane modelu zostaną utracone!
        with: Połącz z
      model_details: Szczegóły Modelu
      organize:
        button_text: Zorganizuj pliki
        confirm:
          are_you_sure: Czy na pewno chcesz to zrobić?
          'no': Nie, anuluj
          summary_html: Folder i pliki tworzące ten model zostaną przeniesione z:<br> <code>%{from}</code><br> do<br> <code>%{to}</code>
          'yes': Tak, przenieś pliki
      path: Ścieżka
      preview:
      rescan: Ponownie przeskanuj pliki
      search: Wyszukaj w Internecie modele o tej samej nazwie
      submit: Prześlij pliki
      tags: Tagi
      upload_card:
        heading: Prześlij
    update:
      success: Szczegóły modelu zapisane.
</file>

<file path="config/locales/problems/cs.yml">
---
cs:
  problems:
    categories:
      duplicate: Duplikovat soubory
      empty: Model nebo soubor je prázdný
      inefficient: Neefektivní formáty
      inside_out: Model je naruby
      missing: Chybějící soubory nebo složky
      nesting: Model obsahuje další modely
      no_3d_model: Model nemá žádné 3D soubory
      no_creator: Model není přiřazen autorovi
      no_image: Model nemá žádné obrazové soubory
      no_license: Model nemá žádné licenční informace
      no_links: Model nemá žádné zdrojové odkazy
      no_tags: Model nemá žádné štítky
      non_manifold: Model je nemanifoldní
    filters:
      apply_filters: Použít
      clear_filters: Vyčistit
      show_ignored: Zobrazit skryté položky
      title: Filtry
    index:
      bulk_confirm: Určitě chcete automaticky vyřešit všechny vybrané problémy? Může dojít k odstranění souborů a dat.
      bulk_ignore:
      bulk_resolve: Vyřešit vybrané
      description: Popis
      ignore: Skrýt
      item: Položka
      no_problems: Žádné problémy se neshodovaly s aktuálními filtry.
      resolve: Vyřešit
      select: Vybrat
      select_all: Vybrat vše
      unignore: Zobrazit
    model:
      empty:
        description: Tento model neobsahuje žádné soubory. Buď ho smažte, nebo zjistěte, kam se jeho soubory poděly!
        title: Žádné soubory
      missing:
        description: Složka pro tento model na disku chybí; buď ji odstraňte, nebo zjistěte, kam se poděla!
        title: Složka nebyla nalezena
      nesting:
        description: Složka modelu na disku obsahuje další modely. Možná je budete chtít sloučit do této složky nebo je z ní přesunout.
        title: Obsahuje další modely
        warning: Hromadné sloučení přesune všechny soubory z výše uvedených modelů do tohoto modelu a odstraní je. Metadata souborů zůstanou zachována, ale veškerá metadata modelů budou ztracena!
      no_3d_model:
        description: Tento model neobsahuje žádné 3D soubory. Je nepravděpodobné, že by to bylo správně.
        title: Žádné 3D soubory v modelu
      no_creator:
        description: Nevíme, kdo tento model vyrobil; přidejte autora, který vám pomůže s katalogizací!
        title: Model není přiřazen autorovi
      no_image:
        description: Tento model neobsahuje žádné obrazové soubory. Přidání jednoho z nich by mohlo usnadnit prohlížení.
        title: V modelu nejsou žádné obrazové soubory
      no_license:
        description: Tento model nemá specifikovanou licenci. Jejím přidáním bude jasnější, zda a jak může být sdílen.
        title: Model nemá žádné licenční informace
      no_links:
        description: Tento model nemá žádné odkazy na jiné zdroje. Pokud je k dispozici i jinde, můžete na něj přidat odkaz.
        title: Model nemá žádné zdrojové odkazy
      no_tags:
        description: Tento model nebyl označen štítky, což ztěžuje jeho nalezení. Přidejte nějaké štítky, které pomohou!
        title: Model nemá žádné štítky
    model_file:
      duplicate:
        description: Tento soubor je duplikován v jiných modelech. Možná budete chtít některé z nich odstranit.
        title: Duplikovaný soubor
      empty:
        description: Tento soubor má nulovou délku! Pravděpodobně se jedná o chybu; buď soubor odstraňte, nebo model znovu zkontrolujte.
        title: Prázdný soubor
      inefficient:
        description: Tento soubor je ve formátu %{note}, který je neefektivní. Zvažte jeho konverzi do binárního formátu, například 3MF, abyste ušetřili místo na disku.
        title: Neefektivní formát
      inside_out:
        description: Tato model vypadá, že jeho plochy mohou být nasměrovány špatným směrem, což by mohlo způsobit chyby při tisku. Opravte ji v nástroji pro 3D modelování, jako je MeshLab nebo 3D Builder.
        title: Model je naruby
      missing:
        description: Tento soubor na disku chybí; buď jej odstraňte, nebo zjistěte, kam se ztratil!
        title: Soubor nebyl nalezen
      non_manifold:
        description: Tato síť se jeví jako nemanifoldní, což znamená, že má díry nebo některé plochy obrácené dozadu, a může způsobit chyby při tisku. Opravte ji v nástroji pro 3D modelování, jako je MeshLab nebo 3D Builder.
        title: Model je nemanifoldní
    severities:
      danger: Nebezpečí
      info: Info
      silent: Ignorováno
      warning: Varování
    update:
      ignored: 'Problém skrytý na "%{name}": %{message}'
      unignored: 'Problém obnoven na "%{name}": %{message}'
</file>

<file path="config/locales/problems/de.yml">
---
de:
  problems:
    categories:
      duplicate: Duplizierte Dateien
      empty: Modell oder Datei ist Leer
      inefficient: Unvollständige Formate
      inside_out: Mesh ist "verdreht"
      missing: Fehlende Dateien oder Ordner
      nesting: Modell enthält andere Modelle
      no_3d_model: Modell hat keine 3D-Dateien
      no_creator: Modell ist keinem Ersteller zugeordnet
      no_image: Modell hat keine Bilddateien
      no_license: Modell hat keine Lizenzinformationen
      no_links: Modell hat keinen Link zur Quelle
      no_tags: Modell hat keine Tags
      non_manifold: unbekanntes Mesh
    filters:
      apply_filters: Anwenden
      clear_filters: Löschen
      show_ignored: Ausgeblendete Elemente anzeigen
      title: Filter
    index:
      bulk_confirm: Bist du sicher, dass du alle ausgewählten Probleme automatisch beheben möchtest? Dadurch könnten Dateien und Daten gelöscht werden.
      bulk_ignore: Ausgewählte ausblenden
      bulk_resolve: Ausgewählte lösen
      description: Beschreibung
      ignore: Ausblenden
      item: Objekt
      no_problems: Es wurden keine Fehler mit diesen Filtereinstellungen gefunden
      resolve: Lösungen
      select: Auswählen
      select_all: Alle auswählen
      unignore: Anzeigen
    model:
      empty:
        description: Dieses Modell enthält keine Dateien. Entweder löschen Sie es oder finde heraus, wo sie sind!
        title: Keine Dateien
      missing:
        description: Der Ordner für dieses Modell fehlt auf der Festplatte; lösche ihn, oder finde heraus, wo er ist!
        title: Ordner nicht gefunden
      nesting:
        description: Der Modellordner auf der Festplatte enthält weitere Modelle. Du kannst sie mit diesem Ordner zusammenführen oder auslagern.
        title: Enthält andere Modelle
        warning: Beim Zusammenfassen werden alle Dateien aus den oben genannten Modellen in dieses Modell verschoben und entfernt. Die Datei-Metadaten bleiben erhalten, aber alle Modell-Metadaten gehen verloren!
      no_3d_model:
        description: Dieses Modell enthält keine 3D-Dateien. Es ist unwahrscheinlich, dass dies korrekt ist.
        title: Keine 3D-Dateien im Modell
      no_creator:
        description: Wir wissen nicht, wer dieses Modell hergestellt hat; füge einen Ersteller hinzu, um bei der Katalogisierung zu helfen!
        title: Modell ist keinem Ersteller zugeordnet
      no_image:
        description: Dieses Modell enthält keine Bilddateien. Das Hinzufügen einer solchen Datei könnte die Suche erleichtern.
        title: Keine Bilddateien im Modell
      no_license:
        description: Für dieses Modell gibt es keine spezielle Lizenz. Wenn du eine hinzufügst, wird es klarer, ob und wie es genutzt werden kann.
        title: Modell hat keine Lizenzinformationen
      no_links:
        description: Dieses Modell hat keine Links zu anderen Quellen. Wenn es auch anderswo erhältlich ist, solltest du einen Link hinzu fügen.
        title: Modell hat keinen Link zur Quelle
      no_tags:
        description: Dieses Modell wurde nicht getaggt, was die Suche erschwert. Füge Tags hinzu, um die suche zu unterstützen!
        title: Modell hat keine Tags
    model_file:
      duplicate:
        description: Diese Datei ist in anderen Modellen dupliziert. Vielleicht möchten Sie einige davon entfernen.
        title: Doppelte Datei
      empty:
        description: Diese Datei hat eine Länge von Null! Dies ist höchstwahrscheinlich falsch; entferne entweder die Datei oder scanne das Modell erneut, um es zu überprüfen.
        title: Leere Datei
      inefficient:
        description: Diese Datei ist in %{note}, einem ineffizienten Dateiformat. Erwäge, sie in ein Binärformat wie 3MF zu konvertieren, um Speicherplatz zu sparen.
        title: Ineffizientes Format
      inside_out:
        description: Dieses Mesh sieht aus, als ob seine Flächen in die falsche Richtung zeigen, was zu Druckfehlern führen kann. Repariere es in einem 3D-Modellierungstool wie MeshLab oder 3D Builder.
        title: Mesh ist "verdreht"
      missing:
        description: Diese Datei fehlt auf der Festplatte; lösche sie, oder finden heraus, wo sie ist!
        title: Datei nicht gefunden
      non_manifold:
        description: Dieses Mesh ist unbekannt, es hat Löcher und manche Flächen zeigen in die Falsche Richtung, was zu Druckfehlern führen kann. Repariere es in einem 3D-Modellierungstool wie MeshLab oder 3D Builder.
        title: Unbekanntes Mesh
    severities:
      danger: Gefahr
      info: Info
      silent: Ignoriert
      warning: Warnung
    update:
      ignored: 'Problem versteckt bei "%{name}": %{message}'
      unignored: 'Problem gelöst bei "%{name}": %{message}'
</file>

<file path="config/locales/problems/en.yml">
---
en:
  problems:
    categories:
      duplicate: Duplicate files
      empty: Model or file is empty
      inefficient: Inefficient formats
      inside_out: Mesh is inside-out
      missing: Missing files or folders
      nesting: Model contains other models
      no_3d_model: Model has no 3D files
      no_creator: Model is not attributed to a creator
      no_image: Model has no image files
      no_license: Model has no license information
      no_links: Model has no source links
      no_tags: Model does not have any tags
      non_manifold: Mesh is non-manifold
    filters:
      apply_filters: Apply
      clear_filters: Clear
      show_ignored: Show hidden items
      title: Filters
    index:
      bulk_confirm: Are you sure you want to automatically resolve all the selected problems? This may remove files and data.
      bulk_ignore: Hide selected
      bulk_resolve: Resolve selected
      description: Description
      ignore: Hide
      item: Item
      no_problems: No problems matched the current filters.
      resolve: Resolve
      select: Select
      select_all: Select all
      unignore: Show
    model:
      empty:
        description: This model contains no files. Either delete it, or find where its files went!
        title: No files
      missing:
        description: The folder for this model is missing on disk; either delete it, or find where it went!
        title: Folder not found
      nesting:
        description: The model folder on disk contains other models. You may wish to merge them into this one, or move them out.
        title: Contains other models
        warning: Bulk merging moves all files from the models above into this one, and removes them. File metadata is preserved, but any model metadata will be lost!
      no_3d_model:
        description: This model contains no 3D files. That is unlikely to be correct.
        title: No 3D files in model
      no_creator:
        description: We don't know who made this model; add a creator to help with cataloguing!
        title: Model is not attributed to a creator
      no_image:
        description: This model contains no image files. Adding one might make it easier to browse.
        title: No image files in model
      no_license:
        description: This model doesn't have a specified license. Adding one will make it clearer if and how it can be shared.
        title: Model has no license information
      no_links:
        description: This model has no links to other sources. If it's also available elsewhere, you might want to add a link to it.
        title: Model has no source links
      no_tags:
        description: This model has not been tagged, which makes it harder to find. Add some tags to help!
        title: Model does not have any tags
    model_file:
      duplicate:
        description: This file is duplicated in other models. You may wish to remove some.
        title: Duplicated file
      empty:
        description: This file is zero-length! This is most likely incorrect; either remove the file or rescan the model to recheck.
        title: Empty file
      inefficient:
        description: This file is in %{note}, an inefficient file format. Consider converting it to a binary format such as 3MF to save disk space.
        title: Inefficient format
      inside_out:
        description: This mesh looks like its faces might be pointed the wrong way, which could cause print errors. Repair it in a 3d modeling tool such as MeshLab or 3D Builder.
        title: Inside-out mesh
      missing:
        description: This file is missing on disk; either delete it, or find where it went!
        title: File not found
      non_manifold:
        description: This mesh appears to be non-manifold, meaning it has holes or has some faces backwards, and may cause errors when printed. Repair it in a 3d modeling tool such as MeshLab or 3D Builder.
        title: Non-manifold mesh
    severities:
      danger: Danger
      info: Info
      silent: Ignored
      warning: Warning
    update:
      ignored: 'Problem hidden on "%{name}": %{message}'
      unignored: 'Problem restored on "%{name}": %{message}'
</file>

<file path="config/locales/problems/es.yml">
---
es:
  problems:
    categories:
      duplicate: Archivos duplicados
      empty: El modelo no tiene archivos
      inefficient: Formatos no recomendados
      inside_out: La malla está al revés
      missing: Faltan archivos o carpetas
      nesting: El modelo contiene otros modelos
      no_3d_model: El modelo no tiene archivos 3D
      no_creator: El modelo no tiene asignado un creador
      no_image: El modelo no tiene imagenes
      no_license: El modelo no tiene información de licencia
      no_links: El modelo no tiene enlaces
      no_tags: El modelo no tiene ninguna etiqueta
      non_manifold: La malla no es válida
    filters:
      apply_filters: Aplicar
      clear_filters: Limpiar
      show_ignored: Mostrar elementos ocultos
      title: Filtros
    index:
      bulk_confirm: "¿Estás seguro de que quieres resolver automáticamente todos los problemas seleccionados? Esto podría borrar archivos y datos."
      bulk_ignore: Ocultar seleccionado
      bulk_resolve: Resolver seleccionados
      description: Descripción
      ignore: Ocultar
      item: Item
      no_problems: No se han encontrado problemas con los filtros actuales.
      resolve: Resolver
      select: Seleccionar
      select_all: Seleccionar todo
      unignore: Mostrar
    model:
      empty:
        description: Este modelo no contiene archivos. Elimínelo o encuentre dónde están sus archivos
        title: No hay archivos
      missing:
        description: La carpeta de este modelo no está en el disco. Elimínela o averigua dónde está
        title: Carpeta no encontrada
      nesting:
        description: La carpeta del modelo contiene otros modelos. Puedes optar por combinarlos en este o eliminarlos.
        title: Contiene otros modelos
        warning: La fusión masiva mueve todos los archivos de los modelos anteriores a éste, y los elimina. Se conservan los metadatos de los archivos, pero se perderán los metadatos de los modelos
      no_3d_model:
        description: Este modelo no contiene archivos 3D. Es poco probable que sea correcto.
        title: No hay archivos 3D en el modelo
      no_creator:
        description: No sabemos quién hizo este modelo; ¡añade un creador para ayudar con la catalogación!
        title: El modelo no tiene asignado un creador
      no_image:
        description: Este modelo no contiene archivos de imagen. Añadir uno podría facilitar la navegación.
        title: No hay imagenes en el modelo
      no_license:
        description: Este modelo no tiene una licencia especificada. Si se añade una, quedará más claro si se puede compartir y cómo.
        title: El modelo no tiene información de licencia
      no_links:
        description: Este modelo no tiene enlaces a otras fuentes. Si también está disponible en otro lugar, es posible que desee añadir un enlace hacia él.
        title: El modelo no tiene enlaces
      no_tags:
        description: Este modelo no ha sido etiquetado, lo que dificulta su búsqueda. ¡Añade algunas etiquetas para ayudar!
        title: El modelo no tiene ninguna etiqueta
    model_file:
      duplicate:
        description: Este archivo está duplicado en otros modelos. Es posible que desee eliminar algunos.
        title: Archivo duplicado
      empty:
        description: "¡El archivo no contiene datos! Esto probablemente sea un error. Elimina el archivo o realiza un nuevo escaneo del modelo para verificar."
        title: Archivo vacío
      inefficient:
        description: Este archivo está en %{note}, un formato de archivo no recomendado. Considera la posibilidad de convertirlo a un formato binario como 3MF para ahorrar espacio en disco.
        title: Formato no recomendado
      inside_out:
        description: Las caras de esta malla podrían estar apuntando en la dirección equivocada, lo que podría causar errores de impresión. Repárela en una herramienta de modelado 3D como MeshLab o 3D Builder.
        title: Malla invertida
      missing:
        description: Este archivo no está en el disco. Elimínelo o busque dónde se encuentra
        title: Archivo no encontrado
      non_manifold:
        description: Esta malla parece no ser valida, lo que significa que tiene agujeros o tiene algunas caras al revés, lo que puede causar errores cuando se imprima. Repárela en una herramienta de modelado 3D como MeshLab o 3D Builder.
        title: La malla no es válida
    severities:
      danger: Peligro
      info: Información
      silent: Ignorado
      warning: Advertencia
    update:
      ignored: 'Problema oculto en "%{name}": %{message}'
      unignored: 'Problema restaurado en "%{name}": %{message}'
</file>

<file path="config/locales/problems/fr.yml">
---
fr:
  problems:
    categories:
      duplicate: Fichiers en double
      empty: Le modèle n'a pas de fichiers
      inefficient: Formats inefficaces
      inside_out: Le maillage est à l'envers
      missing: Fichiers ou dossiers manquants
      nesting: Le modèle contient d'autres modèles
      no_3d_model: Le modèle ne contient pas de fichiers 3D
      no_creator: Le modèle n'est attribué à aucun créateur
      no_image: Le modèle n'a pas de fichier image
      no_license: Le modèle n'a pas d'information de license
      no_links: Le modèle n'a pas de lien de vers sa source
      no_tags: Le modèle n'a pas d'étiquettes
      non_manifold: Le maillage n'est pas continu
    filters:
      apply_filters: Appliquer
      clear_filters: Nettoyer
      show_ignored: Afficher les éléments cachés
      title: Filtres
    index:
      bulk_confirm: Êtes-vous sûr de vouloir résoudre automatiquement tous les problèmes sélectionnés ? Cette opération peut supprimer des fichiers et des données.
      bulk_ignore:
      bulk_resolve: Résoudre les problèmes sélectionnés
      description: Description
      ignore: Cacher
      item: Objet
      no_problems: Les filtres actuels ne posent aucun problème.
      resolve: Résoudre
      select: Sélectionner
      select_all: Tout sélectionner
      unignore: Afficher
    model:
      empty:
        description: Ce modèle ne contient aucun fichier. Soit vous le supprimez, soit vous trouvez où sont passés ses fichiers !
        title: Aucun fichier
      missing:
        description: Le dossier de ce modèle est manquant sur le disque ; soit vous le supprimez, soit vous trouvez où il est passé !
        title: Dossier introuvable
      nesting:
        description: Le dossier du modèle sur le disque contient d'autres modèles. Vous pouvez les fusionner avec celui-ci ou les déplacer.
        title: Contient d'autres modèles
        warning: La fusion en bloc déplace tous les fichiers des modèles ci-dessus dans celui-ci et les supprime. Les métadonnées des fichiers sont préservées, mais les métadonnées des modèles sont perdues !
      no_3d_model:
        description: Ce modèle ne contient pas de fichiers 3D. Il est peu probable que cela soit correct.
        title: Le modèle ne contient pas de fichiers 3D
      no_creator:
        description: Nous ne savons pas qui a créé ce modèle ; ajoutez un créateur pour aider au catalogage !
        title: Le modèle n'est pas attribué à un créateur
      no_image:
        description: Ce modèle ne contient pas de fichier image. L'ajout d'un fichier image facilite la navigation.
        title: Le modèle n'a pas de fichier image
      no_license:
        description: Ce modèle n'a pas de licence spécifiée. L'ajout d'une licence permettra de savoir plus clairement si et comment il peut être partagé.
        title: Le modèle n'a pas d'information de license
      no_links:
        description: Ce modèle n'a pas de liens vers d'autres sources. S'il est également disponible ailleurs, vous pouvez ajouter un lien vers ses autres sources.
        title: Le modèle n'a pas de lien de vers sa source
      no_tags:
        description: Ce modèle n'a pas été étiqueté, ce qui le rend plus difficile à trouver. Ajoutez des étiquettes pour aider !
        title: Le modèle n'a pas d'étiquettes
    model_file:
      duplicate:
        description: Ce fichier est dupliqué dans d'autres modèles. Vous devriez les supprimer.
        title: Fichier dupliqué
      empty:
        description: Ce fichier est de longueur nulle ! Il s'agit très probablement d'une erreur ; supprimez le fichier ou effectuez un nouveau balayage du modèle pour le vérifier à nouveau.
        title: Fichier vide
      inefficient:
        description: Ce fichier est au format %{note}, un format de fichier inefficace. Envisagez de le convertir dans un format binaire tel que 3MF pour économiser de l'espace disque.
        title: Format inefficace
      inside_out:
        description: Ce maillage semble être orienté dans le mauvais sens, ce qui peut entraîner des erreurs d'impression. Réparez-le dans un outil de modélisation 3D tel que MeshLab ou 3D Builder.
        title: Maillage inversé
      missing:
        description: Ce fichier est manquant sur le disque ; soit vous le supprimez, soit vous trouvez où il est passé !
        title: Fichier introuvable
      non_manifold:
        description: Ce maillage semble être orienté dans le mauvais sens, ce qui peut entraîner des erreurs d'impression. Réparez-le dans un outil de modélisation 3D tel que MeshLab ou 3D Builder.
        title: Maillage non continu
    severities:
      danger: Danger
      info: Information
      silent: Ignoré
      warning: Attention
    update:
      ignored: 'Problème caché sur "%{name}" : %{message}'
      unignored: 'Problème restauré sur "%{name}" : %{message}'
</file>

<file path="config/locales/problems/ja.yml">
---
ja:
  problems:
    categories:
      duplicate:
      empty:
      inefficient:
      inside_out:
      missing:
      nesting:
      no_3d_model:
      no_creator:
      no_image:
      no_license:
      no_links:
      no_tags:
      non_manifold:
    filters:
      apply_filters:
      clear_filters:
      show_ignored:
      title:
    index:
      bulk_confirm:
      bulk_ignore:
      bulk_resolve:
      description:
      ignore:
      item:
      no_problems:
      resolve:
      select:
      select_all:
      unignore:
    model:
      empty:
        description:
        title:
      missing:
        description:
        title:
      nesting:
        description:
        title:
        warning:
      no_3d_model:
        description:
        title:
      no_creator:
        description:
        title:
      no_image:
        description:
        title:
      no_license:
        description:
        title:
      no_links:
        description:
        title:
      no_tags:
        description:
        title:
    model_file:
      duplicate:
        description:
        title:
      empty:
        description:
        title:
      inefficient:
        description:
        title:
      inside_out:
        description:
        title:
      missing:
        description:
        title:
      non_manifold:
        description:
        title: 非多様体メッシュ
    severities:
      danger:
      info:
      silent:
      warning:
    update:
      ignored:
      unignored:
</file>

<file path="config/locales/problems/nl.yml">
---
nl:
  problems:
    categories:
      duplicate: Dubbele bestanden
      empty: Model of bestand is leeg
      inefficient: Inefficiënte formaten
      inside_out: Mesh is binnenstebuiten
      missing: Ontbrekende bestanden of mappen
      nesting: Model bevat andere modellen
      no_3d_model: Model heeft geen 3D-bestanden
      no_creator: Model is niet toegewezen aan een maker
      no_image: Model heeft geen afbeeldingsbestanden
      no_license: Model heeft geen licentie-informatie
      no_links: Model heeft geen bronlinks
      no_tags: Model heeft geen tags
      non_manifold: Mesh is niet-manifold
    filters:
      apply_filters: Toepassen
      clear_filters: Wissen
      show_ignored: Toon verborgen items
      title: Filters
    index:
      bulk_confirm: Weet je zeker dat je alle geselecteerde problemen automatisch wilt oplossen? Dit kan bestanden en gegevens verwijderen.
      bulk_ignore:
      bulk_resolve: Geselecteerde problemen oplossen
      description: Beschrijving
      ignore: Verbergen
      item: Item
      no_problems: Geen problemen gevonden met de huidige filters.
      resolve: Oplossen
      select: Selecteren
      select_all: Alles selecteren
      unignore: Tonen
    model:
      empty:
        description: Dit model bevat geen bestanden. Verwijder het of zoek uit waar de bestanden zijn gebleven!
        title: Geen bestanden
      missing:
        description: De map voor dit model ontbreekt op schijf; verwijder het of zoek uit waar het is gebleven!
        title: Map niet gevonden
      nesting:
        description: De modelmap op schijf bevat andere modellen. Je kunt ze samenvoegen in dit model of ze verplaatsen.
        title: Bevat andere modellen
        warning: Bulksgewijs samenvoegen verplaatst alle bestanden van bovenstaande modellen naar dit model en verwijdert ze. Bestandsmetadata blijft behouden, maar modelmetadata gaat verloren!
      no_3d_model:
        description: Dit model bevat geen 3D-bestanden. Dat is waarschijnlijk niet correct.
        title: Geen 3D-bestanden in model
      no_creator:
        description: We weten niet wie dit model heeft gemaakt; voeg een maker toe om te helpen bij het catalogiseren!
        title: Model is niet toegewezen aan een maker
      no_image:
        description: Dit model bevat geen afbeeldingsbestanden. Het toevoegen van een afbeelding kan het bladeren makkelijker maken.
        title: Geen afbeeldingsbestanden in model
      no_license:
        description: Dit model heeft geen gespecificeerde licentie. Het toevoegen van een licentie maakt duidelijker of en hoe het kan worden gedeeld.
        title: Model heeft geen licentie-informatie
      no_links:
        description: Dit model heeft geen links naar andere bronnen. Als het ook elders beschikbaar is, kun je een link toevoegen.
        title: Model heeft geen bronlinks
      no_tags:
        description: Dit model heeft geen tags, wat het moeilijker maakt om te vinden. Voeg wat tags toe om te helpen!
        title: Model heeft geen tags
    model_file:
      duplicate:
        description: Dit bestand is gedupliceerd in andere modellen. Je kunt er eventueel enkele verwijderen.
        title: Gedupliceerd bestand
      empty:
        description: Dit bestand heeft een grootte van nul! Dit is waarschijnlijk niet correct; verwijder het bestand of scan het model opnieuw om te controleren.
        title: Leeg bestand
      inefficient:
        description: Dit bestand is in %{note}, een inefficiënt bestandsformaat. Overweeg het te converteren naar een binair formaat zoals 3MF om schijfruimte te besparen.
        title: Inefficiënt formaat
      inside_out:
        description: Deze mesh lijkt vlakken te hebben die de verkeerde kant op wijzen, wat printfouten kan veroorzaken. Repareer het in een 3D-modelleertool zoals MeshLab of 3D Builder.
        title: Binnenstebuiten mesh
      missing:
        description: Dit bestand ontbreekt op schijf; verwijder het of zoek uit waar het is gebleven!
        title: Bestand niet gevonden
      non_manifold:
        description: Deze mesh lijkt niet-manifold te zijn, wat betekent dat er gaten zijn of sommige vlakken achterstevoren zitten, en dit kan fouten veroorzaken bij het printen. Repareer het in een 3D-modelleertool zoals MeshLab of 3D Builder.
        title: Niet-manifold mesh
    severities:
      danger: Gevaar
      info: Info
      silent: Genegeerd
      warning: Waarschuwing
    update:
      ignored: 'Probleem verborgen op "%{name}": %{message}'
      unignored: 'Probleem hersteld op "%{name}": %{message}'
</file>

<file path="config/locales/problems/pl.yml">
---
pl:
  problems:
    categories:
      duplicate: Zduplikowane pliki
      empty: Model lub plik jest pusty
      inefficient: Nieefektywne formaty
      inside_out: Siatka jest skierowana środkiem na zewnątrz
      missing: Brakujące pliki lub foldery
      nesting: Model zawiera inne modele
      no_3d_model: Model nie zawiera plików 3D
      no_creator: Model nie jest przypisany do twórcy
      no_image: Model nie zawiera plików graficznych
      no_license: Model nie ma informacji o licencji
      no_links: Model nie ma linków źródłowych
      no_tags: Model nie posiada żadnych tagów
      non_manifold: Siatka jest nierozmaita
    filters:
      apply_filters: Zastosuj
      clear_filters: Wyczyść
      show_ignored: Pokaż ukryte elementy
      title: Filtry
    index:
      bulk_confirm: Czy na pewno chcesz automatycznie rozwiązać wszystkie wybrane problemy? Może to spowodować usunięciem plików i danych.
      bulk_ignore: Ukryj wybrane
      bulk_resolve: Rozwiąż wybrane
      description: Opis
      ignore: Ukryj
      item: Pozycja
      no_problems: Brak problemów pasujących do obecnych filtrów.
      resolve: Rozwiąż
      select: Wybierz
      select_all: Wybierz wszystko
      unignore: Pokaż
    model:
      empty:
        description: Ten model nie zawiera żadnych plików. Usuń go albo znajdź miejsce, w którym znalazły się jego pliki!
        title: Brak plików
      missing:
        description: Na dysku brakuje folderu dla tego modelu. Usuń go albo znajdź miejsce, w którym się znalazł!
        title: Nie znaleziono folderu
      nesting:
        description: Folder modeli na dysku zawiera inne modele. Można je połączyć z tym folderem lub przenieść je.
        title: Zawiera inne modele
        warning: Scalanie zbiorcze przenosi wszystkie pliki z powyższych modeli do tego i usuwa je. Metadane plików zostaną zachowane, ale wszelkie metadane modeli zostaną utracone!
      no_3d_model:
        description: Ten model nie zawiera plików 3D. Jest mało prawdopodobne, by było to zamierzone.
        title: Brak plików 3D w modelu
      no_creator:
        description: Nie wiemy, kto stworzył ten model; dodaj twórcę, by pomóc w katalogowaniu!
        title: Model nie jest przypisany do twórcy
      no_image:
        description: Ten model nie zawiera plików graficznych. Dodanie jednego może ułatwić przeglądanie.
        title: Brak plików graficznych w modelu
      no_license:
        description: Ten model nie ma określonej licencji. Dodanie jej wyjaśni, czy i w jaki sposób można go udostępniać.
        title: Model nie ma informacji o licencji
      no_links:
        description: Ten model nie ma linków do innych źródeł. Jeśli jest on również dostępny w innych miejscach, możesz chcieć dodać do nich link.
        title: Model nie ma linków źródłowych
      no_tags:
        description: Ten model nie został otagowany, co utrudnia jego znalezienie. Dodaj tagi, aby to zmienić!
        title: Model nie posiada żadnych tagów
    model_file:
      duplicate:
        description: Ten plik jest zduplikowany w innych modelach. Niektóre z nich można usunąć.
        title: Zduplikowany plik
      empty:
        description: Ten plik ma zerową długość! Jest to najprawdopodobniej nieprawidłowe; usuń plik albo ponownie zeskanuj model, aby sprawdzić ponownie.
        title: Pusty plik
      inefficient:
        description: Ten plik jest w %{note}, niewydajnym formacie pliku. Rozważ jego konwersję do formatu binarnego, takiego jak 3MF, aby zaoszczędzić miejsce na dysku.
        title: Nieefektywny format
      inside_out:
        description: Ta siatka wygląda, jakby jej ściany były skierowane w niewłaściwą stronę, co może powodować błędy drukowania. Napraw ją w narzędziu do modelowania 3D, takim jak MeshLab lub 3D Builder.
        title: Siatka skierowana środkiem na zewnątrz
      missing:
        description: Tego pliku brakuje na dysku; usuń go albo znajdź gdzie się znajduje!
        title: Nie znaleziono pliku
      non_manifold:
        description: Ta siatka wydaje się być nierozmaita, co oznacza, że ma dziury lub niektóre jej ściany są odwrócone i może powodować błędy podczas drukowania. Napraw ją w narzędziu do modelowania 3D, takim jak MeshLab lub 3D Builder.
        title: Siatka nierozmaita
    severities:
      danger: Niebezpieczeństwo
      info: Informacja
      silent: Ignorowany
      warning: Uwaga
    update:
      ignored: 'Problem ukryty na "%{name}": %{message}'
      unignored: 'Problem przywrócony na "%{name}": %{message}'
</file>

<file path="config/locales/settings/cs.yml">
---
cs:
  settings:
    analysis:
      description: Provádění hloubkové analýzy modelů. Tyto možnosti způsobí, že kontrola bude trvat podstatně déle a bude využívat mnohem více procesoru a paměti.
      heading: Analýza modelu
      manifold:
        help: Zkontrolovat, zda nejsou modely nemanifoldní (tj. zda nemají díry nebo nereálné povrchy)
        label: Detekovat chyby v modelu
    appearance:
      about:
        help_html: Zobrazeno na stránce o aplikaci; Můžete použít <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
        label: O této instanci
      heading: Vzhled
      information: Informace
      rules:
        help_html: Zobrazeno při registraci; můžete použít <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
        label: Pravidla serveru
      site_icon:
        help: Zobrazeno v levém horním rohu každé stránky
        label: Adresa URL loga
      site_name:
        help: Název vašeho webu. Používá se v navigaci a na domovské stránce.
        label: Název stránky
      site_tagline:
        help: Několik slov k představení vašeho webu, které se zobrazí na domovské stránce.
        label: Popisek
      summary: Přizpůsobte vizuální styl Vaší instance.
      support_link:
        help: Odkaz na místo, kde mohou uživatelé finančně podpořit instanci (např. OpenCollective, Patreon). Zobrazuje se v zápatí.
        label: Odkaz na podporu
      theme:
        help_html: Týká se všech uživatelů. Pro zobrazení náhledů navštivte <a href="https://bootswatch.com">Bootswatch</a>.
        label: Téma
    domain_blocks:
      create:
        success: Blok domény byl úspěšně vytvořen.
      destroy:
        success: Blok domény odstraněn.
      index:
        confirm_destroy: Jste si jisti, že chcete tento blok domény odstranit a znovu povolit federaci?
        description: Bloky domén zabraňují federaci se servery ActivityPub na zadaných doménách, včetně všech subdomén.
        new: Nový blok domény
        title: Bloky domén
      new:
        submit: Blokovat doménu
        title: Nový blok domény
    downloads:
      description:
      expiry:
        help:
        hours:
        label:
      heading:
      pregenerate:
        help:
        label:
    file_settings:
      custom_ignore_filters:
        details: Filtry jsou ve formátu regex oddělené novým řádkem.
        label: Regex filtry ignorovaných souborů.
      summary: Změna nastavení souborů, například ignorované soubory.
      title: Nastavení souborů
    folder_settings:
      details: Struktura složky se řídí šablonou, kterou definujete pomocí tokenů. Do šablony můžete zahrnout i jiný text (například oddělovače složek) a bude zahrnut tak, jak je.
      model_path_template:
        label: Šablona cesty modelu
      parse_metadata_from_path:
        help: Nastaví autora, kolekci a štítky na základě šablony
        label: Vyplnění metadat z cesty a šablony během kontroly
      safe_folder_names:
        help_html: např. <code>spinal-tap</code> místo <code>Spın̈al Tap</code>
        label: Použít bezpečné názvy složek
      summary: Definujte strukturu složek používanou pro "uspořádání souborů" a pro automatické doplňování metadat během kontroly. Týká se všech uživatelů.
      title: Pojmenování složek
      tokens:
        collection: Název kolekce, ve které se model nachází, je-li nastavena.
        creator: Jméno autora, je-li nastaveno.
        model_id: Jedinečný číselný identifikátor modelu. Důrazně doporučujeme, aby byl vždy uveden na konci šablony, aby se předešlo konfliktům názvů na disku.
        model_name: Verze názvu modelu bezpečná pro souborový systém.
        tags_html: 'řada vnořených složek, jedna pro každý štítek, uspořádaných podle oblíbenosti štítků. Například: <code>fantasy/lidé/čarodějové</code>'
    general:
      submit: Uložit nastavení
    multiuser:
      approve_signups:
        help: Všechny nové účty musí před přihlášením schválit moderátor.
        label: Schválit účty
      autocreate_creator:
        help:
        label:
      default_signup_role:
        help:
        label:
        options:
          contributor:
          member:
      default_viewer_role:
        help: Kdo může ve výchozím nastavení zobrazovat nové modely / autory / kolekce?
        label: Výchozí viditelnost
        options:
          member: Přihlášení lokální uživatelé
          none: Soukromé
      details_html: Chcete-li tato nastavení změnit, upravte <a href='https://manyfold.app/sysadmin/configuration.html'>proměnné prostředí</a> serveru a restartujte jej.
      email: Doručování e-mailů nakonfigurováno?
      federation: Federace povolena?
      heading: Více uživatelů
      multiuser: Víceuživatelský režim?
      multiuser_mode: Manyfold je spuštěn ve víceuživatelském režimu.
      oidc: Nastaveno OpenID Connect?
      permissions: Oprávnění
      registration: Registrace účtu
      registration_open:
        help: Umožňuje návštěvníkům zaregistrovat účty.
        label: Povolit registraci
      single_user_mode: Manyfold je spuštěn v režimu jednoho uživatele.
      user_quotas:
      user_quotas_enable_quota:
      user_quotas_site_default:
    reporting:
      description_html: Pokud povolíte sledování používání, budou na adresu <code>%{endpoint}</code> jednou denně odesílány následující informace. <code>Id</code> je náhodně vygenerováno při povolení sledování.
      heading: Sledování používání
      report_usage:
        label: Povolení anonymního sledování používání
      summary: Upozornit vývojáře, že používáte Manyfold.
      use_of_data: Žádné další informace se neodesílají ani neukládají a vývojáři je nikdy nepoužijí k jiným účelům než k měření počtu spuštěných instancí Manyfoldu a jejich verzí.
      verification_html: Pokud chcete ověřit, co odesíláme, můžete změnit proměnnou prostředí <code>USAGE_REPORTING_URL</code> a odeslat data někam, kde je můžete zkontrolovat. V protokolu také můžete vidět, co přesně se odesílá.
    reports:
      index:
        description: Obsah nahlášený místními uživateli nebo uživateli Fediverse se zde zobrazuje ke kontrole.
        title: Hlášení
      show:
        ignore: Ignorovat
        resolve: Označit jako vyřešené
      update:
        ignored: Hlášení bylo ignorováno.
        resolved: Hlášení bylo označeno jako vyřešené.
    show:
      stats: Statistiky
      total_file_size: Celková velikost souboru
    tag_settings:
      auto_tag_new:
        label: Automaticky označit nové modely
      custom_stop_words:
        label: 'Vlastní stopslova '
      description: Přidávat štítky ke všem nově naskenovaným modelům a při automatickém vytváření štítků filtrovat určitá slova ("stopslova"). Týká se všech uživatelů.
      filter_stop_words:
        label: Filtrovat stopslova
      heading: Označování
      stop_words_locale:
        label: Lokalizace stopslov
      tag_model_directory_name:
        help: 'Varování: Může produkovat velké množství štítků!'
        label: Vytvoření štítků z názvu adresáře modelu
    update:
      success: Nastavení uloženo.
    users:
      create:
        success: Uživatel byl úspěšně vytvořen.
      destroy:
        success: Uživatel odstraněn!
      edit:
        title: 'Upravit uživatele: %{username}'
      form:
        password_reset_help: Uživateli bude automaticky odeslán odkaz, aby si mohl nastavit vlastní heslo.
        submit: Uložit
      index:
        description: Zobrazit a úpravit účty registrovaných uživatelů.
        fediverse_address: Adresa Fediverse
        local: Lokální
        new: Nový uživatel
        title: Spravovat uživatele
        view: Zobrazit
      new:
        title: Vytvořit uživatele
      quota:
        current_quota:
        current_space_used:
        title:
        unlimited_quota:
        using_site_default:
      show:
        approve: Schválit uživatele
        confirm_destroy: Opravdu chcete tento uživatelský účet okamžitě odebrat? To nelze vzít zpět!
        reset_password: Obnovit heslo
        title: 'Detaily uživatele: %{username}'
      update:
        approved: Uživatel byl úspěšně schválen.
        reset_link_sent: Uživateli byl zaslán odkaz, aby si mohl nastavit nové heslo.
        success: Uživatel byl úspěšně aktualizován.
</file>

<file path="config/locales/settings/de.yml">
---
de:
  settings:
    analysis:
      description: Führt genauere mesh-analysen an Modellen durch. Diese Aktion führt dazu, dass deine Scans erheblich länger dauern und viel mehr CPU und Speicher verbrauchen.
      heading: Mesh Analyse
      manifold:
        help: Prüfung auf nicht-verzweigte Maschen (d.h. sie haben Löcher oder unmögliche Oberflächen)
        label: Erkennung von Fehlern im Mesh
    appearance:
      about:
        help_html: Gezeigt auf der Info-Seite; kannst du <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a> verwenden.
        label: Über diese Instanz
      heading: Erscheinungsbild
      information: Informationen
      rules:
        help_html: Wird bei der Anmeldung angezeigt; kannst du <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a> verwenden.
        label: Server-Regeln
      site_icon:
        help: Oben links auf jeder Seite abgebildet
        label: Logo URL
      site_name:
        help: Der Name deiner Website. Wird in der Navigation und auf der Homepage verwendet.
        label: Name der Website
      site_tagline:
        help: Ein paar Worte zur Vorstellung deiner Website, die auf der Startseite angezeigt werden.
        label: Beschreibung
      summary: Passe das aussehen deiner Instanz an.
      support_link:
        help: Ein Link zu einem Ort, an dem deine Besucher die Instanz finanziell unterstützen können (z. B. OpenCollective, Patreon). Wird in der Fußzeile angezeigt.
        label: Support-Link
      theme:
        help_html: Betrifft alle Accounts. Besuche <a href="https://bootswatch.com">Bootswatch</a>, um eine Vorschau zu sehen.
        label: Aussehen
    domain_blocks:
      create:
        success: Domänenblock erfolgreich erstellt.
      destroy:
        success: Domänensperre entfernt.
      index:
        confirm_destroy: Bist du sicher, dass du diese Domänensperre aufheben willst, und federation wieder aktivierst?
        description: Domänensperren verhindern die Verbindung mit ActivityPub-Servern mit den angegebenen Domänen, einschließlich aller Subdomains.
        new: Neuer Block
        title: Blockierte Domains
      new:
        submit: Domain Blockieren
        title: Neuer Domain-block
    downloads:
      description: Manyfold generiert ZIP-Dateien von Modellen auf Anfrage, aber für stark frequentierte Websites möchtest du diese vielleicht schneller verfügbar haben. Hier kannst du Manyfold anweisen, ZIP-Dateien sofort zu erstellen, und auch festlegen, wie lange sie im Download-Cache aufbewahrt werden sollen. Vorsicht, dies kann eine Menge Speicherplatz verbrauchen!
      expiry:
        help: 0 bedeutet "für immer".
        hours: Stunden
        label: Entferne heruntergeladene ZIP-Dateien danach
      heading: Herunterladen
      pregenerate:
        help: Wenn diese Option aktiviert ist, werden ZIP-Dateien immer dann erstellt, wenn ein Modell hinzugefügt oder aktualisiert wird. Wenn deaktiviert, werden ZIP-Dateien nur auf Anforderung erstellt.
        label: Proaktiv herunterladbare ZIP-Dateien erstellen
    file_settings:
      custom_ignore_filters:
        details: Die Filter sind im Regex-Format und durch eine neue Zeile getrennt.
        label: Ignorierte Dateien Regex-Filter.
      summary: Ändere Dateieinstellungen wie z. B. ignorierte Dateien.
      title: Datei-Einstellungen
    folder_settings:
      details: Die Ordnerstruktur folgt einer Vorlage, die du mit Token definierst. Du kannst auch anderen Text in die Vorlage einfügen (z. B. Ordnertrennzeichen) und dieser wird unverändert übernommen.
      model_path_template:
        label: Modellpfad-Vorlage
      parse_metadata_from_path:
        help: Legt Ersteller, Sammlung und Tags basierend auf der Vorlage fest
        label: Metadaten aus der Modellpfadvorlage während des Scannens auffüllen
      safe_folder_names:
        help_html: z.B. <code>Spinal-Tap</code> statt <code>Spın̈al Tap</code>
        label: Dateisystem sichere Ordnernamen verwenden
      summary: Definiere die Ordnerstruktur, die von "Dateien organisieren" und für das automatische Ausfüllen von Metadaten beim Scannen verwendet wird. Wirkt sich auf alle Accounts aus.
      title: Ordner Benennung
      tokens:
        collection: Der Titel der Sammlung, in der sich das Modell befindet, falls festgelegt.
        creator: Der Name des Erstellers, falls festgelegt.
        model_id: Ein eindeutiger numerischer Bezeichner für das Modell. Wir empfehlen dringend, diese Kennung immer am Ende der Vorlage anzugeben, um Namenskonflikte zu vermeiden.
        model_name: Eine dateisystemsichere Version des Modellnamens.
        tags_html: 'eine Reihe von verschachtelten Ordnern, einen für jedes Tag, geordnet nach der Beliebtheit der Tags. Zum Beispiel: <code>fantasy/human/wizard</code>. Dieses Token ist "gierig"; es analysiert so viele Tags wie möglich.'
    general:
      submit: Einstellungen speichern
    multiuser:
      approve_signups:
        help: Alle neuen Konten müssen von einem Moderator genehmigt werden, bevor man sich anmelden kann.
        label: Konten genehmigen
      autocreate_creator:
        help:
        label:
      default_signup_role:
        help:
        label:
        options:
          contributor:
          member:
      default_viewer_role:
        help: Wer kann neue Modelle/Ersteller/Sammlungen standardmäßig anzeigen?
        label: Standard-Sichtbarkeit
        options:
          member: Eingeloggte lokale Konten
          none: Privat
      details_html: Um diese Einstellungen zu ändern, bearbeite die <a href='https://manyfold.app/sysadmin/configuration.html'>Umgebungsvariablen</a> des Servers und starten Sie ihn neu.
      email: E-Mail-Zustellung konfiguriert?
      federation: Föderation möglich?
      heading: Multiuser
      multiuser: Mehrbenutzer-Modus?
      multiuser_mode: Manyfold läuft im Multiuser-modus.
      oidc: OpenID Connect konfiguriert?
      permissions: Berechtigungen
      registration: Kontoregistrierung
      registration_open:
        help: Ermöglicht es Besuchern, sich für Konten anzumelden.
        label: Aktiviere registrierung
      single_user_mode: Manyfold läuft im Single user modus.
      user_quotas: Größenbeschränkung für den Konto-Upload
      user_quotas_enable_quota: Speicherlimit für Konto-Uploads aktivieren
      user_quotas_site_default: Standard-Konto-Upload-Speicherlimit in MB
    reporting:
      description_html: Wenn du die Nutzungsverfolgung aktivieren, werden die folgenden Informationen einmal täglich an <code>%{endpoint}</code> gesendet. Die <code>id</code> wird zufällig generiert, wenn die Verfolgung aktiviert wird.
      heading: Nutzungs Analyse
      report_usage:
        label: Anonyme nutzungs-analyse
      summary: Lasse die Entwickler wissen, dass du Manyfold benutzt
      use_of_data: Es werden keine weiteren Informationen gesendet oder gespeichert, und die Entwickler werden die Informationen niemals zu einem anderen Zweck verwenden, als zu messen, wie viele Instanzen von Manyfold laufen und welche Version sie haben.
      verification_html: Wenn du überprüfen willst, was wir senden, kannst du die Umgebungsvariable <code>USAGE_REPORTING_URL</code> ändern und die Daten an einen Ort senden, an dem du sie überprüfen kannst. Du kannst auch im Protokoll genau sehen, was gesendet wird.
    reports:
      index:
        description: Von lokalen oder Fediverse-Konten gemeldete Inhalte werden hier zur Moderation angezeigt.
        title: Meldungen
      show:
        ignore: Ignorieren
        resolve: Als gelöst markieren
      update:
        ignored: Die Meldung wurde ignoriert
        resolved: Die Meldung wurde als Gelöst Markiert
    show:
      stats: Statistiken
      total_file_size: Gesamtgröße der Datei
    tag_settings:
      auto_tag_new:
        label: Automatisch neue Modelle mit Tag(s) markieren
      custom_stop_words:
        label: Ignorierte Wörter
      description: Hinzufügen von Tags zu allen neu gescannten Modellen und Herausfiltern bestimmter Wörter (Ignorieren bestimmter Wörter) bei der automatischen Erstellung von Tags. Wirkt sich auf alle Konten aus.
      filter_stop_words:
        label: Ignorierte Wörter
      heading: Tagging
      stop_words_locale:
        label: Sprache der Ignorierten wörter
      tag_model_directory_name:
        help: 'Jedes Wort im Modellnamen (nicht der Pfad) wird als Tag hinzugefügt. Warnung: Dies kann eine MENGE von Tags erzeugen!'
        label: Tags aus Modellnamen erstellen
    update:
      success: Einstellungen gespeichert.
    users:
      create:
        success: Konto erfolgreich angelegt.
      destroy:
        success: Konto entfernt!
      edit:
        title: 'Konto bearbeiten: %{username}'
      form:
        password_reset_help: Ein Link wird automatisch zum Konto inhaber gesendet, damit er sein eigenes Passwort setzten kann.
        submit: Speichern
      index:
        description: Anzeigen und Bearbeiten von registrierten Konten.
        fediverse_address: Fediverse-Adresse
        local: Lokal
        new: Neues Konto
        title: Konten verwaltung
        view: Siehe
      new:
        title: Konto erstellen
      quota:
        current_quota: Aktuelles Speicherlimit in MB
        current_space_used: Derzeit verwendeter Speicherplatz
        title: Datei speicher Limit
        unlimited_quota: Unbegrenzt
        using_site_default: Verwende das Standard-Speicherlimit der Website?
      show:
        approve: Konto genehmigen
        confirm_destroy: Bist du sicher, dass du dieses Konto sofort entfernen möchtest? Dies kann nicht rückgängig gemacht werden!
        reset_password: Passwort zurücksetzen
        title: 'Angaben zum Konto: %{username}'
      update:
        approved: Das Konto wurde erfolgreich zugelassen.
        reset_link_sent: Dem Konto Inhaber wurde ein Link zugesandt, über den er ein neues Passwort festlegen kann.
        success: Konto erfolgreich aktualisiert.
</file>

<file path="config/locales/settings/en.yml">
---
en:
  settings:
    analysis:
      description: Perform deep mesh analysis on models. These options will make your scans take significantly longer and use a lot more CPU and memory.
      heading: Mesh Analysis
      manifold:
        help: Check for non-manifold meshes (i.e. they have holes or impossible surfaces)
        label: Detect mesh errors
    appearance:
      about:
        help_html: Shown on the about page; You can use <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
        label: About this instance
      heading: Appearance
      information: Information
      rules:
        help_html: Shown at signup; you can use <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
        label: Server rules
      site_icon:
        help: Shown at the top left of each page
        label: Logo URL
      site_name:
        help: The name of your site. Used in navigation and on the homepage.
        label: Site name
      site_tagline:
        help: A few words to introduce your site, shown on the homepage.
        label: Tagline
      summary: Customise your instance.
      support_link:
        help: A link to a place where visitors can support the instance financially (e.g. OpenCollective, Patreon). Shown in footer.
        label: Support link
      theme:
        help_html: Affects all accounts. Visit <a href="https://bootswatch.com">Bootswatch</a> to see previews.
        label: Theme
    discovery:
      allow_ai_bots:
        help: Unless turned on, AI bots are completely prohibited in robots.txt. Enabling this can cause a lot of server load.
        label: Allow AI crawlers
      allow_robots:
        help: Unless turned on, web crawlers will be asked to ignore this entire instance.
        label: Allow web crawlers
      default_ai_indexable:
        help_html: Unless turned on, AI training bots will be asked to ignore public content using <a href="https://www.deviantart.com/team/journal/A-New-Directive-for-Opting-Out-of-AI-Datasets-934500371">Deviantart's `noai` directive</a>.
        label: Allow AI training
      default_indexable:
        help: Unless turned on, search engines will be asked to ignore public content by default.
        label: Allow search indexing
      description: Control how the rest of the world finds your public content. Note that all these settings are advisory; we can't guarantee the good behaviour of other systems.
      heading: Discovery
      indexing:
        description: The following options set the site-wide defaults for search indexing preferences on public content (private content is never indexable). Individual models, creators, and collection can override this default with their own setting. These will only have an effect if crawlers are enabled above.
        heading: Indexing Defaults
    domain_blocks:
      create:
        success: Domain block created successfully.
      destroy:
        success: Domain block removed.
      index:
        confirm_destroy: Are you sure you want to remove this domain block and re-enable federation?
        description: Domain blocks prevent federation with ActivityPub servers on the specified domains, including any subdomains.
        new: New domain block
        title: Domain Blocks
      new:
        submit: Block domain
        title: New Domain Block
    downloads:
      description: Manyfold will generate ZIP files of models on request, but for busy sites you may want these available more quickly. Here you can tell Manyfold to create ZIP files immediately, and also set how long they are kept in the download cache. Beware; this may use a lot of disk space!
      expiry:
        help: A setting of 0 means keep forever.
        hours: Hours
        label: Remove download ZIP files after
      heading: Downloads
      pregenerate:
        help: If enabled, ZIP files are created whenever a model is added or updated. If disabled, ZIP files are only created when requested.
        label: Proactively create downloadable ZIP files
    file_settings:
      custom_ignore_filters:
        details: Filters are in regex format separated by a new line.
        label: Ignored files regex filters.
      summary: Change file settings such as ignored files.
      title: File settings
    folder_settings:
      details: Folder structure follows a template that you define using tokens. You can also include other text in the template (such as folder separators) and it will be included as-is.
      model_path_template:
        label: Model path template
      parse_metadata_from_path:
        help: Sets creator, collection, and tags based on template
        label: Populate metadata from model path template during scan
      safe_folder_names:
        help_html: e.g. <code>spinal-tap</code> instead of <code>Spın̈al Tap</code>
        label: Use safe folder names
      summary: Define the folder structure used by "organize files" and for auto-populating metadata during scan. Affects all accounts.
      title: Folder naming
      tokens:
        collection: The title of the collection the model is in, if set.
        creator: The name of the creator, if set.
        model_id: A unique numerical identifier for the model. We strongly recommend always including this at the end of your template to avoid name conflicts on disk.
        model_name: A filesystem-safe version of the model name.
        tags_html: 'a series of nested folders, one for each tag, arranged in order of tag popularity. For example: <code>fantasy/human/wizard</code>. This token is "greedy"; it will parse as many tags as it can.'
    general:
      submit: Save Settings
    multiuser:
      approve_signups:
        help: All new accounts must be approved by a moderator before they can sign in.
        label: Approve accounts
      autocreate_creator:
        help: Only applied if accounts are given the "contributor" role by default.
        label: Autocreate Creators for new accounts
      default_signup_role:
        help: The role assigned to new accounts when they sign up
        label: Default role
        options:
          contributor: Contributor (can upload content)
          member: Member (read only)
      default_viewer_role:
        help: Who can view new models / creators / collections by default?
        label: Default visibility
        options:
          member: Members (logged-in local accounts)
          none: Private
      details_html: To change these settings, edit the server's <a href='https://manyfold.app/sysadmin/configuration.html'>environment variables</a> and restart.
      email: Email delivery configured?
      federation: Federation enabled?
      heading: Multiuser
      multiuser: Multiuser mode?
      multiuser_mode: Manyfold is running in multiuser mode.
      oidc: OpenID Connect configured?
      permissions: Permissions
      registration: Account registration
      registration_open:
        help: Lets visitors sign up for accounts.
        label: Enable signup
      single_user_mode: Manyfold is running in single user mode.
      user_quotas: Account upload size limit
      user_quotas_enable_quota: Enable account upload storage limit
      user_quotas_site_default: Site default account upload storage limit in MB
    reporting:
      description_html: If you enable usage tracking, the following information will be sent once a day to <code>%{endpoint}</code>. The <code>id</code> is randomly generated when you enable tracking.
      heading: Usage Tracking
      report_usage:
        label: Enable anonymous usage tracking
      summary: Let the devs know you're running Manyfold.
      use_of_data: No other information is sent or stored, and the devs will never use the information for any purpose other than measuring how many instances of Manyfold are running, and what version they are.
      verification_html: If you want to verify what we send, you can change the <code>USAGE_REPORTING_URL</code> environment variable and send the data somewhere you can inspect it. You can also see exactly what is sent in the log.
    reports:
      index:
        description: Content reported by local or Fediverse accounts shows up here for moderation.
        title: Reports
      show:
        ignore: Ignore
        resolve: Mark as resolved
      update:
        ignored: The report has been ignored.
        resolved: The report has been marked as resolved.
    show:
      stats: Statistics
      total_file_size: Total file size
    tag_settings:
      auto_tag_new:
        label: Automatically tag new models with
      custom_stop_words:
        label: Custom stop words
      description: Add tags to all newly-scanned models, and filter out certain words ("stop words") during automatic tag creation. Affects all accounts.
      filter_stop_words:
        label: Filter out stop words
      heading: Tagging
      stop_words_locale:
        label: Stop words locale
      tag_model_directory_name:
        help: 'Every word in the model name (not the path) will be added as a tag. Warning: this can produce a LOT of tags!'
        label: Create tags from model name
    update:
      success: Settings saved.
    users:
      create:
        success: Account created successfully.
      destroy:
        success: Account removed!
      edit:
        title: 'Edit account: %{username}'
      form:
        password_reset_help: A link will be sent automatically to the account owner for them to set their own password.
        submit: Save
      index:
        description: View and edit registered accounts.
        fediverse_address: Fediverse address
        local: Local
        new: New account
        title: Manage Accounts
        view: View
      new:
        title: Create account
      quota:
        current_quota: Current file storage limit in MB
        current_space_used: Currently used file storage
        title: File storage limit
        unlimited_quota: Unlimited
        using_site_default: Using site default file storage limit?
      show:
        approve: Approve account
        confirm_destroy: Are you sure you want to remove this account immediately? This cannot be undone!
        reset_password: Reset password
        title: 'Account details: %{username}'
      update:
        approved: Account was approved successfully.
        reset_link_sent: A link has been sent to the account owner for them to set a new password.
        success: Account updated successfully.
</file>

<file path="config/locales/settings/es.yml">
---
es:
  settings:
    analysis:
      description: Realiza un análisis profundo de la malla en los modelos. Estas opciones harán que tus escaneos tarden mucho más y utilicen considerablemente más CPU y memoria.
      heading: Análisis de mallas
      manifold:
        help: Comprueba si la malla no es válida (es decir, tienen agujeros o superficies imposibles)
        label: Detectar errores de malla
    appearance:
      about:
        help_html: Se muestra en la página de información. Puedes utilizar <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
        label: Acerca de esta instancia
      heading: Apariencia
      information: Información
      rules:
        help_html: Se muestra al registrarse. Puedes usar <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
        label: Normas del servidor
      site_icon:
        help: Se muestra en la parte superior izquierda de cada página
        label: URL del logo
      site_name:
        help: El nombre de la web. Se utiliza en la navegación y en la página de inicio.
        label: Nombre de la web
      site_tagline:
        help: Unas palabras para presentar su sitio, mostradas en la página de inicio.
        label: Subtítulo
      summary: Personalice el estilo visual de su instancia.
      support_link:
        help: Un enlace a un lugar donde sus usuarios pueden apoyar financieramente la instancia (por ejemplo, OpenCollective, Patreon). Se muestra en el pie de página.
        label: Enlace de soporte
      theme:
        help_html: Afecta a todos los usuarios. Visita <a href="https://bootswatch.com">Bootswatch</a> para ver vistas previas.
        label: Tema
    domain_blocks:
      create:
        success: Bloqueo de dominio creado con éxito.
      destroy:
        success: Bloqueo de dominio eliminado.
      index:
        confirm_destroy: "¿Está seguro de que desea eliminar este bloqueo de dominio y volver a activar la federación?"
        description: Los bloqueos de dominio impiden la federación con servidores ActivityPub en los dominios especificados, incluyendo cualquier subdominio.
        new: Nuevo dominio bloqueado
        title: Bloqueo de dominios
      new:
        submit: Bloqueo de dominio
        title: Nuevo dominio bloqueado
    downloads:
      description: Manyfold generará archivos ZIP de los modelos a petición, pero para los sitios ocupados es posible que desee que estén disponibles más rápidamente. Aquí puedes decirle a Manyfold que debe crear archivos ZIP inmediatamente, y también establecer cuánto tiempo se mantienen en la caché de descargas. Cuidado, esto puede consumir mucho espacio en disco
      expiry:
        help: Un valor de 0 significa mantener para siempre.
        hours: Horas
        label: Eliminar archivos ZIP después de la descarga
      heading: Descargas
      pregenerate:
        help: Si está activada, los archivos ZIP se crean cada vez que se añade o actualiza un modelo. Si se desactiva, los archivos ZIP sólo se crean cuando se solicitan.
        label: Crear proactivamente archivos ZIP descargables
    file_settings:
      custom_ignore_filters:
        details: Los filtros están en formato regex separados por un salto de línea.
        label: Filtros regex para archivos ignorados.
      summary: Cambiar la configuración de archivos como los archivos ignorados.
      title: Configuración de archivos
    folder_settings:
      details: La estructura de carpetas sigue una plantilla que usted define utilizando tokens. También puede incluir otro texto en la plantilla (como separadores de carpeta) y se incluirá tal cual.
      model_path_template:
        label: Plantilla de ruta del modelo
      parse_metadata_from_path:
        help: Establece el creador, la colección y las etiquetas en función de la plantilla
        label: Rellenar metadatos a partir de la ruta y la plantilla durante el escaneo
      safe_folder_names:
        help_html: por ejemplo, <code>spinal-tap</code> en lugar de <code>Spın̈al Tap</code>
        label: Utilice nombres de carpeta seguros
      summary: Establece la estructura de carpetas que usa el "organizador de archivos" y que se utiliza para completar automáticamente los metadatos durante el escaneo. Afecta a todos los usuarios.
      title: Nombres de las carpetas
      tokens:
        collection: El título de la colección en la que se encuentra el modelo, si está establecido.
        creator: El nombre del creador, si se ha establecido.
        model_id: Un identificador numérico único para el modelo. Recomendamos encarecidamente incluirlo siempre al final del modelo para evitar conflictos de nombres en el disco.
        model_name: Una versión segura para el sistema de ficheros del nombre del modelo.
        tags_html: 'una serie de carpetas anidadas, una para cada etiqueta, ordenadas según su popularidad. Por ejemplo: <code>fantasía/humano/mago</code>'
    general:
      submit: Guardar ajustes
    multiuser:
      approve_signups:
        help: Todas las cuentas nuevas deben ser aprobadas por un moderador antes de poder iniciar sesión.
        label: Aprobar cuentas
      autocreate_creator:
        help: Sólo se aplica si las cuentas tienen por defecto el rol de "colaborador".
        label: Creación automática de creadores para cuentas nuevas
      default_signup_role:
        help: El rol asignado a las nuevas cuentas cuando se registran
        label: Rol por defecto
        options:
          contributor: Colaborador (puede cargar contenidos)
          member: Miembro (sólo lectura)
      default_viewer_role:
        help: "¿Quién puede ver por defecto los nuevos modelos / creadores / colecciones?"
        label: Visibilidad por defecto
        options:
          member: Usuarios locales conectados
          none: Privado
      details_html: Para cambiar esta configuración, edite las <a href='https://manyfold.app/sysadmin/configuration.html'>variables de entorno</a> del servidor y reinicie.
      email: "¿Está configurada la entrega de emails?"
      federation: "¿Federación habilitada?"
      heading: Multiusuario
      multiuser: "¿Modo multiusuario?"
      multiuser_mode: Manyfold se está ejecutando en modo multiusuario.
      oidc: "¿Está configurado OpenID Connect?"
      permissions: Permisos
      registration: "¿Está abierto el registro de cuentas?"
      registration_open:
        help: Permite a los visitantes suscribirse a cuentas.
        label: Activar el registro
      single_user_mode: Manyfold se está ejecutando en modo usuario único.
      user_quotas: Tamaño máximo de fichero de la cuenta
      user_quotas_enable_quota: Activar el tamaño máximo de subida para la cuenta
      user_quotas_site_default: Tamaño máximo por defecto en MB
    reporting:
      description_html: Si activa el seguimiento de uso, la siguiente información se enviará una vez al día a <code>%{endpoint}</code>. El <code>identificador</code> se genera aleatoriamente al activar el seguimiento.
      heading: Seguimiento de uso
      report_usage:
        label: Activar el seguimiento anónimo de uso
      summary: Haz saber a los desarrolladores que estás usando Manyfold.
      use_of_data: No se envía ni almacena ninguna otra información y los desarrolladores, nunca utilizarán la información para ningún otro propósito que no sea medir cuántas instancias de Manyfold se están ejecutando y qué versión tienen.
      verification_html: Si desea verificar lo que enviamos, puede cambiar la variable de entorno <code>USAGE_REPORTING_URL</code> y enviar los datos a algún lugar donde pueda inspeccionarlos. También puede ver exactamente lo que se envía en el registro.
    reports:
      index:
        description: Los contenidos denunciados por usuarios locales o de Fediverse aparecen aquí para su moderación.
        title: Informes
      show:
        ignore: Ignorar
        resolve: Marcar como resuelto
      update:
        ignored: El informe ha sido ignorado.
        resolved: El informe se ha marcado como resuelto.
    show:
      stats: Estadísticas
      total_file_size: Tamaño total del archivo
    tag_settings:
      auto_tag_new:
        label: Etiquetar automáticamente los nuevos modelos con
      custom_stop_words:
        label: Palabras reservadas personalizadas
      description: Añada etiquetas a todos los modelos recién escaneados y filtre determinadas palabras ("palabras reservadas") durante la creación automática de etiquetas. Afecta a todos los usuarios.
      filter_stop_words:
        label: Filtrar palabras reservadas
      heading: Etiquetado
      stop_words_locale:
        label: Idioma de las palabras reservadas
      tag_model_directory_name:
        help: 'Advertencia: ¡Puede producir muchísimas etiquetas!'
        label: Crear etiquetas a partir del nombre del directorio del modelo
    update:
      success: Ajustes guardados.
    users:
      create:
        success: Usuario creado correctamente.
      destroy:
        success: Usuario eliminado
      edit:
        title: 'Editar usuario: %{username}'
      form:
        password_reset_help: Se enviará automáticamente un enlace al usuario para que establezca su propia contraseña.
        submit: Guardar
      index:
        description: Ver y editar cuentas de usuarios registrados.
        fediverse_address: Dirección de Fediverse
        local: Local
        new: Nuevo usuario
        title: Administrar Usuarios
        view: Ver
      new:
        title: Crear usuario
      quota:
        current_quota: Tamaño máximo actual de archivos en MB
        current_space_used: Almacenamiento de archivos utilizado actualmente
        title: Tamaño máximo de archivo
        unlimited_quota: Sin límites
        using_site_default: "¿Utilizar el tamaño máximo de archivos por defecto del sitio?"
      show:
        approve: Aprobar usuario
        confirm_destroy: "¿Está seguro de que desea eliminar esta cuenta de usuario inmediatamente? Esto no se puede deshacer"
        reset_password: Restablecer contraseña
        title: 'Detalles del usuario: %{username}'
      update:
        approved: El usuario ha sido aprobado correctamente.
        reset_link_sent: Se ha enviado un enlace al usuario para que establezca una nueva contraseña.
        success: Usuario actualizado correctamente.
</file>

<file path="config/locales/settings/fr.yml">
---
fr:
  settings:
    analysis:
      description: Effectuer une analyse approfondie du maillage des modèles. Ces options allongeront considérablement la durée de vos analyses et utiliseront beaucoup plus de CPU et de mémoire.
      heading: Analyse du maillage
      manifold:
        help: Detection de maillages non-manifold (par exemple, si il y a des trous ou des surfaces impossibles)
        label: Détecter les erreurs de maillage
    appearance:
      about:
        help_html:
        label:
      heading:
      information:
      rules:
        help_html:
        label:
      site_icon:
        help:
        label:
      site_name:
        help:
        label:
      site_tagline:
        help:
        label: Légende
      summary:
      support_link:
        help:
        label:
      theme:
        help_html:
        label:
    domain_blocks:
      create:
        success: Blocage de domaine créé avec succès.
      destroy:
        success: Blocage de domaine supprimé.
      index:
        confirm_destroy: Êtes-vous sûr de vouloir supprimer le blocage de ce domaine et réactiver la fédération ?
        description: Les blocages de domaines empêchent la fédération avec les serveurs ActivityPub sur les domaines spécifiés, y compris les sous-domaines.
        new: Nouveau domaine à bloquer
        title: Domaines bloqués
      new:
        submit: Bloquer le domaine
        title: Bloquer un domaine
    downloads:
      description:
      expiry:
        help:
        hours:
        label:
      heading:
      pregenerate:
        help:
        label:
    file_settings:
      custom_ignore_filters:
        details: Les filtres sont au format regex et sont séparés par une nouvelle ligne.
        label: Filtre regex pour les fichiers ignorés
      summary: Modifier les paramètres des fichiers tels que les fichiers ignorés.
      title: Paramètres des fichiers
    folder_settings:
      details: La structure des dossiers suit un modèle que vous définissez à l'aide de jetons. Vous pouvez également inclure d'autres textes dans le modèle (comme des séparateurs de dossiers) et ils seront inclus tels quels.
      model_path_template:
        label: Modèle de parcours
      parse_metadata_from_path:
        help: Définir le créateur, la collection et les étiquettes en fonction du modèle
        label: Remplir les métadonnées à partir du chemin d'accès et du modèle pendant le scan
      safe_folder_names:
        help_html: par exemple, <code>spinal-tap</code> au lieu de <code>Spın̈al Tap</code>
        label: Utiliser des noms de dossiers sûrs
      summary: Définir la structure des dossiers utilisée par "organiser les fichiers" et pour le remplissage automatique des métadonnées lors de l'analyse. Concerne tous les utilisateurs.
      title: Nom du dossier
      tokens:
        collection: Le titre de la collection dans laquelle se trouve le modèle, s'il est défini.
        creator: Le nom du créateur, s'il est défini.
        model_id: Un identifiant numérique unique pour le modèle. Nous vous recommandons fortement de toujours l'inclure à la fin de votre modèle afin d'éviter les conflits de noms sur le disque.
        model_name: Une version sécurisée du nom du modèle pour le système de fichiers.
        tags_html: 'une série de dossiers imbriqués, un pour chaque étiquette, classés par ordre de popularité de l''étiquette. Par exemple : <code>fantasy/humain/sorcier</code>'
    general:
      submit: Sauvegarder les paramètres
    multiuser:
      approve_signups:
        help: Tous les nouveaux comptes doivent être approuvés par un modérateur avant de pouvoir se connecter.
        label: Approuver les comptes
      autocreate_creator:
        help:
        label:
      default_signup_role:
        help:
        label:
        options:
          contributor:
          member:
      default_viewer_role:
        help: Qui peut voir les nouveaux modèles / créateurs / collections par défaut ?
        label: Visibilité par défaut
        options:
          member: Utilisateurs locaux connectés
          none: Privé
      details_html: Pour modifier ces paramètres, modifiez les <a href='https://manyfold.app/sysadmin/configuration.html'>variables d'environnement</a> du serveur et redémarrez-le.
      email: L'envoi du courrier électronique est-il configuré ?
      federation: Fédération activée ?
      heading: Multiutilisateur
      multiuser: Mode multi-utilisateurs ?
      multiuser_mode: Manyfold fonctionne en mode multi-utilisateurs.
      oidc: OpenID Connect est-il configuré ?
      permissions: Permissions
      registration: Enregistrement de comptes
      registration_open:
        help:
        label:
      single_user_mode: Manyfold fonctionne en mode mono-utilisateur.
      user_quotas:
      user_quotas_enable_quota:
      user_quotas_site_default:
    reporting:
      description_html: Si vous activez le suivi de l'utilisation, les informations suivantes seront envoyées une fois par jour à <code>%{endpoint}.</code> L'<code>identifiant</code> est généré de manière aléatoire lorsque vous activez le suivi.
      heading: Rapport d'utilisation
      report_usage:
        label: Active le rapport anonyme de l'utilisation
      summary: Faites savoir aux développeurs que vous utilisez Manyfold.
      use_of_data: Aucune autre information n'est envoyée ou stockée, et les développeurs n'utiliseront jamais ces informations à d'autres fins que de mesurer le nombre d'instances de Manyfold en cours d'exécution, ainsi que leur version.
      verification_html: Si vous souhaitez vérifier ce que nous envoyons, vous pouvez modifier la variable d'environnement <code>USAGE_REPORTING_URL</code> et envoyer les données à un endroit où vous pourrez les inspecter. Vous pouvez également voir exactement ce qui est envoyé dans le journal.
    reports:
      index:
        description: Les contenus signalés par les utilisateurs locaux ou du Fediverse sont affichés ici pour être modérés.
        title: Rapports
      show:
        ignore: Ignorer
        resolve: Marquer comme résolu
      update:
        ignored: Le rapport a été ignoré.
        resolved: Le rapport a été marqué comme résolu.
    show:
      stats:
      total_file_size:
    tag_settings:
      auto_tag_new:
        label: Etiqueter automatiquement les nouveaux modèles
      custom_stop_words:
        label: Personnaliser les stop words
      description: Ajouter des étiquettes à tous les modèles nouvellement numérisés et filtrer certains mots ("stop words") lors de la création automatique d'étiquette. Concerne tous les utilisateurs.
      filter_stop_words:
        label: Eliminer les mots vides
      heading: Etiqueter
      stop_words_locale:
        label: Stop words locale
      tag_model_directory_name:
        help: 'Attention : Peut produire un grand nombre de tags !'
        label: Créer des tags à partir du nom du répertoire du modèle
    update:
      success: Paramètres sauvegardés.
    users:
      create:
        success: Utilisateur créé avec succès.
      destroy:
        success: Utilisateur supprimé !
      edit:
        title: 'Modifier l''utilisateur : %{username}'
      form:
        password_reset_help: Un lien sera envoyé automatiquement à l'utilisateur pour lui permettre de définir son propre mot de passe.
        submit: Sauvegarder
      index:
        description: Visualiser et modifier les comptes d'utilisateurs enregistrés.
        fediverse_address: Adresse Fediverse
        local: Local
        new: Nouvel utilisateur
        title: Gérer les utilisateurs
        view: Afficher
      new:
        title: Créer un utilisateur
      quota:
        current_quota:
        current_space_used:
        title:
        unlimited_quota:
        using_site_default:
      show:
        approve: Approuver l'utilisateur
        confirm_destroy: Êtes-vous sûr de vouloir supprimer ce compte d'utilisateur immédiatement ? Cette action est irréversible !
        reset_password: Réinitialiser le mot de passe
        title: 'Détails de l''utilisateur : %{username}'
      update:
        approved: Utilisateur approuvé avec succès.
        reset_link_sent: Un lien a été envoyé à l'utilisateur pour qu'il définisse un nouveau mot de passe.
        success: L'utilisateur mis à jour avec succès.
</file>

<file path="config/locales/settings/ja.yml">
---
ja:
  settings:
    analysis:
      description:
      heading:
      manifold:
        help:
        label: メッシュエラーの検出
    appearance:
      about:
        help_html: アバウトページに掲載。<a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdownを</a>使用することができます。
        label: このインスタンスについて
      heading: 外観
      information: インフォメーション
      rules:
        help_html: サインアップ時に表示されます。<a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdownを</a>使用することもできます。
        label: サーバールール
      site_icon:
        help: 各ページの左上に表示
        label: ロゴURL
      site_name:
        help: サイトの名前。ナビゲーションやホームページで使用します。
        label: サイト名
      site_tagline:
        help: トップページに表示される、サイトを紹介するための一言。
        label: タグライン
      summary: インスタンスをカスタマイズ
      support_link:
        help:
        label: サポートリンク
      theme:
        help_html:
        label: テーマ
    domain_blocks:
      create:
        success: ドメインブロックが正常に作成されました。
      destroy:
        success: ドメインブロックが削除されました。
      index:
        confirm_destroy:
        description:
        new: 新ドメインブロック
        title: ドメインブロック
      new:
        submit: ドメインをブロックする
        title: 新ドメインブロック
    downloads:
      description: Manyfoldはリクエストに応じてモデルのZIPファイルを生成しますが、多忙なサイトではより早くZIPファイルを利用したい場合もあるでしょう。ここでは、ManyfoldにZIPファイルをすぐに作成するように指示したり、ダウンロードキャッシュに保存する期間を設定したりすることができます。この場合、多くのディスク容量を使用することになりますのでご注意ください！
      expiry:
        help: 0は永久保存を意味する。
        hours: 時間数
        label: ダウンロードしたZIPファイルを削除する
      heading: ダウンロード
      pregenerate:
        help: 有効にすると、モデルが追加または更新されるたびにZIPファイルが作成されます。無効の場合、ZIPファイルは要求されたときのみ作成されます。
        label: ダウンロード可能なZIPファイルを積極的に作成
    file_settings:
      custom_ignore_filters:
        details: フィルターは改行で区切られた正規表現形式である。
        label: 正規表現フィルターは無視される。
      summary: 無視するファイルなどのファイル設定を変更する。
      title: ファイル設定
    folder_settings:
      details: フォルダ構造は、トークンを使って定義したテンプレートに従います。テンプレートに他のテキストを含めることもでき（フォルダーのセパレーターなど）、そのテキストはそのまま含まれます。
      model_path_template:
        label: モデル・パス・テンプレート
      parse_metadata_from_path:
        help: テンプレートに基づいてクリエイター、コレクション、タグを設定する
        label: スキャン中にモデル・パス・テンプレートからメタデータを入力する
      safe_folder_names:
        help_html: 例：<code>Spın̈al Tap</code>の代わりに<code>spinal-tap</code>
        label: 安全なフォルダ名を使用する
      summary: "「ファイルの整理」とスキャン中のメタデータの自動入力で使用されるフォルダ構造を定義します。すべてのアカウントに影響します。"
      title: フォルダ名式
      tokens:
        collection: モデルが入っているコレクションのタイトル（設定されている場合）。
        creator: もし設定されていれば、作成者の名前。
        model_id: モデルの一意な数値識別子。ディスク上での名前の衝突を避けるため、テンプレートの最後に必ず含めることを強くお勧めします。
        model_name: モデル名のファイルシステムに安全なバージョン。
        tags_html: 各タグに1つずつ、タグの人気順に並べられた、入れ子になった一連のフォルダ。例えば、<code>hogehoge/piyopiyp/piyohogeの</code>ように。このトークンは「貪欲」で、できるだけ多くのタグを解析します。
    general:
      submit: 設定の保存
    multiuser:
      approve_signups:
        help: すべての新規アカウントは、サインインする前にモデレーターの承認が必要です。
        label: アカウント承認
      autocreate_creator:
        help:
        label:
      default_signup_role:
        help:
        label:
        options:
          contributor:
          member:
      default_viewer_role:
        help: デフォルトでは、誰が新しいモデル/クリエイター/コレクションを見ることができますか？
        label: デフォルトの可視性
        options:
          member: ログインされたローカルアカウント
          none: プライベート
      details_html: これらの設定を変更するには、サーバーの<a href='https://manyfold.app/sysadmin/configuration.html'>環境変数を</a>編集して再起動してください。
      email: メール配信設定
      federation: 連合有効
      heading: マルチユーザー
      multiuser: マルチユーザーモード
      multiuser_mode: Manyfoldはマルチユーザーモードで動作中です。
      oidc: OpenID Connectは設定されていますか？
      permissions: アクセス許可
      registration: アカウント登録
      registration_open:
        help: 訪問者がアカウントにサインアップできる。
        label: サインアップを有効にする
      single_user_mode: Manyfoldはシングルユーザーモードで動作中です。
      user_quotas: アカウントのアップロードサイズ制限
      user_quotas_enable_quota: アカウントのアップロード保存制限を有効にする
      user_quotas_site_default: サイトのデフォルトアカウントのアップロード保存上限（MB）
    reporting:
      description_html: 利用トラッキングを有効にすると、以下の情報が1日1回<code>%{endpoint}</code>に送信されます。<code>IDは</code>トラッキングを有効にした際にランダムに生成されます。
      heading: 利用トラッキング
      report_usage:
        label: 匿名の利用トラッキングを有効にする
      summary: Manyfoldを使用していることを開発者に知らせてください。
      use_of_data: それ以外の情報が送信されたり、保存されたりすることはありません。また、Manyfoldのインスタンスの数とバージョンを測定する以外の目的で、開発者が情報を使用することもありません。
      verification_html: 私たちが送信したものを確認したい場合は、<code>USAGE_REPORTING_URL</code>環境変数を変更し、あなたが検査できる場所にデータを送信することができます。また、ログで送信されたものを正確に見ることもできます。
    reports:
      index:
        description: ローカルまたはFediverseのアカウントから報告されたコンテンツは、モデレーションのためにここに表示されます。
        title: レポート
      show:
        ignore: 無視
        resolve: 解決済みとしてマークする
      update:
        ignored: 報告書は無視されている。
        resolved: 報告書は解決済みとされた。
    show:
      stats: 統計
      total_file_size: 全ファイルサイズ
    tag_settings:
      auto_tag_new:
        label: 新しいモデルには自動的に
      custom_stop_words:
        label: カスタム・ストップワード
      description: 新しくスキャンされたすべてのモデルにタグを追加し、自動タグ作成中に特定の単語（「ストップワード」）をフィルタリングします。すべてのアカウントに影響します。
      filter_stop_words:
        label: ストップワードのフィルタリング
      heading: タグ
      stop_words_locale:
        label:
      tag_model_directory_name:
        help:
        label:
    update:
      success:
    users:
      create:
        success:
      destroy:
        success:
      edit:
        title:
      form:
        password_reset_help:
        submit:
      index:
        description:
        fediverse_address: フェディバースアドレス
        local: ローカル
        new: 新規アカウント
        title: アカウント管理
        view: 表示
      new:
        title: アカウント作成
      quota:
        current_quota: 現在のファイル保存上限（MB）
        current_space_used: 現在使用中のファイルストレージ
        title: ファイルの保存制限
        unlimited_quota: 無制限
        using_site_default: サイトのデフォルトのファイル保存制限を使用していますか？
      show:
        approve: アカウントの承認
        confirm_destroy: このアカウントをすぐに削除してもよろしいですか？これは元に戻せません！
        reset_password: パスワードのリセット
        title: 口座の詳細[%{username}］
      update:
        approved: アカウントは正常に承認されました。
        reset_link_sent: 新しいパスワードを設定するためのリンクがアカウント所有者に送信されました。
        success: アカウントは正常に更新されました。
</file>

<file path="config/locales/settings/nl.yml">
---
nl:
  settings:
    analysis:
      description: Voer diepe mesh-analyse uit op modellen. Deze opties maken je scans aanzienlijk langer en gebruiken veel meer CPU en geheugen.
      heading: Mesh-analyse
      manifold:
        help: Controleer op niet-manifold meshes (d.w.z. ze hebben gaten of onmogelijke oppervlakken)
        label: Detecteer mesh-fouten
    appearance:
      about:
        help_html:
        label:
      heading:
      information:
      rules:
        help_html:
        label:
      site_icon:
        help:
        label:
      site_name:
        help:
        label:
      site_tagline:
        help:
        label: Tagline
      summary:
      support_link:
        help:
        label:
      theme:
        help_html:
        label:
    domain_blocks:
      create:
        success: Domeinblokkering succesvol aangemaakt.
      destroy:
        success: Domeinblokkering verwijderd.
      index:
        confirm_destroy: Weet je zeker dat je deze domeinblokkering wilt verwijderen en federatie weer wilt inschakelen?
        description: Domeinblokkeringen voorkomen federatie met ActivityPub-servers op de opgegeven domeinen, inclusief alle subdomeinen.
        new: Nieuwe domeinblokkering
        title: Domeinblokkeringen
      new:
        submit: Domein blokkeren
        title: Nieuwe Domeinblokkering
    downloads:
      description:
      expiry:
        help:
        hours:
        label:
      heading:
      pregenerate:
        help:
        label:
    file_settings:
      custom_ignore_filters:
        details:
        label:
      summary:
      title:
    folder_settings:
      details: Mapstructuur volgt een sjabloon dat je definieert met tokens. Je kunt ook andere tekst in het sjabloon opnemen (zoals mapscheidingstekens) en deze wordt ongewijzigd opgenomen.
      model_path_template:
        label: Model pad sjabloon
      parse_metadata_from_path:
        help: Stelt maker, collectie en tags in op basis van sjabloon
        label: Vul metadata in vanuit pad en sjabloon tijdens scan
      safe_folder_names:
        help_html: bijv. <code>spinal-tap</code> in plaats van <code>Spın̈al Tap</code>
        label: Gebruik veilige mapnamen
      summary: Definieer de mapstructuur die wordt gebruikt door "bestanden organiseren" en voor het automatisch invullen van metadata tijdens het scannen. Beïnvloedt alle gebruikers.
      title: Mapnaamgeving
      tokens:
        collection: De titel van de collectie waarin het model zich bevindt, indien ingesteld.
        creator: De naam van de maker, indien ingesteld.
        model_id: Een unieke numerieke identificatie voor het model. We raden sterk aan om dit altijd aan het einde van je sjabloon op te nemen om naamconflicten op schijf te voorkomen.
        model_name: Een bestandssysteem-veilige versie van de modelnaam.
        tags_html: 'een reeks geneste mappen, één voor elke tag, gerangschikt op volgorde van tagpopulariteit. Bijvoorbeeld: <code>fantasy/human/wizard</code>'
    general:
      submit: Instellingen Opslaan
    multiuser:
      approve_signups:
        help: Alle nieuwe accounts moeten worden goedgekeurd door een moderator voordat ze kunnen inloggen.
        label: Accounts goedkeuren
      autocreate_creator:
        help:
        label:
      default_signup_role:
        help:
        label:
        options:
          contributor:
          member:
      default_viewer_role:
        help: Wie kan standaard nieuwe modellen / makers / collecties bekijken?
        label: Standaard zichtbaarheid
        options:
          member: Ingelogde lokale gebruikers
          none: Privé
      details_html: Om deze instellingen te wijzigen, bewerk de <a href='https://manyfold.app/sysadmin/configuration.html'>omgevingsvariabelen</a> van de server en herstart.
      email: E-mailbezorging geconfigureerd?
      federation: Federatie ingeschakeld?
      heading: Multi-gebruiker
      multiuser: Multi-gebruiker modus?
      multiuser_mode: Manyfold draait in multi-gebruiker modus.
      oidc: OpenID Connect geconfigureerd?
      permissions: Machtigingen
      registration: Accountregistratie
      registration_open:
        help:
        label:
      single_user_mode: Manyfold draait in enkele-gebruiker modus.
      user_quotas:
      user_quotas_enable_quota:
      user_quotas_site_default:
    reporting:
      description_html: Als je gebruiksregistratie inschakelt, wordt de volgende informatie eenmaal per dag verzonden naar <code>%{endpoint}</code>. De <code>id</code> wordt willekeurig gegenereerd wanneer je registratie inschakelt.
      heading: Gebruiksregistratie
      report_usage:
        label: Schakel anonieme gebruiksregistratie in
      summary: Laat de ontwikkelaars weten dat je Manyfold gebruikt.
      use_of_data: Er wordt geen andere informatie verzonden of opgeslagen, en de ontwikkelaars zullen de informatie nooit voor een ander doel gebruiken dan het meten van hoeveel instanties van Manyfold er draaien en welke versie ze hebben.
      verification_html: Als je wilt verifiëren wat we verzenden, kun je de <code>USAGE_REPORTING_URL</code> omgevingsvariabele wijzigen en de gegevens ergens naartoe sturen waar je ze kunt inspecteren. Je kunt ook precies zien wat er wordt verzonden in het logboek.
    reports:
      index:
        description: Inhoud die is gerapporteerd door lokale of Fediverse-gebruikers verschijnt hier voor moderatie.
        title: Meldingen
      show:
        ignore: Negeren
        resolve: Markeren als opgelost
      update:
        ignored: De melding is genegeerd.
        resolved: De melding is gemarkeerd als opgelost.
    show:
      stats:
      total_file_size:
    tag_settings:
      auto_tag_new:
        label: Tag nieuwe modellen automatisch met
      custom_stop_words:
        label: Aangepaste stopwoorden
      description: Voeg tags toe aan alle nieuw gescande modellen en filter bepaalde woorden ("stopwoorden") uit tijdens automatische tagcreatie. Beïnvloedt alle gebruikers.
      filter_stop_words:
        label: Filter stopwoorden uit
      heading: Taggen
      stop_words_locale:
        label: Stopwoorden taal
      tag_model_directory_name:
        help: 'Waarschuwing: Kan veel tags produceren!'
        label: Maak tags van modelmapnaam
    update:
      success: Instellingen opgeslagen.
    users:
      create:
        success: Gebruiker succesvol aangemaakt.
      destroy:
        success: Gebruiker verwijderd!
      edit:
        title: 'Bewerk gebruiker: %{username}'
      form:
        password_reset_help: Er wordt automatisch een link naar de gebruiker gestuurd zodat ze hun eigen wachtwoord kunnen instellen.
        submit: Opslaan
      index:
        description: Bekijk en bewerk geregistreerde gebruikersaccounts.
        fediverse_address: Fediverse-adres
        local: Lokaal
        new: Nieuwe gebruiker
        title: Beheer Gebruikers
        view: Bekijken
      new:
        title: Gebruiker aanmaken
      quota:
        current_quota:
        current_space_used:
        title:
        unlimited_quota:
        using_site_default:
      show:
        approve: Gebruiker goedkeuren
        confirm_destroy: Weet je zeker dat je dit gebruikersaccount direct wilt verwijderen? Dit kan niet ongedaan worden gemaakt!
        reset_password: Wachtwoord resetten
        title: 'Gebruikersdetails: %{username}'
      update:
        approved: Gebruiker is succesvol goedgekeurd.
        reset_link_sent: Er is een link naar de gebruiker gestuurd om een nieuw wachtwoord in te stellen.
        success: Gebruiker succesvol bijgewerkt.
</file>

<file path="config/locales/settings/pl.yml">
---
pl:
  settings:
    analysis:
      description: Przeprowadź głęboką analizę siatki na modelach. Opcje te sprawią, że skanowanie będzie trwało znacznie dłużej i zużyje znacznie więcej mocy procesora i pamięci.
      heading: Analiza siatki
      manifold:
        help: Sprawdź, czy siatki nie są siatkami nierozmaitymi (tj. mają dziury lub niemożliwe powierzchnie)
        label: Wykryj błędy siatki
    appearance:
      about:
        help_html: Pokazane na stronie o instancji; Możesz użyć <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
        label: O tej instancji
      heading: Wygląd
      information: Informacje
      rules:
        help_html: Pokazane przy rejestracji; możesz użyć <a href="https://www.markdownguide.org/cheat-sheet/" target="markdown">Markdown</a>.
        label: Zasady serwera
      site_icon:
        help: Wyświetlane w lewym górnym rogu każdej strony
        label: Adres URL loga
      site_name:
        help: Nazwa twojej strony. Używana w nawigacji i na stronie głównej.
        label: Nazwa witryny
      site_tagline:
        help: Kilka słów przedstawiających twoją stronę, wyświetlane na stronie głównej.
        label: Napis
      summary: Dostosuj swoją instancje.
      support_link:
        help: Link do miejsca, w którym odwiedzający mogą wesprzeć instancję finansowo (np. OpenCollective, Patreon). Pokazywane w stopce strony.
        label:
      theme:
        help_html: Dotyczy wszystkich kont. Odwiedź <a href="https://bootswatch.com">Bootswatch</a>, aby zobaczyć podgląd.
        label: Motyw
    domain_blocks:
      create:
        success: Blok domeny został pomyślnie utworzony.
      destroy:
        success: Usunięto blok domeny.
      index:
        confirm_destroy: Czy na pewno chcesz usunąć tę blokadę domeny i ponownie włączyć federację?
        description: Blokady domen uniemożliwiają federację z serwerami ActivityPub w określonych domenach, włącznie z ich wszystkimi subdomenami.
        new: Nowy blok domeny
        title: Bloki Domeny
      new:
        submit: Zablokuj domene
        title: Nowy Blok Domeny
    downloads:
      description:
      expiry:
        help:
        hours:
        label:
      heading:
      pregenerate:
        help:
        label:
    file_settings:
      custom_ignore_filters:
        details: Filtry są w formacie regex i są oddzielone nową linią.
        label: Filtry regex ignorowanych plików.
      summary: Zmień ustawienia plików, takie jak ignorowane pliki.
      title: Ustawienia plików
    folder_settings:
      details: Struktura folderów jest zgodna z szablonem zdefiniowanym przy użyciu tokenów. Do szablonu możesz również dołączyć inny tekst (np. separatory folderów), który zostanie uwzględniony jak jest.
      model_path_template:
        label: Szablon ścieżki modelu
      parse_metadata_from_path:
        help: Ustawia twórcę, kolekcję i tagi na podstawie szablonu
        label: Wypełnij metadane z szablonu ścieżki modelu podczas skanowania
      safe_folder_names:
        help_html: np. <code>spinal-tap</code> zamiast <code>Spın̈al Tap</code>
        label: Używaj bezpiecznych nazw folderów
      summary: Określ strukturę folderów używaną przez "organizuj pliki" i do automatycznego uzupełniania metadanych podczas skanowania. Dotyczy wszystkich kont.
      title: Nazewnictwo folderów
      tokens:
        collection: Tytuł kolekcji, w której znajduje się model, jeśli jest ustawiony.
        creator: Nazwa twórcy, jeśli ustawiona.
        model_id: Unikalny numeryczny identyfikator modelu. Zdecydowanie polecamy podawanie go zawsze na końcu szablonu, aby uniknąć konfliktów nazw na dysku.
        model_name: Bezpieczna dla systemu plików wersja nazwy modelu.
        tags_html: 'seria zagnieżdżonych folderów, po jednym dla każdego z tagów, ułożonych w kolejności popularności tagów. Na przykład: <code>fantasy/człowiek/czarodziej</code>. Ten token jest "chciwy"; przeanalizuje on tak wiele tagów, jak to tylko możliwe.'
    general:
      submit: Zapisz Ustawienia
    multiuser:
      approve_signups:
        help: Wszystkie nowe konta muszą zostać zatwierdzone przez moderatora, zanim będą oni mogli się zalogować.
        label: Zatwierdź konta
      autocreate_creator:
        help:
        label:
      default_signup_role:
        help:
        label:
        options:
          contributor:
          member:
      default_viewer_role:
        help: Kto może domyślnie wyświetlać nowe modele / twórców / kolekcje?
        label: Domyślna widoczność
        options:
          member: Zalogowane lokalne konta
          none: Prywatne
      details_html: Aby zmienić te ustawienia, edytuj <a href='https://manyfold.app/sysadmin/configuration.html'>zmienne środowiskowe</a> serwera i uruchom go ponownie.
      email: Dostarczanie wiadomości e-mail skonfigurowane?
      federation: Federacja włączona?
      heading: Tryb wielu użytkowników
      multiuser: Tryb wielu użytkowników?
      multiuser_mode: Manyfold działa w trybie wielu użytkowników.
      oidc: OpenID Connect skonfigurowany?
      permissions: Uprawnienia
      registration: Rejestracja konta
      registration_open:
        help: Umożliwia odwiedzającym rejestrację kont.
        label: Włącz rejestrację
      single_user_mode: Manyfold działa w trybie pojedynczego użytkownika.
      user_quotas:
      user_quotas_enable_quota:
      user_quotas_site_default:
    reporting:
      description_html: Jeśli włączysz śledzenie użytkowania, poniższe informacje będą wysyłane raz dziennie do <code>%{endpoint}</code>. <code>Identyfikator</code> jest generowany losowo po włączeniu śledzenia.
      heading: Śledzenie Użytkowania
      report_usage:
        label: Włącz anonimowe śledzenie użytkowania
      summary: Poinformuj deweloperów, że korzystasz z Manyfold.
      use_of_data: Żadne inne informacje nie są wysyłane ani przechowywane, a deweloperzy nigdy nie wykorzystają tych informacji do celów innych niż pomiar liczby uruchomionych instancji Manyfold i ich wersji.
      verification_html: Jeśli chcesz zweryfikować to, co wysyłamy, możesz zmienić zmienną środowiskową <code>USAGE_REPORTING_URL</code> i wysłać dane w miejsce, w którym możesz je sprawdzić. Możesz również zobaczyć dokładnie, co jest wysyłane w logach.
    reports:
      index:
        description: Treści zgłoszone przez konta lokalne lub pochodzące z Fediverse są wyświetlane tutaj do moderacji.
        title: Zgłoszenia
      show:
        ignore: Ignoruj
        resolve: Oznacz jako rozwiązane
      update:
        ignored: Zgłoszenie zostało zignorowane.
        resolved: Zgłoszenie zostało oznaczone jako rozwiązane.
    show:
      stats: Statystyki
      total_file_size: Całkowity rozmiar pliku
    tag_settings:
      auto_tag_new:
        label: Automatycznie taguj nowe modele za pomocą
      custom_stop_words:
        label: Niestandardowe słowa stopu
      description: Dodaje tagi do wszystkich nowo zeskanowanych modeli i odfiltrowuje określone słowa ("słowa stopu") podczas automatycznego tworzenia tagów. Dotyczy wszystkich kont.
      filter_stop_words:
        label: Odfiltruj słowa stopu
      heading: Tagowanie
      stop_words_locale:
        label: Język słów stopu
      tag_model_directory_name:
        help: 'Każde słowo w nazwie modelu (nie ścieżki) zostanie dodane jako tag. Uwaga: może to wygenerować DUŻO tagów!'
        label: Stwórz tagi na podstawie nazwy modelu
    update:
      success: Ustawienia zapisane.
    users:
      create:
        success: Konto pomyślnie utworzone.
      destroy:
        success: Konto usunięte!
      edit:
        title: 'Edytuj konto: %{username}'
      form:
        password_reset_help: Link zostanie automatycznie wysłany do właściciela konta w celu ustawienia przez niego własnego hasła.
        submit: Zapisz
      index:
        description: Wyświetl i edytuj zarejestrowane konta.
        fediverse_address: Adres Fediverse
        local: Lokalny
        new: Nowe konto
        title: Zarządzaj Kontami
        view: Widok
      new:
        title: Utwórz konto
      quota:
        current_quota:
        current_space_used:
        title:
        unlimited_quota:
        using_site_default:
      show:
        approve: Zatwierdź konto
        confirm_destroy: Czy na pewno chcesz natychmiast usunąć to konto? Nie można tego cofnąć!
        reset_password: Zresetuj hasło
        title: 'Dane konta: %{username}'
      update:
        approved: Konto pomyślnie zatwierdzone.
        reset_link_sent: Do właściciel konta został wysłany link umożliwiający ustawienie przez niego nowego hasła.
        success: Konto pomyślnie zaktualizowane.
</file>

<file path="config/locales/cs.yml">
---
cs:
  activerecord:
    attributes:
      collection:
        caption: Titulek
        collection: Kolekce
        name: Název
        notes: Poznámky
      creator:
        caption: Popisek
        name: Jméno
        notes: Popis
        slug: Handle
      doorkeeper/application:
        access_token: Přístupový token
        confidential: Důvěrné
        created_at: Vytvořeno
        name: Jméno
        owner: Vlastník
        redirect_uri: URI přesměrování
        scopes: Scopes
        secret: Klient secret
        uid: ID klienta
      federails/moderation/domain_block:
        created_at: Vytvořeno
        domain: Doména
      federails/moderation/report:
        content: Komentář
        created_at: Přijato
        federails_actor: Nahlášeno
        object: Objekt
      library:
        caption: Titulek
        create_path_if_not_on_disk: Automatické vytvoření složky
        default: Výchozí
        icon: Ikona
        name: Název
        notes: Poznámky
        path: Cesta
        s3_access_key_id: ID přístupového klíče
        s3_bucket: Název Bucketu
        s3_endpoint: Adresa URL koncového bodu
        s3_path_style: Použít URL jako cesty
        s3_region: Region
        s3_secret_access_key: Tajný přístupový klíč
        storage_service: Služba ukládání
        tag_regex: Povinné štítky
      link:
        url: Odkaz
      model:
        caption: Titulek
        collection_id: Kolekce
        creator_id: Autor
        library_id: Knihovna
        license: Licence
        name: Název
        notes: Popis
        path: Cesta
        preview_file: Soubor náhledu
        sensitive: Citlivý obsah
        tags: Štítky
      model_file:
        caption: Titulek
        digest: Digest
        filename: Název souboru
        model_id: Model
        notes: Poznámky
        presupported: Předběžně podporované
        presupported_version: Předběžně podporovaná verze
        printed: Vytisknuto
        size: Velikost souboru
        unsupported_version: Nepodporovaná verze
        y_up: Y nahoru
      problem:
        category: Kategorie
        ignored: Skryté
        note: Poznámka
        problematic_type: Typ objektu
        severity: Závažnost
      user:
        approved: Účet čeká na vyřízení
        confirmation_sent_at: Potvrzení zasláno na
        confirmation_token: Potvrzovací token
        confirmed_at: Potvrzeno
        created_at: Vytvořeno
        current_password: Současné heslo
        current_sign_in_at: Současné přihlášení na
        current_sign_in_ip: Současné přihlášení z IP
        email: E-mail
        encrypted_password: Zašifrované heslo
        failed_attempts: Chybných pokusů
        last_sign_in_at: Poslední přihlášení
        last_sign_in_ip: Poslední přihlášení z IP
        locked_at: Uzamčeno
        password: Heslo
        password_confirmation: Potvrzení hesla
        remember_created_at: Zapamatování vytvořeno
        remember_me: Zapamatuj si mě
        reset_password_sent_at: Obnova hesla poslána
        reset_password_token: Token obnovy hesla
        sign_in_count: Počet přihlášení
        unconfirmed_email: Nepotvrzený e-mail
        unlock_token: Odemykací token
        updated_at: Upraveno
        username:
    errors:
      models:
        collection:
          attributes:
            collection:
              private:
            creator:
              private:
        doorkeeper/application:
          attributes:
            redirect_uri:
              forbidden_uri: je serverem zakázána.
              fragment_present: nemůže obsahovat fragment.
              invalid_uri: musí být platná URI.
              relative_uri: musí být absolutní URI.
              secured_uri: musí být HTTPS/SSL URI.
              unspecified_scheme: must specify a scheme.
            scopes:
              not_match_configured: neodpovídá nastavenému serveru.
        library:
          attributes:
            path:
              cannot_be_contained: nemůže být uvnitř jiné knihovny
              cannot_contain: nemůže obsahovat jiné knihovny
              non_writable: musí být zapisovatelné
              not_found: na disku nebylo nalezeno
              unsafe: nemůže být systémovou cestou s privilegii
        model:
          attributes:
            creator:
              private:
            library:
              nested: nelze změnit, model obsahuje další modely
            license:
              invalid_spdx: není platná licence
            path:
              destination_exists: již existuje
              nested: nelze změnit, model obsahuje další modely
        model_file:
          attributes:
            filename:
              cannot_change_type: není stejný typ souboru
              case_change_only: nemůže jít pouze o změnu velikosti písmen
            presupported_version:
              already_presupported: nelze nastavit u předběžně podporovaného souboru
              not_supported: není předběžně podporovaný soubor
    models:
      acts_as_taggable_on/tag:
        few: Štítky
        many: Štítky
        one: Štítek
        other: Štítky
        two: Štítky
        zero: Štítky
      collection:
        few: Kolekce
        many: Kolekce
        one: Kolekce
        other: Kolekce
        two: Kolekce
        zero: Kolekce
      creator:
        few: Autoři
        many: Autoři
        one: Autor
        other: Autoři
        two: Autoři
        zero: Autoři
      federails/moderation/domain_block:
        few: Blokování domén
        many: Blokování domén
        one: Blokování domény
        other: Blokování domén
        two: Blokování domén
        zero: Blokování domén
      federails/moderation/report:
        few: Hlášení
        many: Hlášení
        one: Hlášení
        other: Hlášení
        two: Hlášení
        zero: Hlášení
      library:
        few: Knihovny
        many: Knihovny
        one: Knihovna
        other: Knihovny
        two: Knihovny
        zero: Knihovny
      link:
        few: Odkazy
        many: Odkazy
        one: Odkaz
        other: Odkazy
        two: Odkazy
        zero: Odkazy
      model:
        few: Modely
        many: Modely
        one: Model
        other: Modely
        two: Modely
        zero: Modely
      model_file:
        few: Soubory
        many: Soubory
        one: Soubor
        other: Soubory
        two: Soubory
        zero: Soubory
      problem:
        few: Problémy
        many: Problémy
        one: Problém
        other: Problémy
        two: Problémy
        zero: Problémy
      user:
        few: Uživatelé
        many: Uživatelé
        one: Uživatel
        other: Uživatelé
        two: Uživatelé
        zero: Uživatelé
  activity:
    index:
      description: Záznamy jsou po %{retention_period} smazány.
      message: Zpráva
      name: Název
      time: Kdy
      title: Poslední aktivita
  activity_helper:
    status_icon:
      completed: Hotovo
      error: Chybné
      queued: Ve frontě
      working: Pracuje
  application:
    caber_relation_fields:
      delete: Smazat
      permissions:
        edit: Lze upravovat
        own: Vlastník (může zobrazit, upravit, smazat a sdílet)
        preview:
        view: Pouze zobrazení
      subject:
        placeholder: E-mailová adresa, uživatelské jméno nebo role
        role:
          member: Jakýkoli přihlášený místní uživatel
          public: Všichni (bez přihlášení)
        you: "(vy)"
    caber_relations_form:
      add: přidat další oprávnění
      permissions: Sdílení
    demo_mode: Tato instance je v demo režimu. Nemůžete přidávat ani odebírat modely, ale můžete dělat vše ostatní.
    filters_card:
      missing_tags: Chybějící štítky
      remove_collection_filter: Odstranit filtr kolekce
      remove_creator_filter: Odstranit filtr autora
      remove_library_filter: Odstranit filtr knihovny
      remove_missing_tag_filter: Odstranit filtr chybějících štítků
      remove_search_filter: Odstranit filtr vyhledávání
      remove_tag_filter: Odstranit filtr štítků
      search: Vyhledávání
      title: Filtry
      unknown: Neznámý
    footer:
      about: O této instanci
      api: API
      by_html: Navrhl a sestavil <a href="https://floppy.org.uk" target="_blank">James</a> s pomocí <a href="https://github.com/manyfold3d/manyfold/graphs/contributors" target="_blank">našich přispěvatelů</a>.
      community: Připojte se ke komunitě
      instance_heading: Podrobnosti o instanci
      issues: Problémy
      open_source_html: <a href="https://github.com/manyfold3d/manyfold" target="_blank">Open Source</a> pod <a href="https://github.com/manyfold3d/manyfold/blob/main/LICENSE.md" target="_blank" rel="license">MIT licencí</a>.
      powered_by_html: Funguje na <a href="https://manyfold.app">%{name}</a>
      sponsor: Sponzor
      support: Podporovat tuto instanci
      version: Verze
    link_fields:
      url:
        delete: Smazat
        placeholder: Jakákoli související webová stránka
    links_form:
      add: přidat další odkaz
    navbar:
      account: Mé nastavení
      activity: Aktivita
      check_existing: Kontrola stávajících modelů
      home: Domovská stránka
      log_in: Přihlásit se
      log_out: Odhlásit se
      navbar:
        toggler:
          label: Přepínání navigace
      scan: Kontrola
      scan_changes: Kontrola změn
      scanning: Kontrolování
      search: Hledat
      settings: Nastavení webu
      upload: Nahrát
    order_buttons:
      sort:
        name: Seřadit podle jména
        time: Řazení podle času
    search_error:
    tag_list:
      unrelated_tag_count:
        one: skryto %{count} nesouvisejících štítků
        other: skryto %{count} nesouvisejících štítků
    tagline: Pomáhá Vám sledovat vaše soubory pro 3d tisk
    tags_card:
      skip_tags: Přeskočit seznam štítků
    title: Manyfold
  components:
    altcha_widget:
      help:
    copy_button:
      copy:
    download_button:
      download:
        missing:
        preparing:
        ready:
      file_type: Pouze soubory %{type}
      label: Stáhnout vše
      menu_header: Možnosti stažení
      supported: Pouze podporované soubory
      unsupported: Pouze nepodporované soubory
    follow_button:
      follow: Sledovat %{name}
      pending: Požadováno
      unfollow: Přestat sledovat %{name}
    modal:
      close:
    model_card:
      delete_button:
        label: Smazat model %{name}
        text: Smazat
      edit_button:
        label: Upravit model %{name}
        text: Upravit
      no_preview: Není k dispozici náhled
      open_button:
        label: Otevřít model %{name}
        text: Otevřít
    search_help:
      boolean:
      federation:
      filename:
      intro:
      more_details_html:
      negation:
      parentheses:
      quotes:
      simple:
      specific_fields:
      tag:
      title:
      unset:
      without_tag:
  doorkeeper:
    applications:
      buttons:
        authorize: Autorizovat
        cancel: Zrušit
        destroy: Smazat
        edit: Upravit
        submit: Odeslat
      confirmations:
        destroy: Opravdu smazat?
      edit:
        title: Upravit aplikaci
      form:
        error: Chyba! Zkontrolujte a opravte chyby ve formuláři
      help:
        blank_redirect_uri: Ponechte prázdné, pokud jste nakonfigurovali svého poskytovatele, aby používal pověření klienta, pověření vlastníka hesla nebo jiný typ grantu, který nevyžaduje přesměrování identifikátoru URI.
        confidential: Aplikace bude použita tam, kde je možné zachovat důvěrnost klienta. Nativní mobilní aplikace a aplikace s jednou stránkou jsou považovány za nedůvěrné.
        redirect_uri: Na každý řádek jedna URI
        scopes: Oddělte scopy mezerami. Nechte prázdné pro použití default scopu.
      index:
        actions: Akce
        callback_url: Callback URL
        confidential: Důvěrné?
        confidentiality:
          'no': Ne
          'yes': Ano
        name: Název
        new: Nová aplikace
        title: Vaše aplikace
      new:
        title: Nová aplikace
      show:
        actions: Akce
        application_id: UID aplikace
        callback_urls: Url přesměrování
        confidential: Důvěrné
        not_defined: Není definováno
        scopes: Scopes
        secret: Secret
        secret_hashed: Hashováno
        title: 'Aplikace: %{name}'
    authorizations:
      buttons:
        authorize: Autorizovat
        deny: Odmítnout
      error:
        title: Vyskytla se chyba
      form_post:
        title: Odeslat tento formulář
      new:
        able_to: Tato aplikace bude mít tato oprávnění
        prompt: Autorizovat %{client_name} k přístupu k vašemu účtu?
        title: Nutná autorizace
      show:
        title: Autorizační kód
    authorized_applications:
      buttons:
        revoke: Odebrat autorizaci
      confirmations:
        revoke: Opravdu autorizovat?
      index:
        application: Aplikace
        created_at: Vytvořeno
        date_format: "%H:%M:%S %d.%m.%T"
        title: Vaše autorizované aplikace
    errors:
      messages:
        access_denied: Vlastník zdroje nebo autorizační server požadavek odmítl.
        admin_authenticator_not_configured: Přístup k panelu admin je zakázán kvůli tomu, že Doorkeeper.configure.admin_authenticator je nekonfigurován.
        credential_flow_not_configured: Flow pověření vlastníka zdroje se nezdařil kvůli tomu, že Doorkeeper.configure.resource_owner_from_credentials není nakonfigurován.
        forbidden_token:
          missing_scope: Přístup k tomuto prostředku vyžaduje "%{oauth_scopes}".
        invalid_client: Autentizace klienta se nezdařila kvůli neznámému klientovi, žádnému ověřování klienta nebo nepodporované metodě ověřování.
        invalid_code_challenge_method:
          one: Code_challenge_method musí být %{challenge_methods}.
          other: Code_challenge_method musí být jeden z %{challenge_methods}.
          zero: Autorizační server nepodporuje PKCE, protože neexistují žádné přijatelné hodnoty code_challenge_method.
        invalid_grant: Poskytnutý grant pro udělení oprávnění je neplatný, jeho platnost vypršela, zrušena, neodpovídá identifikátoru URI přesměrování použitého v žádosti o autorizaci nebo byla vydána jinému klientovi.
        invalid_redirect_uri: Požadované přesměrování uri je chybně formátováno nebo neodpovídá přesměrování URI klienta.
        invalid_request:
          invalid_code_challenge: Je vyžadována výzva ke kódu.
          missing_param: 'Missing required parameter: %{value}.'
          request_not_authorized: Request need to be authorized. Required parameter for authorizing request is missing or invalid.
          unknown: Požadavku chybí požadovaný parametr, obsahuje nepodporovanou hodnotu parametru, nebo je jinak poškozen.
        invalid_scope: Požadovaný rozsah je neplatný, neznámý nebo poškozený.
        invalid_token:
          expired: Tento přístupový token vypršel
          revoked: Tento přístupový token byl zneplatněn
          unknown: Tento přístupový token je neplatný
        resource_owner_authenticator_not_configured: Vyhledání zdroje se nezdařilo z důvodu, že Doorkeeper.configure.resource_owner_authenticator je nekonfigurován.
        revoke:
          unauthorized: You are not authorized to revoke this token
        server_error: Autorizační server narazil na neočekávanou podmínku, která mu znemožnila splnit požadavek.
        temporarily_unavailable: Autorizační server není v současné době schopen zpracovat požadavek z důvodu dočasného přetížení nebo údržby serveru.
        unauthorized_client: Klient není oprávněn provádět tento požadavek touto metodou.
        unsupported_grant_type: Autorizační server nepodporuje typ autorizačního grantu.
        unsupported_response_mode: Autorizační server nepodporuje tento typ odpovědi.
        unsupported_response_type: Autorizační server nepodporuje tento typ odpovědi.
    flash:
      applications:
        create:
          notice: Aplikace vytvořena.
        destroy:
          notice: Aplikace smazána.
        update:
          notice: Aplikace aktualizována.
      authorized_applications:
        destroy:
          notice: Aplikaci bylo odebráno oprávnění.
    layouts:
      admin:
        nav:
          applications: Aplikace
          home: Domů
          oauth2_provider: OAuth2 poskytovatel
        title: Doorkeeper
      application:
        title: OAuth vyžaduje autorizaci
    pre_authorization:
      status: Pre-autorizace
  doorkeeper_applications:
    create:
      failure: Došlo k chybě a aplikaci nebylo možné vytvořit.
      success: Aplikace byla úspěšně vytvořena.
    destroy:
      success: Aplikace byla úspěšně odstraněna.
    edit:
      title: Upravit aplikaci
    form:
      confidential:
        help: Důvěrná aplikace může bezpečně uchovávat tajemství (např. backend webového serveru nebo skript machine-to-machine).
      redirect_uri:
        help: Pokud vaše aplikace nepotřebuje přesměrování URI (např. aplikace machine-to-machine), použijte "urn:ietf:wg:oauth:2.0:oob".
      scopes:
        label: Scopes
      submit: Uložit aplikaci
    index:
      description: Aplikace OAuth umožňují přístup k prostředkům Manyfold z jiných služeb prostřednictvím našeho rozhraní API.
      new: Nová aplikace
      title: Aplikace OAuth
    new:
      title: Nová aplikace
    show:
      destroy: Smazat
      edit: Upravit
      title: Podrobnosti o aplikaci
    update:
      failure: Došlo k chybě a aplikaci nebylo možné uložit.
      success: Aplikace byla úspěšně uložena.
  follows:
    actor_table:
      actions: Akce
      address: Adresa Fediverse
      name: Název
      non_manyfold_account: Toto není účet Manyfold; můžete ho sledovat, ale pravděpodobně se nic zajímavého nestane, alespoň prozatím.
    follow_remote_actor:
      followed: Úspěšně sledován %{actor}
    index:
      followers: Sledující
      following: Sledování
      title: Sledování
    new:
      help: Můžete sledovat veřejné tvůrce, kolekce nebo modely na jiném serveru Manyfold, vlastně jakýkoli veřejný účet ve Fediverse! Stačí zadat název účtu do vyhledávacího pole!
      no_results: Omlouváme se, ale pro "%{query}" se nepodařilo nic najít. Jedná se o platný účet ActivityPub nebo adresu URL?
      results: Výsledky vyhledávání
      title: Sledujte Fediverse
    remote_follow:
      help: Pro sledování %{name} nepotřebujete účet na tomto serveru; zadejte zde své vlastní jméno účtu a my vás pošleme na domovskou stránku, abyste proces dokončili.
      no_results_html: Váš domácí účet jsme nenašli; zadali jste ho správně?
      placeholder: Vaše uživatelské jméno Fediverse, např. @manyfold@3dp.chat
      submit: Domů
      title: Sledovat %{name}
    search_form:
      placeholder: Zadejte účet Fediverse nebo adresu URL, např. @admin@try.manyfold.app
      submit: Vyhledávání
    unfollow_remote_actor:
      unfollowed: Již nesledován %{actor}
  general:
    delete: Smazat
    download: Stáhnout
    edit: Upravit
    expand: Rozbalit
    followers:
      few: "%{count} sledující"
      many: "%{count} sledující"
      one: "%{count} sledující"
      other: "%{count} sledující"
      two: "%{count} sledující"
      zero: "%{count} sledující"
    menu: Menu
    new: Nový
    public:
    report: Nahlásit %{type}
    save: Uložit
    view: Zobrazení
  home:
    activity:
      created: 'přidáno před %{time} '
      updated: aktualizováno před %{time}
    browsing:
      content:
      manual_link:
      more_access:
      title:
    federation:
      content_html:
      following:
      handle_html:
      title:
    index:
      no_activities: Prozatím nejsou k dispozici žádné aktivity, ke zobrazení.
      open_search_help:
      recent_activity: Poslední aktivita
      search:
        placeholder: Co hledáte?
        submit: Vyhledávání
    publishing:
      content:
      new_creator:
        button:
        content:
      title:
    support:
      content:
      manyfold_html:
      support_link: Podporovat tuto instanci
      title:
    uploading:
      how_to_upload:
      permissions:
        edit:
        member:
        private:
      title:
      upload: Nahrát
    welcome:
      lead:
      title:
  jobs:
    activity:
      collection_published:
        comment:
      model_collected:
        comment:
      model_published:
        comment:
      updated_model:
        comment:
    analysis:
      analyse_model_file:
        detect_duplicates: Detekce duplicitních souborů
        detect_ineffiency: Detekce neefektivních formátů
        file_statistics: Výpočet statistik souborů
        matching: Přiřazení podporovaných souborů
      file_conversion:
        exporting: Export nového souboru
        loading_mesh: Načítání modelu
      geometric_analysis:
        direction_check: Kontrola orientace povrchu
        loading_mesh: Načítání modelu
        manifold_check: Kontrola, zda je model manifold
    scan:
      check_all:
        queueing_model_checks: Zařazení kontroly modelu do fronty
        removing_orphaned_problems: Odstranění samostatných problémů
      detect_filesystem_changes:
        building_filename_list: Sestavení seznamu souborů
        building_folder_list: Sestavení seznamu změněných složek
        creating_models: Vytváření modelů
  kaminari:
    first_page:
      label: Přejít na první stránku
    last_page:
      label: Přejít na poslední stránku
    next_page:
      label: Přejít na další stránku
    page:
      current_page: Aktuální stránka
      label: Přejít na stránku %{page}
    paginator:
      label: Navigace stránky
    prev_page:
      label: Přejít na předchozí stránku
  layouts:
    application:
      alert:
        danger: Nebezpečí
        info: Info
      skip_to_content: Přeskočit na hlavní obsah
    card_list_page:
      actions_heading: Akce
    settings:
      activeadmin: Pokročilá administrace
      appearance: Vzhled
      downloads:
      libraries: Knihovny
      organization: Organizace
      performance: Výkonnostní dashboard
      pghero: PgHero
      sidekiq: Sidekiq
      site_settings_title: Nastavení webu
      tools_heading: Pokročilé nástroje
  licenses:
    CC-BY-40: Creative Commons Uveďte autora
    CC-BY-NC-40: Creative Commons Uveďte autora, Neužívejte komerčně
    CC-BY-NC-ND-40: Creative Commons Uveďte autora, Neužívejte komerčně, Bez derivátů
    CC-BY-NC-SA-40: 'Creative Commons Uveďte autora, Neužívejte komerčně, Zachovejte licenci '
    CC-BY-ND-40: Creative Commons Uveďte autora, Bez derivátů
    CC-BY-SA-40: Creative Commons Uveďte autora, Zachovejte licenci
    CC-PDDC: Prohlášení Creative Commons Volné dílo
    CC0-10: Creative Commons Nula
    LicenseRef-Commercial: Komerční; pouze pro soukromé použití
    MIT: MIT
  moderator_mailer:
    new_approval:
      greeting: Ahoj!
      message: Někdo nový si vytvořil účet a vyžaduje schválení. Schvalte účet na adrese %{link}
      subject: Nový účet je třeba schválit
    new_report:
      greeting: Ahoj!
      message: Někdo nahlásil obsah, který je třeba posoudit. Prohlédněte si zprávu na adrese %{link}
      subject: Obdrženo nové hlášení
  renderer:
    errors:
      canvas: 'Nepodařilo se najít #webgl canvas!'
      load: Chyba načítání
      webglrenderer: Nelze vytvořit vykreslovač!
    load: Nahrát
    processing: Vzorkování splinů...
  reports:
    create:
      success: Hlášení odesláno. Děkujeme!
    new:
      description: Pokud tato položka porušuje zákony nebo zásady serveru, můžete ji nahlásit našim moderátorům. Přidejte komentář a sdělte nám proč!
      submit: Odeslat hlášení
      title: 'Nahlásit %{type}: "%{name}"'
  security:
    running_as_root_html: Manyfold je spuštěn jako root, což představuje bezpečnostní riziko. Spusťte jej jako jiný uživatel systému nastavením proměnných prostředí <code>PUID</code> a <code>PGID</code>. Podrobnosti naleznete v <a href='https://manyfold.app/sysadmin/configuration.html#required'>konfigurační dokumentaci</a>.
  sites:
    cgtrader: CGTrader
    comicsgamesandthings: Comics, Games, and Things
    cults3d: Cults3D
    github: GitHub
    makerworld: MakerWorld
    manyfold: Manyfold
    myminifactory: MyMiniFactory
    printables: Tisknutelné materiály
    thangs: Thangs
    theminiindex: The Mini Index
    thingiverse: Thingiverse
    yeggi: yeggi
  user_mailer:
    account_approved:
      greeting: Ahoj!
      message: Váš účet byl schválen; nyní se můžete přihlásit na adrese %{link}
      subject: Účet schválen
    test_email:
      subject: Testovací e-mail
      test_email_message: Testovací e-mail
  users:
    registrations:
      create:
        altcha_failed:
  views:
    pagination:
      first: "« První"
      last: Poslední »
      next: Další ›
      previous: "‹ Předchozí"
      truncate: "..."
</file>

<file path="config/locales/de.yml">
---
de:
  activerecord:
    attributes:
      collection:
        caption: Beschreibung
        collection: Kollektion
        name: Name
        notes: Notizen
      creator:
        caption: Beschreibung
        name: Name
        notes: Beschreibung
        slug: Benutzername
      doorkeeper/application:
        access_token: Zugangs-Token
        confidential: Vertraulich
        created_at: Erstellt
        name: Name
        owner: Eigentümer
        redirect_uri: Redirect URI
        scopes: Scopes
        secret: Client Secret
        uid: Client ID
      federails/moderation/domain_block:
        created_at: Erstellt am
        domain: Domain
      federails/moderation/report:
        content: Kommentar
        created_at: Empfangen am
        federails_actor: Gemeldet von
        object: Objekt
      library:
        caption: Beschreibung
        create_path_if_not_on_disk: Ordner automatisch erstellen
        default: Standard
        icon: Symbol
        name: Name
        notes: Notizen
        path: Pfad
        s3_access_key_id: Zugangs Schlüssel ID
        s3_bucket: Bucket Name
        s3_endpoint: Endpunkt URL
        s3_path_style: Verwende pfad-ähnliche URLs
        s3_region: Region
        s3_secret_access_key: Geheimer Zugangs Schlüssel
        storage_service: Speicherdienst
        tag_regex: Erforderliche Tags
      link:
        url: Link
      model:
        caption: Bildunterschrift
        collection_id: Kollektion
        creator_id: Autor
        library_id: Sammlung
        license: Lizenz
        name: Name
        notes: Beschreibung
        path: Pfad
        preview_file: Vorschau Datei
        sensitive: Möglicherweise verstörender Inhalt
        tags: Tags
      model_file:
        caption: Beschreibung
        digest: Hash
        filename: Dateiname
        model_id: Modell
        notes: Notizen
        presupported: Support Struktur schon vorhanden
        presupported_version: Version mit Support struktur
        printed: Gedruckt
        size: Dateigröße
        unsupported_version: Nicht unterstützte Version
        y_up: Y Aufwärts
      problem:
        category: Kategorie
        ignored: Versteckt
        note: Notiz
        problematic_type: Objekt Typ
        severity: Schweregrad
      user:
        approved: Konto ausstehend
        confirmation_sent_at: Bestätigung gesendet am
        confirmation_token: Bestätigungs-Token
        confirmed_at: Bestätigt am
        created_at: Erstellt am
        current_password: Aktuelles Passwort
        current_sign_in_at: Aktuelle Anmeldung von
        current_sign_in_ip: IP der aktuellen Anmeldung
        email: E-Mail
        encrypted_password: Verschlüsseltes Passwort
        failed_attempts: Fehlversuche
        last_sign_in_at: Letzte Anmeldung am
        last_sign_in_ip: IP der letzten Anmeldung
        locked_at: Gesperrt am
        password: Passwort
        password_confirmation: Bestätige Passwort
        remember_created_at: Angemeldet bleiben vom
        remember_me: Angemeldet bleiben
        reset_password_sent_at: Passwort-Zurücksetzen-E-Mail gesendet am
        reset_password_token: Passwort-reset-Token
        sign_in_count: Anzahl Anmeldungen
        unconfirmed_email: Unbestätigte E-Mail-Adresse
        unlock_token: Entsperrungs-Token
        updated_at: Aktualisiert am
        username: Name des Kontos
    errors:
      models:
        collection:
          attributes:
            collection:
              private:
            creator:
              private:
        doorkeeper/application:
          attributes:
            redirect_uri:
              forbidden_uri: ist vom server verboten.
              fragment_present: darf kein Fragment enthalten.
              invalid_uri: muss ein valider URI (Identifier) sein.
              relative_uri: muss ein absoluter URI (Identifier) sein.
              secured_uri: muss ein HTTPS/SSL URI (Identifier) sein.
              unspecified_scheme: muss ein Schema angeben.
            scopes:
              not_match_configured: stimmen nicht mit denen am server hinterlegten überein.
        library:
          attributes:
            path:
              cannot_be_contained: kann nicht innerhalb einer anderen Bibliothek liegen
              cannot_contain: kann keine anderen Bibliotheken enthalten
              non_writable: User muss schreib rechte haben
              not_found: konnte nicht auf der Festplatte gefunden werden
              unsafe: kann kein privilegierter Systempfad sein
        model:
          attributes:
            creator:
              private:
            library:
              nested: kann nicht geändert werden, Modell enthält andere Modelle
            license:
              invalid_spdx: ist keine gültige Lizenz
            path:
              destination_exists: existiert bereits
              nested: kann nicht geändert werden, Modell enthält andere Modelle
        model_file:
          attributes:
            filename:
              cannot_change_type: ist nicht der gleiche Dateityp
              case_change_only: kann nicht eine reine Falländerung sein
            presupported_version:
              already_presupported: kann nicht auf eine Datei gesetzt werden mit Support Struktur
              not_supported: Ist keine Datei mit Support struktur
    models:
      acts_as_taggable_on/tag:
        few: Tags
        many: Tags
        one: Tag
        other: Tags
        two: Tags
        zero: Tags
      collection:
        few: Kollektionen
        many: Kollektionen
        one: Kollektion
        other: Kollektionen
        two: Kollektionen
        zero: Kollektionen
      creator:
        few: Autoren
        many: Autor
        one: Autor
        other: Autoren
        two: Autoren
        zero: Autoren
      federails/moderation/domain_block:
        few: Blockierte Domains
        many: Blockierte Domains
        one: Blockierte Domain
        other: Blockierte Domains
        two: Blockierte Domains
        zero: Blockierte Domains
      federails/moderation/report:
        few: Meldungen
        many: Meldungen
        one: Melden
        other: Meldungen
        two: Meldungen
        zero: Meldungen
      library:
        few: Sammlungen
        many: Sammlungen
        one: Sammlung
        other: Sammlungen
        two: Sammlungen
        zero: Sammlungen
      link:
        few: URLs
        many: URLs
        one: URL
        other: URLs
        two: URLs
        zero: URLs
      model:
        few: Modelle
        many: Modelle
        one: Modell
        other: Modelle
        two: Modelle
        zero: Modelle
      model_file:
        few: Dateien
        many: Dateien
        one: Datei
        other: Dateien
        two: Dateien
        zero: Dateien
      problem:
        few: Probleme
        many: Probleme
        one: Problem
        other: Probleme
        two: Probleme
        zero: Probleme
      user:
        few: Konten
        many: Konten
        one: Konto
        other: Konten
        two: Konten
        zero: Konten
  activity:
    index:
      description: Einträge älter als %{retention_period} werden verworfen.
      message: Nachricht
      name: Name
      time: Wenn
      title: Neuste Aktivität
  activity_helper:
    status_icon:
      completed: Vollständig
      error: Fehlerhaft
      queued: in der Warteschlange
      working: Verarbeitung
  application:
    caber_relation_fields:
      delete: Löschen
      permissions:
        edit: kann Bearbeiten
        own: Eigentümer (kann anzeigen, bearbeiten, löschen und freigeben)
        preview: 'Vorschau: nur bestimmte vorschaubare Dateien'
        view: Nur Anzeigbar
      subject:
        placeholder: E-Mail-Adresse, Kontoname oder Rolle
        role:
          member: Jedes eingeloggte lokale Konto
          public: Jeder (ohne Login)
        you: "(Du)"
    caber_relations_form:
      add: Füge eine weitere Berechtigungen hinzu.
      permissions: Eigentümer
    demo_mode: Diese Instanz befindet sich im Demo-Modus. Du kannst keine Modelle hinzufügen oder entfernen, aber alles andere ist möglich.
    filters_card:
      missing_tags: Fehlende Tags
      remove_collection_filter: Sammlungs-Filter entfernen
      remove_creator_filter: Ersteller-Filter entfernen
      remove_library_filter: Bibliotheks-Filter entfernen
      remove_missing_tag_filter: Filter für fehlende Tags entfernen
      remove_search_filter: Suchfilter entfernen
      remove_tag_filter: Tag-Filter entfernen
      search: Suche
      title: Filter
      unknown: Unbekannt
    footer:
      about: Über diese Instanz
      api: Erkunde unsere API
      by_html: Entworfen und erstellt von <a href="https://floppy.org.uk" target="_blank">James</a> mit Hilfe  <a href="https://github.com/manyfold3d/manyfold/graphs/contributors" target="_blank">unserer Mitwirkenden</a>.
      community: Tritt der Community bei
      instance_heading: Details zur Instanz
      issues: Einen Fehler melden
      open_source_html: '<a href="https://github.com/manyfold3d/manyfold" target="_blank">Open Source</a> unter dieser Lizenz: <a href="https://github.com/manyfold3d/manyfold/blob/main/LICENSE.md" target="_blank" rel="license">MIT license</a>.'
      powered_by_html: Powered by <a href="https://manyfold.app">%{name}</a>
      sponsor: Entwickler unterstützen
      support: Diese Instanz unterstützen
      version: Version
    link_fields:
      url:
        delete: Löschen
        placeholder: Verwandte Webseiten
    links_form:
      add: Füge einen Link hinzu
    navbar:
      account: Meine Einstellungen
      activity: Aktivität
      check_existing: Vorhandene Modelle neu scannen
      home: Homepage
      log_in: Einloggen
      log_out: Abmelden
      navbar:
        toggler:
          label: Navigation umschalten
      scan: Scannen
      scan_changes: Nach Änderungen suchen
      scanning: Scannen
      search: Suche
      settings: Admin-Einstellungen
      upload: Hochladen
    order_buttons:
      sort:
        name: Nach Namen sortieren
        time: Sortieren nach Zeit
    search_error: Fehler in der Such-Syntax. Bitte prüfen und erneut versuchen!
    tag_list:
      unrelated_tag_count:
        one: "%{count} unabhängige Tags versteckt"
        other: "%{count} unabhängige Tags versteckt"
    tagline: Hilft dir dabei, deine 3D-Druck Dateien zu verwalten
    tags_card:
      skip_tags: Tag-Liste überspringen
    title: Manyfold
  components:
    altcha_widget:
      help:
    copy_button:
      copy: In die Zwischenablage kopieren
    download_button:
      download:
        missing: Download anfordern
        preparing: Download wird vorbereitet, bitte warten
        ready: Bereit zum Herunterladen
      file_type: "%{type} Dateien"
      label: Alle herunterladen
      menu_header: Download optionen
      supported: Nur Dateien mit Support Struktur
      unsupported: Nur Dateien ohne Support Struktur
    follow_button:
      follow: Folge %{name}
      pending: Angefordert
      unfollow: "%{name} nicht mehr Folgen"
    modal:
      close: Schließen
    model_card:
      delete_button:
        label: Lösche modell %{name}
        text: Löschen
      edit_button:
        label: Bearbeite Modell %{name}
        text: Bearbeiten
      no_preview: Keine Vorschau verfügbar
      open_button:
        label: Öffne Modell %{name}
        text: Öffnen
    search_help:
      boolean: Verwende "oder", um Modelle zu finden, die einem der Begriffe entsprechen.
      federation: Suche nach einem beliebigen Fediverse-Benutzernamen, um ihm zu folgen.
      filename: Du kannst innerhalb von Dateinamen suchen, indem du das Feld explizit angibst.
      intro: 'Finden, was Du brauchst, mit unserer leistungsstarken Such-Syntax:'
      more_details_html: Weitere Informationen findest du in der vollständigen Dokumentation für <a href="https://github.com/wvanbergen/scoped_search/wiki/Query-language">die Abfragesprache von scoped_search</a>.
      negation: Um Begriffe auszuschließen, verwende  "not", "!" oder "-".
      parentheses: Gruppiere Begriffe mit Klammern für komplexere logische Kombinationen.
      quotes: Um nach mehreren Wörtern in einem einzigen Begriff zu suchen, verwende Anführungszeichen; es werden dann nur Modelle mit dem exakten Text angezeigt.
      simple: In der Standardeinstellung findet die Suche Modelle, die allen Begriffen entsprechen.
      specific_fields: Du kannst nach Begriffen in einigen bestimmten Feldern suchen. Verwende "~", um einen Teil des Feldes zu finden; verwende "=" um das ganze Feld zu finden. Modell beschreibungen und Bibliotheks namen werden nur durchsucht, wenn du es explizit angibst
      tag: Findet Modelle mit einem bestimmten Tag
      title: Such Syntax
      unset: Verwende "set?", um abzufragen, ob ein bestimmtes Feld gesetzt ist, und füge "not" hinzu, um das Gegenteil festzustellen.
      without_tag: Verwende "!=", um Modelle ohne ein bestimmtes Tag zu finden
  doorkeeper:
    applications:
      buttons:
        authorize: Autorisieren
        cancel: Abbrechen
        destroy: Löschen
        edit: Bearbeiten
        submit: Übertragen
      confirmations:
        destroy: Bist du sicher?
      edit:
        title: Applikation bearbeiten
      form:
        error: Whoops! Bitte überprüfe das Formular auf Fehler!
      help:
        blank_redirect_uri: Leave it blank if you configured your provider to use Client Credentials, Resource Owner Password Credentials or any other grant type that doesn't require redirect URI.
        confidential: Application will be used where the client secret can be kept confidential. Native mobile apps and Single Page Apps are considered non-confidential.
        redirect_uri: Bitte benutze eine Zeile pro URI
        scopes: Bitte die "Scopes" mit Leerzeichen trennen. Bitte frei lassen für die Verwendung der Default-Werte.
      index:
        actions: Aktionen
        callback_url: Callback URL
        confidential: Vertraulich?
        confidentiality:
          'no': Nein
          'yes': Ja
        name: Name
        new: Neue Applikation
        title: Deine Applikationen
      new:
        title: Neue Applikation
      show:
        actions: Aktionen
        application_id: Applikations-ID
        callback_urls: Callback URLs
        confidential: Vertraulich
        not_defined: Nicht definiert
        scopes: Scopes
        secret: Secret
        secret_hashed: Secret gehashed
        title: 'Applikation: %{name}'
    authorizations:
      buttons:
        authorize: Autorisieren
        deny: Verweigern
      error:
        title: Ein Fehler ist aufgetreten
      form_post:
        title: Dieses Formular abschicken
      new:
        able_to: Diese Anwendung wird folgende Rechte haben
        prompt: Soll %{client_name} für die Benutzung dieses Accounts autorisiert werden?
        title: Autorisierung erforderlich
      show:
        title: Autorisierungscode
    authorized_applications:
      buttons:
        revoke: Ungültig machen
      confirmations:
        revoke: Bist du sicher?
      index:
        application: Applikation
        created_at: erstellt am
        date_format: "%Y-%m-%d %H:%M:%S"
        title: Deine autorisierten Applikationen
    errors:
      messages:
        access_denied: Der Resource Owner oder der Autorisierungs-Server hat die Anfrage verweigert.
        admin_authenticator_not_configured: Access to admin panel is forbidden due to Doorkeeper.configure.admin_authenticator being unconfigured.
        credential_flow_not_configured: 'Die Prozedur "Resource Owner Password Credentials" ist fehlgeschlagen: Doorkeeper.configure.resource_owner_from_credentials ist nicht konfiguriert.'
        forbidden_token:
          missing_scope: Der Zugriff auf diese Ressource erfordert den Bereich "%{oauth_scopes}".
        invalid_client: 'Client-Autorisierung MKIM ist fehlgeschlagen: Unbekannter Client, keine Autorisierung mitgeliefert oder Autorisierungsmethode nicht unterstützt.'
        invalid_code_challenge_method:
          one: Die code_challenge_method muss %{challenge_methods} sein.
          other: Die code_challenge_method muss einer der folgenden Werte sein %{challenge_methods}.
          zero: Der Autorisierungsserver unterstützt PKCE nicht, da es keine akzeptierten code_challenge_method-Werte gibt.
        invalid_grant: Die bereitgestellte Autorisierung ist inkorrekt, abgelaufen, widerrufen, ist mit einem anderen Client verknüpft oder der Redirection URI stimmt nicht mit der Autorisierungs-Anfrage überein.
        invalid_redirect_uri: Der Redirect-URI in der Anfrage ist ungültig.
        invalid_request:
          invalid_code_challenge: Code Challenge ist erforderlich.
          missing_param: 'Missing required parameter: %{value}.'
          request_not_authorized: Request need to be authorized. Required parameter for authorizing request is missing or invalid.
          unknown: Die Anfrage enthält einen nicht-unterstützten Parameter, ein Parameter fehlt oder sie ist anderweitig fehlerhaft.
        invalid_scope: Der angeforderte Scope ist inkorrekt, unbekannt oder fehlerhaft.
        invalid_token:
          expired: Der Access Token ist abgelaufen
          revoked: Der Access Token wurde annuliert
          unknown: Der Access Token ist nicht gültig/korrekt
        resource_owner_authenticator_not_configured: 'Die Prozedur "Resource Owner find" ist fehlgeschlagen: Doorkeeper.configure.resource_owner_authenticator ist nicht konfiguriert.'
        revoke:
          unauthorized: Sie sind nicht berechtigt, dieses Token zu widerrufen
        server_error: Der Autorisierungs-Server hat ein unerwartetes Problem festgestellt und konnte die Anfrage nicht beenden.
        temporarily_unavailable: Der Autorisierungs-Server ist derzeit auf Grund von temporärer Überlastung oder Wartungsarbeiten am Server nicht in der Lage, die Anfrage zu bearbeiten .
        unauthorized_client: Der Client ist nicht autorisiert, diese Anfrage mit dieser Methode auszuführen.
        unsupported_grant_type: Der Autorisierungs-Typ wird nicht vom Autorisierungs-Server unterstützt.
        unsupported_response_mode: Der Autorisierungsserver unterstützt diesen Antwortmodus nicht.
        unsupported_response_type: Der Autorisierungs-Server unterstützt diesen Antwort-Typ nicht.
    flash:
      applications:
        create:
          notice: Applikation erstellt.
        destroy:
          notice: Applikation gelöscht.
        update:
          notice: Applikation geupdated.
      authorized_applications:
        destroy:
          notice: Applikation widerrufen.
    layouts:
      admin:
        nav:
          applications: Applikationen
          home: Home
          oauth2_provider: OAuth2 Provider
        title: Doorkeeper
      application:
        title: OAuth Autorisierung erforderlich
    pre_authorization:
      status: Pre-authorization
  doorkeeper_applications:
    create:
      failure: Es ist ein Fehler aufgetreten, und die Anwendung konnte nicht erstellt werden.
      success: Anwendung erfolgreich erstellt.
    destroy:
      success: Anwendung erfolgreich gelöscht.
    edit:
      title: Applikation bearbeiten
    form:
      confidential:
        help: Eine vertrauliche Anwendung kann Geheimnisse sicher aufbewahren (z. B. ein Webserver-Backend oder ein Machine-to-Machine-Skript).
      redirect_uri:
        help: Verwende "urn:ietf:wg:oauth:2.0:oob", wenn deine Anwendung keinen Redirect-URI benötigt (z. B. bei Machine-to-Machine-Anwendungen).
      scopes:
        label: Scopes
      submit: Anwendung speichern
    index:
      description: OAuth-Anwendungen ermöglichen den Zugriff auf Manyfold-Ressourcen von anderen Diensten aus über unsere API.
      new: Neue Anwendung
      title: OAuth-Anwendungen
    new:
      title: Neue Anwendung
    show:
      destroy: Löschen
      edit: Bearbeiten
      title: Anwendungs details
    update:
      failure: Es ist ein Fehler aufgetreten, und die Anwendung konnte nicht gespeichert werden.
      success: Anwendung erfolgreich gespeichert.
  follows:
    actor_table:
      actions: Aktionen
      address: Fediverse Adresse
      name: Name
      non_manyfold_account: Dies ist kein Manyfold-Konto; Du kannst ihm folgen, aber wahrscheinlich wird nichts Interessantes passieren, zumindest im Moment.
    follow_remote_actor:
      followed: Erfolgreich %{actor} gefolgt
    index:
      followers: Follower
      following: Follgende
      title: Verbindungen
    new:
      help: Du kannst öffentlichen Authoren, Sammlungen oder Modellen auf einem anderen Manyfold-Server folgen, und zwar jedem öffentlichen Konto im Fediverse! Gib einfach den Namen des Accounts in das Suchfeld ein!
      no_results: Ich konnte leider nichts zu "%{query}" finden. Handelt es sich um ein gültiges ActivityPub-Konto oder eine URL?
      results: Suchergebnisse
      title: Folge dem Fediverse
    remote_follow:
      help: Du brauchst kein Konto auf diesem Server, um %{name} zu folgen; gib hier deinen eigenen Kontonamen ein, und wir schicken Sie nach Hause, um den Vorgang abzuschließen.
      no_results_html: Wir konnten dein Privatkonto nicht finden; hast du es richtig angegeben?
      placeholder: dein Fediverse-handle, z. B. manyfold@3dp.chat
      submit: Bring mich nach Hause
      title: Folge %{name}
    search_form:
      placeholder: Gib ein Fediverse-Konto oder eine URL ein, z. B. @admin@try.manyfold.app
      submit: Suche
    unfollow_remote_actor:
      unfollowed: "%{actor} nicht mehr Folgen"
  general:
    delete: Löschen
    download: Herunterladen
    edit: Bearbeiten
    expand: Erweitern
    followers:
      few: "%{count} Follower"
      many: "%{count} Follower"
      one: "%{count} Follower"
      other: "%{count} Follower"
      two: "%{count} Follower"
      zero: "%{count} Follower"
    menu: Menü
    new: Neue
    public:
    report: Melde %{type}
    save: Speichern
    view: Siehe
  home:
    activity:
      created: hinzugefügt vor %{time}
      updated: hinzugefügt vor %{time}
    browsing:
      content:
      manual_link:
      more_access:
      title:
    federation:
      content_html:
      following:
      handle_html:
      title:
    index:
      no_activities: Im Moment gibt es keine Aktivitäten zu sehen.
      open_search_help: Such-Syntax
      recent_activity: Neuste Aktivität
      search:
        placeholder: Wonach suchen Sie?
        submit: Suche
    publishing:
      content:
      new_creator:
        button:
        content:
      title:
    support:
      content:
      manyfold_html:
      support_link: Diese Instanz unterstützen
      title:
    uploading:
      how_to_upload:
      permissions:
        edit:
        member:
        private:
      title:
      upload: Hochladen
    welcome:
      lead:
      title:
  jobs:
    activity:
      collection_published:
        comment: Eine neue Sammlung von 3D-Modellen, ["%{name}"](%{url}), wurde gerade veröffentlicht!
      model_collected:
        comment: '["%{model_name}"](%{model_url}) wurde gerade der Sammlung ["%{collection_name}"](%{collection_url}) hinzugefügt.'
      model_published:
        comment: Ein neues 3D-Modell, ["%{name}"](%{url}), wurde gerade veröffentlicht!
      updated_model:
        comment: Das 3D-Modell ["%{name}"](%{url}), wurde gerade aktualisiert!
    analysis:
      analyse_model_file:
        detect_duplicates: Doppelte Datei erkannt
        detect_ineffiency: Erkennung ineffizienter Formate
        file_statistics: Berechnung von Dateistatistiken
        matching: Unterstützte Dateien abgleichen
      file_conversion:
        exporting: Neue Datei exportieren
        loading_mesh: Lade mesh
      geometric_analysis:
        direction_check: Kontrolliere Oberflächenausrichtung
        loading_mesh: Lade meshs
        manifold_check: Prüfe Mesh, auf nicht-verzweigte Maschen
    scan:
      check_all:
        queueing_model_checks: Modell Überprüfungen in der Warteschlange
        removing_orphaned_problems: Verwaiste Probleme beseitigen
      detect_filesystem_changes:
        building_filename_list: Dateiliste erstellen
        building_folder_list: Erstellen einer Liste geänderter Ordner
        creating_models: Modelle erstellen
  kaminari:
    first_page:
      label: Zur ersten Seite gehen
    last_page:
      label: Zur letzten Seite gehen
    next_page:
      label: Weiter zur nächsten Seite
    page:
      current_page: Aktuelle Seite
      label: Gehe zur Seite %{page}
    paginator:
      label: Seitennavigation
    prev_page:
      label: Zur vorherigen Seite gehen
  layouts:
    application:
      alert:
        danger: Gefahr
        info: Info
      skip_to_content: Zum Hauptinhalt springen
    card_list_page:
      actions_heading: Aktionen
    settings:
      activeadmin: Erweiterte Administration
      appearance: Erscheinungsbild
      downloads: Herunterladen
      libraries: Sammlungen
      organization: Organisation
      performance: Leistungs-Dashboard
      pghero: PgHero
      sidekiq: Sidekiq
      site_settings_title: Einstellungen
      tools_heading: Erweiterte Werkzeuge
  licenses:
    CC-BY-40: Creative Commons Attribution
    CC-BY-NC-40: Creative Commons Attribution NonCommercial
    CC-BY-NC-ND-40: Creative Commons Attribution NonCommercial NoDerivatives
    CC-BY-NC-SA-40: Creative Commons Attribution NonCommercial ShareAlike
    CC-BY-ND-40: Creative Commons Attribution NoDerivatives
    CC-BY-SA-40: Creative Commons Attribution ShareAlike
    CC-PDDC: Creative Commons Public Domain Declaration
    CC0-10: Creative Commons Zero
    LicenseRef-Commercial: Commercial; private use only
    MIT: MIT
  moderator_mailer:
    new_approval:
      greeting: Hallo!
      message: Eine neue Person hat sich für ein Konto angemeldet und benötigt eine Genehmigung. Genehmige das Konto hier %{link}
      subject: Neues Konto muss genehmigt werden
    new_report:
      greeting: Hallo!
      message: Jemand hat Inhalte gemeldet, die moderiert werden müssen. Überprüfe den Bericht unter %{link}
      subject: Neuer Bericht eingegangen
  renderer:
    errors:
      canvas: 'Konnte #webgl canvas nicht finden!'
      load: Fehler beim Laden
      webglrenderer: Renderer konnte nicht erstellt werden!
    load: Lädt
    processing: verarbeite mesh
  reports:
    create:
      success: Bericht eingereicht. Danke!
    new:
      description: Wenn dieses Modell gegen ein Gesetz oder die Serverrichtlinien verstößt, kannst du es unseren Moderatoren melden. Füge einen Kommentar hinzu, um uns den Grund mitzuteilen!
      submit: Meldung einreichen
      title: 'Melde %{type}: "%{name}"'
  security:
    running_as_root_html: Manyfold wird als root ausgeführt, was ein Sicherheitsrisiko darstellt. Führe Manyfold als einen anderen Systembenutzer aus, indem du die Umgebungsvariablen <code>PUID</code> und <code>PGID</code> setzt. Einzelheiten findest du in <a href='https://manyfold.app/sysadmin/configuration.html#required'>der Konfigurationsdokumentation</a>.
  sites:
    cgtrader: CGTrader
    comicsgamesandthings: Comics, Games, and Things
    cults3d: Cults3D
    github: GitHub
    makerworld: MakerWorld
    manyfold: Manyfold
    myminifactory: MyMiniFactory
    printables: Printables
    thangs: Thangs
    theminiindex: The Mini Index
    thingiverse: Thingiverse
    yeggi: yeggi
  user_mailer:
    account_approved:
      greeting: Hallo!
      message: Dein Konto wurde genehmigt; Du kannst dich jetzt unter %{link} anmelden.
      subject: Konto genehmigt
    test_email:
      subject: Test-E-Mail
      test_email_message: Test-E-Mail
  users:
    registrations:
      create:
        altcha_failed:
  views:
    pagination:
      first: "« Anfang"
      last: Ende »
      next: Weiter ›
      previous: "‹ Zurück"
      truncate: "…"
</file>

<file path="config/locales/en.yml">
---
en:
  activerecord:
    attributes:
      collection:
        ai_indexable: Allow use for AI training
        caption: Caption
        collection: Parent Collection
        indexable: Allow search indexing
        name: Name
        notes: Notes
      creator:
        ai_indexable: Allow use for AI training
        caption: Tagline
        indexable: Allow search indexing
        name: Creator Name
        notes: Description
        slug: Handle
      doorkeeper/application:
        access_token: Access Token
        confidential: Confidential
        created_at: Created
        name: Name
        owner: Owner
        redirect_uri: Redirect URI
        scopes: Scopes
        secret: Client Secret
        uid: Client ID
      federails/moderation/domain_block:
        created_at: Created at
        domain: Domain
      federails/moderation/report:
        content: Comment
        created_at: Received at
        federails_actor: Reported by
        object: Object
      library:
        caption: Caption
        create_path_if_not_on_disk: Auto-create folder
        default: Default
        icon: Icon
        name: Name
        notes: Notes
        path: Path
        s3_access_key_id: Access Key ID
        s3_bucket: Bucket Name
        s3_endpoint: Endpoint URL
        s3_path_style: Use path-style URLs
        s3_region: Region
        s3_secret_access_key: Secret Access Key
        storage_service: Storage Service
        tag_regex: Required Tags
      link:
        url: Link
      model:
        ai_indexable: Allow use for AI training
        caption: Caption
        collection_id: Collection
        creator_id: Creator
        indexable: Allow search indexing
        library_id: Library
        license: License
        name: Name
        notes: Description
        path: Path
        preview_file: Preview File
        sensitive: Sensitive Content
        tags: Tags
      model_file:
        caption: Caption
        digest: Digest
        filename: Filename
        model_id: Model
        notes: Notes
        presupported: Presupported
        presupported_version: Presupported version
        printed: Printed
        size: File Size
        unsupported_version: Unsupported version
        y_up: Y Up
      problem:
        category: Category
        ignored: Hidden
        note: Note
        problematic_type: Object Type
        severity: Severity
      user:
        approved: Account pending
        confirmation_sent_at: Confirmation sent at
        confirmation_token: Confirmation token
        confirmed_at: Confirmed at
        created_at: Created at
        current_password: Current password
        current_sign_in_at: Current sign in at
        current_sign_in_ip: Current sign in IP
        email: Email
        encrypted_password: Encrypted password
        failed_attempts: Failed attempts
        last_sign_in_at: Last sign in at
        last_sign_in_ip: Last sign in IP
        locked_at: Locked at
        password: Password
        password_confirmation: Confirm password
        remember_created_at: Remember created at
        remember_me: Remember me
        reset_password_sent_at: Reset password sent at
        reset_password_token: Reset password token
        sign_in_count: Sign in count
        unconfirmed_email: Unconfirmed email
        unlock_token: Unlock token
        updated_at: Updated at
        username: Account name
    errors:
      models:
        collection:
          attributes:
            collection:
              private: must be public
            creator:
              private: must be public
        doorkeeper/application:
          attributes:
            redirect_uri:
              forbidden_uri: is forbidden by the server.
              fragment_present: cannot contain a fragment.
              invalid_uri: must be a valid URI.
              relative_uri: must be an absolute URI.
              secured_uri: must be an HTTPS/SSL URI.
              unspecified_scheme: must specify a scheme.
            scopes:
              not_match_configured: doesn't match configured on the server.
        library:
          attributes:
            path:
              cannot_be_contained: cannot be inside another library
              cannot_contain: cannot contain other libraries
              non_writable: must be writable
              not_found: could not be found on disk
              unsafe: cannot be a privileged system path
        model:
          attributes:
            creator:
              private: must be public
            library:
              nested: can't be changed, model contains other models
            license:
              invalid_spdx: is not a valid license
            path:
              destination_exists: already exists
              nested: can't be changed, model contains other models
        model_file:
          attributes:
            filename:
              cannot_change_type: is not the same file type
              case_change_only: cannot be a case-only change
            presupported_version:
              already_presupported: cannot be set on a presupported file
              not_supported: is not a presupported file
    models:
      acts_as_taggable_on/tag:
        few: Tags
        many: Tags
        one: Tag
        other: Tags
        two: Tags
        zero: Tags
      collection:
        few: Collections
        many: Collections
        one: Collection
        other: Collections
        two: Collections
        zero: Collections
      creator:
        few: Creators
        many: Creators
        one: Creator
        other: Creators
        two: Creators
        zero: Creators
      federails/moderation/domain_block:
        few: Domain Blocks
        many: Domain Blocks
        one: Domain Block
        other: Domain Blocks
        two: Domain Blocks
        zero: Domain Blocks
      federails/moderation/report:
        few: Reports
        many: Reports
        one: Report
        other: Reports
        two: Reports
        zero: Reports
      library:
        few: Libraries
        many: Libraries
        one: Library
        other: Libraries
        two: Libraries
        zero: Libraries
      link:
        few: Links
        many: Links
        one: Link
        other: Links
        two: Links
        zero: Links
      model:
        few: Models
        many: Models
        one: Model
        other: Models
        two: Models
        zero: Models
      model_file:
        few: Files
        many: Files
        one: File
        other: Files
        two: Files
        zero: Files
      problem:
        few: Problems
        many: Problems
        one: Problem
        other: Problems
        two: Problems
        zero: Problems
      user:
        few: Accounts
        many: Accounts
        one: Account
        other: Accounts
        two: Accounts
        zero: Accounts
  activity:
    index:
      description: Entries are discard after %{retention_period}.
      message: Message
      name: Name
      time: When
      title: Recent Activity
  activity_helper:
    status_icon:
      completed: Complete
      error: Errored
      queued: Queued
      working: Working
  application:
    caber_relation_fields:
      delete: Delete
      permissions:
        edit: Can edit
        own: Owner (can view, edit, delete, and share)
        preview: 'Preview: specific previewable files only'
        view: View only
      subject:
        placeholder: Email address, account name, or role
        role:
          member: Any logged-in local account
          public: Everyone (without login)
        you: "(you)"
    caber_relations_form:
      add: add another permission
      permissions: Sharing
    demo_mode: This instance is in demo mode. You cannot add or remove models, but you can do everything else.
    filters_card:
      missing_tags: Missing tags
      remove_collection_filter: Remove collection filter
      remove_creator_filter: Remove creator filter
      remove_library_filter: Remove library filter
      remove_missing_tag_filter: Remove missing tag filter
      remove_search_filter: Remove search filter
      remove_tag_filter: Remove tag filter
      search: Search
      title: Filters
      unknown: Unknown
    footer:
      about: About this instance
      api: Explore our API
      by_html: Designed and built by <a href="https://floppy.org.uk" target="_blank">James</a> with help from <a href="https://github.com/manyfold3d/manyfold/graphs/contributors" target="_blank">our contributors</a>.
      community: Join the community
      instance_heading: Instance Details
      issues: Report a problem
      open_source_html: <a href="https://github.com/manyfold3d/manyfold" target="_blank">Open Source</a> under the <a href="https://github.com/manyfold3d/manyfold/blob/main/LICENSE.md" target="_blank" rel="license">MIT license</a>.
      powered_by_html: Powered by <a href="https://manyfold.app">%{name}</a>
      sponsor: Sponsor development
      support: Support this instance
      version: Version
    link_fields:
      url:
        delete: Delete
        placeholder: Any related web page
    links_form:
      add: add another link
    navbar:
      account: My Settings
      activity: Activity
      check_existing: Rescan existing models
      home: Homepage
      log_in: Sign in
      log_out: Sign out
      moderator_settings: Moderator Settings
      navbar:
        toggler:
          label: Toggle navigation
      scan: Scan
      scan_changes: Scan for changes
      scanning: Scanning
      search: Search
      settings: Site Settings
      upload: Upload
    order_buttons:
      sort:
        name: Sort by Name
        time: Sort by Time
    search_error: Error in search syntax. Please check and try again!
    tag_list:
      unrelated_tag_count:
        one: "%{count} unrelated tag hidden"
        other: "%{count} unrelated tags hidden"
    tagline: Helping you keep track of your 3d print files
    tags_card:
      skip_tags: Skip tag list
    title: Manyfold
  application_helper:
    ai_indexable_select_options:
      always_no: Always no
      always_yes: Always yes
      inherit: Inherit from parent object or default site setting; currently '%{inherited}'
    indexable_select_options:
      always_no: Always no
      always_yes: Always yes
      inherit: Inherit from parent object or default site setting; currently '%{inherited}'
      'no': 'No'
      'yes': 'Yes'
  components:
    altcha_widget:
      help: privacy-friendly spam protection by ALTCHA
    copy_button:
      copy: Copy to Clipboard
    display_user_quota:
      request_increase: To request a quota increase, contact your site administrator.
    download_button:
      download:
        missing: Request download
        preparing: Preparing download, please wait
        ready: Ready to download
      file_type: "%{type} Files Only"
      label: Download All
      menu_header: Download Options
      supported: Supported Files Only
      unsupported: Unsupported Files Only
    follow_button:
      follow: Follow %{name}
      pending: Requested
      unfollow: Unfollow %{name}
    modal:
      close: Close
    model_card:
      delete_button:
        label: Delete model %{name}
        text: Delete
      edit_button:
        label: Edit model %{name}
        text: Edit
      no_preview: No preview available
      open_button:
        label: Open model %{name}
        text: Open
    search_help:
      boolean: Use "or" to find models that match any of the terms.
      federation: Search for any Fediverse username to follow it.
      filename: You can search within filenames by explicitly specifying the field.
      intro: 'Find what you need with our powerful search syntax:'
      more_details_html: For more information, read the full documentation for <a href="https://github.com/wvanbergen/scoped_search/wiki/Query-language">scoped_search's query language</a>.
      negation: To exclude terms, use "not", "!", or "-".
      parentheses: Group terms with parentheses for more complex logic combinations.
      quotes: To look for multiple words in a single term, use quotes; only models with the exact text will be shown.
      simple: By default, search will find models that match all terms.
      specific_fields: You can look for terms in a few specific fields. Use "~" to match part of the field; "=" will try to match the whole thing. Model descriptions and library names are only searched if you explicitly specify the fields.
      tag: Finds models with a specific tag
      title: Search Syntax
      unset: Use "set?" to query if a particular field is set, and add "not" to find the opposite.
      without_tag: Use "!=" to find models without a certain tag
  doorkeeper:
    applications:
      buttons:
        authorize: Authorize
        cancel: Cancel
        destroy: Destroy
        edit: Edit
        submit: Submit
      confirmations:
        destroy: Are you sure?
      edit:
        title: Edit application
      form:
        error: Whoops! Check your form for possible errors
      help:
        blank_redirect_uri: Leave it blank if you configured your provider to use Client Credentials, Resource Owner Password Credentials or any other grant type that doesn't require redirect URI.
        confidential: Application will be used where the client secret can be kept confidential. Native mobile apps and Single Page Apps are considered non-confidential.
        redirect_uri: Use one line per URI
        scopes: Separate scopes with spaces. Leave blank to use the default scopes.
      index:
        actions: Actions
        callback_url: Callback URL
        confidential: Confidential?
        confidentiality:
          'no': 'No'
          'yes': 'Yes'
        name: Name
        new: New Application
        title: Your applications
      new:
        title: New Application
      show:
        actions: Actions
        application_id: UID
        callback_urls: Callback urls
        confidential: Confidential
        not_defined: Not defined
        scopes: Scopes
        secret: Secret
        secret_hashed: Secret hashed
        title: 'Application: %{name}'
    authorizations:
      buttons:
        authorize: Authorize
        deny: Deny
      error:
        title: An error has occurred
      form_post:
        title: Submit this form
      new:
        able_to: This application will be able to
        prompt: Authorize %{client_name} to use your account?
        title: Authorization required
      show:
        title: Authorization code
    authorized_applications:
      buttons:
        revoke: Revoke
      confirmations:
        revoke: Are you sure?
      index:
        application: Application
        created_at: Created At
        date_format: "%Y-%m-%d %H:%M:%S"
        title: Your authorized applications
    errors:
      messages:
        access_denied: The resource owner or authorization server denied the request.
        admin_authenticator_not_configured: Access to admin panel is forbidden due to Doorkeeper.configure.admin_authenticator being unconfigured.
        credential_flow_not_configured: Resource Owner Password Credentials flow failed due to Doorkeeper.configure.resource_owner_from_credentials being unconfigured.
        forbidden_token:
          missing_scope: Access to this resource requires scope "%{oauth_scopes}".
        invalid_client: Client authentication failed due to unknown client, no client authentication included, or unsupported authentication method.
        invalid_code_challenge_method:
          one: The code_challenge_method must be %{challenge_methods}.
          other: The code_challenge_method must be one of %{challenge_methods}.
          zero: The authorization server does not support PKCE as there are no accepted code_challenge_method values.
        invalid_grant: The provided authorization grant is invalid, expired, revoked, does not match the redirection URI used in the authorization request, or was issued to another client.
        invalid_redirect_uri: The requested redirect uri is malformed or doesn't match client redirect URI.
        invalid_request:
          invalid_code_challenge: Code challenge is required.
          missing_param: 'Missing required parameter: %{value}.'
          request_not_authorized: Request need to be authorized. Required parameter for authorizing request is missing or invalid.
          unknown: The request is missing a required parameter, includes an unsupported parameter value, or is otherwise malformed.
        invalid_scope: The requested scope is invalid, unknown, or malformed.
        invalid_token:
          expired: The access token expired
          revoked: The access token was revoked
          unknown: The access token is invalid
        resource_owner_authenticator_not_configured: Resource Owner find failed due to Doorkeeper.configure.resource_owner_authenticator being unconfigured.
        revoke:
          unauthorized: You are not authorized to revoke this token
        server_error: The authorization server encountered an unexpected condition which prevented it from fulfilling the request.
        temporarily_unavailable: The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server.
        unauthorized_client: The client is not authorized to perform this request using this method.
        unsupported_grant_type: The authorization grant type is not supported by the authorization server.
        unsupported_response_mode: The authorization server does not support this response mode.
        unsupported_response_type: The authorization server does not support this response type.
    flash:
      applications:
        create:
          notice: Application created.
        destroy:
          notice: Application deleted.
        update:
          notice: Application updated.
      authorized_applications:
        destroy:
          notice: Application revoked.
    layouts:
      admin:
        nav:
          applications: Applications
          home: Home
          oauth2_provider: OAuth2 Provider
        title: Doorkeeper
      application:
        title: OAuth authorization required
    pre_authorization:
      status: Pre-authorization
  doorkeeper_applications:
    create:
      failure: An error occurred, and the application could not be created.
      success: Application created successfully.
    destroy:
      success: Application deleted successfully.
    edit:
      title: Edit application
    form:
      confidential:
        help: A confidential application can hold secrets securely (e.g. a web server backend, or machine-to-machine script).
      redirect_uri:
        help: Use "urn:ietf:wg:oauth:2.0:oob" if your application does not need a redirect URI (e.g. machine-to-machine apps).
      scopes:
        label: Scopes
      submit: Save application
    index:
      description: OAuth applications allow you to access Manyfold resources from other services via our API.
      new: New application
      title: OAuth Applications
    new:
      title: New application
    show:
      destroy: Delete
      edit: Edit
      title: Application details
    update:
      failure: An error occurred, and the application could not be saved.
      success: Application saved successfully.
  errors:
    messages:
      already_confirmed: was already confirmed, please try signing in
      confirmation_period_expired: needs to be confirmed within %{period}, please request a new one
      expired: has expired, please request a new one
      not_found: not found
      not_locked: was not locked
      not_saved:
        one: '1 error prohibited this %{resource} from being saved:'
        other: "%{count} errors prohibited this %{resource} from being saved:"
      weak_password: not strong enough. Consider adding a number, symbols or more letters to make it stronger.
  follows:
    actor_table:
      actions: Actions
      address: Fediverse Address
      name: Name
      non_manyfold_account: This is not a Manyfold account; you can follow it, but probably nothing interesting will happen, at least for now.
    follow_remote_actor:
      followed: Followed %{actor} successfully
    index:
      followers: Followers
      following: Following
      title: Connections
    new:
      help: You can follow public creators, collections or models on another Manyfold server, in fact any public account in the Fediverse! Just enter the account name in the search box!
      no_results: Sorry, couldn't find anything for "%{query}". Is it a valid ActivityPub account or URL?
      results: Search Results
      title: Follow the Fediverse
    remote_follow:
      help: You don't need an account on this server to follow %{name}; enter your own account name here, and we'll send you home to complete the process.
      no_results_html: We couldn't find your home account; did you enter it correctly?
      placeholder: Your Fediverse handle, e.g. @manyfold@3dp.chat
      submit: Take me home
      title: Follow %{name}
    search_form:
      placeholder: Enter a Fediverse account or URL, e.g. @admin@try.manyfold.app
      submit: Search
    unfollow_remote_actor:
      unfollowed: Unfollowed %{actor}
  general:
    delete: Delete
    download: Download
    edit: Edit
    expand: Expand
    followers:
      few: "%{count} Followers"
      many: "%{count} Followers"
      one: "%{count} Follower"
      other: "%{count} Followers"
      two: "%{count} Followers"
      zero: "%{count} Followers"
    menu: Menu
    new: New
    private: Private
    public: Publicly visible
    report: Report %{type}
    save: Save
    shared: Shared with local users
    view: View
  home:
    activity:
      created: added %{time} ago
      updated: updated %{time} ago
    browsing:
      content: You can explore models by clicking the links in the menu bar; browse a complete list and filter by tag, or browse by collection or creator. Alternatively just type into the search box to find what you want!
      manual_link: User guide
      more_access: Currently you have read-only access to this instance; to get more permissions, such as uploading, contact your instance administrator.
      title: Browsing
    federation:
      content_html: This Manyfold instance is part of the <a href="https://jointhefediverse.net">Fediverse</a>, a network of social media sites that all work together. That means that if you have an account here, you can follow content on other Manyfold instances, or people can follow your content from other platforms like Mastodon.
      creator_handle_html: 'The fediverse handle of your creator profile is: <code>%{handle}</code>.'
      following: If you know the handle of someone or something you want to follow, just enter it in the search box; otherwise, enter your personal handle above when you follow something on another instance.
      handle_html: 'Your fediverse handle is: <code>%{handle}</code>'
      title: Federation
    index:
      no_activities: There are no activities to display for now.
      open_search_help: Search syntax
      recent_activity: Recent Activity
      search:
        placeholder: What are you looking for?
        submit: Search
    publishing:
      content: You can publish content publicly by giving "view" or "preview" permission to the "public" role on the item's edit page. Creators for public models will automatically be made public, but collections need to be expicitly published if you want them to be visible.
      existing_creator:
        button: Edit your creator profile
        content: 'If you''re publishing your own work, you will probably want to customise your creator profile:'
      new_creator:
        button: Set up a new creator profile
        content: 'If you''re publishing your own work, you will probably want to set up your own creator profile:'
      title: Publishing
    support:
      content: Manyfold instances are run by people like you! If you find this instance useful, you can help keep it running by clicking below.
      manyfold_html: To support development of the Manyfold software itself, you can do so at <a href="https://opencollective.com/manyfold">OpenCollective</a>.
      support_link: Support this instance
      title: Support
    uploading:
      how_to_upload: You can add models by clicking the upload button in the menu bar. To upload lots of files as a single model, compress them in a single archive file (e.g. ZIP or RAR).
      permissions:
        edit: You can grant additional permissions on the item's edit page.
        member: By default, uploaded content will be visible to any local logged-in user.
        private: By default, uploaded content will not be visible to any other users.
      quota: You can upload up to %{quota} of content, and you can always view your current quota usage on your settings page.
      title: Uploading
      upload: Upload
    welcome:
      lead: This site is running Manyfold, software for managing and sharing 3D models; here's a quick guide...
      title: Welcome to %{site_name}!
  jobs:
    activity:
      collection_published:
        comment: A new collection of 3D models, ["%{name}"](%{url}), was just published!
      model_collected:
        comment: '["%{model_name}"](%{model_url}) was just added to the ["%{collection_name}"](%{collection_url}) collection.'
      model_published:
        comment: A new 3D model, ["%{name}"](%{url}), was just published!
      updated_model:
        comment: The 3D model ["%{name}"](%{url}), was just updated!
    analysis:
      analyse_model_file:
        detect_duplicates: Detecting duplicate files
        detect_ineffiency: Detecting inefficient formats
        file_statistics: Calculating file statistics
        matching: Matching supported files
      file_conversion:
        exporting: Exporting new file
        loading_mesh: Loading mesh
      geometric_analysis:
        direction_check: Checking surface orientation
        loading_mesh: Loading mesh
        manifold_check: Checking that mesh is manifold
    scan:
      check_all:
        queueing_model_checks: Queueing model checks
        removing_orphaned_problems: Removing orphaned problems
      detect_filesystem_changes:
        building_filename_list: Building file list
        building_folder_list: Building changed folder list
        creating_models: Creating models
  kaminari:
    first_page:
      label: Go to first page
    last_page:
      label: Go to last page
    next_page:
      label: Go to next page
    page:
      current_page: Current page
      label: Go to page %{page}
    paginator:
      label: Page navigation
    prev_page:
      label: Go to previous page
  layouts:
    application:
      alert:
        danger: Danger
        info: Info
      skip_to_content: Skip to main content
    card_list_page:
      actions_heading: Actions
    settings:
      activeadmin: Advanced Administration
      appearance: Appearance
      downloads: Downloads
      libraries: Libraries
      moderation_settings_title: Moderation Settings
      organization: Organization
      performance: Performance Dashboard
      pghero: PgHero
      sidekiq: Sidekiq
      site_settings_title: Site Settings
      tools_heading: Advanced Tools
  licenses:
    0BSD: BSD Zero Clause License
    CC-BY-40: Creative Commons Attribution
    CC-BY-NC-40: Creative Commons Attribution NonCommercial
    CC-BY-NC-ND-40: Creative Commons Attribution NonCommercial NoDerivatives
    CC-BY-NC-SA-40: Creative Commons Attribution NonCommercial ShareAlike
    CC-BY-ND-40: Creative Commons Attribution NoDerivatives
    CC-BY-SA-40: Creative Commons Attribution ShareAlike
    CC-PDDC: Creative Commons Public Domain Declaration
    CC0-10: Creative Commons Zero
    GPL-20-only: GNU General Public License v2.0
    GPL-30-only: GNU General Public License v3.0
    LGPL-20-only: GNU Lesser General Public License v2
    LGPL-30-only: GNU Lesser General Public License v3
    LicenseRef-Commercial: Commercial; private use only
    MIT: MIT
  moderator_mailer:
    new_approval:
      greeting: Hi!
      message: Someone new has signed up for an account, and requires approval. Approve the account at %{link}
      subject: New account needs approval
    new_report:
      greeting: Hi!
      message: Someone has reported content which needs moderations. Review the report at %{link}
      subject: New report received
  renderer:
    errors:
      canvas: 'Could not find #webgl canvas!'
      load: Load Error
      webglrenderer: Could not create renderer!
    load: Load
    processing: Reticulating splines...
  reports:
    create:
      success: Report submitted. Thank you!
    new:
      description: If this item violates any laws or server policies, you can report it to our moderators. Add a comment to let us know why!
      submit: Send report
      title: 'Report %{type}: "%{name}"'
  security:
    running_as_root_html: Manyfold is running as root, which is a security risk. Run as a different system user by setting the <code>PUID</code> and <code>PGID</code> environment variables. See <a href='https://manyfold.app/sysadmin/configuration.html#required'>the configuration documentation</a> for details.
  sites:
    cgtrader: CGTrader
    comicsgamesandthings: Comics, Games, and Things
    cults3d: Cults3D
    github: GitHub
    makerworld: MakerWorld
    manyfold: Manyfold
    myminifactory: MyMiniFactory
    printables: Printables
    thangs: Thangs
    theminiindex: The Mini Index
    thingiverse: Thingiverse
    yeggi: yeggi
  user_mailer:
    account_approved:
      greeting: Hi!
      message: Your account has been approved; you may now sign in at %{link}
      subject: Account approved
    test_email:
      subject: Test email
      test_email_message: Test email
  users:
    registrations:
      create:
        altcha_failed: ALTCHA verification failed
  views:
    pagination:
      first: "« First"
      last: Last »
      next: Next ›
      previous: "‹ Prev"
      truncate: "…"
</file>

<file path="config/locales/es.yml">
---
es:
  activerecord:
    attributes:
      collection:
        caption: Subtítulo
        collection: Colección
        name: Nombre
        notes: Notas
      creator:
        caption: Subtítulo
        name: Nombre
        notes: Notas
        slug: Handle
      doorkeeper/application:
        access_token: Token de Acceso
        confidential: Confidential
        created_at: Creado
        name: Nombre
        owner: Propietario
        redirect_uri: URI de redirección
        scopes: Ámbitos
        secret: Client Secret
        uid: ID de Cliente
      federails/moderation/domain_block:
        created_at: Creado el
        domain: Dominio
      federails/moderation/report:
        content: Comentario
        created_at: Recibido el
        federails_actor: Reportado por
        object: Objeto
      library:
        caption: Subtítulo
        create_path_if_not_on_disk: Auto-crear carpeta
        default: Por defecto
        icon: Icono
        name: Nombre
        notes: Notas
        path: Ruta
        s3_access_key_id: Clave de acceso ID
        s3_bucket: Nombre del Bucket
        s3_endpoint: Endpoint URL
        s3_path_style: Usar URLs path-style
        s3_region: Región
        s3_secret_access_key: Clave de acceso secreta
        storage_service: Servicio de almacenamiento
        tag_regex: Etiquetas obligatorias
      link:
        url: Enlace
      model:
        caption: Subtítulo
        collection_id: Colección
        creator_id: Creador
        library_id: Biblioteca
        license: Licencia
        name: Nombre
        notes: Descripción
        path: Ruta
        preview_file: Vista previa
        sensitive: Contenido Sensible
        tags: Etiquetas
      model_file:
        caption: Subtítulo
        digest: Digest
        filename: Archivo
        model_id: Modelo
        notes: Notas
        presupported: Soporte predefinido
        presupported_version: Versión con soporte predefinido
        printed: Impreso
        size: Tamaño del archivo
        unsupported_version: Versión sin soporte
        y_up: Eje Y Arriba
      problem:
        category: Categoría
        ignored: Oculto
        note: Nota
        problematic_type: Tipo de objeto
        severity: Gravedad
      user:
        approved: Cuenta pendiente
        confirmation_sent_at: Confirmación enviada a
        confirmation_token: Código de confirmación
        confirmed_at: Confirmado el
        created_at: Creado el
        current_password: Contraseña actual
        current_sign_in_at: Inicio de sesión actual el
        current_sign_in_ip: IP de inicio de sesión actual
        email: Email
        encrypted_password: Contraseña cifrada
        failed_attempts: Intentos fallidos
        last_sign_in_at: Último inicio de sesión el
        last_sign_in_ip: IP último inicio de sesión
        locked_at: Bloqueado el
        password: Contraseña
        password_confirmation: Confirmar contraseña
        remember_created_at: Guardar fecha de creación
        remember_me: Recordarme
        reset_password_sent_at: Restablecimiento de contraseña enviado a
        reset_password_token: Restablecer contraseña
        sign_in_count: Número inicios de sesión
        unconfirmed_email: Email no confirmado
        unlock_token: Código de desbloqueo
        updated_at: Actualizado el
        username: Nombre de usuario
    errors:
      models:
        collection:
          attributes:
            collection:
              private:
            creator:
              private:
        doorkeeper/application:
          attributes:
            redirect_uri:
              forbidden_uri: está prohibido por el servidor.
              fragment_present: no puede contener un fragmento.
              invalid_uri: debe ser una URI válida.
              relative_uri: debe ser una URI absoluta.
              secured_uri: debe ser una URI HTTPS/SSL.
              unspecified_scheme: debe especificar un esquema.
            scopes:
              not_match_configured: doesn't match configured on the server.
        library:
          attributes:
            path:
              cannot_be_contained: no puede estar dentro de otra biblioteca
              cannot_contain: no puede contener otras bibliotecas
              non_writable: se debe poder escribir
              not_found: no se ha encontrado en el disco
              unsafe: no puede ser una ruta privilegiada del sistema
        model:
          attributes:
            creator:
              private:
            library:
              nested: no puede ser modificado, el modelo contiene otros modelos
            license:
              invalid_spdx: no es una licencia válida
            path:
              destination_exists: ya existe
              nested: no puede ser modificado, el modelo contiene otros modelos
        model_file:
          attributes:
            filename:
              cannot_change_type: no es el mismo tipo de archivo
              case_change_only: El cambio no puede limitarse solo a las mayúsculas y minúsculas
            presupported_version:
              already_presupported: no se puede establecer en un archivo con soporte predefinido
              not_supported: no es un archivo con soporte predefinido.
    models:
      acts_as_taggable_on/tag:
        few: Etiquetas
        many: Etiquetas
        one: Etiqueta
        other: Etiquetas
        two: Etiquetas
        zero: Etiquetas
      collection:
        few: Colecciones
        many: Colecciones
        one: Colección
        other: Colecciones
        two: Colecciones
        zero: Colecciones
      creator:
        few: Creadores
        many: Creadores
        one: Creador
        other: Creadores
        two: Creadores
        zero: Creadores
      federails/moderation/domain_block:
        few: Bloqueo de dominios
        many: Bloqueo de dominios
        one: Dominio Bloqueado
        other: Bloqueo de dominios
        two: Bloqueo de dominios
        zero: Bloqueo de dominios
      federails/moderation/report:
        few: Informes
        many: Informes
        one: Informe
        other: Informes
        two: Informes
        zero: Informes
      library:
        few: Bibliotecas
        many: Bibliotecas
        one: Biblioteca
        other: Bibliotecas
        two: Bibliotecas
        zero: Bibliotecas
      link:
        few: Enlaces
        many: Enlaces
        one: Enlace
        other: Enlaces
        two: Enlaces
        zero: Enlaces
      model:
        few: Modelos
        many: Modelos
        one: Modelo
        other: Modelos
        two: Modelos
        zero: Modelos
      model_file:
        few: Archivos
        many: Archivos
        one: Archivo
        other: Archivos
        two: Archivos
        zero: Archivos
      problem:
        few: Problemas
        many: Problemas
        one: Problema
        other: Problemas
        two: Problemas
        zero: Problemas
      user:
        few: Usuarios
        many: Usuarios
        one: Usuario
        other: Usuarios
        two: Usuarios
        zero: Usuarios
  activity:
    index:
      description: Las entradas se borran después de %{retention_period}.
      message: Mensaje
      name: Nombre
      time: Cuando
      title: Actividad reciente
  activity_helper:
    status_icon:
      completed: Completado
      error: Fallidos
      queued: En cola
      working: En curso
  application:
    caber_relation_fields:
      delete: Borrar
      permissions:
        edit: Puede editar
        own: Propietario (puede ver, editar, eliminar y compartir)
        preview: 'Vista previa: sólo archivos específicos previsualizables'
        view: Ver sólo
      subject:
        placeholder: Dirección de correo electrónico, nombre de usuario o rol
        role:
          member: Cualquier usuario local conectado
          public: Todos (sin inicio de sesión)
        you: "(tú)"
    caber_relations_form:
      add: añadir otro permiso
      permissions: Compartiendo
    demo_mode: Esta instancia es una demo. No puedes añadir ni eliminar modelos, pero puedes hacer todo lo demás.
    filters_card:
      missing_tags: Etiquetas vacías
      remove_collection_filter: Eliminar filtro de colección
      remove_creator_filter: Eliminar filtro de creador
      remove_library_filter: Eliminar filtro de biblioteca
      remove_missing_tag_filter: Eliminar filtro de etiquetas vacias
      remove_search_filter: Eliminar filtro de búsqueda
      remove_tag_filter: Eliminar el filtro de etiqueta
      search: Buscar
      title: Filtros
      unknown: Desconocido
    footer:
      about: Acerca de esta instancia
      api: API
      by_html: Diseñado y construido por <a href="https://floppy.org.uk" target="_blank">James</a> con la ayuda de <a href="https://github.com/manyfold3d/manyfold/graphs/contributors" target="_blank">nuestros colaboradores</a>.
      community: Únete a la comunidad
      instance_heading: Detalles de la instancia
      issues: Problemas
      open_source_html: <a href="https://github.com/manyfold3d/manyfold" target="_blank">Open Source</a> bajo <a href="https://github.com/manyfold3d/manyfold/blob/main/LICENSE.md" target="_blank" rel="license">licencia MIT</a>.
      powered_by_html: Desarrollado por <a href="https://manyfold.app">%{name}</a>
      sponsor: Colaborar
      support: Apoyar esta instancia
      version: Versión
    link_fields:
      url:
        delete: Borrar
        placeholder: Cualquier web relacionada
    links_form:
      add: añadir otro enlace
    navbar:
      account: Cuenta
      activity: Actividad
      check_existing: Comprobar modelos existentes
      home: Inicio
      log_in: Iniciar sesión
      log_out: Cerrar sesión
      navbar:
        toggler:
          label: Mostrar/ocultar panel
      scan: Escanear
      scan_changes: Buscar cambios
      scanning: Escaneando
      search: Buscar
      settings: Ajustes
      upload: Cargar
    order_buttons:
      sort:
        name: Ordenar por nombre
        time: Ordenar por tiempo
    search_error: Error en la sintaxis de búsqueda. Por favor, compruébelo e inténtelo de nuevo
    tag_list:
      unrelated_tag_count:
        one: "%{count} etiqueta no relacionada oculta"
        other: "%{count} etiquetas no relacionadas ocultas"
    tagline: Ayudándole a mantener un registro de sus archivos de impresión 3D
    tags_card:
      skip_tags: Saltar lista de etiquetas
    title: Manyfold
  components:
    altcha_widget:
      help: protección antispam mediante ALTCHA
    copy_button:
      copy: Copiar al portapapeles
    download_button:
      download:
        missing: Solicitar descarga
        preparing: Preparando descarga, por favor espere
        ready: Listo para descargar
      file_type: Solo archivos %{type}
      label: Descargar modelo
      menu_header: Opciones de Descarga
      supported: Sólo archivos compatibles
      unsupported: Sólo archivos no compatibles
    follow_button:
      follow: Seguir %{name}
      pending: Requerido
      unfollow: Dejar de seguir %{name}
    modal:
      close: Cerrar
    model_card:
      delete_button:
        label: Borrar modelo %{name}
        text: Borrar
      edit_button:
        label: Editar modelo %{name}
        text: Editar
      no_preview: Vista previa no disponible
      open_button:
        label: Abrir modelo %{name}
        text: Abrir
    search_help:
      boolean: Utilice "or" para buscar modelos que coincidan con cualquiera de los términos.
      federation: Busca cualquier nombre de usuario de Fediverse para seguirlo.
      filename: También puede buscar nombres de archivo específicos.
      intro: 'Encuentre lo que necesita con nuestra potente sintaxis de búsqueda:'
      more_details_html: Para más información, lea la documentación completa <a href="https://github.com/wvanbergen/scoped_search/wiki/Query-language">del lenguaje de consulta de scoped_search</a>.
      negation: Para excluir términos, utilice "not", "!" o "-".
      parentheses: Agrupe los términos entre paréntesis para obtener combinaciones lógicas más complejas.
      quotes: Para buscar varias palabras en un mismo término, utilice las comillas; sólo se mostrarán los modelos con el texto exacto.
      simple: Por defecto, la búsqueda encontrará los modelos que coincidan con todos los términos.
      specific_fields: Puede buscar términos en algunos campos específicos. Utilice "~" para que coincida con parte del campo o "=" que intentará que coincida con todo.
      tag: Busca modelos con una etiqueta específica
      title: Sintaxis de búsqueda
      unset: Utilice "set?" para consultar si un campo concreto está establecido, y añada "not" para encontrar lo contrario.
      without_tag: Utilice "!=" para encontrar modelos sin una etiqueta específica
  doorkeeper:
    applications:
      buttons:
        authorize: Autorizar
        cancel: Cancelar
        destroy: Eliminar
        edit: Editar
        submit: Enviar
      confirmations:
        destroy: "¿Estás seguro?"
      edit:
        title: Editar aplicación
      form:
        error: Ups! Verifica tu formulario por posibles errores
      help:
        blank_redirect_uri: Leave it blank if you configured your provider to use Client Credentials, Resource Owner Password Credentials or any other grant type that doesn't require redirect URI.
        confidential: Application will be used where the client secret can be kept confidential. Native mobile apps and Single Page Apps are considered non-confidential.
        redirect_uri: Usa una linea por URI
        scopes: Separa los ámbitos con espacios. Deja en blanco para usar los ámbitos predeterminados.
      index:
        actions: Actions
        callback_url: Callback URL
        confidential: Confidential?
        confidentiality:
          'no': 'No'
          'yes': Sí
        name: Nombre
        new: Nueva aplicación
        title: Tus aplicaciones
      new:
        title: Nueva aplicación
      show:
        actions: Acciones
        application_id: Identificador de aplicación
        callback_urls: Callback urls
        confidential: Confidential
        not_defined: No definido
        scopes: Ámbitos
        secret: Secret
        secret_hashed: Hash Secreto
        title: 'Aplicación: %{name}'
    authorizations:
      buttons:
        authorize: Autorizar
        deny: Denegar
      error:
        title: Ha ocurrido un error
      form_post:
        title: Envíe este formulario
      new:
        able_to: Está aplicación tendrá permisos para
        prompt: "¿Autorizas a %{client_name} para usar tu cuenta?"
        title: Autorización requerida
      show:
        title: Código de autorización
    authorized_applications:
      buttons:
        revoke: Revocar
      confirmations:
        revoke: "¿Estás seguro?"
      index:
        application: Aplicación
        created_at: Creada el
        date_format: "%d/%m/%Y %H:%M:%S"
        title: Tus aplicaciones autorizadas
    errors:
      messages:
        access_denied: El propietario del recurso o el servidor de autorización han denegado la petición.
        admin_authenticator_not_configured: Access to admin panel is forbidden due to Doorkeeper.configure.admin_authenticator being unconfigured.
        credential_flow_not_configured: El flujo de credenciales del propietario del recurso ha fallado porque Doorkeeper.configure.resource_owner_from_credentials no está configurado.
        forbidden_token:
          missing_scope: El acceso a este recurso requiere el ámbito "%{oauth_scopes}".
        invalid_client: La autenticación del cliente ha fallado por cliente desconocido, cliente no autenticado, o método de autenticación incompatible.
        invalid_code_challenge_method:
          one: El método code_challenge debe ser %{challenge_methods}.
          other: El método code_challenge_method debe ser uno de %{challenge_methods}.
          zero: El servidor de autorización no admite PKCE porque no hay valores code_challenge_method aceptados.
        invalid_grant: La autorización proporcionada no es válida, ha expirado, se ha revocado, no coincide con la URI de redirección utilizada en la petición de autorización, o ha sido solicitada por otro cliente.
        invalid_redirect_uri: La uri de redirección no es valida.
        invalid_request:
          invalid_code_challenge: Es necesario impugnar el código.
          missing_param: 'Missing required parameter: %{value}.'
          request_not_authorized: Request need to be authorized. Required parameter for authorizing request is missing or invalid.
          unknown: La petición no tiene un parámetro obligatorio, incluye un valor de parámetro incompatible, o tiene un formato incorrecto.
        invalid_scope: El scope solicitado no es válido, es desconocido, o tiene un formato incorrecto.
        invalid_token:
          expired: El token de acceso ha expirado
          revoked: El token de acceso ha sido revocado
          unknown: El token de acceso es inválido
        resource_owner_authenticator_not_configured: La búsqueda del propietario del recurso ha fallado porque Doorkeeper.configure.resource_owner_authenticator no está configurado.
        revoke:
          unauthorized: No tiene autorización para revocar este token
        server_error: El servidor de autorización ha encontrado una condición inesperada que le ha impedido completar la petición.
        temporarily_unavailable: El servidor de autorización no ha podido manejar la petición por una sobrecarga temporal o por mantenimiento del servidor.
        unauthorized_client: El cliente no tiene autorización para realizar esta petición utilizando este método.
        unsupported_grant_type: El tipo de autorización no está soportada por el servidor de autorización.
        unsupported_response_mode: El servidor de autorización no soporta este tipo de respuesta.
        unsupported_response_type: El servidor de autorización no soporta este tipo de respuesta.
    flash:
      applications:
        create:
          notice: Aplicación creada.
        destroy:
          notice: Aplicación eliminada.
        update:
          notice: Aplicación actualizada.
      authorized_applications:
        destroy:
          notice: Aplicación revocada.
    layouts:
      admin:
        nav:
          applications: Aplicaciones
          home: Home
          oauth2_provider: Proveedor OAuth2
        title: Doorkeeper
      application:
        title: Autorización OAuth requerida
    pre_authorization:
      status: Pre-authorization
  doorkeeper_applications:
    create:
      failure: Se ha producido un error y no se ha podido guardar la aplicación.
      success: Aplicación creada con éxito.
    destroy:
      success: Aplicación eliminada con éxito.
    edit:
      title: Editar aplicación
    form:
      confidential:
        help: Una aplicación confidencial puede guardar secretos de forma segura (por ejemplo, un backend de servidor web o un script de máquina a máquina).
      redirect_uri:
        help: Utilice "urn:ietf:wg:oauth:2.0:oob" si su aplicación no necesita un URI de redirección (por ejemplo, aplicaciones de máquina a máquina).
      scopes:
        label: Ámbitos
      submit: Guardar aplicación
    index:
      description: Las aplicaciones OAuth le permiten acceder a los recursos de Manyfold desde otros servicios a través de nuestra API.
      new: Nueva aplicación
      title: Aplicaciones OAuth
    new:
      title: Nueva aplicación
    show:
      destroy: Borrar
      edit: Editar
      title: Detalles de la aplicación
    update:
      failure: Se ha producido un error y no se ha podido guardar la aplicación.
      success: Aplicación guardada correctamente.
  follows:
    actor_table:
      actions: Acciones
      address: Dirección Fediverse
      name: Nombre
      non_manyfold_account: Esta no es una cuenta Manyfold. Puedes seguirla, pero probablemente no ocurra nada interesante, al menos por ahora.
    follow_remote_actor:
      followed: Siguiendo a %{actor} correctamente.
    index:
      followers: Seguidores
      following: Siguiendo
      title: Siguiendo
    new:
      help: Puedes seguir creadores, colecciones o modelos públicos en otro servidor de Manyfold; ¡de hecho, cualquier cuenta pública en el Fediverse! Solo ingresa el nombre de la cuenta en el cuadro de búsqueda.
      no_results: Lo siento, no encontré nada para "%{query}". ¿Es una cuenta o URL de ActivityPub válida?
      results: Resultados de la búsqueda
      title: Sigue el Fediverse
    remote_follow:
      help: No es necesario tener una cuenta en este servidor para seguir a %{name}. Escribe tu nombre de usuario aquí y te llevaremos de vuelta para completar el proceso
      no_results_html: No se pudo encontrar tu cuenta de inicio; ¿la escribiste correctamente?
      placeholder: Tu nombre de usuario de Fediverse, por ejemplo manyfold@3dp.chat
      submit: Llévame a casa
      title: Seguir %{name}
    search_form:
      placeholder: Introduzca una cuenta Fediverse o URL, por ejemplo @admin@try.manyfold.app
      submit: Buscar
    unfollow_remote_actor:
      unfollowed: Dejar de seguir a %{actor}
  general:
    delete: Borrar
    download: Descargar
    edit: Editar
    expand: Expandir
    followers:
      few: "%{count} Seguidores"
      many: "%{count} Seguidores"
      one: "%{count} Seguidores"
      other: "%{count} Seguidores"
      two: "%{count} Seguidores"
      zero: "%{count} Seguidores"
    menu: Menú
    new: Nuevo
    public: Público
    report: Informe %{type}
    save: Guardar
    view: Ver
  home:
    activity:
      created: añadido hace %{time}
      updated: actualizado hace %{time}
    browsing:
      content: Puede explorar los modelos haciendo clic en los enlaces de la barra de menús; navegar por una lista completa y filtrar por etiqueta, o navegar por colección o creador. Si lo prefiere, escriba en el cuadro de búsqueda para encontrar lo que busca
      manual_link: Guía de usuario
      more_access: Actualmente sólo tiene acceso de lectura a esta instancia; para obtener más permisos, como subir archivos, póngase en contacto con el administrador.
      title: Navegando por
    federation:
      content_html: Esta instancia de Manyfold forma parte de <a href="https://jointhefediverse.net">Fediverse</a>, una red de redes sociales que funcionan conjuntamente. Eso significa que si tienes una cuenta aquí, puedes seguir contenido en otras instancias de Manyfold, o la gente puede seguir tu contenido desde otras plataformas como Mastodon.
      following: Si conoces el "handle" de alguien o algo que quieres seguir, sólo tienes que introducirlo en el cuadro de búsqueda; si no, introduce tu "handle" personal más arriba cuando sigas algo en otra instancia.
      handle_html: 'Tu "handle" en fediverse es: <code>%{handle}</code>'
      title: Federación
    index:
      no_activities: Por ahora no hay actividades que mostrar.
      open_search_help: Sintaxis de búsqueda
      recent_activity: Actividad reciente
      search:
        placeholder: "¿Qué busca?"
        submit: Buscar
    publishing:
      content: Puedes publicar contenido públicamente dando permiso de "vista" o "vista previa" al rol "público" en la página de edición del elemento. Ten en cuenta que los creadores, las colecciones y los modelos tienen sus propios permisos, por lo que tendrás que hacerlos públicos por separado si quieres que sean visibles.
      new_creator:
        button: Crear un nuevo perfil de creador
        content: 'Si vas a publicar tu propio trabajo, probablemente querrás crear tu propio perfil de creador y hacerlo público:'
      title: Publicando
    support:
      content: Las instancias de Manyfold están gestionadas por gente como tú. Si encuentra útil esta instancia, puede ayudar a mantenerla en funcionamiento haciendo clic a continuación.
      manyfold_html: Para apoyar el desarrollo de Manyfold, puedes hacerlo en <a href="https://opencollective.com/manyfold">OpenCollective</a>.
      support_link: Apoyar esta instancia
      title: Ayuda
    uploading:
      how_to_upload: Puedes añadir modelos haciendo clic en el botón de carga de la barra de menús. Para cargar muchos archivos como un único modelo, comprímalos en un único archivo (por ejemplo, ZIP o RAR).
      permissions:
        edit: Puede conceder permisos adicionales en la página de edición del elemento.
        member: Por defecto, el contenido subido será visible para cualquier usuario local conectado.
        private: Por defecto, el contenido subido no será visible para ningún otro usuario.
      title: Cargando
      upload: Cargar
    welcome:
      lead: Este sitio utiliza Manyfold, un programa para gestionar y compartir modelos 3D. Aquí encontrará una breve guía...
      title: "¡Bienvenido a %{site_name}!"
  jobs:
    activity:
      collection_published:
        comment: Una nueva colección de modelos 3D, ["%{name}"](%{url}) ha sido publicada
      model_collected:
        comment: '["%{model_name}"](%{model_url}) ha sido agregado a  la colección ["%{collection_name}"](%{collection_url}).'
      model_published:
        comment: 'Un nuevo modelo 3D, ["%{name}"](%{url}), ha sido publicado '
      updated_model:
        comment: El modelo 3D ["%{name}"](%{url}), ha sido actualizado.
    analysis:
      analyse_model_file:
        detect_duplicates: Buscando ficheros duplicados
        detect_ineffiency: Buscando formatos ineficientes
        file_statistics: Calculando estadísticas de archivos
        matching: Buscando archivos compatibles
      file_conversion:
        exporting: Exportando nuevo fichero
        loading_mesh: Cargando malla
      geometric_analysis:
        direction_check: Comprobando la orientación de la superficie
        loading_mesh: Cargando malla
        manifold_check: Verificando que la malla sea válida
    scan:
      check_all:
        queueing_model_checks: Encolando verificaciones de modelos
        removing_orphaned_problems: Eliminar problemas huérfanos
      detect_filesystem_changes:
        building_filename_list: Construyendo lista de archivos
        building_folder_list: Construyendo lista de carpetas modificadas
        creating_models: Creando modelos
  kaminari:
    first_page:
      label: Ir a la primera página
    last_page:
      label: Ir a la última página
    next_page:
      label: Ir a la siguiente página
    page:
      current_page: Página actual
      label: Ir a la página %{page}
    paginator:
      label: Navegación por la página
    prev_page:
      label: Ir a la página anterior
  layouts:
    application:
      alert:
        danger: Peligro
        info: Información
      skip_to_content: Ir al contenido principal
    card_list_page:
      actions_heading: Acciones
    settings:
      activeadmin: Administración avanzada
      appearance: Apariencia
      downloads: Descargas
      libraries: Bibliotecas
      organization: Organización
      performance: Panel de rendimiento
      pghero: PgHero
      sidekiq: Sidekiq
      site_settings_title: Ajustes
      tools_heading: Herramientas avanzadas
  licenses:
    CC-BY-40: Creative Commons - Reconocimiento
    CC-BY-NC-40: Creative Commons - Reconocimiento - No Comercial
    CC-BY-NC-ND-40: Creative Commons - Reconocimiento - No Comercial - Sin Obra Derivada
    CC-BY-NC-SA-40: Creative Commons - Reconocimiento - No Comercial - Compartir Igual
    CC-BY-ND-40: Creative Commons - Reconocimiento - Sin Obra Derivada
    CC-BY-SA-40: Creative Commons - Reconocimiento - Compartir Igual
    CC-PDDC: Creative Commons - Declaración de Dominio Público
    CC0-10: Creative Commons - Sin Derechos de Autor Reservados
    LicenseRef-Commercial: Comercial - Solo para uso privado
    MIT: MIT
  moderator_mailer:
    new_approval:
      greeting: "¡Hola!"
      message: Alguien nuevo se ha registrado para obtener una cuenta y requiere aprobación. Aprobar la cuenta en %{link}
      subject: La nueva cuenta necesita aprobación
    new_report:
      greeting: "¡Hola!"
      message: Alguien ha denunciado un contenido que necesita moderación. Revise el informe en %{link}
      subject: Nuevo informe recibido
  renderer:
    errors:
      canvas: "¡No se encontró el canvas #webgl!"
      load: Error de carga
      webglrenderer: No se ha podido crear el renderizado
    load: Carga
    processing: Generando splines...
  reports:
    create:
      success: Informe enviado. Gracias!
    new:
      description: Si este elemento infringe alguna ley o política del servidor, puedes informarlo a nuestros moderadores. ¡Añade un comentario para explicar el motivo!
      submit: Enviar informe
      title: 'Informe %{type}: "%{name}"'
  security:
    running_as_root_html: Manyfold se está ejecutando como root, lo que supone un riesgo para la seguridad. Ejecútelo como un usuario de sistema diferente configurando las variables de entorno <code>PUID</code> y <code>PGID</code>. Consulte <a href='https://manyfold.app/sysadmin/configuration.html#required'>la documentación de configuración</a> para más detalles.
  sites:
    cgtrader: CGTrader
    comicsgamesandthings: Comics, Games, and Things
    cults3d: Cults3D
    github: GitHub
    makerworld: MakerWorld
    manyfold: Manyfold
    myminifactory: MyMiniFactory
    printables: Printables
    thangs: Thangs
    theminiindex: The Mini Index
    thingiverse: Thingiverse
    yeggi: yeggi
  user_mailer:
    account_approved:
      greeting: "¡Hola!"
      message: Su cuenta ha sido aprobada; ya puede iniciar sesión en %{link}.
      subject: Cuenta aprobada
    test_email:
      subject: Probar email
      test_email_message: Probar email
  users:
    registrations:
      create:
        altcha_failed: Error en la verificación ALTCHA
  views:
    pagination:
      first: "« Primera"
      last: Última »
      next: Siguiente >
      previous: "‹ Anterior"
      truncate: "…"
</file>

<file path="config/locales/fr.yml">
---
fr:
  activerecord:
    attributes:
      collection:
        caption: Légende
        collection: Collection
        name: Nom
        notes: Notes
      creator:
        caption: Légende
        name: Nom
        notes: Notes
        slug:
      doorkeeper/application:
        access_token:
        confidential: Confidential
        created_at:
        name: Nom
        owner:
        redirect_uri: L'URL de redirection
        scopes: Portées
        secret:
        uid:
      federails/moderation/domain_block:
        created_at: Enregistré à
        domain: Domaine
      federails/moderation/report:
        content: Commentaire
        created_at: Reçu le
        federails_actor: Rapporté par
        object: Objet
      library:
        caption: Légende
        create_path_if_not_on_disk:
        default:
        icon: Icône
        name: Nom
        notes: Notes
        path: Chemin
        s3_access_key_id: ID de la clé d'accès
        s3_bucket: Nom du bucket
        s3_endpoint: URL du endpoint
        s3_path_style: Utiliser des URL de type "chemin d'accès"
        s3_region: Région
        s3_secret_access_key: Clé d'accès secrète
        storage_service: Service de stockage
        tag_regex: Étiquettes requises
      link:
        url: Lien
      model:
        caption: Légende
        collection_id: Collection
        creator_id: Créateur
        library_id: Bibliothèque
        license: Licence
        name: Nom
        notes: Description
        path: Chemin
        preview_file: Prévisualisation
        sensitive: Contenu sensible
        tags: Étiquettes
      model_file:
        caption: Légende
        digest: Absorber
        filename: Nom de fichier
        model_id: Modèle
        notes: Notes
        presupported: Présupporté
        presupported_version: Version présupporté
        printed: Imprimé
        size: Taille du fichier
        unsupported_version: Version non supportée
        y_up: Y Up
      problem:
        category: Catégorie
        ignored: Caché
        note: Note
        problematic_type: Type d'objet
        severity: Criticité
      user:
        approved: Compte en suspens
        confirmation_sent_at: Date d'envoi de la confirmation
        confirmation_token: Clé de confirmation du mot de passe
        confirmed_at: Confirmé à
        created_at: Enregistré à
        current_password: Mot de passe actuel
        current_sign_in_at: Date de la connexion actuelle
        current_sign_in_ip: IP de la connexion actuelle
        email: Email
        encrypted_password: Mot de passe chiffré
        failed_attempts: Tentatives échouées
        last_sign_in_at: Date de la dernière connexion
        last_sign_in_ip: IP de la dernière connexion
        locked_at: Verrouillé à
        password: Mot de passe
        password_confirmation: Confirmation du mot de passe
        remember_created_at: Mémorisé à
        remember_me: Se souvenir de moi ?
        reset_password_sent_at: Clé de réinitialisation créée à
        reset_password_token: Clé de réinitialisation du mot de passe
        sign_in_count: Nombre des connexions
        unconfirmed_email: Email non confirmé
        unlock_token: Clé de déverrouillage
        updated_at: Date de mise à jour
        username:
    errors:
      models:
        collection:
          attributes:
            collection:
              private:
            creator:
              private:
        doorkeeper/application:
          attributes:
            redirect_uri:
              forbidden_uri: est interdit par le serveur.
              fragment_present: ne peut contenir un fragment.
              invalid_uri: doit être une URL valide.
              relative_uri: doit être une URL absolue.
              secured_uri: doit être une URL HTTP/SSL.
              unspecified_scheme: doit spécifier un schéma.
            scopes:
              not_match_configured: doesn't match configured on the server.
        library:
          attributes:
            path:
              cannot_be_contained:
              cannot_contain:
              non_writable: doit être accessible en écriture
              not_found: n'a pas pu être trouvé sur le disque
              unsafe: 'ne peut pas être un chemin privilégié du système '
        model:
          attributes:
            creator:
              private:
            library:
              nested: ne peut être modifié, le modèle contient d'autres modèles
            license:
              invalid_spdx: n'est pas une licence valide
            path:
              destination_exists: existe déjà
              nested: ne peut être modifié, le modèle contient d'autres modèles
        model_file:
          attributes:
            filename:
              cannot_change_type: n'est pas le même type de fichier
              case_change_only: ne peut pas être juste un changement de casse
            presupported_version:
              already_presupported: ne peut pas être défini sur un fichier présupporté
              not_supported: n'est pas un fichier présupporté
    models:
      acts_as_taggable_on/tag:
        few: Étiquettes
        many: Étiquettes
        one: Étiquette
        other: Étiquettes
        two: Étiquettes
        zero: Étiquettes
      collection:
        few: Collections
        many: Collections
        one: Collection
        other: Collections
        two: Collections
        zero: Collections
      creator:
        few: Créateurs
        many: Créateurs
        one: Créateur
        other: Créateurs
        two: Créateurs
        zero: Créateurs
      federails/moderation/domain_block:
        few: Blocages de domaines
        many: Blocages de domaines
        one: Blocage de domaines
        other: Blocages de domaines
        two: Blocages de domaines
        zero: Blocages de domaines
      federails/moderation/report:
        few: Rapports
        many: Rapports
        one: Rapport
        other: Rapports
        two: Rapports
        zero: Rapports
      library:
        few: Bibliothèques
        many: Bibliothèques
        one: Bibliothèque
        other: Bibliothèques
        two: Bibliothèques
        zero: Bibliothèques
      link:
        few: Liens
        many: Liens
        one: Lien
        other: Liens
        two: Liens
        zero: Liens
      model:
        few: Modèles
        many: Modèles
        one: Modèle
        other: Modèles
        two: Modèles
        zero: Modèles
      model_file:
        few: Fichiers
        many: Fichiers
        one: Fichier
        other: Fichiers
        two: Fichiers
        zero: Fichiers
      problem:
        few: Problèmes
        many: Problèmes
        one: Problème
        other: Problèmes
        two: Problèmes
        zero: Problèmes
      user:
        few: Utilisateurs
        many: Utilisateurs
        one: Utilisateur
        other: Utilisateurs
        two: Utilisateurs
        zero: Utilisateurs
  activity:
    index:
      description: Les entrées sont rejetées après %{retention_period}.
      message: Message
      name: Nom
      time: Quand
      title: Activité récente
  activity_helper:
    status_icon:
      completed: Compléter
      error: Erreur
      queued: En attente
      working: En cours d'exécution
  application:
    caber_relation_fields:
      delete: Supprimer
      permissions:
        edit: Peut éditer
        own: Propriétaire (peut consulter, modifier, supprimer et partager)
        preview:
        view: Consulter seulement
      subject:
        placeholder: Adresse électronique, nom d'utilisateur ou rôle
        role:
          member: Tout utilisateur local connecté
          public: Tout le monde (sans login)
        you: "(vous)"
    caber_relations_form:
      add: ajouter une autre autorisation
      permissions: Partage
    demo_mode: Cette instance est en mode démo. Vous ne pouvez pas ajouter ou supprimer des modèles, mais vous pouvez faire tout le reste.
    filters_card:
      missing_tags: Etiquette manquante
      remove_collection_filter: Supprimer la collection de filtres
      remove_creator_filter: Supprimer le filtre créateur
      remove_library_filter: Supprimer le filtre de bibliothèque
      remove_missing_tag_filter: Supprimer le filtre "étiquette manquante"
      remove_search_filter: Supprimer le filtre de recherche
      remove_tag_filter: Supprimer le filtre d'étiquette
      search: Recherche
      title: Filtres
      unknown: Inconnu
    footer:
      about:
      api:
      by_html: Conçu et réalisé par <a href="https://floppy.org.uk" target="_blank">James</a> avec l'aide de <a href="https://github.com/manyfold3d/manyfold/graphs/contributors" target="_blank">nos contributeurs</a>.
      community:
      instance_heading:
      issues: Problèmes
      open_source_html: Open Source sous <a href="https://github.com/manyfold3d/manyfold/blob/main/LICENSE.md" target="_blank" rel="license">licence MIT.</a>
      powered_by_html:
      sponsor: Sponsor
      support:
      version: Version
    link_fields:
      url:
        delete: Supprimer
        placeholder: Toute page web connexe
    links_form:
      add: ajouter un autre lien
    navbar:
      account: Mes paramètres
      activity: Activité
      check_existing: Vérifier les modèles existants
      home: Page d'accueil
      log_in: Se connecter
      log_out: Se déconnecter
      navbar:
        toggler:
          label: Basculer la navigation
      scan: Scanner
      scan_changes: Recherche de changements
      scanning: Scan en cours
      search: Recherche
      settings: Paramètres
      upload: Télécharger
    order_buttons:
      sort:
        name: Trier par nom
        time: Trier par heure
    search_error:
    tag_list:
      unrelated_tag_count:
        one: "%{count} étiquette non liée cachée"
        other: "%{count} étiquettes non liées cachées"
    tagline: Vous aider à garder une trace de vos fichiers d'impression 3D
    tags_card:
      skip_tags: Sauter la liste des balises
    title: Manyfold
  components:
    altcha_widget:
      help:
    copy_button:
      copy:
    download_button:
      download:
        missing:
        preparing:
        ready:
      file_type: Fichiers %{type} uniquement
      label: Télécharger tout
      menu_header: Options de téléchargement
      supported: Fichiers pris en charge uniquement
      unsupported: Fichiers non pris en charge uniquement
    follow_button:
      follow: Suivre %{name}
      pending: Demandé
      unfollow: ne plus suivre %{name}
    modal:
      close:
    model_card:
      delete_button:
        label: Supprimer le modèle %{name}
        text: Supprimer
      edit_button:
        label: Modifier le modèle %{name}
        text: Modifier
      no_preview: Pas d'aperçu disponible
      open_button:
        label: Ouvrir le modèle %{name}
        text: Ouvrir
    search_help:
      boolean:
      federation:
      filename:
      intro:
      more_details_html:
      negation:
      parentheses:
      quotes:
      simple:
      specific_fields:
      tag:
      title:
      unset:
      without_tag:
  doorkeeper:
    applications:
      buttons:
        authorize: Autoriser
        cancel: Annuler
        destroy: Supprimer
        edit: Modifier
        submit: Envoyer
      confirmations:
        destroy: Êtes-vous certain?
      edit:
        title: Modifier l'application
      form:
        error: Oups! Vérifier votre formulaire pour des erreurs possibles
      help:
        blank_redirect_uri: Leave it blank if you configured your provider to use Client Credentials, Resource Owner Password Credentials or any other grant type that doesn't require redirect URI.
        confidential: |
          L'application sera utilisée quand la confidentialité du secret pourra
          être maintenue. Les application mobile native, et les Applications
          mono-page ne sont pas considérées comme sûr.
        redirect_uri: Utiliser une ligne par URL
        scopes: Utilisez un espace entre chaque portée. Laissez vide pour utiliser la portée par defaut
      index:
        actions: Actions
        callback_url: URL de retour d'appel
        confidential: Confidential?
        confidentiality:
          'no': Non
          'yes': Oui
        name: Nom
        new: Nouvelle application
        title: Vos applications
      new:
        title: Nouvelle application
      show:
        actions: Actions
        application_id: ID de l'application
        callback_urls: URL du retour d'appel
        confidential: Confidential
        not_defined:
        scopes: Portées
        secret: Secret
        secret_hashed:
        title: 'Application : %{name}'
    authorizations:
      buttons:
        authorize: Autoriser
        deny: Refuser
      error:
        title: Une erreur est survenue
      form_post:
        title:
      new:
        able_to: Cette application pourra
        prompt: Autorisez %{client_name} à utiliser votre compte?
        title: Autorisation requise
      show:
        title: Code d'autorisation
    authorized_applications:
      buttons:
        revoke: Annuler
      confirmations:
        revoke: Êtes-vous certain?
      index:
        application: Application
        created_at: Créé le
        date_format: "%Y-%m-%d %H:%M:%S"
        title: Vos applications autorisées
    errors:
      messages:
        access_denied: Le propriétaire de la ressource ou le serveur d'autorisation a refusé la demande.
        admin_authenticator_not_configured: Access to admin panel is forbidden due to Doorkeeper.configure.admin_authenticator being unconfigured.
        credential_flow_not_configured: Le flux des identifiants du mot de passe du propriétaire de la ressource a échoué en raison de Doorkeeper.configure.resource_owner_from_credentials n'est pas configuré.
        forbidden_token:
          missing_scope:
        invalid_client: L'authentification du client a échoué à cause d'un client inconnu, d'aucune authentification de client incluse, ou d'une méthode d'authentification non prise en charge.
        invalid_code_challenge_method:
          one:
          other:
          zero:
        invalid_grant: Le consentement d'autorisation accordé n'est pas valide, a expiré, est annulé, ne concorde pas avec l'URL de redirection utilisée dans la demande d'autorisation, ou a été émis à un autre client.
        invalid_redirect_uri: L'URL de redirection n'est pas valide.
        invalid_request:
          invalid_code_challenge:
          missing_param: 'Missing required parameter: %{value}.'
          request_not_authorized: Request need to be authorized. Required parameter for authorizing request is missing or invalid.
          unknown: La demande manque un paramètre requis, inclut une valeur de paramètre non prise en charge, ou est autrement mal formée.
        invalid_scope: Le scope demandé n'est pas valide, est inconnu, ou est mal formé.
        invalid_token:
          expired: Le jeton d'accès a expiré
          revoked: Le jeton d'accès a été annulé
          unknown: Le jeton d'accès n'est pas valide
        resource_owner_authenticator_not_configured: La recherche du propriétaire de la ressource a échoué en raison de Doorkeeper.configure.resource_owner_authenticator n'est pas configuré.
        revoke:
          unauthorized: Vous n'êtes pas autorisé à révoquer ce jeton
        server_error: Le serveur d'autorisation a rencontré une condition inattendue qui l'a empêché de remplir la demande.
        temporarily_unavailable: Le serveur d'autorisation est actuellement incapable de traiter la demande à cause d'une surcharge ou d'un entretien temporaire du serveur.
        unauthorized_client: Le client n'est pas autorisé à effectuer cette demande à l'aide de cette méthode.
        unsupported_grant_type: Le type de consentement d'autorisation n'est pas pris en charge par le serveur d'autorisation.
        unsupported_response_mode:
        unsupported_response_type: Le serveur d'autorisation ne prend pas en charge ce type de réponse.
    flash:
      applications:
        create:
          notice: Application créée.
        destroy:
          notice: Application supprimée.
        update:
          notice: Application mise à jour.
      authorized_applications:
        destroy:
          notice: Application annulée.
    layouts:
      admin:
        nav:
          applications: Applications
          home: Home
          oauth2_provider: Fournisseur OAuth2
        title: Doorkeeper
      application:
        title: Autorisation OAuth requise
    pre_authorization:
      status: Pre-authorization
  doorkeeper_applications:
    create:
      failure:
      success:
    destroy:
      success:
    edit:
      title: Modifier l'application
    form:
      confidential:
        help:
      redirect_uri:
        help:
      scopes:
        label: Portées
      submit:
    index:
      description:
      new:
      title:
    new:
      title:
    show:
      destroy: Supprimer
      edit: Modifier
      title:
    update:
      failure:
      success:
  follows:
    actor_table:
      actions: Actions
      address: Adresse Fediverse
      name: Nom
      non_manyfold_account: Il ne s'agit pas d'un compte Manyfold ; vous pouvez le suivre, mais il ne se passera probablement rien d'intéressant, du moins pour l'instant.
    follow_remote_actor:
      followed: Suivi de %{actor} avec succès
    index:
      followers:
      following:
      title:
    new:
      help: Vous pouvez suivre des créateurs publics, des collections ou des modèles sur un autre serveur Manyfold, en fait n'importe quel compte public dans Fediverse ! Il suffit d'entrer le nom du compte dans la boîte de recherche !
      no_results: Désolé, rien n'a été trouvé pour "%{query}". S'agit-il d'un compte ou d'une URL ActivityPub valide ?
      results: Résultats de la recherche
      title: Suivre le Fediverse
    remote_follow:
      help: Vous n'avez pas besoin d'un compte sur ce serveur pour suivre %{name} ; entrez votre propre nom de compte ici, et nous vous renverrons chez vous pour terminer la procédure.
      no_results_html: Nous n'avons pas trouvé votre compte personnel ; l'avez-vous saisi correctement ?
      placeholder: 'Votre nom d''utilisateur Fediverse, ex. : manyfold@3dp.chat'
      submit: Retourner à l'accueil
      title: Suivre %{name}
    search_form:
      placeholder:
      submit: Recherche
    unfollow_remote_actor:
      unfollowed: Vous ne suivez plus %{actor}
  general:
    delete: Supprimer
    download: Télécharger
    edit: Modifier
    expand: Élargir
    followers:
      few:
      many:
      one:
      other:
      two:
      zero:
    menu: Menu
    new: Nouveau
    public:
    report: Rapporter %{type}
    save: Sauvegarder
    view: Afficher
  home:
    activity:
      created:
      updated:
    browsing:
      content:
      manual_link:
      more_access:
      title:
    federation:
      content_html:
      following:
      handle_html:
      title:
    index:
      no_activities: Il n'y a pas d'activités à afficher pour l'instant.
      open_search_help:
      recent_activity: Activité récente
      search:
        placeholder: Que recherchez-vous ?
        submit: Recherche
    publishing:
      content:
      new_creator:
        button:
        content:
      title:
    support:
      content:
      manyfold_html:
      support_link:
      title:
    uploading:
      how_to_upload:
      permissions:
        edit:
        member:
        private:
      title:
      upload: Télécharger
    welcome:
      lead:
      title:
  jobs:
    activity:
      collection_published:
        comment:
      model_collected:
        comment:
      model_published:
        comment:
      updated_model:
        comment:
    analysis:
      analyse_model_file:
        detect_duplicates: Détection des fichiers en double
        detect_ineffiency: Détection des formats inefficaces
        file_statistics: Calcul des statistiques sur les fichiers
        matching: Correspondance entre les fichiers pris en charge
      file_conversion:
        exporting: Export de nouveau fichier
        loading_mesh: Chargement du maillage
      geometric_analysis:
        direction_check: Vérification de l'orientation de la surface
        loading_mesh: Chargement du maillage
        manifold_check: Vérification de la continuité du maillage
    scan:
      check_all:
        queueing_model_checks: Mise en file d'attente des vérifications
        removing_orphaned_problems: Suppression des problèmes orphelins
      detect_filesystem_changes:
        building_filename_list: Création d'une liste de fichiers
        building_folder_list: Création d'une liste de répertoires modifiés
        creating_models: Création de modèles
  kaminari:
    first_page:
      label: Aller à la première page
    last_page:
      label: Aller à la dernière page
    next_page:
      label: Aller à la page suivante
    page:
      current_page: Page actuelle
      label: Aller à la page %{page}
    paginator:
      label: Navigation dans les pages
    prev_page:
      label: Aller à la page précédente
  layouts:
    application:
      alert:
        danger: Danger
        info: Information
      skip_to_content: Passer et aller au contenu principal
    card_list_page:
      actions_heading: Actions
    settings:
      activeadmin: Administration avancée
      appearance:
      downloads:
      libraries: Bibliothèques
      organization: Organisation
      performance: Tableau de bord des performances
      pghero: PgHero
      sidekiq: Sidekiq
      site_settings_title: Paramètres
      tools_heading: Outils avancés
  licenses:
    CC-BY-40: Creative Commons Attribution
    CC-BY-NC-40: Creative Commons Attribution NonCommercial
    CC-BY-NC-ND-40: Creative Commons Attribution NonCommercial NoDerivatives
    CC-BY-NC-SA-40: Creative Commons Attribution NonCommercial ShareAlike
    CC-BY-ND-40: Creative Commons Attribution NoDerivatives
    CC-BY-SA-40: Creative Commons Attribution ShareAlike
    CC-PDDC: Creative Commons Public Domain Declaration
    CC0-10: Creative Commons Zero
    LicenseRef-Commercial: Commercial ; usage privé uniquement
    MIT: MIT
  moderator_mailer:
    new_approval:
      greeting: Bonjour !
      message:
      subject:
    new_report:
      greeting: Bonjour !
      message:
      subject:
  renderer:
    errors:
      canvas: 'Impossible de trouver le canevas #webgl !'
      load: Erreur de chargement
      webglrenderer: Impossible de créer le rendu !
    load: Chargement
    processing: Réticulation des splines...
  reports:
    create:
      success: Rapport soumis. Merci !
    new:
      description: Si cet article enfreint une loi ou une politique du serveur, vous pouvez le signaler à nos modérateurs. Ajoutez un commentaire pour nous nous expliquer pourquoi !
      submit: Envoyer le rapport
      title: 'Rapporter %{type} : %{name}'
  security:
    running_as_root_html: Manyfold s'exécute en tant que root, ce qui constitue un risque pour la sécurité. Exécute-le en tant qu'utilisateur différent en définissant les variables d'environnement <code>PUID</code> et <code>PGID</code>. Voir <a href='https://manyfold.app/sysadmin/configuration.html#required'>la documentation de configuration</a> pour plus de détails.
  sites:
    cgtrader: CGTrader
    comicsgamesandthings: Bandes dessinées, jeux et objets
    cults3d: Cults3D
    github:
    makerworld:
    manyfold: Manyfold
    myminifactory: MyMiniFactory
    printables:
    thangs:
    theminiindex: The Mini Index
    thingiverse: Thingiverse
    yeggi:
  user_mailer:
    account_approved:
      greeting: Bonjour !
      message: Votre compte a été approuvé ; vous pouvez maintenant vous connecter à %{link}.
      subject: Compte approuvé
    test_email:
      subject: Email de test
      test_email_message: Email de test
  users:
    registrations:
      create:
        altcha_failed:
  views:
    pagination:
      first: "« Premier"
      last: Dernier »
      next: Suivant ›
      previous: "‹ Précédent"
      truncate: "…"
</file>

<file path="config/locales/ja.yml">
---
ja:
  activerecord:
    attributes:
      collection:
        caption: キャプション
        collection: コレクション
        name: 名称
        notes: ノート
      creator:
        caption: タグライン
        name: 名前
        notes: 説明
        slug: ハンドルネーム
      doorkeeper/application:
        access_token: アクセストークン
        confidential: 機密
        created_at: 作成日時
        name: 名前
        owner: オーナー
        redirect_uri: リダイレクトURI
        scopes: スコープ
        secret: クライアントシークレット
        uid: クライアントID
      federails/moderation/domain_block:
        created_at: 作成日時
        domain: ドメイン
      federails/moderation/report:
        content: コメント
        created_at: 受け取り作成日時
        federails_actor: 報告者
        object:
      library:
        caption: キャプション
        create_path_if_not_on_disk: フォルダを自動作成
        default: デフォルト
        icon: アイコン
        name: 名称
        notes: ノート
        path: パス
        s3_access_key_id: アクセスキーID
        s3_bucket: バケット名
        s3_endpoint: エンドポイントURL
        s3_path_style: パス式のURLを使用する
        s3_region: リージョン
        s3_secret_access_key: シークレットアクセスキー
        storage_service: ストレージサービス
        tag_regex: 必須タグ
      link:
        url: リンク
      model:
        caption: キャプション
        collection_id: コレクション
        creator_id: クリエイター
        library_id: ライブラリー
        license: ライセンス
        name: 名前
        notes: 説明
        path: パス
        preview_file: プレビューファイル
        sensitive: センシティブコンテンツ
        tags: タグ
      model_file:
        caption: キャプション
        digest: ダイジェスト
        filename: ファイル名
        model_id: モデル
        notes: ノート
        presupported: サポート材付き
        presupported_version: サポート材付きバージョン
        printed: プリントされた
        size: ファイルサイズ
        unsupported_version: サポート材無しバージョン
        y_up: Y上
      problem:
        category: カテゴリー
        ignored: ヒドゥン
        note: ノート
        problematic_type: オブジェクトの種類
        severity: 重大性
      user:
        approved: アカウント保留中
        confirmation_sent_at: パスワード確認送信時刻
        confirmation_token: パスワード確認用トークン
        confirmed_at: パスワード確認時刻
        created_at: 作成日
        current_password: 現在のパスワード
        current_sign_in_at: 現在のログイン時刻
        current_sign_in_ip: 現在のログインIPアドレス
        email: Eメール
        encrypted_password: 暗号化パスワード
        failed_attempts: 失敗したログイン試行回数
        last_sign_in_at: 最終ログイン時刻
        last_sign_in_ip: 最終ログインIPアドレス
        locked_at: ロック時刻
        password: パスワード
        password_confirmation: パスワード（確認用）
        remember_created_at: ログイン記憶時刻
        remember_me: ログインを記憶する
        reset_password_sent_at: パスワードリセット送信時刻
        reset_password_token: パスワードリセット用トークン
        sign_in_count: ログイン回数
        unconfirmed_email: 未確認Eメール
        unlock_token: ロック解除用トークン
        updated_at: 更新日
        username: アカウント名
    errors:
      models:
        collection:
          attributes:
            collection:
              private:
            creator:
              private:
        doorkeeper/application:
          attributes:
            redirect_uri:
              forbidden_uri: はサーバーによって禁止されています。
              fragment_present: はURLフラグメントを含めることはできません。
              invalid_uri: は有効なURIではありません。
              relative_uri: は絶対URIでなければなりません。
              secured_uri: はHTTPS/SSL URIでなければなりません。
              unspecified_scheme: スキームを指定する必要があります。
            scopes:
              not_match_configured: はサーバーの設定と一致しません。
        library:
          attributes:
            path:
              cannot_be_contained: 他のライブラリの中にあることはできない
              cannot_contain: 他のライブラリの中にあることはできない
              non_writable: 書き込み可能でなければならない
              not_found: ディスクに見つかりませんでした
              unsafe: 特権システムパスであってはならない
        model:
          attributes:
            creator:
              private:
            library:
              nested: 変更不可、モデルは他のモデルを含む
            license:
              invalid_spdx: は有効なライセンスではない
            path:
              destination_exists: すでに存在している
              nested: 変更不可、モデルは他のモデルを含む。
        model_file:
          attributes:
            filename:
              cannot_change_type: は同じファイルタイプではない
              case_change_only: ケースのみの変更はできない
            presupported_version:
              already_presupported: サポート材付きファイルに設定することはできない。
              not_supported: はサポート材付きファイルではない
    models:
      acts_as_taggable_on/tag:
        few: タグ
        many: タグ
        one: タグ
        other: タグ
        two: タグ
        zero: タグ
      collection:
        few: コレクション
        many: コレクション
        one: コレクション
        other: コレクション
        two: コレクション
        zero: コレクション
      creator:
        few: クリエイター
        many: クリエイター
        one: クリエイター
        other: クリエイター
        two: クリエイター
        zero: クリエイター
      federails/moderation/domain_block:
        few: ドメインブロック
        many: ドメインブロック
        one: ドメインブロック
        other: ドメインブロック
        two: ドメインブロック
        zero: ドメインブロック
      federails/moderation/report:
        few: レポート
        many: レポート
        one: レポート
        other: レポート
        two: レポート
        zero: レポート
      library:
        few: ライブラリー
        many: ライブラリー
        one: ライブラリー
        other: ライブラリー
        two: ライブラリー
        zero: ライブラリー
      link:
        few: リンク
        many: リンク
        one: リンク
        other: リンク
        two: リンク
        zero: リンク
      model:
        few: モデル
        many: モデル
        one: モデル
        other: モデル
        two: モデル
        zero: モデル
      model_file:
        few: ファイル
        many: ファイル
        one: ファイル
        other: ファイル
        two: ファイル
        zero: ファイル
      problem:
        few: 問題点
        many: 問題点
        one: 問題点
        other: 問題点
        two: 問題点
        zero: 問題点
      user:
        few: アカウント
        many: アカウント
        one: アカウント
        other: アカウント
        two: アカウント
        zero: アカウント
  activity:
    index:
      description: "%{retention_period}]以降のエントリーは破棄される"
      message: メッセージ
      name: 名称
      time: いつ
      title: 最近の活動
  activity_helper:
    status_icon:
      completed: 完全
      error: エラーが発生しました
      queued: キュー入り
      working: 作働中
  application:
    caber_relation_fields:
      delete: 削除
      permissions:
        edit: 編集可
        own: オーナー（閲覧、編集、削除、共有が可能）
        preview:
        view: 閲覧のみ
      subject:
        placeholder: メールアドレス、アカウント名、または役割
        role:
          member: ログインしているローカルアカウント
          public: 全員（ログインなし）
        you: "(あなた)"
    caber_relations_form:
      add: 許可を追加する
      permissions: シェアリング
    demo_mode: このインスタンスはデモモードです。モデルの追加や削除はできませんが、それ以外のことはすべてできます。
    filters_card:
      missing_tags: タグの欠落
      remove_collection_filter: コレクションフィルターを削除する
      remove_creator_filter: クリエイターフィルターを削除する
      remove_library_filter: ライブラリーフィルタを削除する
      remove_missing_tag_filter: タグの欠落フィルターを削除する
      remove_search_filter: 検索フィルターを削除する
      remove_tag_filter: タグフィルターを削除する
      search: 検索
      title: フィルター
      unknown: 不明
    footer:
      about: このインスタンスについて
      api: APIについて
      by_html: <a href="https://floppy.org.uk" target="_blank">Jamesが</a>設計し、<a href="https://github.com/manyfold3d/manyfold/graphs/contributors" target="_blank">我々の貢献者の</a>助けを借りて作り上げました。
      community: コミュニティに参加する
      instance_heading: インスタンスの詳細
      issues: 問題を報告する
      open_source_html: <a href="https://github.com/manyfold3d/manyfold/blob/main/LICENSE.md" target="_blank" rel="license">MITライセンスの</a><a href="https://github.com/manyfold3d/manyfold" target="_blank">オープンソース</a>です。
      powered_by_html: 概要 <a href="https://manyfold.app">[%{name}］</a>
      sponsor: 発明をスポンサー
      support: インスタンスをスポンサー
      version: バージョン
    link_fields:
      url:
        delete: 削除
        placeholder: 関連ウェブページ
    links_form:
      add: リンク追加
    navbar:
      account: 設定
      activity: アクティビティ
      check_existing: 既存モデルの再スキャン
      home: ホームページ
      log_in: ログイン
      log_out: ログアウト
      navbar:
        toggler:
          label: ナビゲーションをトグル
      scan: スキャン
      scan_changes: 変更をスキャンする
      scanning: スキャン中
      search: 検索
      settings: サイト設定
      upload: アップロード
    order_buttons:
      sort:
        name: 名前順
        time: 時間順
    search_error:
    tag_list:
      unrelated_tag_count:
        one: "%{count} 関連性のないタグは非表示"
        other: "%{count} 関連性のないタグは非表示"
    tagline: 3Dプリントファイルの管理
    tags_card:
      skip_tags: タグリストをスキップする
    title: Manyfold
  components:
    altcha_widget:
      help:
    copy_button:
      copy:
    download_button:
      download:
        missing: ダウンロードをリクエスト
        preparing: ダウンロード準備中です。お待ちしてください。
        ready: ダウンロード準備完了
      file_type: "%{type} ファイルのみ"
      label: すべてダウンロード
      menu_header: ダウンロードオプション
      supported: サポート材無しのみ
      unsupported: サポート材付きのみ
    follow_button:
      follow: "%{name}]をフォローする"
      pending: リクエストされた
      unfollow: "%{name}]のフォローを解除する"
    modal:
      close: 閉じる
    model_card:
      delete_button:
        label: モデル%{name}を削除
        text: 削除
      edit_button:
        label: モデル%{name}を編集する
        text: 編集
      no_preview: プレビュー不可
      open_button:
        label: モデル%{name}を開く
        text: 開く
    search_help:
      boolean: "「or」を使用して、いずれかの用語に一致するモデルを検索します。"
      federation:
      filename: 特定のファイル名を検索することもできます。
      intro: パワフルな検索構文で必要なものを見つけよう：
      more_details_html: 詳しくは、<a href="https://github.com/wvanbergen/scoped_search/wiki/Query-language">scoped_searchのクエリー</a>言語の完全なドキュメントをお読みください。
      negation: 用語を除外するには、「not」、「!」、「or」を使用する。
      parentheses: より複雑なロジックの組み合わせのために、用語を括弧でグループ化する。
      quotes: 1つの用語で複数の単語を検索するには、引用符を使用します。
      simple: デフォルトでは、すべての条件に一致するモデルを検索します。
      specific_fields: いくつかの特定のフィールドから用語を探すことができる。フィールドの一部にマッチする場合は「~」を、全体にマッチする場合は「=」を使用する。
      tag: 特定のタグを持つモデルを検索する
      title: 検索構文
      unset: 特定のフィールドがセットされているかどうかを調べるには 「set?」を使い、その反対を調べるには 「not」を加える。
      without_tag: 特定のタグがないモデルを見つけるには「！」
  doorkeeper:
    applications:
      buttons:
        authorize: 認証
        cancel: キャンセル
        destroy: 削除
        edit: 編集
        submit: 登録
      confirmations:
        destroy: 本当に削除しますか？
      edit:
        title: アプリケーションの編集
      form:
        error: おっと！フォームにエラーがないか確認してください
      help:
        blank_redirect_uri: リダイレクトURIを必要としないクライアントクレデンシャル、リソースオーナークレデンシャル、その他のグラントタイプの場合は空白のままにします。
        confidential: クライアントシークレットの機密を保持できるアプリケーションで使われます。
        redirect_uri: URIごとに1行で入力してください
        scopes: 各スコープをスペースで区切ってください。初期設定のスコープを使用する場合は、空白のままにしてください。
      index:
        actions: 行動
        callback_url: コールバックURL
        confidential: 機密？
        confidentiality:
          'no': いいえ
          'yes': はい
        name: 名称
        new: 新しいアプリケーション
        title: アプリケーション
      new:
        title: アプリケーションの作成
      show:
        actions: アクション
        application_id: アプリケーションID
        callback_urls: コールバックURL
        confidential: 機密
        not_defined:
        scopes: スコープ
        secret: シークレット
        secret_hashed:
        title: 'アプリケーション: %{name}'
    authorizations:
      buttons:
        authorize: 承認
        deny: 否認
      error:
        title: エラーが発生しました
      form_post:
        title:
      new:
        able_to: このアプリケーションは次のことが可能です
        prompt: あなたのアカウントで %{client_name} を承認しますか？
        title: 承認が必要です
      show:
        title: 認可コード
    authorized_applications:
      buttons:
        revoke: 取消
      confirmations:
        revoke: 本当に取消しますか？
      index:
        application: アプリケーション
        created_at: 作成日時
        date_format: "%Y年%m月%d日 %H:%M:%S"
        title: あなたの認証されたアプリケーション
    errors:
      messages:
        access_denied: リソースオーナーもしくは認可サーバがリクエストを拒否しました。
        admin_authenticator_not_configured: Doorkeeper.configure.admin_authenticator being unconfigured が設定されていないため、管理者パネルへのアクセスが禁止されています。
        credential_flow_not_configured: Doorkeeper.configure.resource_owner_from_credentials が設定されていないため、リソースオーナーパスワードクレデンシャルフローは失敗しました。
        forbidden_token:
          missing_scope:
        invalid_client: クライアントが不明か、クライアント認証が含まれていないか、もしくは認証メソッドがサポートされていないため、クライアント認証は失敗しました。
        invalid_code_challenge_method:
          one:
          other:
          zero:
        invalid_grant: 指定された認可グラントは無効か、有効期限切れか、リダイレクトURIが異なるか、もしくは別のクライアントに適用されています。
        invalid_redirect_uri: 含まれるリダイレクトURIが正しくありません。
        invalid_request:
          invalid_code_challenge:
          missing_param: '必須パラメーターが不足しています: %{value}'
          request_not_authorized: リクエストは認可が必要です。リクエストを認可するための必須パラメータが不足しているか無効です。
          unknown: 必須パラメータが不足しているか、サポートされていないパラメータが含まれているか、もしくはパラメータが無効であるため、リクエストを処理できませんでした。
        invalid_scope: 指定されたスコープが無効か、不明か、もしくは正しくありません。
        invalid_token:
          expired: アクセストークンの有効期限が切れました
          revoked: アクセストークンが取り消されました
          unknown: アクセストークンが無効です
        resource_owner_authenticator_not_configured: Doorkeeper.configure.resource_owner_authenticator が設定されていないため、リソースオーナーの取得に失敗しました。
        revoke:
          unauthorized: このトークンを無効化する権限がありません
        server_error: 予期せぬ事態が発生したため、認可サーバはリクエストを処理できませんでした。
        temporarily_unavailable: 認可サーバが一時的に高負荷な状態にあるか、もしくはメンテナンス中であるため、リクエストを処理できません。
        unauthorized_client: クライアントはこのメソッドを用いたリクエストを実行する権限がありません。
        unsupported_grant_type: この認可グラントのタイプは認可サーバではサポートされていません。
        unsupported_response_mode:
        unsupported_response_type: 認可サーバは指定されたレスポンスタイプをサポートしていません。
    flash:
      applications:
        create:
          notice: アプリケーションが作成されました。
        destroy:
          notice: アプリケーションが削除されました。
        update:
          notice: アプリケーションが更新されました。
      authorized_applications:
        destroy:
          notice: アプリケーションが取消されました。
    layouts:
      admin:
        nav:
          applications: アプリケーション
          home: ホーム
          oauth2_provider: OAuth2 プロバイダー
        title: Doorkeeper
      application:
        title: OAuth認証が必要です
    pre_authorization:
      status: Pre-authorization
  doorkeeper_applications:
    create:
      failure:
      success:
    destroy:
      success:
    edit:
      title: アプリケーションの編集
    form:
      confidential:
        help:
      redirect_uri:
        help:
      scopes:
        label: スコープ
      submit:
    index:
      description:
      new:
      title:
    new:
      title:
    show:
      destroy:
      edit: 編集
      title:
    update:
      failure:
      success:
  follows:
    actor_table:
      actions:
      address:
      name:
      non_manyfold_account:
    follow_remote_actor:
      followed:
    index:
      followers:
      following:
      title:
    new:
      help:
      no_results:
      results:
      title:
    remote_follow:
      help:
      no_results_html:
      placeholder:
      submit:
      title:
    search_form:
      placeholder:
      submit:
    unfollow_remote_actor:
      unfollowed:
  general:
    delete:
    download:
    edit:
    expand:
    followers:
      few:
      many:
      one:
      other:
      two:
      zero:
    menu:
    new:
    public:
    report:
    save:
    view:
  home:
    activity:
      created:
      updated:
    browsing:
      content:
      manual_link:
      more_access:
      title:
    federation:
      content_html:
      following:
      handle_html:
      title:
    index:
      no_activities:
      open_search_help:
      recent_activity:
      search:
        placeholder:
        submit:
    publishing:
      content:
      new_creator:
        button:
        content:
      title:
    support:
      content:
      manyfold_html:
      support_link: インスタンスをスポンサー
      title:
    uploading:
      how_to_upload:
      permissions:
        edit:
        member:
        private:
      title:
      upload: アップロード
    welcome:
      lead:
      title:
  jobs:
    activity:
      collection_published:
        comment:
      model_collected:
        comment:
      model_published:
        comment:
      updated_model:
        comment:
    analysis:
      analyse_model_file:
        detect_duplicates:
        detect_ineffiency:
        file_statistics:
        matching:
      file_conversion:
        exporting:
        loading_mesh:
      geometric_analysis:
        direction_check:
        loading_mesh:
        manifold_check:
    scan:
      check_all:
        queueing_model_checks:
        removing_orphaned_problems:
      detect_filesystem_changes:
        building_filename_list:
        building_folder_list:
        creating_models:
  kaminari:
    first_page:
      label:
    last_page:
      label:
    next_page:
      label:
    page:
      current_page:
      label:
    paginator:
      label:
    prev_page:
      label:
  layouts:
    application:
      alert:
        danger:
        info:
      skip_to_content:
    card_list_page:
      actions_heading:
    settings:
      activeadmin:
      appearance:
      downloads:
      libraries:
      organization:
      performance:
      pghero:
      sidekiq:
      site_settings_title:
      tools_heading:
  licenses:
    CC-BY-40:
    CC-BY-NC-40:
    CC-BY-NC-ND-40:
    CC-BY-NC-SA-40:
    CC-BY-ND-40:
    CC-BY-SA-40:
    CC-PDDC:
    CC0-10:
    LicenseRef-Commercial:
    MIT:
  moderator_mailer:
    new_approval:
      greeting: こんにちは！
      message:
      subject:
    new_report:
      greeting: こんにちは！
      message:
      subject:
  renderer:
    errors:
      canvas:
      load:
      webglrenderer:
    load:
    processing: スプラインを網状にしています
  reports:
    create:
      success:
    new:
      description:
      submit:
      title:
  security:
    running_as_root_html:
  sites:
    cgtrader: CGTrader
    comicsgamesandthings: Comics, Games, and Things
    cults3d: Cults3D
    github: GitHub
    makerworld: MakerWorld
    manyfold: Manyfold
    myminifactory: MyMiniFactory
    printables: Printables
    thangs: Thangs
    theminiindex: The Mini Index
    thingiverse: Thingiverse
    yeggi: yeggi
  user_mailer:
    account_approved:
      greeting: こんにちは！
      message: アカウントが承認されました。%{link}でサインインできます。
      subject: アカウント承認
    test_email:
      subject: テストメール
      test_email_message: テストメール
  users:
    registrations:
      create:
        altcha_failed:
  views:
    pagination:
      first: "&laquo; 最初"
      last: 最後 &raquo;
      next: 次 &rsaquo;
      previous: "&lsaquo; 前"
      truncate: "&hellip;"
</file>

<file path="config/locales/nl.yml">
---
nl:
  activerecord:
    attributes:
      collection:
        caption: Onderschrift
        collection: Collectie
        name: Naam
        notes: Notities
      creator:
        caption: Tagline
        name: Naam
        notes: Beschrijving
        slug:
      doorkeeper/application:
        access_token:
        confidential: Confidentieel
        created_at:
        name: Naam
        owner:
        redirect_uri: Redirect URI
        scopes: Scopes
        secret:
        uid:
      federails/moderation/domain_block:
        created_at: Aangemaakt op
        domain: Domein
      federails/moderation/report:
        content: Opmerking
        created_at: Ontvangen op
        federails_actor: Gerapporteerd door
        object: Object
      library:
        caption: Onderschrift
        create_path_if_not_on_disk:
        default:
        icon: Icoon
        name: Naam
        notes: Notities
        path: Pad
        s3_access_key_id: Toegangssleutel ID
        s3_bucket: Bucket Naam
        s3_endpoint: Endpoint URL
        s3_path_style:
        s3_region: Regio
        s3_secret_access_key: Geheime Toegangssleutel
        storage_service: Opslagservice
        tag_regex: Vereiste Tags
      link:
        url: Link
      model:
        caption: Onderschrift
        collection_id: Collectie
        creator_id: Maker
        library_id: Bibliotheek
        license: Licentie
        name: Naam
        notes: Beschrijving
        path: Pad
        preview_file: Voorbeeldbestand
        sensitive: Gevoelige Inhoud
        tags: Tags
      model_file:
        caption: Onderschrift
        digest: Digest
        filename: Bestandsnaam
        model_id: Model
        notes: Notities
        presupported: Voorondersteund
        presupported_version: Voorondersteunde versie
        printed: Afgedrukt
        size: Bestandsgrootte
        unsupported_version: Niet-ondersteunde versie
        y_up: Y Omhoog
      problem:
        category: Categorie
        ignored: Verborgen
        note: Notitie
        problematic_type: Objecttype
        severity: Ernst
      user:
        approved: Account in behandeling
        confirmation_sent_at: Bevestiging verzonden op
        confirmation_token: Bevestigingstoken
        confirmed_at: Bevestigd op
        created_at: Aangemaakt op
        current_password: Huidig wachtwoord
        current_sign_in_at: Huidige inlogtijd
        current_sign_in_ip: Huidig inlog IP
        email: E-mail
        encrypted_password: Versleuteld wachtwoord
        failed_attempts: Mislukte pogingen
        last_sign_in_at: Laatste inlogtijd
        last_sign_in_ip: Laatste inlog IP
        locked_at: Vergrendeld op
        password: Wachtwoord
        password_confirmation: Bevestig wachtwoord
        remember_created_at: Onthouden aangemaakt op
        remember_me: Onthoud mij
        reset_password_sent_at: Wachtwoord reset verzonden op
        reset_password_token: Wachtwoord reset token
        sign_in_count: Aantal keer ingelogd
        unconfirmed_email: Onbevestigde e-mail
        unlock_token: Ontgrendelingstoken
        updated_at: Bijgewerkt op
        username:
    errors:
      models:
        collection:
          attributes:
            collection:
              private:
            creator:
              private:
        doorkeeper/application:
          attributes:
            redirect_uri:
              forbidden_uri: is forbidden by the server.
              fragment_present: kan geen fragment bevatten.
              invalid_uri: moet een geldige URI zijn.
              relative_uri: moet een absolute URI zijn.
              secured_uri: moet een HTTPS/SSL URI zijn.
              unspecified_scheme: moet een schema specificeren.
            scopes:
              not_match_configured: komt niet overeen met server configuratie.
        library:
          attributes:
            path:
              cannot_be_contained:
              cannot_contain:
              non_writable: moet schrijfbaar zijn
              not_found: kon niet worden gevonden op schijf
              unsafe: kan geen bevoorrecht systeempad zijn
        model:
          attributes:
            creator:
              private:
            library:
              nested: kan niet worden gewijzigd, model bevat andere modellen
            license:
              invalid_spdx: is geen geldige licentie
            path:
              destination_exists: bestaat al
              nested: kan niet worden gewijzigd, model bevat andere modellen
        model_file:
          attributes:
            filename:
              cannot_change_type: is niet hetzelfde bestandstype
              case_change_only: kan niet alleen hoofdletters/kleine letters wijzigen
            presupported_version:
              already_presupported: kan niet worden ingesteld op een voorondersteund bestand
              not_supported: is geen voorondersteund bestand
    models:
      acts_as_taggable_on/tag:
        few: Tags
        many: Tags
        one: Tag
        other: Tags
        two: Tags
        zero: Tags
      collection:
        few: Collecties
        many: Collecties
        one: Collectie
        other: Collecties
        two: Collecties
        zero: Collecties
      creator:
        few: Makers
        many: Makers
        one: Maker
        other: Makers
        two: Makers
        zero: Makers
      federails/moderation/domain_block:
        few: Domeinblokkeringen
        many: Domeinblokkeringen
        one: Domeinblokkering
        other: Domeinblokkeringen
        two: Domeinblokkeringen
        zero: Domeinblokkeringen
      federails/moderation/report:
        few: Meldingen
        many: Meldingen
        one: Melding
        other: Meldingen
        two: Meldingen
        zero: Meldingen
      library:
        few: Bibliotheken
        many: Bibliotheken
        one: Bibliotheek
        other: Bibliotheken
        two: Bibliotheken
        zero: Bibliotheken
      link:
        few: Links
        many: Links
        one: Link
        other: Links
        two: Links
        zero: Links
      model:
        few: Modellen
        many: Modellen
        one: Model
        other: Modellen
        two: Modellen
        zero: Modellen
      model_file:
        few: Bestanden
        many: Bestanden
        one: Bestand
        other: Bestanden
        two: Bestanden
        zero: Bestanden
      problem:
        few: Problemen
        many: Problemen
        one: Probleem
        other: Problemen
        two: Problemen
        zero: Problemen
      user:
        few: Gebruikers
        many: Gebruikers
        one: Gebruiker
        other: Gebruikers
        two: Gebruikers
        zero: Gebruikers
  activity:
    index:
      description: Items worden verwijderd na %{retention_period}.
      message: Bericht
      name: Naam
      time: Wanneer
      title: Recente Activiteit
  activity_helper:
    status_icon:
      completed: Voltooid
      error: Fout
      queued: In wachtrij
      working: Bezig
  application:
    caber_relation_fields:
      delete: Verwijderen
      permissions:
        edit: Kan bewerken
        own: Eigenaar (kan bekijken, bewerken, verwijderen en delen)
        preview:
        view: Alleen bekijken
      subject:
        placeholder: E-mailadres, gebruikersnaam of rol
        role:
          member: Elke ingelogde lokale gebruiker
          public: Iedereen (zonder inloggen)
        you: "(jij)"
    caber_relations_form:
      add: nog een machtiging toevoegen
      permissions: Delen
    demo_mode: Deze instantie staat in demomodus. Je kunt geen modellen toevoegen of verwijderen, maar je kunt wel alles anders doen.
    filters_card:
      missing_tags: Ontbrekende tags
      remove_collection_filter: Collectiefilter verwijderen
      remove_creator_filter: Makerfilter verwijderen
      remove_library_filter: Bibliotheekfilter verwijderen
      remove_missing_tag_filter: Filter voor ontbrekende tag verwijderen
      remove_search_filter: Zoekfilter verwijderen
      remove_tag_filter: Tagfilter verwijderen
      search: Zoeken
      title: Filters
      unknown: Onbekend
    footer:
      about:
      api:
      by_html: Ontworpen en gebouwd door <a href="https://floppy.org.uk" target="_blank">James</a> met hulp van <a href="https://github.com/manyfold3d/manyfold/graphs/contributors" target="_blank">onze bijdragers</a>.
      community:
      instance_heading:
      issues: Problemen
      open_source_html: Open Source onder de <a href="https://github.com/manyfold3d/manyfold/blob/main/LICENSE.md" target="_blank" rel="license">MIT-licentie</a>.
      powered_by_html:
      sponsor: Sponsor
      support:
      version: Versie
    link_fields:
      url:
        delete: Verwijderen
        placeholder: Elke gerelateerde webpagina
    links_form:
      add: nog een link toevoegen
    navbar:
      account: Mijn Instellingen
      activity: Activiteit
      check_existing: Bestaande modellen controleren
      home: Startpagina
      log_in: Inloggen
      log_out: Uitloggen
      navbar:
        toggler:
          label: Navigatie in-/uitklappen
      scan: Scannen
      scan_changes: Scannen op wijzigingen
      scanning: Bezig met scannen
      search: Zoeken
      settings: Site-instellingen
      upload: Uploaden
    order_buttons:
      sort:
        name: Sorteren op Naam
        time: Sorteren op Tijd
    search_error:
    tag_list:
      unrelated_tag_count:
        one: "%{count} ongerelateerde tag verborgen"
        other: "%{count} ongerelateerde tags verborgen"
    tagline: Helpt je je 3D-printbestanden bij te houden
    tags_card:
      skip_tags: Taglijst overslaan
    title: Manyfold
  components:
    altcha_widget:
      help:
    copy_button:
      copy:
    download_button:
      download:
        missing:
        preparing:
        ready:
      file_type: Alleen %{type} Bestanden
      label: Alles Downloaden
      menu_header: Download Opties
      supported: Alleen Ondersteunde Bestanden
      unsupported: Alleen Niet-ondersteunde Bestanden
    follow_button:
      follow: Volg %{name}
      pending:
      unfollow: Ontvolg %{name}
    modal:
      close:
    model_card:
      delete_button:
        label: Verwijder model %{name}
        text: Verwijderen
      edit_button:
        label: Bewerk model %{name}
        text: Bewerken
      no_preview: Geen voorbeeld beschikbaar
      open_button:
        label: Open model %{name}
        text: Openen
    search_help:
      boolean:
      federation:
      filename:
      intro:
      more_details_html:
      negation:
      parentheses:
      quotes:
      simple:
      specific_fields:
      tag:
      title:
      unset:
      without_tag:
  doorkeeper:
    applications:
      buttons:
        authorize: Authoriseren
        cancel: Annuleren
        destroy: Verwijderen
        edit: Bewerken
        submit: Opslaan
      confirmations:
        destroy: Weet je het zeker?
      edit:
        title: Bewerk applicatie
      form:
        error: Oops! Controleer het formulier op fouten
      help:
        blank_redirect_uri: Laat het leeg indien u uw provider heeft geconfigureerd voor het gebruik van Client Credentials, Resource Owner Password Credentials of een ander type authorisatie dat geen omleiding van URI vereist.
        confidential: Toepassing zal worden gebruikt waar de client secret vertrouwelijk kan worden gehouden. Native mobile apps en Single Page Apps worden beschouwd als niet-vertrouwelijk.
        redirect_uri: 'Gebruik één regel per URI. '
        scopes: Scheid scopes met spaties. Laat leeg om de standaard scopes te gebruiken.
      index:
        actions: Actions
        callback_url: Callback URL
        confidential: Confidential?
        confidentiality:
          'no': Nee
          'yes': Ja
        name: Naam
        new: Nieuwe applicatie
        title: Jouw applicaties
      new:
        title: Nieuwe applicatie
      show:
        actions: Acties
        application_id: Applicatie UID
        callback_urls: Callback urls
        confidential: Confidentieel
        not_defined:
        scopes: Scopes
        secret: Secret
        secret_hashed:
        title: 'Applicatie: %{name}'
    authorizations:
      buttons:
        authorize: Authoriseren
        deny: Weigeren
      error:
        title: Er is een fout opgetreden
      form_post:
        title:
      new:
        able_to: Deze applicatie zal in staat zijn om
        prompt: "%{client_name} authoriseren om uw account te gebruiken?"
        title: Authorisatie vereist
      show:
        title: Authorisatie code
    authorized_applications:
      buttons:
        revoke: Intrekken
      confirmations:
        revoke: Weet je het zeker?
      index:
        application: Applicatie
        created_at: Aangemaakt op
        date_format: "%d-%m-%Y %H:%M:%S"
        title: Jouw geauthoriseerde applicaties
    errors:
      messages:
        access_denied: De resource eigenaar of authorisatie-server weigerde het verzoek.
        admin_authenticator_not_configured: Toegang tot het adminpaneel is verboden omdat Doorkeeper.configure.admin_authenticator niet geconfigureerd is.
        credential_flow_not_configured: Resource Owner Password Credentials flow is mislukt doordat Doorkeeper.configure.resource_owner_from_credentials niet geconfigureerd is.
        forbidden_token:
          missing_scope:
        invalid_client: Client verificatie is mislukt door onbekende klant, geen client authenticatie opgegeven, of een niet-ondersteunde authenticatie methode.
        invalid_code_challenge_method:
          one:
          other:
          zero:
        invalid_grant: De verstrekte authorisatie is ongeldig, verlopen, ingetrokken, komt niet overeen met de redirect uri die is opgegeven, of werd uitgegeven aan een andere klant.
        invalid_redirect_uri: De opgegeven redirect uri is niet geldig.
        invalid_request:
          invalid_code_challenge:
          missing_param: 'Ontbrekende vereiste parameter: %{value}.'
          request_not_authorized: Verzoek moet worden geautoriseerd. Vereiste parameter voor het autoriseren van de aanvraag ontbreekt of is ongeldig.
          unknown: Het verzoek mist een vereiste parameter, bevat een niet-ondersteunde parameter waarde of is anderszins onjuist.
        invalid_scope: De opgevraagde scope is niet geldig, onbekend of onjuist.
        invalid_token:
          expired: Het toegangstoken is verlopen
          revoked: Het toegangstoken is geweigerd
          unknown: Het toegangstoken is ongeldig
        resource_owner_authenticator_not_configured: Resource Owner opzoeking mislukt doordat Doorkeeper.configure.resource_owner_authenticator niet is gevonden.
        revoke:
          unauthorized: U bent niet bevoegd om dit token in te trekken...
        server_error: De authorisatie server is een onverwachte voorwaarde tegengekomen die het verzoek verhinderd.
        temporarily_unavailable: De authorisatie-server is momenteel niet in staat het verzoek te behandelen als gevolg van een tijdelijke overbelasting of onderhoud aan de server.
        unauthorized_client: De client is niet bevoegd om dit verzoek met deze methode uit te voeren.
        unsupported_grant_type: Het type authorisatie is niet ondersteund door de authorisatie-server
        unsupported_response_mode:
        unsupported_response_type: De authorisatie server ondersteunt dit response type niet
    flash:
      applications:
        create:
          notice: Applicatie aangemaakt.
        destroy:
          notice: Applicatie verwijderd.
        update:
          notice: Applicatie bewerkt.
      authorized_applications:
        destroy:
          notice: Applicatie ingetrokken.
    layouts:
      admin:
        nav:
          applications: Applicaties
          home: Home
          oauth2_provider: OAuth2 Provider
        title: Doorkeeper
      application:
        title: OAuth authorisatie vereist
    pre_authorization:
      status: Pre-authorization
  doorkeeper_applications:
    create:
      failure:
      success:
    destroy:
      success:
    edit:
      title: Bewerk applicatie
    form:
      confidential:
        help:
      redirect_uri:
        help:
      scopes:
        label: Scopes
      submit:
    index:
      description:
      new:
      title:
    new:
      title:
    show:
      destroy: Verwijderen
      edit: Bewerken
      title:
    update:
      failure:
      success:
  errors:
    messages:
      already_confirmed: was al bevestigd, probeer in te loggen
      confirmation_period_expired: moet binnen %{period} worden bevestigd, vraag een nieuwe aan
      expired: is verlopen, vraag een nieuwe aan
      not_found: niet gevonden
      not_locked: was niet vergrendeld
      not_saved:
        one: '1 fout verhinderde dat deze %{resource} werd opgeslagen:'
        other: "%{count} fouten verhinderden dat deze %{resource} werd opgeslagen:"
      weak_password: niet sterk genoeg. Overweeg een cijfer, symbolen of meer letters toe te voegen om het sterker te maken.
  follows:
    actor_table:
      actions: Acties
      address:
      name: Naam
      non_manyfold_account:
    follow_remote_actor:
      followed: "%{actor} succesvol gevolgd"
    index:
      followers:
      following:
      title:
    new:
      help: Je kunt openbare makers, collecties of modellen op een andere Manyfold-server volgen, eigenlijk elk openbaar account in het Fediverse! Voer gewoon de accountnaam in het zoekvak in!
      no_results: Sorry, kon niets vinden voor "%{query}". Is het een geldig ActivityPub-account of URL?
      results: Zoekresultaten
      title: Volg het Fediverse
    remote_follow:
      help: Je hebt geen account nodig op deze server om %{name} te volgen; voer hier je eigen accountnaam in, en we sturen je terug naar je eigen server om het proces te voltooien.
      no_results_html: We konden je thuisaccount niet vinden; heb je het correct ingevoerd?
      placeholder: Je Fediverse-gebruikersnaam, bijv. manyfold@3dp.chat
      submit: Breng me naar huis
      title: Volg %{name}
    search_form:
      placeholder:
      submit: Zoeken
    unfollow_remote_actor:
      unfollowed:
  general:
    delete: Verwijderen
    download: Downloaden
    edit: Bewerken
    expand: Uitvouwen
    followers:
      few:
      many:
      one:
      other:
      two:
      zero:
    menu: Menu
    new: Nieuw
    public:
    report: Rapporteer %{type}
    save: Opslaan
    view: Bekijken
  home:
    activity:
      created:
      updated:
    browsing:
      content:
      manual_link:
      more_access:
      title:
    federation:
      content_html:
      following:
      handle_html:
      title:
    index:
      no_activities: Er zijn momenteel geen activiteiten om weer te geven.
      open_search_help:
      recent_activity: Recente Activiteit
      search:
        placeholder: Waar zoek je naar?
        submit: Zoeken
    publishing:
      content:
      new_creator:
        button:
        content:
      title:
    support:
      content:
      manyfold_html:
      support_link:
      title:
    uploading:
      how_to_upload:
      permissions:
        edit:
        member:
        private:
      title:
      upload: Uploaden
    welcome:
      lead:
      title:
  jobs:
    activity:
      collection_published:
        comment:
      model_collected:
        comment:
      model_published:
        comment:
      updated_model:
        comment:
    analysis:
      analyse_model_file:
        detect_duplicates: Dubbele bestanden detecteren
        detect_ineffiency: Inefficiënte formaten detecteren
        file_statistics: Bestandsstatistieken berekenen
        matching: Ondersteunde bestanden matchen
      file_conversion:
        exporting: Nieuw bestand exporteren
        loading_mesh: Mesh laden
      geometric_analysis:
        direction_check: Oppervlakteoriëntatie controleren
        loading_mesh: Mesh laden
        manifold_check: Controleren of mesh manifold is
    scan:
      check_all:
        queueing_model_checks: Modelcontroles in wachtrij plaatsen
        removing_orphaned_problems: Verweesde problemen verwijderen
      detect_filesystem_changes:
        building_filename_list: Bestandslijst opbouwen
        building_folder_list: Lijst met gewijzigde mappen opbouwen
        creating_models: Modellen aanmaken
  kaminari:
    first_page:
      label: Ga naar eerste pagina
    last_page:
      label: Ga naar laatste pagina
    next_page:
      label: Ga naar volgende pagina
    page:
      current_page: Huidige pagina
      label: Ga naar pagina %{page}
    paginator:
      label: Paginanavigatie
    prev_page:
      label: Ga naar vorige pagina
  layouts:
    application:
      alert:
        danger: Gevaar
        info: Info
      skip_to_content: Ga naar hoofdinhoud
    card_list_page:
      actions_heading: Acties
    settings:
      activeadmin: Geavanceerd Beheer
      appearance:
      downloads:
      libraries: Bibliotheken
      organization: Organisatie
      performance: Prestatie Dashboard
      pghero: PgHero
      sidekiq: Sidekiq
      site_settings_title: Site-instellingen
      tools_heading: Geavanceerde Tools
  licenses:
    CC-BY-40: Creative Commons Naamsvermelding
    CC-BY-NC-40: Creative Commons Naamsvermelding NietCommercieel
    CC-BY-NC-ND-40: Creative Commons Naamsvermelding NietCommercieel GeenAfgeleideWerken
    CC-BY-NC-SA-40: Creative Commons Naamsvermelding NietCommercieel GelijkDelen
    CC-BY-ND-40: Creative Commons Naamsvermelding GeenAfgeleideWerken
    CC-BY-SA-40: Creative Commons Naamsvermelding GelijkDelen
    CC-PDDC: Creative Commons Publiek Domein Verklaring
    CC0-10: Creative Commons Zero
    LicenseRef-Commercial: Commercieel; alleen privégebruik
    MIT: MIT
  moderator_mailer:
    new_approval:
      greeting: Hoi!
      message:
      subject:
    new_report:
      greeting: Hoi!
      message:
      subject:
  renderer:
    errors:
      canvas: 'Kon #webgl canvas niet vinden!'
      load: Laadfout
      webglrenderer: Kon renderer niet maken!
    load: Laden
    processing: Splines herberekenen...
  reports:
    create:
      success: Melding ingediend. Bedankt!
    new:
      description: Als dit item wetten of serverbeleid schendt, kun je het melden aan onze moderators. Voeg een opmerking toe om ons te laten weten waarom!
      submit: Melding versturen
      title: 'Rapporteer %{type}: "%{name}"'
  security:
    running_as_root_html: Manyfold draait als root, wat een beveiligingsrisico is. Draai als een andere systeemgebruiker door de <code>PUID</code> en <code>PGID</code> omgevingsvariabelen in te stellen. Zie <a href='https://manyfold.app/sysadmin/configuration.html#required'>de configuratiedocumentatie</a> voor details.
  sites:
    cgtrader: CGTrader
    comicsgamesandthings: Comics, Games, and Things
    cults3d: Cults3D
    github:
    makerworld:
    manyfold: Manyfold
    myminifactory: MyMiniFactory
    printables:
    thangs:
    theminiindex: The Mini Index
    thingiverse: Thingiverse
    yeggi:
  user_mailer:
    account_approved:
      greeting: Hoi!
      message: Je account is goedgekeurd; je kunt nu inloggen op %{link}.
      subject: Account goedgekeurd
    test_email:
      subject: Testmail
      test_email_message: Testmail
  users:
    registrations:
      create:
        altcha_failed:
  views:
    pagination:
      first: "« Eerste"
      last: Laatste »
      next: Volgende ›
      previous: "‹ Vorige"
      truncate: "…"
</file>

<file path="config/locales/pl.yml">
---
pl:
  activerecord:
    attributes:
      collection:
        caption: Napis
        collection: Kolekcja
        name: Nazwa
        notes: Notatki
      creator:
        caption: Napis
        name: Nazwa
        notes: Opis
        slug:
      doorkeeper/application:
        access_token:
        confidential: Poufne
        created_at: Utworzony
        name: Nazwa
        owner: Właściciel
        redirect_uri: Przekierowanie URI
        scopes:
        secret:
        uid:
      federails/moderation/domain_block:
        created_at: Data utworzenia
        domain: Domena
      federails/moderation/report:
        content: Komentarz
        created_at:
        federails_actor: Zgłoszone przez
        object: Obiekt
      library:
        caption: Napis
        create_path_if_not_on_disk: Automatycznie twórz folder
        default: Domyślne
        icon: Ikona
        name: Nazwa
        notes: Notatki
        path: Ścieżka
        s3_access_key_id:
        s3_bucket:
        s3_endpoint:
        s3_path_style:
        s3_region: Region
        s3_secret_access_key:
        storage_service: Usługa przechowywania plików
        tag_regex: Wymagane Tagi
      link:
        url: Link
      model:
        caption: Napis
        collection_id: Kolekcja
        creator_id: Twórca
        library_id: Biblioteka
        license: Licencja
        name: Nazwa
        notes: Opis
        path: Ścieżka
        preview_file: Podgląd pliku
        sensitive: Wrażliwa Treść
        tags: Tagi
      model_file:
        caption: Napis
        digest:
        filename: Nazwa pliku
        model_id: Model
        notes: Notatki
        presupported:
        presupported_version:
        printed: Wydrukowane
        size: Rozmiar pliku
        unsupported_version: Niewspierana wersja
        y_up:
      problem:
        category: Kategoria
        ignored: Ukryte
        note: Notatka
        problematic_type: Typ Obiektu
        severity: Ważność
      user:
        approved:
        confirmation_sent_at: Data wysłania potwierdzenia
        confirmation_token: Token potwierdzający
        confirmed_at: Data potwierdzenia
        created_at: Data utworzenia
        current_password: Aktualne hasło
        current_sign_in_at: Data bieżącego logowania
        current_sign_in_ip: Bieżący adres IP
        email: Adres e-mail
        encrypted_password: Zaszyfrowane hasło
        failed_attempts: Nieudanych prób
        last_sign_in_at: Data ostatniego logowania
        last_sign_in_ip: Adres IP ostatniego logowania
        locked_at: Data zablokowania
        password: Hasło
        password_confirmation: Potwierdź hasło
        remember_created_at: Data utworzenia zapamiętania logowania
        remember_me: Zapamiętaj mnie
        reset_password_sent_at: Data wysłania żądania resetu hasła
        reset_password_token: Token umożliwiający reset hasła
        sign_in_count: Liczba logowań
        unconfirmed_email: Niepotwierdzony adres e-mail
        unlock_token: Token odblokowywujący
        updated_at: Data uaktualnienia
        username:
    errors:
      models:
        collection:
          attributes:
            collection:
              private:
            creator:
              private:
        doorkeeper/application:
          attributes:
            redirect_uri:
              forbidden_uri: jest zabronione przez serwer.
              fragment_present: nie może zawierać fragmentu.
              invalid_uri:
              relative_uri:
              secured_uri:
              unspecified_scheme:
            scopes:
              not_match_configured:
        library:
          attributes:
            path:
              cannot_be_contained: nie może znajdować się wewnątrz innej biblioteki
              cannot_contain: nie może zawierać innych bibliotek
              non_writable:
              not_found: nie można znaleźć na dysku
              unsafe:
        model:
          attributes:
            creator:
              private:
            library:
              nested: nie można zmienić, model zawiera inne modele
            license:
              invalid_spdx: nie jest poprawną licencją
            path:
              destination_exists: już istnieje
              nested: nie można zmienić, model zawiera inne modele
        model_file:
          attributes:
            filename:
              cannot_change_type: nie jest plikiem tego samego typu
              case_change_only: nie może być zmianą wyłącznie wielkości liter
            presupported_version:
              already_presupported:
              not_supported:
    models:
      acts_as_taggable_on/tag:
        few: Tagi
        many: Tagów
        one: Tag
        other: Tagi
        two:
        zero:
      collection:
        few: Kolekcje
        many: Kolekcji
        one: Kolekcja
        other: Kolekcje
        two:
        zero:
      creator:
        few: Twórców
        many: Twórców
        one: Twórca
        other: Twórcy
        two:
        zero:
      federails/moderation/domain_block:
        few: Bloki domen
        many: Bloków domen
        one: Blok domeny
        other: Bloki domen
        two:
        zero:
      federails/moderation/report:
        few: Zgłoszenia
        many: Zgłoszeń
        one: Zgłoszenie
        other: Zgłoszenia
        two:
        zero:
      library:
        few: Biblioteki
        many: Bibliotek
        one: Biblioteka
        other: Biblioteki
        two:
        zero:
      link:
        few: Linki
        many: Linków
        one: Link
        other: Linki
        two:
        zero:
      model:
        few: Modele
        many: Modeli
        one: Model
        other: Modele
        two:
        zero:
      model_file:
        few: Pliki
        many: Plików
        one: Plik
        other: Pliki
        two:
        zero:
      problem:
        few: Problemy
        many: Problemów
        one: Problem
        other: Problemy
        two:
        zero:
      user:
        few: Użytkowników
        many: Użytkowników
        one: Użytkownik
        other: Użytkownicy
        two:
        zero:
  activity:
    index:
      description: Wpisy są odrzucane po %{retention_period}.
      message: Wiadomość
      name: Nazwa
      time: Kiedy
      title: Ostatnia aktywność
  activity_helper:
    status_icon:
      completed: Zakończone
      error: Błąd
      queued: W kolejce
      working: Działa
  application:
    caber_relation_fields:
      delete: Usuń
      permissions:
        edit: Może edytować
        own: Właściciel (może wyświetlać, edytować, usuwać i udostępniać)
        preview:
        view: Wyświetlaj tylko
      subject:
        placeholder: Adres e-mail, nazwa konta albo rola
        role:
          member: Dowolne zalogowane lokalne konto
          public: Wszyscy (bez logowania)
        you: "(ty)"
    caber_relations_form:
      add: dodaj kolejne uprawnienie
      permissions: Udostępnianie
    demo_mode: Ta instancja jest w trybie demonstracyjnym. Nie możesz dodawać ani usuwać modeli, ale możesz robić wszystko inne.
    filters_card:
      missing_tags: Brakujące tagi
      remove_collection_filter: Usuń filtr kolekcji
      remove_creator_filter: Usuń filtr twórcy
      remove_library_filter: Usuń filtr biblioteki
      remove_missing_tag_filter:
      remove_search_filter: Usuń filtr wyszukiwania
      remove_tag_filter: Usuń filtr taga
      search: Wyszukaj
      title: Filtry
      unknown: Nieznany
    footer:
      about: O tej instancji
      api: Poznaj nasze API
      by_html: Zaprojektowany i stworzony przez <a href="https://floppy.org.uk" target="_blank">Jamesa</a> z pomocą od <a href="https://github.com/manyfold3d/manyfold/graphs/contributors" target="_blank">naszych współautorów</a>.
      community: Dołącz do społeczności
      instance_heading: Szczegóły Instancji
      issues: Zgłoś problem
      open_source_html: Projekt <a href="https://github.com/manyfold3d/manyfold" target="_blank">Open Source</a> na <a href="https://github.com/manyfold3d/manyfold/blob/main/LICENSE.md" target="_blank" rel="license">licencji MIT</a>.
      powered_by_html:
      sponsor: Sponsoruj rozwój
      support: Wesprzyj tą instancje
      version: Wersja
    link_fields:
      url:
        delete: Usuń
        placeholder: Dowolna powiązana strona internetowa
    links_form:
      add: dodaj kolejny link
    navbar:
      account: Moje Ustawienia
      activity: Aktywność
      check_existing: Ponownie zeskanuj istniejące modele
      home: Strona główna
      log_in: Zaloguj się
      log_out: Wyloguj się
      navbar:
        toggler:
          label: Przełącz nawigację
      scan: Zeskanuj
      scan_changes: Zeskanuj w poszukiwaniu zmian
      scanning: Skanowanie
      search: Wyszukaj
      settings: Ustawienia Strony
      upload: Prześlij
    order_buttons:
      sort:
        name: Sortuj według nazwy
        time: Sortuj według czasu
    search_error:
    tag_list:
      unrelated_tag_count:
        one: "%{count} niepowiązany tag ukryty"
        other: "%{count} niepowiązanych tagów ukrytych"
    tagline: Pomaga w śledzeniu plików do druku 3D
    tags_card:
      skip_tags: Pomiń listę tagów
    title: Manyfold
  components:
    altcha_widget:
      help:
    copy_button:
      copy: Kopiuj do schowka
    download_button:
      download:
        missing:
        preparing:
        ready: Gotowe do pobrania
      file_type: Tylko Pliki %{type}
      label: Pobierz Wszystko
      menu_header: Opcje Pobierania
      supported: Tylko Obsługiwane Pliki
      unsupported: Tylko Nieobsługiwane Pliki
    follow_button:
      follow: Obserwuj %{name}
      pending: Żądane
      unfollow: Przestań obserwować %{name}
    modal:
      close: Zamknij
    model_card:
      delete_button:
        label: Usuń model %{name}
        text: Usuń
      edit_button:
        label: Edytuj model %{name}
        text: Edytuj
      no_preview: Podgląd jest niedostępny
      open_button:
        label: Otwórz model %{name}
        text: Otwórz
    search_help:
      boolean: Użyj "or", aby znaleźć modele pasujące do któregokolwiek z terminów.
      federation: Wyszukaj dowolną nazwę użytkownika Fediverse, aby ją zaobserwować.
      filename:
      intro:
      more_details_html:
      negation: Aby wykluczyć terminy, użyj "not", "!" lub "-".
      parentheses:
      quotes:
      simple:
      specific_fields:
      tag:
      title: Składnia Wyszukiwania
      unset:
      without_tag:
  doorkeeper:
    applications:
      buttons:
        authorize: Autoryzuj
        cancel: Anuluj
        destroy: Zniszcz
        edit: Edytuj
        submit:
      confirmations:
        destroy: Jesteś pewny?
      edit:
        title: Edytuj aplikację
      form:
        error: Ups! Sprawdź swój formularz pod kątem możliwych błędów
      help:
        blank_redirect_uri:
        confidential:
        redirect_uri:
        scopes:
      index:
        actions: Akcje
        callback_url:
        confidential:
        confidentiality:
          'no': Nie
          'yes': Tak
        name: Nazwa
        new: Nowa Aplikacja
        title: Twoje aplikacje
      new:
        title: Nowa Aplikacja
      show:
        actions: Akcje
        application_id: UID
        callback_urls:
        confidential:
        not_defined: Nie zdefiniowane
        scopes:
        secret: Sekret
        secret_hashed: Zhaszowany sekret
        title: 'Aplikacja: %{name}'
    authorizations:
      buttons:
        authorize: Autoryzuj
        deny: Odmów
      error:
        title: Wystąpił błąd
      form_post:
        title: Prześlij ten formularz
      new:
        able_to: Aplikacja ta będzie w stanie
        prompt: Autoryzować %{client_name} do zkorzystania z twojego konta?
        title: Wymagana autoryzacja
      show:
        title: Kod autoryzacji
    authorized_applications:
      buttons:
        revoke:
      confirmations:
        revoke: Jesteś pewny?
      index:
        application: Aplikacja
        created_at:
        date_format: "%Y-%m-%d %H:%M:%S"
        title: Twoje autoryzowane aplikacje
    errors:
      messages:
        access_denied:
        admin_authenticator_not_configured:
        credential_flow_not_configured:
        forbidden_token:
          missing_scope:
        invalid_client:
        invalid_code_challenge_method:
          one:
          other:
          zero:
        invalid_grant:
        invalid_redirect_uri:
        invalid_request:
          invalid_code_challenge:
          missing_param:
          request_not_authorized:
          unknown:
        invalid_scope:
        invalid_token:
          expired:
          revoked:
          unknown:
        resource_owner_authenticator_not_configured:
        revoke:
          unauthorized:
        server_error:
        temporarily_unavailable:
        unauthorized_client:
        unsupported_grant_type:
        unsupported_response_mode:
        unsupported_response_type:
    flash:
      applications:
        create:
          notice:
        destroy:
          notice:
        update:
          notice:
      authorized_applications:
        destroy:
          notice:
    layouts:
      admin:
        nav:
          applications: Aplikacje
          home: Strona główna
          oauth2_provider: Dostawca OAuth2
        title: Doorkeeper
      application:
        title: Wymagana autoryzacja OAuth
    pre_authorization:
      status:
  doorkeeper_applications:
    create:
      failure:
      success:
    destroy:
      success:
    edit:
      title:
    form:
      confidential:
        help:
      redirect_uri:
        help:
      scopes:
        label:
      submit:
    index:
      description:
      new:
      title:
    new:
      title:
    show:
      destroy: Usuń
      edit: Edytuj
      title:
    update:
      failure:
      success:
  follows:
    actor_table:
      actions: Akcje
      address: Adres Fediverse
      name: Nazwa
      non_manyfold_account: To nie jest konto Manyfold; możesz je zaobserwować, ale prawdopodobnie nic ciekawego się nie stanie, przynajmniej na razie.
    follow_remote_actor:
      followed: Pomyślnie zaczęto obserwować %{actor}
    index:
      followers: Obserwujący
      following: Obserwowane
      title: Połączenia
    new:
      help: Możesz obserwować publicznych twórców, kolekcje lub modele na innym serwerze Manyfold, a nawet każde publiczne konto w Fediversie! Wystarczy, że wpiszesz nazwę konta w polu wyszukiwania!
      no_results: Przepraszamy, nie mogliśmy znaleźć niczego dla "%{query}". Czy jest to prawidłowe konto ActivityPub lub adres URL?
      results: Wyniki wyszukiwania
      title: Śledź Fediverse
    remote_follow:
      help: Nie potrzebujesz konta na tym serwerze, aby obserwować %{name}; wprowadź tutaj nazwę swojego konta, a my odeślemy Cię do domu, aby zakończyć proces.
      no_results_html: Nie mogliśmy znaleźć Twojego konta domowego; czy wprowadziłeś je poprawnie?
      placeholder: Twoja nazwa użytkownika Fediverse, np. @manyfold@3dp.chat
      submit: Zabierz mnie do domu
      title: Obserwuj %{name}
    search_form:
      placeholder: Wprowadź konto Fediverse lub adres URL, np. @admin@try.manyfold.app
      submit: Wyszukaj
    unfollow_remote_actor:
      unfollowed: Przestano obserwować %{actor}
  general:
    delete: Usuń
    download: Pobierz
    edit: Edytuj
    expand: Rozwiń
    followers:
      few:
      many:
      one:
      other:
      two:
      zero:
    menu: Menu
    new: Nowy
    public:
    report: Zgłoś %{type}
    save: Zapisz
    view: Widok
  home:
    activity:
      created: dodane %{time} temu
      updated: zaktualizowane %{time} temu
    browsing:
      content:
      manual_link:
      more_access:
      title:
    federation:
      content_html:
      following:
      handle_html:
      title:
    index:
      no_activities: Na razie nie ma żadnych aktywności do wyświetlenia.
      open_search_help: Składnia wyszukiwania
      recent_activity: Ostatnia Aktywność
      search:
        placeholder: Czego szukasz?
        submit: Wyszukaj
    publishing:
      content:
      new_creator:
        button:
        content:
      title:
    support:
      content:
      manyfold_html:
      support_link: Wesprzyj tą instancje
      title:
    uploading:
      how_to_upload:
      permissions:
        edit:
        member:
        private:
      title:
      upload: Prześlij
    welcome:
      lead:
      title:
  jobs:
    activity:
      collection_published:
        comment: Nowa kolekcja modeli 3D ["%{name}"](%{url}) została właśnie opublikowana!
      model_collected:
        comment: '["%{model_name}"](%{model_url}) został właśnie dodany do kolekcji ["%{collection_name}"](%{collection_url}).'
      model_published:
        comment: Nowy model 3D ["%{name}"](%{url}) został właśnie opublikowany!
      updated_model:
        comment: Model 3D ["%{name}"](%{url}) został właśnie zaktualizowany!
    analysis:
      analyse_model_file:
        detect_duplicates: Wykrywanie zduplikowanych plików
        detect_ineffiency: Wykrywanie niewydajnych formatów
        file_statistics: Obliczanie statystyk plików
        matching: Dopasowywanie obsługiwanych plików
      file_conversion:
        exporting: Eksportowanie nowego pliku
        loading_mesh: Ładowanie siatki
      geometric_analysis:
        direction_check: Sprawdzanie orientacji powierzchni
        loading_mesh: Ładowanie siatki
        manifold_check: Sprawdzanie, czy siatka jest rozmaita
    scan:
      check_all:
        queueing_model_checks: Kolejkowanie sprawdzania modeli
        removing_orphaned_problems: Usuwanie osieroconych problemów
      detect_filesystem_changes:
        building_filename_list: Tworzenie listy plików
        building_folder_list: Tworzenie listy zmienionych folderów
        creating_models: Tworzenie modeli
  kaminari:
    first_page:
      label: Przejdź do pierwszej strony
    last_page:
      label: Przejdź do ostatniej strony
    next_page:
      label: Przejdź do następnej strony
    page:
      current_page: Bieżąca strona
      label: Przejdź do %{page} strony
    paginator:
      label: Nawigacja strony
    prev_page:
      label: Przejdź do poprzedniej strony
  layouts:
    application:
      alert:
        danger: Niebezpieczeństwo
        info: Informacja
      skip_to_content: Przejdź do głównej treści
    card_list_page:
      actions_heading: Akcje
    settings:
      activeadmin: Zaawansowana Administracja
      appearance: Wygląd
      downloads: Pobrane
      libraries: Biblioteki
      organization: Organizacja
      performance: Pulpit Wydajności
      pghero: PgHero
      sidekiq: Sidekiq
      site_settings_title: Ustawienia Strony
      tools_heading: Zaawansowane Narzędzia
  licenses:
    CC-BY-40: Creative Commons Uznanie autorstwa
    CC-BY-NC-40: Creative Commons Uznanie autorstwa-Użycie niekomercyjne
    CC-BY-NC-ND-40: Creative Commons Uznanie autorstwa-Użycie niekomercyjne-Bez utworów zależnych
    CC-BY-NC-SA-40: Creative Commons Uznanie autorstwa-Użycie niekomercyjne-Na tych samych warunkach
    CC-BY-ND-40: Creative Commons Uznanie autorstwa-Bez utworów zależnych
    CC-BY-SA-40: Creative Commons Uznanie autorstwa-Na tych samych warunkach
    CC-PDDC: Creative Commons Deklaracja Domeny Publicznej
    CC0-10: Creative Commons Zero
    LicenseRef-Commercial: Komercyjne; tylko do użytku prywatnego
    MIT: MIT
  moderator_mailer:
    new_approval:
      greeting: Cześć!
      message: Ktoś nowy zarejestrował konto i wymaga zatwierdzenia. Zatwierdź konto pod adresem %{link}
      subject: Nowe konto wymaga zatwierdzenia
    new_report:
      greeting: Cześć!
      message: Ktoś zgłosił zawartość wymagającą moderacji. Przejrzyj zgłoszenie pod adresem %{link}
      subject: Otrzymano nowe zgłoszenie
  renderer:
    errors:
      canvas: 'Nie można znaleźć canvasu #webgl!'
      load: Błąd wczytywania
      webglrenderer: Nie można utworzyć renderera!
    load: Wczytywanie
    processing: Procesowanie siatki
  reports:
    create:
      success: Zgłoszenie przesłane. Dziękujemy!
    new:
      description: Jeśli ten element narusza jakiekolwiek prawa lub zasady serwera, możesz zgłosić go naszym moderatorom. Dodaj komentarz, aby poinformować nas dlaczego!
      submit: Wyślij zgłoszenie
      title: 'Zgłoś %{type}: "%{name}"'
  security:
    running_as_root_html: Manyfold działa jako root, co stanowi zagrożenie dla bezpieczeństwa. Uruchom jako inny użytkownik systemu przez ustawienie zmiennych środowiskowych <code>PUID</code> i <code>PGID</code>. Szczegółowe informacje możesz znaleźć w <a href='https://manyfold.app/sysadmin/configuration.html#required'>dokumentacji konfiguracji</a>.
  sites:
    cgtrader: CGTrader
    comicsgamesandthings: Comics, Games, and Things
    cults3d: Cults3D
    github: GitHub
    makerworld: MakerWorld
    manyfold: Manyfold
    myminifactory: MyMiniFactory
    printables: Printables
    thangs: Thangs
    theminiindex: The Mini Index
    thingiverse: Thingiverse
    yeggi: yeggi
  user_mailer:
    account_approved:
      greeting: Cześć!
      message: Twoje konto zostało zatwierdzone; możesz teraz zalogować się pod adresem %{link}.
      subject: Konto zatwierdzone
    test_email:
      subject: Testowy email
      test_email_message: Testowy email
  users:
    registrations:
      create:
        altcha_failed:
  views:
    pagination:
      first: "« Pierwsza"
      last: Ostatnia »
      next: Następna ›
      previous: "‹ Poprzednia"
      truncate: "…"
</file>

<file path="config/workers/default.yml">
---
:concurrency: <%= ENV.fetch("DEFAULT_WORKER_CONCURRENCY", 4) %>
:queues:
  - critical
  - high
  - scan
  - default
  - low
  # legacy queues kept for a while for upgrade compatibility
  - analysis
  - activity
  - upgrade
</file>

<file path="config/workers/performance.yml">
---
:concurrency: <%= ENV.fetch("PERFORMANCE_WORKER_CONCURRENCY", 1) %>
:queues:
  - performance
</file>

<file path="config/application.rb">
require_relative "boot"

require "rails"
# Pick the frameworks you want:
require "active_model/railtie"
require "active_job/railtie"
require "active_record/railtie"
# require "active_storage/engine"
require "action_controller/railtie"
require "action_mailer/railtie"
# require "action_mailbox/engine"
# require "action_text/engine"
require "action_view/railtie"
require "action_cable/engine"
# require "rails/test_unit/railtie"

require "rack/contrib"

# Require the gems listed in Gemfile, including any gems
# you've limited to :test, :development, or :production.
Bundler.require(*Rails.groups)

module Manyfold
  class Application < Rails::Application
    # Initialize configuration defaults for originally generated Rails version.
    config.load_defaults 8.0

    # Please, add to the `ignore` list any other `lib` subdirectories that do
    # not contain `.rb` files, or that should not be reloaded or eager loaded.
    # Common ones are `templates`, `generators`, or `middleware`, for example.
    # config.autoload_lib(ignore: %w[assets tasks])

    # Configuration for the application, engines, and railties goes here.
    #
    # These settings can be overridden in specific environments using the files
    # in config/environments, which are processed later.
    #
    # config.time_zone = "Central Time (US & Canada)"
    config.eager_load_paths << config.root.join("app/uploaders")

    config.autoload_once_paths << "#{root}/app/lib"

    # Load locale files in nested folders as well as locale root
    config.i18n.load_path += Rails.root.glob("config/locales/**/*.{rb,yml}")
    config.i18n.fallbacks = true
    config.i18n.default_locale = :en
    config.i18n.available_locales = [
      :cs,
      :de,
      :en,
      :es,
      :fr,
      :ja,
      :nl,
      :pl
    ]

    # Don't generate system test files.
    config.generators.system_tests = nil

    config.middleware.use Rack::Locale

    # Treat pundit failures as standard "forbidden"
    config.action_dispatch.rescue_responses["Pundit::NotAuthorizedError"] = :forbidden

    config.action_mailer.smtp_settings = {
      address: ENV.fetch("SMTP_SERVER", nil),
      port: ENV.fetch("SMTP_PORT", nil),
      domain: ENV.fetch("SMTP_DOMAIN", nil),
      user_name: ENV.fetch("SMTP_USERNAME", nil),
      password: ENV.fetch("SMTP_PASSWORD", nil),
      authentication: ENV.fetch("SMTP_AUTHENTICATION", nil)&.to_sym,
      openssl_verify_mode: ENV.fetch("SMTP_OPENSSL_VERIFY_MODE", nil),
      open_timeout: ENV.fetch("SMTP_OPEN_TIMEOUT", nil)&.to_i,
      read_timeout: ENV.fetch("SMTP_READ_TIMEOUT", nil)&.to_i
    }.compact

    # Load some feature settings from ENV
    # Some are automatically enabled in test mode because they impact initialization
    config.manyfold_features = {
      multiuser: (ENV.fetch("MULTIUSER", nil) == "enabled"),
      federation: (ENV.fetch("FEDERATION", nil) == "enabled"),
      demo_mode: (ENV.fetch("DEMO_MODE", nil) == "enabled"),
      oidc: ENV.key?("OIDC_CLIENT_ID") && ENV.key?("OIDC_CLIENT_SECRET") && ENV.key?("OIDC_ISSUER")
    }
  end
end

# Set default URL options from env vars
# This is done *very* early, so that it cascades to all components
require "./app/lib/public_url"
Rails.application.default_url_options = {
  host: PublicUrl.hostname,
  port: PublicUrl.nonstandard_port
}.compact
</file>

<file path="config/boot.rb">
ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../Gemfile", __dir__)

require "bundler/setup" # Set up gems listed in the Gemfile.
require "bootsnap/setup" # Speed up boot time by caching expensive operations.

# Ignore parser/current warning so that it doesn't complain about patchlevel differences
require "warning"
Warning.ignore(/warning: parser\/current/)
</file>

<file path="config/brakeman.ignore">
{
  "ignored_warnings": [
    {
      "warning_type": "Remote Code Execution",
      "warning_code": 24,
      "fingerprint": "11d160afdc33a4cc5f8141fbf75b06610da9bb1c65670d6e1c4abc8cda25e007",
      "check_name": "UnsafeReflection",
      "message": "Unsafe reflection method `constantize` called on parameter value",
      "file": "app/controllers/reports_controller.rb",
      "line": 23,
      "link": "https://brakemanscanner.org/docs/warning_types/remote_code_execution/",
      "code": "params[:reportable_class].constantize",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "ReportsController",
        "method": "get_reportable"
      },
      "user_input": "params[:reportable_class]",
      "confidence": "High",
      "cwe_id": [
        470
      ],
      "note": ""
    },
    {
      "warning_type": "Remote Code Execution",
      "warning_code": 24,
      "fingerprint": "81347f40cf15212ece1e778f98ccb4e7ad38a69cd0b1ca0c8f07780f23885fe2",
      "check_name": "UnsafeReflection",
      "message": "Unsafe reflection method `constantize` called on parameter value",
      "file": "app/controllers/comments_controller.rb",
      "line": 15,
      "link": "https://brakemanscanner.org/docs/warning_types/remote_code_execution/",
      "code": "params[:commentable_class].constantize",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "CommentsController",
        "method": "get_commentable"
      },
      "user_input": "params[:commentable_class]",
      "confidence": "High",
      "cwe_id": [
        470
      ],
      "note": ""
    },
    {
      "warning_type": "Remote Code Execution",
      "warning_code": 24,
      "fingerprint": "e43cfc3187c4bead86e47daaa7e4075414035f44c776d8a8dda394c09b4ea467",
      "check_name": "UnsafeReflection",
      "message": "Unsafe reflection method `constantize` called on parameter value",
      "file": "app/controllers/follows_controller.rb",
      "line": 75,
      "link": "https://brakemanscanner.org/docs/warning_types/remote_code_execution/",
      "code": "params[:followable_class].constantize",
      "render_path": null,
      "location": {
        "type": "method",
        "class": "FollowsController",
        "method": "get_target"
      },
      "user_input": "params[:followable_class]",
      "confidence": "High",
      "cwe_id": [
        470
      ],
      "note": ""
    }
  ],
  "brakeman_version": "7.0.2"
}
</file>

<file path="config/brakeman.yml">
run_all_checks: true
pager: false
</file>

<file path="config/cable.yml">
development:
  adapter: redis
  url: <%= ENV.fetch("REDIS_URL") { "redis://localhost:6379/1" } %>
  channel_prefix: manyfold_development

test:
  adapter: redis
  url: <%= Rails.application.credentials.redis_url %>
  channel_prefix: manyfold_test

production:
  adapter: redis
  url: <%= ENV.fetch("REDIS_URL") { "redis://localhost:6379/1" } %>
  channel_prefix: manyfold_production
</file>

<file path="config/credentials.yml.enc">
ie3CmUQNo5LsBu0Lm2W0TShORWpWz9uTlpQlcTtqFxOEV0A5L0DZU9ElaKwtDdOv8PVEMA+kGZmbrFH8Idr73dFCD4Bt9dlWWz8Q2CdmJxgEQExCCrbmnMtQUk9T+Yr+0IYChrAePbIgzF/Awpmz91jtXlX4bo2d6LDia8H1gl5Hm9l2J1FKZz/YmKdDQ9lFhAj2/xfOOKRdgoy/RZjpKhdSfVEZWnPWF7GTHOXib4L973eQrdPYwaQaevZf/rsx6/OR7wxP7KbbMU0aY/PHeBLdRFd9caQ/tAvd1D9zXQskpazUbEWteWTPZj7L1CX88IwUn6Bsm6DaDQnJKRp7i0Wn0N1DEzyh7i0Y04JtHDD1Ktmw4h6A322a57JfMdbEKk7mBEJ4QAatjX6yVnA3lwkpRnjHwJznavAN--AiHtxeG2gN1mjURT--8QG/OAzf9DQXMK8zHjNepA==
</file>

<file path="config/database.yml">
env: &env
  adapter: <%= ENV.fetch("DATABASE_ADAPTER", "postgresql") %>
  host: <%= ENV.fetch("DATABASE_HOST", nil) %>
  port: <%= ENV.fetch("DATABASE_PORT", nil) %>
  database: <%= ENV.fetch("DATABASE_NAME", "manyfold") %>
  username: <%= ENV.fetch("DATABASE_USER", nil) %>
  password: <%= ENV.fetch("DATABASE_PASSWORD", nil) %>
  pool: <%= ENV.fetch("DATABASE_CONNECTION_POOL", ENV.fetch("RAILS_MAX_THREADS", 16)) %>
  timeout: <%= ENV.fetch("DATABASE_TIMEOUT", 5000) %>
  # SQLite production config
  # This is default in Rails 7.2, so once we upgrade, we can remove it
  default_transaction_mode: IMMEDIATE


development:
  <<: *env
  adapter: sqlite3
  database: db/development.sqlite3

test:
  <<: *env
  adapter: sqlite3
  database: db/test.sqlite3

production:
  <<: *env
</file>

<file path="config/environment.rb">
# Load the Rails application.
require_relative "application"

# Initialize the Rails application.
Rails.application.initialize!
</file>

<file path="config/i18n-js.yml">
---
# This config file is for the i18n-js gem
# and provides translation into javascript
translations:
  - file: app/javascript/src/locales.json
    patterns:
      - "*.renderer.*"
</file>

<file path="config/i18n-tasks.yml">
# i18n-tasks finds and manages missing and unused translations: https://github.com/glebm/i18n-tasks

# The "main" locale.
base_locale: en
## All available locales are inferred from the data by default. Alternatively, specify them explicitly:
locales: [
  cs,
  de,
  en,
  es,
  fr,
  ja,
  nl,
  pl
]
## Reporting locale, default: en. Available: en, ru.
# internal_locale: en

# Read and write translations.
data:
  ## Translations are read from the file system. Supported format: YAML, JSON.
  ## Provide a custom adapter:
  # adapter: I18n::Tasks::Data::FileSystem

  # Locale files or `File.find` patterns where translations are read from:
  read:
    - config/locales/**/%{locale}.yml
    - config/locales/devise.%{locale}.yml
    - config/locales/devise.*.%{locale}.yml
    - config/locales/doorkeeper.%{locale}.yml
    ## Read in translation.io synced files
    - config/locales/translation.%{locale}.yml

  # Locale files to write new keys to, based on a list of key pattern => file rules. Matched from top to bottom:
  # `i18n-tasks normalize -p` will force move the keys according to these rules
  write:
    - ['{active_admin, collections, creators, devise, libraries, links, model_files, models, problems, settings, uploads}.*', 'config/locales/\1/%{locale}.yml']
    ## Catch-all default:
    - config/locales/%{locale}.yml

  # External locale data (e.g. gems).
  # This data is not considered unused and is never written to.
  external:
    ## Example (replace %#= with %=):
    # - "<%#= %x[bundle info vagrant --path].chomp %>/templates/locales/%{locale}.yml"

  ## Specify the router (see Readme for details). Valid values: conservative_router, pattern_router, or a custom class.
  # router: conservative_router

  yaml:
    write:
      # do not wrap lines at 80 characters
      line_width: -1

  ## Pretty-print JSON:
  # json:
  #   write:
  #     indent: '  '
  #     space: ' '
  #     object_nl: "\n"
  #     array_nl: "\n"

# Find translate calls
search:
  ## Paths or `File.find` patterns to search in:
  # paths:
  #  - app/

  ## Root directories for relative keys resolution.
  relative_roots:
    - app/controllers
    - app/helpers
    - app/mailers
    - app/presenters
    - app/views
    - app/components

  ## Directories where method names which should not be part of a relative key resolution.
  # By default, if a relative translation is used inside a method, the name of the method will be considered part of the resolved key.
  # Directories listed here will not consider the name of the method part of the resolved key
  #
  # relative_exclude_method_name_paths:
  #  -

  ## Files or `File.fnmatch` patterns to exclude from search. Some files are always excluded regardless of this setting:
  ##   *.jpg *.jpeg *.png *.gif *.svg *.ico *.eot *.otf *.ttf *.woff *.woff2 *.pdf *.css *.sass *.scss *.less
  ##   *.yml *.json *.zip *.tar.gz *.swf *.flv *.mp3 *.wav *.flac *.webm *.mp4 *.ogg *.opus *.webp *.map *.xlsx
  exclude:
    - app/assets/images
    - app/assets/fonts
    - app/assets/videos
    - app/assets/builds

  ## Alternatively, the only files or `File.fnmatch patterns` to search in `paths`:
  ## If specified, this settings takes priority over `exclude`, but `exclude` still applies.
  # only: ["*.rb", "*.html.slim"]

  ## If `strict` is `false`, guess usages such as t("categories.#{category}.title"). The default is `true`.
  # strict: true

  ## Allows adding ast_matchers for finding translations using the AST-scanners
  ## The available matchers are:
  ## - RailsModelMatcher
  ##     Matches ActiveRecord translations like
  ##     User.human_attribute_name(:email) and User.model_name.human
  ##
  ## To implement your own, please see `I18n::Tasks::Scanners::AstMatchers::BaseMatcher`.
  <%# I18n::Tasks.add_ast_matcher('I18n::Tasks::Scanners::AstMatchers::RailsModelMatcher') %>

  ## Multiple scanners can be used. Their results are merged.
  ## The options specified above are passed down to each scanner. Per-scanner options can be specified as well.
  ## See this example of a custom scanner: https://github.com/glebm/i18n-tasks/wiki/A-custom-scanner-example

## Translation Services
# translation:
#   # Google Translate
#   # Get an API key and set billing info at https://code.google.com/apis/console to use Google Translate
#   google_translate_api_key: "AbC-dEf5"
#   # DeepL Pro Translate
#   # Get an API key and subscription at https://www.deepl.com/pro to use DeepL Pro
#   deepl_api_key: "48E92789-57A3-466A-9959-1A1A1A1A1A1A"
#   # deepl_host: "https://api.deepl.com"
#   # deepl_version: "v2"

## Do not consider these keys missing:
# ignore_missing:
# - 'errors.messages.{accepted,blank,invalid,too_short,too_long}'
# - '{devise,simple_form}.*'

## Consider these keys used:
ignore_unused:
- 'activerecord.attributes.*'
- 'activerecord.errors.*'
- 'activerecord.models.*'
- 'errors.messages.weak_password'
- 'errors.messages.already_confirmed'
- 'errors.messages.confirmation_period_expired'
- 'errors.messages.expired'
- 'errors.messages.not_found'
- 'errors.messages.not_locked'
- 'problems.categories.*'
- 'libraries.storage_services.*' # Names for storage services
- 'licenses.*'
- 'sites.*'
- 'problems.update.ignored'
- 'problems.update.unignored'
- 'problems.model.*'
- 'problems.model_file.*'
- 'problems.severities.*'
- 'application.caber_relation_fields.permissions.*'
- 'active_admin.exit' # Used in initializer, not detected automatically
- 'devise.*' # Used deep down
- 'doorkeeper.*' # Used deep down
- 'renderer.errors.*' # Used client side via i18n-js
- 'renderer.processing' # Used client side via i18n-js

# - '{devise,kaminari,will_paginate}.*'
# - 'simple_form.{yes,no}'
# - 'simple_form.{placeholders,hints,labels}.*'
# - 'simple_form.{error_notification,required}.:'

## Exclude these keys from the `i18n-tasks eq-base' report:
# ignore_eq_base:
#   all:
#     - common.ok
#   fr,es:
#     - common.brand

## Exclude these keys from the `i18n-tasks check-consistent-interpolations` report:
# ignore_inconsistent_interpolations:
# - 'activerecord.attributes.*'

## Ignore these keys completely:
# ignore:
#  - kaminari.*

## Sometimes, it isn't possible for i18n-tasks to match the key correctly,
## e.g. in case of a relative key defined in a helper method.
## In these cases you can use the built-in PatternMapper to map patterns to keys, e.g.:
#
# <%# I18n::Tasks.add_scanner 'I18n::Tasks::Scanners::PatternMapper',
#       only: %w(*.html.haml *.html.slim),
#       patterns: [['= title\b', '.page_title']] %>
#
# The PatternMapper can also match key literals via a special %{key} interpolation, e.g.:
#
# <%# I18n::Tasks.add_scanner 'I18n::Tasks::Scanners::PatternMapper',
#       patterns: [['\bSpree\.t[( ]\s*%{key}', 'spree.%{key}']] %>
</file>

<file path="config/puma.rb">
# This configuration file will be evaluated by Puma. The top-level methods that
# are invoked here are part of Puma's configuration DSL. For more information
# about methods provided by the DSL, see https://puma.io/puma/Puma/DSL.html.
#
# Puma starts a configurable number of processes (workers) and each process
# serves each request in a thread from an internal thread pool.
#
# You can control the number of workers using ENV["WEB_CONCURRENCY"]. You
# should only set this value when you want to run 2 or more workers. The
# default is already 1.
#
workers ENV.fetch("WEB_CONCURRENCY", 4)
preload_app!

# The ideal number of threads per worker depends both on how much time the
# application spends waiting for IO operations and on how much you wish to
# prioritize throughput over latency.
#
# As a rule of thumb, increasing the number of threads will increase how much
# traffic a given process can handle (throughput), but due to CRuby's
# Global VM Lock (GVL) it has diminishing returns and will degrade the
# response time (latency) of the application.
#
# The default is set to 3 threads as it's deemed a decent compromise between
# throughput and latency for the average Rails application.
#
# Any libraries that use a connection pool or another resource pool should
# be configured to provide at least as many connections as the number of
# threads. This includes Active Record's `pool` parameter in `database.yml`.
#
max_threads_count = ENV.fetch("RAILS_MAX_THREADS", 16)
min_threads_count = ENV.fetch("RAILS_MIN_THREADS", 4)
threads min_threads_count, max_threads_count

# Specifies the `worker_timeout` threshold that Puma will use to wait before
# terminating a worker in development environments.
#
worker_timeout 3600 if ENV.fetch("RAILS_ENV", "development") == "development"

# Specifies the `port` that Puma will listen on to receive requests; default is 3000.
# Support IPv6 by binding to host `::` instead of `0.0.0.0`
port(ENV.fetch("PORT", 3000), "::")

# Specifies the `environment` that Puma will run in.
#
environment ENV.fetch("RAILS_ENV") { "development" }

# Specifies the `pidfile` that Puma will use.
pidfile ENV.fetch("PIDFILE") { "tmp/pids/server.pid" }

# Specifies the number of `workers` to boot in clustered mode.
# Workers are forked web server processes. If using threads and workers together
# the concurrency of the application would be max `threads` * `workers`.
# Workers do not work on JRuby or Windows (both of which do not support
# processes).
workers ENV.fetch("WEB_CONCURRENCY", 4)

# Use the `preload_app!` method when specifying a `workers` number.
# This directive tells Puma to first boot the application and load code
# before forking the application. This takes advantage of Copy On Write
# process behavior so workers use less memory.
preload_app!

# Allow puma to be restarted by `rails restart` command.
plugin :tmp_restart

# Run the Solid Queue supervisor inside of Puma for single-server deployments
plugin :solid_queue if ENV["SOLID_QUEUE_IN_PUMA"]

# Specify the PID file. Defaults to tmp/pids/server.pid in development.
# In other environments, only set the PID file if requested.
pidfile ENV["PIDFILE"] if ENV["PIDFILE"]
</file>

<file path="config/routes.rb">
require "sidekiq/web"
require "sidekiq/cron/web"
require "federails"

Rails.application.routes.draw do
  get "/altcha", to: "altcha#new"
  get ".well-known/change-password", to: redirect("/users/edit")
  get "health" => "rails/health#show", :as => :rails_health_check
  get "problems/index"

  devise_controllers = {
    passwords: "users/passwords",
    registrations: "users/registrations",
    sessions: "users/sessions"
  }
  devise_controllers[:omniauth_callbacks] = "users/omniauth_callbacks" if Rails.application.config.manyfold_features[:oidc]
  devise_for :users, controllers: devise_controllers

  ActiveAdmin.routes(self)
  authenticate :user, lambda { |u| u.is_administrator? } do
    resource :settings, only: [:show, :update] do
      collection do
        get :analysis
        get :downloads
        get :multiuser
        get :reporting
        get :appearance
        get :discovery
      end
      resources :libraries, only: [:index]
    end
    mount Sidekiq::Web => "/admin/sidekiq"
    mount RailsPerformance::Engine => "/admin/performance" unless Rails.env.test? || ENV["RAILS_ASSETS_PRECOMPILE"].present?
    mount PgHero::Engine => "/admin/pghero"
    get "/activity" => "activity#index", :as => :activity
  end

  if SiteSettings.multiuser_enabled? || Rails.env.test?
    authenticate :user, lambda { |u| u.is_moderator? } do
      namespace :settings do
        resources :users
        resources :reports
      end
    end
    mount Federails::Engine => "/" if SiteSettings.federation_enabled? || Rails.env.test?

    get "/follow" => "follows#index", :as => :follow
    get "/authorize_interaction" => "follows#new", :as => :new_follow
    post "/remote_follow" => "follows#remote_follow", :as => :remote_follow
    post "/perform_remote_follow" => "follows#perform_remote_follow", :as => :perform_remote_follow
    post "/follow_remote_actor/:id" => "follows#follow_remote_actor", :as => :follow_remote_actor
    delete "/follow_remote_actor/:id" => "follows#unfollow_remote_actor", :as => :unfollow_remote_actor
  end

  if SiteSettings.federation_enabled? || Rails.env.test?
    authenticate :user, lambda { |u| u.is_moderator? } do
      namespace :settings do
        resources :domain_blocks if SiteSettings.federation_enabled?
      end
    end
  end

  root to: "home#index"
  get "/about", to: "home#about", as: :about

  authenticate :user do
    get "/welcome", to: "home#welcome", as: :welcome
  end

  resources :libraries, except: [:index] do
    member do
      post "scan"
    end
    collection do
      post "scan", action: :scan_all
    end
  end

  concern :followable do |options|
    if SiteSettings.multiuser_enabled?
      resources :follows, {only: [:create]}.merge(options) do
        collection do
          delete "/", action: "destroy"
        end
      end
    end
  end

  concern :commentable do |options|
    resources :comments, {only: [:show]}.merge(options)
  end
  concern :reportable do |options|
    resources :reports, {only: [:new, :create]}.merge(options)
  end

  resources :models do
    concerns :followable, followable_class: "Model"
    concerns :commentable, commentable_class: "Model"
    concerns :reportable, reportable_class: "Model"
    member do
      post "merge"
      post "scan"
    end
    collection do
      get "edit", action: "bulk_edit"
      patch "/update", action: "bulk_update"
    end
    resources :model_files, except: [:index, :new] do
      collection do
        get "bulk_edit"
        patch "bulk_update"
      end
    end
  end
  resources :creators do
    concerns :followable, followable_class: "Creator"
    concerns :commentable, commentable_class: "Creator"
    concerns :reportable, reportable_class: "Creator"
  end
  resources :collections do
    concerns :followable, followable_class: "Collection"
    concerns :commentable, commentable_class: "Collection"
    concerns :reportable, reportable_class: "Collection"
  end
  resources :problems, only: [:index, :update] do
    collection do
      post "resolve", action: "resolve"
    end
    member do
      post "resolve"
    end
  end
  resources :benchmark, only: [:index, :create, :destroy] if Rails.env.development?

  authenticate :user, lambda { |u| u.is_contributor? } do
    mount Tus::Server => "/upload", :as => :upload
  end

  get("/oembed", to: redirect(status: 303) { |_, request|
    path = URI.parse(request.params[:url])&.path
    raise ActionController::BadRequest if path.blank?
    URI::HTTP.build(path: path + ".oembed", query: {
      maxwidth: request.params[:maxwidth],
      maxheight: request.params[:maxheight]
    }.compact.to_query)
  })

  mount Rswag::Ui::Engine => "/api", :as => :api
  mount Rswag::Api::Engine => "/api"

  use_doorkeeper do
    skip_controllers :applications
  end
  resources :doorkeeper_applications, path: "/oauth/applications"

  # Fallback route for filename matching
  get "/models/:model_id/model_files/*id" => "model_files#show", :as => "model_model_file_by_filename"

  # Web crawler stuff
  get "/robots", to: "robots#index"
  get "/sitemap", to: "robots#sitemap"
end
</file>

<file path="config/spring.rb">
Spring.watch(
  ".ruby-version",
  ".rbenv-vars",
  "tmp/restart.txt",
  "tmp/caching-dev.txt"
)
</file>

<file path="config/storage.yml">
test:
  service: Disk
  root: <%= Rails.root.join("tmp/storage") %>

local:
  service: Disk
  root: <%= Rails.root.join("storage") %>

# Use rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)
# amazon:
#   service: S3
#   access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>
#   secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>
#   region: us-east-1
#   bucket: your_own_bucket

# Remember not to checkin your GCS keyfile to a repository
# google:
#   service: GCS
#   project: your_project
#   credentials: <%= Rails.root.join("path/to/gcs.keyfile") %>
#   bucket: your_own_bucket

# Use rails credentials:edit to set the Azure Storage secret (as azure_storage:storage_access_key)
# microsoft:
#   service: AzureStorage
#   storage_account_name: your_account_name
#   storage_access_key: <%= Rails.application.credentials.dig(:azure_storage, :storage_access_key) %>
#   container: your_container_name

# mirror:
#   service: Mirror
#   primary: local
#   mirrors: [ amazon, google, microsoft ]
</file>

<file path="db/data/20221214230757_add_new_defaults_to_renderer_settings.rb">
# frozen_string_literal: true

class AddNewDefaultsToRendererSettings < ActiveRecord::Migration[7.0]
  def up
    User.find_each do |user|
      user.update(
        renderer_settings: SiteSettings::UserDefaults::RENDERER.merge(user.renderer_settings)
      )
    end
  end

  def down
    raise ActiveRecord::IrreversibleMigration
  end
end
</file>

<file path="db/data/20221220223040_move_printed_to_favorites.rb">
# frozen_string_literal: true

class MovePrintedToFavorites < ActiveRecord::Migration[7.0]
  def up
    # If there's no "printed" field, there's nothing to move
    return if !ModelFile.has_attribute?(:printed)
    # Move the data over to the first user found
    # If there's more than one, this might be a bad choice,
    # but it's better than nothing
    user = User.first
    ModelFile.where(printed: true).find_each do |file|
      user.favorite(file, scope: :printed)
    end
  end

  def down
    raise ActiveRecord::IrreversibleMigration
  end
end
</file>

<file path="db/data/20230221174212_move_scale_factor_into_note.rb">
# frozen_string_literal: true

class MoveScaleFactorIntoNote < ActiveRecord::Migration[7.0]
  def up
    Model.find_each do |model|
      if defined?(model.scale_factor) && (model.scale_factor != 100)
        model.update!(notes: [
          model.notes,
          "Scale factor: #{model.scale_factor}%"
        ].compact_blank.join("\n"))
      end
    end
  end

  def down
    raise ActiveRecord::IrreversibleMigration
  end
end
</file>

<file path="db/data/20230308006000_move_collection_tag_into_object.rb">
# frozen_string_literal: true

class MoveCollectionTagIntoObject < ActiveRecord::Migration[7.0]
  def up
    Model.find_each do |model|
      if defined?(model.collections) && !model.collection
        model.collections.each do |collection|
          newcol = Collection.find_or_create_by name: collection.name
          newcol.models << model
          newcol.save
        end
      end
    end
  end

  def down
    raise ActiveRecord::IrreversibleMigration
  end
end
</file>

<file path="db/data/20230612080306_remove_destination_exists_problems.rb">
# frozen_string_literal: true

class RemoveDestinationExistsProblems < ActiveRecord::Migration[7.0]
  def up
    # Clean up deprecated problems
    Problem.including_ignored.where(category: :destination_exists).destroy_all
  end

  def down
    raise ActiveRecord::IrreversibleMigration
  end
end
</file>

<file path="db/data/20230613134254_remove_leading_separators_from_model_filenames.rb">
# frozen_string_literal: true

class RemoveLeadingSeparatorsFromModelFilenames < ActiveRecord::Migration[7.0]
  def up
    Model.find_each do |model|
      model.update! path: model.path&.trim_path_separators
    rescue ActiveRecord::RecordInvalid
      # If the path is invalid as it's already taken, this is a duplicate, so destroy it.
      model.destroy!
    end
  end

  def down
    raise ActiveRecord::IrreversibleMigration
  end
end
</file>

<file path="db/data/20230617222353_generate_slugs.rb">
# frozen_string_literal: true

class GenerateSlugs < ActiveRecord::Migration[7.0]
  def up
    Model.where(slug: nil).find_each do |model|
      model.send(:slugify_name)
      model.save!(validate: false)
    end
    Creator.where(slug: nil).find_each do |creator|
      creator.send(:slugify_name)
      creator.save!(validate: false)
    end
    Collection.where(slug: nil).find_each do |collection|
      collection.send(:slugify_name)
      collection.save!(validate: false)
    end
  end

  def down
    raise ActiveRecord::IrreversibleMigration
  end
end
</file>

<file path="db/data/20230628194944_make_names_unique.rb">
# frozen_string_literal: true

class MakeNamesUnique < ActiveRecord::Migration[7.0]
  def up
    attributes = [:name, :slug]
    [Creator, Collection].each do |klass|
      attributes.each do |attr|
        klass.all.group_by { |it| it.send(attr).downcase }.each_pair do |n, items|
          if items.count > 1
            items.slice(1..-1).each do |c|
              c.name = "#{c.name} #{SecureRandom.hex(4)}"
              c.save!
            end
          end
        end
      end
    end
  end

  def down
    raise ActiveRecord::IrreversibleMigration
  end
end
</file>

<file path="db/data/20240319155526_convert_admin_flag_to_role.rb">
# frozen_string_literal: true

class ConvertAdminFlagToRole < ActiveRecord::Migration[7.0]
  def up
    User.where(admin: true).find_each { |u| u.add_role :administrator }
  rescue ActiveRecord::StatementInvalid
  end

  def down
    User.with_role(:administrator).find_each { |u| u.update!(admin: true) }
  end
end
</file>

<file path="db/data/20240322150022_set_admin_password_reset_token.rb">
# frozen_string_literal: true

class SetAdminPasswordResetToken < ActiveRecord::Migration[7.0]
  def up
    u = User.with_role(:administrator).first
    if u
      u.reset_password_token = "first_use"
      u.save validate: false
    end
  end

  def down
  end
end
</file>

<file path="db/data/20240615085913_move_file_data_into_shrine.rb">
# frozen_string_literal: true

class MoveFileDataIntoShrine < ActiveRecord::Migration[7.0]
  def up
    ModelFile.find_each { |it| it.attach_existing_file!(refresh: false, skip_validations: true) }
  end

  def down
  end
end
</file>

<file path="db/data/20240731165647_create_federails_actors.rb">
# frozen_string_literal: true

class CreateFederailsActors < ActiveRecord::Migration[7.1]
  def up
  end

  def down
  end
end
</file>

<file path="db/data/20240802094448_create_more_federails_actors.rb">
# frozen_string_literal: true

class CreateMoreFederailsActors < ActiveRecord::Migration[7.1]
  def up
  end

  def down
  end
end
</file>

<file path="db/data/20240805111500_backfill_activities.rb">
# frozen_string_literal: true

class BackfillActivities < ActiveRecord::Migration[7.1]
  def up
    # Moved to after caber permission migration
  end

  def down
  end
end
</file>

<file path="db/data/20240830121749_add_default_access_controls.rb">
# frozen_string_literal: true

class AddDefaultAccessControls < ActiveRecord::Migration[7.1]
  def up
    [Creator, Collection, Model].each do |klass|
      klass.find_each(&:assign_default_permissions)
    end
  end

  def down
  end
end
</file>

<file path="db/data/20240830151650_rename_default_roles.rb">
# frozen_string_literal: true

class RenameDefaultRoles < ActiveRecord::Migration[7.1]
  def up
    Role.find_by(name: :editor)&.update!(name: :moderator) unless Role.find_by(name: :moderator)
    Role.find_by(name: :viewer)&.update!(name: :member) unless Role.find_by(name: :member)
  end

  def down
    Role.find_by(name: :moderator)&.update!(name: :editor)
    Role.find_by(name: :member)&.update!(name: :viewer)
  end
end
</file>

<file path="db/data/20240904152358_generate_public_i_ds_for_models.rb">
# frozen_string_literal: true

class GeneratePublicIDsForModels < ActiveRecord::Migration[7.1]
  def up
    [Model, ModelFile, Problem, Creator, Collection, Library].each do |model|
      model.where(public_id: nil).find_each do |obj|
        obj.send :generate_public_id
        obj.update_column :public_id, obj.public_id # rubocop:disable Rails/SkipsModelValidations
      end
    end
  end

  def down
  end
end
</file>

<file path="db/data/20240909100000_backfill_activities_after_permissions.rb">
# frozen_string_literal: true

class BackfillActivitiesAfterPermissions < ActiveRecord::Migration[7.1]
  def up
  end

  def down
  end
end
</file>

<file path="db/data/20240923114515_deduplicate_roles.rb">
# frozen_string_literal: true

class DeduplicateRoles < ActiveRecord::Migration[7.1]
  def up
    Role.merge_duplicates!
  end

  def down
  end
end
</file>

<file path="db/data/20241013215000_backfill_activities_after_uuids.rb">
# frozen_string_literal: true

class BackfillActivitiesAfterUuids < ActiveRecord::Migration[7.1]
  def up
    Model.unscoped.limit(20).order(created_at: :desc).each do |model|
      model.send :post_creation_activity if model.federails_actor&.activities&.empty?
    end
  end

  def down
  end
end
</file>

<file path="db/data/20241021125322_create_public_i_ds_for_users.rb">
# frozen_string_literal: true

class CreatePublicIDsForUsers < ActiveRecord::Migration[7.1]
  def up
    User.find_each do |u|
      # validation and save will generate public IDs
      u.save if u.valid?
    end
  end

  def down
    raise ActiveRecord::IrreversibleMigration
  end
end
</file>

<file path="db/data/20241118155027_clear_stuck_problems.rb">
# frozen_string_literal: true

class ClearStuckProblems < ActiveRecord::Migration[7.2]
  def up
    Problem.update_all(in_progress: false) # rubocop:disable Rails/SkipsModelValidations
  end

  def down
    raise ActiveRecord::IrreversibleMigration
  end
end
</file>

<file path="db/data/20250121164452_make_public_i_ds_lowercase.rb">
# frozen_string_literal: true

class MakePublicIDsLowercase < ActiveRecord::Migration[7.2]
  def up
    [
      Collection,
      Comment,
      Creator,
      Library,
      ModelFile,
      Model,
      Problem,
      User
    ].each do |it|
      it.update_all("public_id = lower(public_id)") # rubocop:disable Rails/SkipsModelValidations
    end
  end

  def down
  end
end
</file>

<file path="db/migrate/20210130201037_create_libraries.rb">
class CreateLibraries < ActiveRecord::Migration[6.1]
  def change
    create_table :libraries do |t|
      t.string :path, null: false
      t.timestamps
    end
  end
end
</file>

<file path="db/migrate/20210130203243_create_models.rb">
class CreateModels < ActiveRecord::Migration[6.1]
  def change
    create_table :models do |t|
      t.string :name, null: false
      t.string :path, null: false
      t.references :library, null: false, foreign_key: true
      t.timestamps
    end
  end
end
</file>

<file path="db/migrate/20210205230918_create_parts.rb">
class CreateParts < ActiveRecord::Migration[6.1]
  def change
    create_table :parts do |t|
      t.string :filename
      t.references :model, null: false, foreign_key: true

      t.timestamps
    end
  end
end
</file>

<file path="db/migrate/20210210153744_add_fields_to_parts.rb">
class AddFieldsToParts < ActiveRecord::Migration[6.1]
  def change
    add_column :parts, :presupported, :boolean, default: false, null: false
    add_column :parts, :printed, :boolean, default: false, null: false
  end
end
</file>

<file path="db/migrate/20210212143001_acts_as_taggable_on_migration.acts_as_taggable_on_engine.rb">
# This migration comes from acts_as_taggable_on_engine (originally 1)
if ActiveRecord.gem_version >= Gem::Version.new("5.0")
  class ActsAsTaggableOnMigration < ActiveRecord::Migration[4.2]; end
else
  class ActsAsTaggableOnMigration < ActiveRecord::Migration; end
end
ActsAsTaggableOnMigration.class_eval do
  def self.up
    create_table ActsAsTaggableOn.tags_table do |t|
      t.string :name
      t.timestamps
    end

    create_table ActsAsTaggableOn.taggings_table do |t|
      t.references :tag, foreign_key: {to_table: ActsAsTaggableOn.tags_table}

      # You should make sure that the column created is
      # long enough to store the required class names.
      t.references :taggable, polymorphic: true
      t.references :tagger, polymorphic: true

      # Limit is created to prevent MySQL error on index
      # length for MyISAM table type: http://bit.ly/vgW2Ql
      t.string :context, limit: 128

      t.datetime :created_at
    end

    add_index ActsAsTaggableOn.taggings_table, :tag_id
    add_index ActsAsTaggableOn.taggings_table, [:taggable_id, :taggable_type, :context], name: "taggings_taggable_context_idx"
  end

  def self.down
    drop_table ActsAsTaggableOn.taggings_table
    drop_table ActsAsTaggableOn.tags_table
  end
end
</file>

<file path="db/migrate/20210212143002_add_missing_unique_indices.acts_as_taggable_on_engine.rb">
# This migration comes from acts_as_taggable_on_engine (originally 2)
if ActiveRecord.gem_version >= Gem::Version.new("5.0")
  class AddMissingUniqueIndices < ActiveRecord::Migration[4.2]; end
else
  class AddMissingUniqueIndices < ActiveRecord::Migration; end
end
AddMissingUniqueIndices.class_eval do
  def self.up
    add_index ActsAsTaggableOn.tags_table, :name, unique: true

    if index_exists?(ActsAsTaggableOn.taggings_table, :tag_id)
      remove_foreign_key :taggings, :tags
      remove_index ActsAsTaggableOn.taggings_table, :tag_id
    end
    remove_index ActsAsTaggableOn.taggings_table, name: "taggings_taggable_context_idx"
    add_index ActsAsTaggableOn.taggings_table,
      [:tag_id, :taggable_id, :taggable_type, :context, :tagger_id, :tagger_type],
      unique: true, name: "taggings_idx"
    add_foreign_key ActsAsTaggableOn.taggings_table, ActsAsTaggableOn.tags_table, column: "tag_id"
  end

  def self.down
    remove_index ActsAsTaggableOn.tags_table, :name

    remove_index ActsAsTaggableOn.taggings_table, name: "taggings_idx"

    add_index ActsAsTaggableOn.taggings_table, :tag_id unless index_exists?(ActsAsTaggableOn.taggings_table, :tag_id)
    add_index ActsAsTaggableOn.taggings_table, [:taggable_id, :taggable_type, :context], name: "taggings_taggable_context_idx"
  end
end
</file>

<file path="db/migrate/20210212143003_add_taggings_counter_cache_to_tags.acts_as_taggable_on_engine.rb">
# This migration comes from acts_as_taggable_on_engine (originally 3)
if ActiveRecord.gem_version >= Gem::Version.new("5.0")
  class AddTaggingsCounterCacheToTags < ActiveRecord::Migration[4.2]; end
else
  class AddTaggingsCounterCacheToTags < ActiveRecord::Migration; end
end
AddTaggingsCounterCacheToTags.class_eval do
  def self.up
    add_column ActsAsTaggableOn.tags_table, :taggings_count, :integer, default: 0

    ActsAsTaggableOn::Tag.reset_column_information
    ActsAsTaggableOn::Tag.find_each do |tag|
      ActsAsTaggableOn::Tag.reset_counters(tag.id, ActsAsTaggableOn.taggings_table)
    end
  end

  def self.down
    remove_column ActsAsTaggableOn.tags_table, :taggings_count
  end
end
</file>

<file path="db/migrate/20210212143004_add_missing_taggable_index.acts_as_taggable_on_engine.rb">
# This migration comes from acts_as_taggable_on_engine (originally 4)
if ActiveRecord.gem_version >= Gem::Version.new("5.0")
  class AddMissingTaggableIndex < ActiveRecord::Migration[4.2]; end
else
  class AddMissingTaggableIndex < ActiveRecord::Migration; end
end
AddMissingTaggableIndex.class_eval do
  def self.up
    add_index ActsAsTaggableOn.taggings_table, [:taggable_id, :taggable_type, :context], name: "taggings_taggable_context_idx"
  end

  def self.down
    remove_index ActsAsTaggableOn.taggings_table, name: "taggings_taggable_context_idx"
  end
end
</file>

<file path="db/migrate/20210212143005_change_collation_for_tag_names.acts_as_taggable_on_engine.rb">
# This migration comes from acts_as_taggable_on_engine (originally 5)
# This migration is added to circumvent issue #623 and have special characters
# work properly
if ActiveRecord.gem_version >= Gem::Version.new("5.0")
  class ChangeCollationForTagNames < ActiveRecord::Migration[4.2]; end
else
  class ChangeCollationForTagNames < ActiveRecord::Migration; end
end
ChangeCollationForTagNames.class_eval do
  def up
    if ActsAsTaggableOn::Utils.using_mysql?
      execute("ALTER TABLE #{ActsAsTaggableOn.tags_table} MODIFY name varchar(255) CHARACTER SET utf8 COLLATE utf8_bin;")
    end
  end
end
</file>

<file path="db/migrate/20210212143006_add_missing_indexes_on_taggings.acts_as_taggable_on_engine.rb">
# This migration comes from acts_as_taggable_on_engine (originally 6)
if ActiveRecord.gem_version >= Gem::Version.new("5.0")
  class AddMissingIndexesOnTaggings < ActiveRecord::Migration[4.2]; end
else
  class AddMissingIndexesOnTaggings < ActiveRecord::Migration; end
end
AddMissingIndexesOnTaggings.class_eval do
  def change
    add_index ActsAsTaggableOn.taggings_table, :tag_id unless index_exists? ActsAsTaggableOn.taggings_table, :tag_id
    add_index ActsAsTaggableOn.taggings_table, :taggable_id unless index_exists? ActsAsTaggableOn.taggings_table, :taggable_id
    add_index ActsAsTaggableOn.taggings_table, :taggable_type unless index_exists? ActsAsTaggableOn.taggings_table, :taggable_type
    add_index ActsAsTaggableOn.taggings_table, :tagger_id unless index_exists? ActsAsTaggableOn.taggings_table, :tagger_id
    add_index ActsAsTaggableOn.taggings_table, :context unless index_exists? ActsAsTaggableOn.taggings_table, :context

    unless index_exists? ActsAsTaggableOn.taggings_table, [:tagger_id, :tagger_type]
      add_index ActsAsTaggableOn.taggings_table, [:tagger_id, :tagger_type]
    end

    unless index_exists? ActsAsTaggableOn.taggings_table, [:taggable_id, :taggable_type, :tagger_id, :context], name: "taggings_idy"
      add_index ActsAsTaggableOn.taggings_table, [:taggable_id, :taggable_type, :tagger_id, :context], name: "taggings_idy"
    end
  end
end
</file>

<file path="db/migrate/20210220204055_add_preview_part_to_model.rb">
class AddPreviewPartToModel < ActiveRecord::Migration[6.1]
  def change
    add_reference :models, :preview_part, null: true, foreign_key: {to_table: :parts}
  end
end
</file>

<file path="db/migrate/20210225232756_create_creators.rb">
class CreateCreators < ActiveRecord::Migration[6.1]
  def change
    create_table :creators do |t|
      t.string :name, null: false
      t.string :thingiverse_user
      t.string :cults3d_user
      t.string :mmf_user
      t.string :cgtrader_user
      t.timestamps
    end
  end
end
</file>

<file path="db/migrate/20210225232841_add_creator_to_models.rb">
class AddCreatorToModels < ActiveRecord::Migration[6.1]
  def change
    add_reference :models, :creator, null: true, foreign_key: true
  end
end
</file>

<file path="db/migrate/20210301230017_create_links.rb">
class CreateLinks < ActiveRecord::Migration[6.1]
  def change
    create_table :links do |t|
      t.string :url
      t.references :linkable, polymorphic: true
      t.timestamps
    end
  end
end
</file>

<file path="db/migrate/20210302161202_drop_link_fields_from_creators.rb">
class DropLinkFieldsFromCreators < ActiveRecord::Migration[6.1]
  def change
    remove_column :creators, :thingiverse_user, :string
    remove_column :creators, :cults3d_user, :string
    remove_column :creators, :mmf_user, :string
    remove_column :creators, :cgtrader_user, :string
  end
end
</file>

<file path="db/migrate/20210314185822_remove_fk_constraint_from_model_preview_part.rb">
class RemoveFkConstraintFromModelPreviewPart < ActiveRecord::Migration[6.1]
  def change
    remove_foreign_key :models, :parts, column: :preview_part_id
  end
end
</file>

<file path="db/migrate/20210318202638_add_y_up_to_parts.rb">
class AddYUpToParts < ActiveRecord::Migration[6.1]
  def change
    add_column :parts, :y_up, :boolean, default: false, null: false
  end
end
</file>

<file path="db/migrate/20210321164508_create_images.rb">
class CreateImages < ActiveRecord::Migration[6.1]
  def change
    create_table :images do |t|
      t.references :model, null: false, foreign_key: true
      t.string :filename
      t.timestamps
    end
  end
end
</file>

<file path="db/migrate/20210330215825_create_delayed_jobs.rb">
class CreateDelayedJobs < ActiveRecord::Migration[6.1]
  def self.up
    create_table :delayed_jobs do |table|
      table.integer :priority, default: 0, null: false # Allows some jobs to jump to the front of the queue
      table.integer :attempts, default: 0, null: false # Provides for retries, but still fail eventually.
      table.text :handler, null: false # YAML-encoded string of the object that will do work
      table.text :last_error # reason for last failure (See Note below)
      table.datetime :run_at # When to run. Could be Time.zone.now for immediately, or sometime in the future.
      table.datetime :locked_at # Set when a client is working on this object
      table.datetime :failed_at # Set when all retries have failed (actually, by default, the record is deleted instead)
      table.string :locked_by # Who is working on this object (if locked)
      table.string :queue # The name of the queue this job is in
      table.timestamps null: true
    end

    add_index :delayed_jobs, [:priority, :run_at], name: "delayed_jobs_priority"
  end

  def self.down
    drop_table :delayed_jobs
  end
end
</file>

<file path="db/migrate/20220105233138_rename_parts_to_model_files.rb">
class RenamePartsToModelFiles < ActiveRecord::Migration[6.1]
  def change
    rename_table :parts, :model_files
    rename_column :models, :preview_part_id, :preview_file_id
  end
end
</file>

<file path="db/migrate/20220106220519_remove_images_table.rb">
class RemoveImagesTable < ActiveRecord::Migration[6.1]
  def change
    drop_table :images # rubocop:disable Rails/ReversibleMigration
  end
end
</file>

<file path="db/migrate/20220612220115_add_service_name_to_active_storage_blobs.active_storage.rb">
# This migration comes from active_storage (originally 20190112182829)
class AddServiceNameToActiveStorageBlobs < ActiveRecord::Migration[6.0]
  def up
    return unless table_exists?(:active_storage_blobs)

    unless column_exists?(:active_storage_blobs, :service_name)
      add_column :active_storage_blobs, :service_name, :string

      if (configured_service = ActiveStorage::Blob.service.name)
        ActiveStorage::Blob.unscoped.update_all(service_name: configured_service) # rubocop:disable Rails/SkipsModelValidations
      end

      change_column :active_storage_blobs, :service_name, :string, null: false
    end
  end

  def down
    return unless table_exists?(:active_storage_blobs)

    remove_column :active_storage_blobs, :service_name
  end
end
</file>

<file path="db/migrate/20220612220116_create_active_storage_variant_records.active_storage.rb">
# This migration comes from active_storage (originally 20191206030411)
class CreateActiveStorageVariantRecords < ActiveRecord::Migration[6.0]
  def change
    return unless table_exists?(:active_storage_blobs)

    # Use Active Record's configured type for primary key
    create_table :active_storage_variant_records, id: primary_key_type, if_not_exists: true do |t|
      t.belongs_to :blob, null: false, index: false, type: blobs_primary_key_type
      t.string :variation_digest, null: false

      t.index %i[blob_id variation_digest], name: "index_active_storage_variant_records_uniqueness", unique: true
      t.foreign_key :active_storage_blobs, column: :blob_id
    end
  end

  private

  def primary_key_type
    config = Rails.configuration.generators
    config.options[config.orm][:primary_key_type] || :primary_key
  end

  def blobs_primary_key_type
    pkey_name = connection.primary_key(:active_storage_blobs)
    pkey_column = connection.columns(:active_storage_blobs).find { |c| c.name == pkey_name }
    pkey_column.bigint? ? :bigint : pkey_column.type
  end
end
</file>

<file path="db/migrate/20220612220117_remove_not_null_on_active_storage_blobs_checksum.active_storage.rb">
# This migration comes from active_storage (originally 20211119233751)
class RemoveNotNullOnActiveStorageBlobsChecksum < ActiveRecord::Migration[6.0]
  def change
    return unless table_exists?(:active_storage_blobs)

    change_column_null(:active_storage_blobs, :checksum, true)
  end
end
</file>

<file path="db/migrate/20220614210023_devise_create_users.rb">
# frozen_string_literal: true

class DeviseCreateUsers < ActiveRecord::Migration[7.0]
  def change
    create_table :users do |t|
      ## Database authenticatable
      t.string :email, null: false, default: ""
      t.string :encrypted_password, null: false, default: ""

      ## Trackable
      # t.integer  :sign_in_count, default: 0, null: false
      # t.datetime :current_sign_in_at
      # t.datetime :last_sign_in_at
      # t.string   :current_sign_in_ip
      # t.string   :last_sign_in_ip

      ## Confirmable
      # t.string   :confirmation_token
      # t.datetime :confirmed_at
      # t.datetime :confirmation_sent_at
      # t.string   :unconfirmed_email # Only if using reconfirmable

      t.timestamps null: false
    end

    add_index :users, :email, unique: true
    # add_index :users, :confirmation_token,   unique: true
    # add_index :users, :unlock_token,         unique: true
  end
end
</file>

<file path="db/migrate/20220614211256_add_username_to_users.rb">
class AddUsernameToUsers < ActiveRecord::Migration[7.0]
  def change
    add_column :users, :username, :string, null: false # rubocop:disable Rails/NotNullColumn
    add_index :users, :username, unique: true
  end
end
</file>

<file path="db/migrate/20220614213902_add_admin_to_users.rb">
class AddAdminToUsers < ActiveRecord::Migration[7.0]
  def change
    add_column :users, :admin, :boolean, default: false, null: false
  end
end
</file>

<file path="db/migrate/20220617122809_add_pagination_settings_to_user.rb">
class AddPaginationSettingsToUser < ActiveRecord::Migration[7.0]
  def change
    add_column :users, :pagination_settings, :json, default: SiteSettings::UserDefaults::PAGINATION
  end
end
</file>

<file path="db/migrate/20220619174307_create_settings.rb">
class CreateSettings < ActiveRecord::Migration[7.0]
  def self.up
    create_table :settings do |t|
      t.string :var, null: false
      t.text :value, null: true
      t.timestamps
    end

    add_index :settings, %i[var], unique: true
  end

  def self.down
    drop_table :settings
  end
end
</file>

<file path="db/migrate/20220626152444_add_scale_factor_to_models.rb">
class AddScaleFactorToModels < ActiveRecord::Migration[7.0]
  def change
    add_column :models, :scale_factor, :decimal, null: false, default: 100.0
  end
end
</file>

<file path="db/migrate/20220702202932_add_digest_to_model_files.rb">
class AddDigestToModelFiles < ActiveRecord::Migration[7.0]
  def change
    add_column :model_files, :digest, :string
    add_index :model_files, :digest
  end
end
</file>

<file path="db/migrate/20221128165903_add_renderer_settings_to_users.rb">
class AddRendererSettingsToUsers < ActiveRecord::Migration[7.0]
  def change
    add_column :users, :renderer_settings, :json, default: SiteSettings::UserDefaults::RENDERER
  end
end
</file>

<file path="db/migrate/20221210001132_create_problems.rb">
class CreateProblems < ActiveRecord::Migration[7.0]
  def change
    create_table :problems do |t|
      t.references :problematic, polymorphic: true
      t.integer :category
      t.timestamps
    end
  end
end
</file>

<file path="db/migrate/20221219204414_acts_as_favoritor_migration.rb">
# frozen_string_literal: true

class ActsAsFavoritorMigration < ActiveRecord::Migration[7.0]
  def self.up
    create_table :favorites, force: true do |t|
      t.references :favoritable, polymorphic: true, null: false
      t.references :favoritor, polymorphic: true, null: false
      t.string :scope, default: ActsAsFavoritor.configuration.default_scope,
        null: false,
        index: true
      t.boolean :blocked, default: false, null: false, index: true
      t.timestamps
    end

    add_index :favorites,
      ["favoritor_id", "favoritor_type"],
      name: "fk_favorites"
    add_index :favorites,
      ["favoritable_id", "favoritable_type"],
      name: "fk_favoritables"
    add_index :favorites,
      ["favoritable_type", "favoritable_id", "favoritor_type",
        "favoritor_id", "scope"],
      name: "uniq_favorites__and_favoritables", unique: true
  end

  def self.down
    drop_table :favorites
  end
end
</file>

<file path="db/migrate/20221220223340_drop_printed_from_model_files.rb">
class DropPrintedFromModelFiles < ActiveRecord::Migration[7.0]
  def change
    remove_column :model_files, :printed, :boolean
  end
end
</file>

<file path="db/migrate/20230202210000_add_notes_excerpt_to_models.rb">
class AddNotesExcerptToModels < ActiveRecord::Migration[7.0]
  def change
    add_column :models, :notes, :text
    add_column :models, :excerpt, :text
  end
end
</file>

<file path="db/migrate/20230202210001_add_notes_excerpt_to_creators.rb">
class AddNotesExcerptToCreators < ActiveRecord::Migration[7.0]
  def change
    add_column :creators, :notes, :text
    add_column :creators, :excerpt, :text
  end
end
</file>

<file path="db/migrate/20230203150000_add_notes_excerpt_to_model_files.rb">
class AddNotesExcerptToModelFiles < ActiveRecord::Migration[7.0]
  def change
    add_column :model_files, :notes, :text
    add_column :model_files, :excerpt, :text
  end
end
</file>

<file path="db/migrate/20230221180921_remove_scale_factor_from_models.rb">
class RemoveScaleFactorFromModels < ActiveRecord::Migration[7.0]
  def change
    remove_column :models, :scale_factor, :decimal, default: "100.0", null: false
  end
end
</file>

<file path="db/migrate/20230222155910_rename_excerpt_to_caption.rb">
class RenameExcerptToCaption < ActiveRecord::Migration[7.0]
  def change
    rename_column :creators, :excerpt, :caption
    rename_column :models, :excerpt, :caption
    rename_column :model_files, :excerpt, :caption
  end
end
</file>

<file path="db/migrate/20230303150029_add_notes_name_caption_to_library.rb">
class AddNotesNameCaptionToLibrary < ActiveRecord::Migration[7.0]
  def change
    add_column :libraries, :notes, :string
    add_column :libraries, :caption, :string
    add_column :libraries, :name, :string
  end
end
</file>

<file path="db/migrate/20230305180823_add_tagregex_to_library.rb">
class AddTagregexToLibrary < ActiveRecord::Migration[7.0]
  def change
    add_column :libraries, :tag_regex, :text
  end
end
</file>

<file path="db/migrate/20230307215826_add_icon_to_library.rb">
class AddIconToLibrary < ActiveRecord::Migration[7.0]
  def change
    add_column :libraries, :icon, :text
  end
end
</file>

<file path="db/migrate/20230308004237_create_collection.rb">
class CreateCollection < ActiveRecord::Migration[7.0]
  def change
    create_table :collections do |t|
      t.string :name
      t.text :notes
      t.text :excerpt

      t.timestamps
    end
  end
end
</file>

<file path="db/migrate/20230308005021_add_collection_to_models.rb">
class AddCollectionToModels < ActiveRecord::Migration[7.0]
  def change
    add_reference :models, :collection, null: true, foreign_key: true
  end
end
</file>

<file path="db/migrate/20230313000000_rename_collection_excerpt_to_caption.rb">
class RenameCollectionExcerptToCaption < ActiveRecord::Migration[7.0]
  def change
    rename_column :collections, :excerpt, :caption
  end
end
</file>

<file path="db/migrate/20230313000001_change_pagination_settings_on_user.rb">
class ChangePaginationSettingsOnUser < ActiveRecord::Migration[7.0]
  def change
  end
end
</file>

<file path="db/migrate/20230316184012_add_tag_cloud_settings_to_user.rb">
class AddTagCloudSettingsToUser < ActiveRecord::Migration[7.0]
  def change
    add_column :users, :tag_cloud_settings, :json, default: SiteSettings::UserDefaults::TAG_CLOUD
  end
end
</file>

<file path="db/migrate/20230324000000_add_collection_to_collections.rb">
class AddCollectionToCollections < ActiveRecord::Migration[7.0]
  def change
    add_reference :collections, :collection, null: true, foreign_key: true
  end
end
</file>

<file path="db/migrate/20230615135601_add_slugs.rb">
class AddSlugs < ActiveRecord::Migration[7.0]
  def change
    add_column :models, :slug, :string
    add_index :models, :slug
    add_column :collections, :slug, :string
    add_index :collections, :slug
    add_column :creators, :slug, :string
    add_index :creators, :slug
  end
end
</file>

<file path="db/migrate/20230628195018_add_unique_constraint_to_names_and_slugs.rb">
class AddUniqueConstraintToNamesAndSlugs < ActiveRecord::Migration[7.0]
  def change
    add_index :creators, :name, unique: true
    remove_index :creators, :slug
    add_index :creators, :slug, unique: true
    add_index :collections, :name, unique: true
    remove_index :collections, :slug
    add_index :collections, :slug, unique: true
  end
end
</file>

<file path="db/migrate/20230707082403_add_size_to_model_files.rb">
class AddSizeToModelFiles < ActiveRecord::Migration[7.0]
  def change
    add_column :model_files, :size, :integer
  end
end
</file>

<file path="db/migrate/20230710102250_change_file_size_to_big_int.rb">
class ChangeFileSizeToBigInt < ActiveRecord::Migration[7.0]
  def up
    change_column :model_files, :size, :bigint
  end

  def down
    change_column :model_files, :size, :integer
  end
end
</file>

<file path="db/migrate/20230711111009_add_note_to_problems.rb">
class AddNoteToProblems < ActiveRecord::Migration[7.0]
  def change
    add_column :problems, :note, :string, default: nil
  end
end
</file>

<file path="db/migrate/20240122114207_add_problem_settings_to_user.rb">
class AddProblemSettingsToUser < ActiveRecord::Migration[7.0]
  def change
    add_column :users, :problem_settings, :json, default: Problem::DEFAULT_SEVERITIES
  end
end
</file>

<file path="db/migrate/20240127143358_add_license_to_model.rb">
class AddLicenseToModel < ActiveRecord::Migration[7.0]
  def change
    add_column :models, :license, :string
  end
end
</file>

<file path="db/migrate/20240131134832_add_ignored_to_problems.rb">
class AddIgnoredToProblems < ActiveRecord::Migration[7.0]
  def change
    add_column :problems, :ignored, :boolean, default: false, null: false
  end
end
</file>

<file path="db/migrate/20240208143319_add_presupported_version_to_model_files.rb">
class AddPresupportedVersionToModelFiles < ActiveRecord::Migration[7.0]
  def change
    add_reference :model_files, :presupported_version, foreign_key: {to_table: :model_files}
  end
end
</file>

<file path="db/migrate/20240209125409_add_file_list_settings_to_user.rb">
class AddFileListSettingsToUser < ActiveRecord::Migration[7.0]
  def change
    add_column :users, :file_list_settings, :json, default: SiteSettings::UserDefaults::FILE_LIST
  end
end
</file>

<file path="db/migrate/20240228130246_add_missing_unique_indexes.rb">
class AddMissingUniqueIndexes < ActiveRecord::Migration[7.0]
  def change
    add_index :libraries, :path, unique: true
    add_index :models, [:path, :library_id], unique: true
    add_index :model_files, [:filename, :model_id], unique: true
    add_index :problems, [:category, :problematic_id, :problematic_type], unique: true,
      name: "index_problems_on_category_and_problematic_id_and_type"
  end
end
</file>

<file path="db/migrate/20240306095646_create_flipper_tables.rb">
class CreateFlipperTables < ActiveRecord::Migration[7.0]
  def up
    create_table :flipper_features do |t|
      t.string :key, null: false
      t.timestamps null: false
    end
    add_index :flipper_features, :key, unique: true

    create_table :flipper_gates do |t|
      t.string :feature_key, null: false
      t.string :key, null: false
      t.text :value
      t.timestamps null: false
    end
    add_index :flipper_gates, [:feature_key, :key, :value], unique: true, length: {value: 255}
  end

  def down
    drop_table :flipper_gates
    drop_table :flipper_features
  end
end
</file>

<file path="db/migrate/20240319155251_rolify_create_roles.rb">
class RolifyCreateRoles < ActiveRecord::Migration[7.0]
  def change
    create_table(:roles) do |t|
      t.string :name
      t.references :resource, polymorphic: true

      t.timestamps
    end

    create_table(:users_roles, id: false) do |t|
      t.references :user
      t.references :role
    end

    add_index(:roles, :name)
    add_index(:roles, [:name, :resource_type, :resource_id])
    add_index(:users_roles, [:user_id, :role_id])
  end
end
</file>

<file path="db/migrate/20240319155903_remove_admin_from_users.rb">
class RemoveAdminFromUsers < ActiveRecord::Migration[7.0]
  def change
    remove_column :users, :admin, :boolean, default: false, null: false
  end
end
</file>

<file path="db/migrate/20240322143621_add_reset_password_token_to_users.rb">
class AddResetPasswordTokenToUsers < ActiveRecord::Migration[7.0]
  def change
    # This migration adds "reset_password_token" without the rest of devise/recoverable
    # because we want to use it for admin setup, before adding full recovery capability.
    add_column :users, :reset_password_token, :string
    add_index :users, :reset_password_token, unique: true
  end
end
</file>

<file path="db/migrate/20240410221112_add_rememberable_to_users.rb">
class AddRememberableToUsers < ActiveRecord::Migration[7.0]
  def change
    ## Devise/Rememberable
    add_column :users, :remember_created_at, :datetime
  end
end
</file>

<file path="db/migrate/20240410222922_add_reset_password_sent_at_to_users.rb">
class AddResetPasswordSentAtToUsers < ActiveRecord::Migration[7.0]
  def change
    ## Devise/Recoverable
    add_column :users, :reset_password_sent_at, :datetime
  end
end
</file>

<file path="db/migrate/20240418112821_drop_delayed_jobs.rb">
class DropDelayedJobs < ActiveRecord::Migration[7.0]
  def change
    drop_table :delayed_jobs do |table|
      table.integer :priority, default: 0, null: false # Allows some jobs to jump to the front of the queue
      table.integer :attempts, default: 0, null: false # Provides for retries, but still fail eventually.
      table.text :handler, null: false # YAML-encoded string of the object that will do work
      table.text :last_error # reason for last failure (See Note below)
      table.datetime :run_at # When to run. Could be Time.zone.now for immediately, or sometime in the future.
      table.datetime :locked_at # Set when a client is working on this object
      table.datetime :failed_at # Set when all retries have failed (actually, by default, the record is deleted instead)
      table.string :locked_by # Who is working on this object (if locked)
      table.string :queue # The name of the queue this job is in
      table.timestamps null: true
    end
  end
end
</file>

<file path="db/migrate/20240423102250_add_interface_language_to_users.rb">
class AddInterfaceLanguageToUsers < ActiveRecord::Migration[7.0]
  def change
    add_column :users, :interface_language, :string
  end
end
</file>

<file path="db/migrate/20240610120318_add_lockable_to_users.rb">
class AddLockableToUsers < ActiveRecord::Migration[7.0]
  def change
    ## Lockable
    change_table :users do |t|
      t.integer :failed_attempts, default: 0, null: false
      # t.string   :unlock_token # Only if unlock strategy is :email or :both
      t.datetime :locked_at
    end
  end
end
</file>

<file path="db/migrate/20240614085913_add_attachment_data_to_model_files.rb">
class AddAttachmentDataToModelFiles < ActiveRecord::Migration[7.0]
  def change
    add_column :model_files, :attachment_data, :json
  end
end
</file>

<file path="db/migrate/20240701142651_add_storage_service_to_libraries.rb">
class AddStorageServiceToLibraries < ActiveRecord::Migration[7.1]
  def change
    add_column :libraries, :storage_service, :string, null: false, default: "filesystem"
  end
end
</file>

<file path="db/migrate/20240703103707_add_s3_fields_to_library.rb">
class AddS3FieldsToLibrary < ActiveRecord::Migration[7.1]
  def change
    add_column :libraries, :s3_endpoint, :string, default: nil
    add_column :libraries, :s3_region, :string, default: nil
    add_column :libraries, :s3_bucket, :string, default: nil
    add_column :libraries, :s3_access_key_id, :string, default: nil
    add_column :libraries, :s3_secret_access_key, :string, default: nil
  end
end
</file>

<file path="db/migrate/20240703160732_change_index_on_library_path.rb">
class ChangeIndexOnLibraryPath < ActiveRecord::Migration[7.1]
  def up
    remove_index :libraries, :path
  end

  def down
    add_index :libraries, :path, unique: true
  end
end
</file>

<file path="db/migrate/20240727113215_create_federails_actors.federails.rb">
# This migration comes from federails (originally 20200712133150)
class CreateFederailsActors < ActiveRecord::Migration[7.0]
  def change
    create_table :federails_actors do |t|
      t.string :name
      t.string :federated_url
      t.string :username
      t.string :server
      t.string :inbox_url
      t.string :outbox_url
      t.string :followers_url
      t.string :followings_url
      t.string :profile_url

      t.references :user, null: true, foreign_key: {to_table: "users"}

      t.timestamps
      t.index :federated_url, unique: true
    end
    if foreign_key_exists?(:federails_actors, :users)
      remove_foreign_key :federails_actors, :users
    end
    remove_index :federails_actors, :user_id
    add_index :federails_actors, :user_id, unique: true
    add_foreign_key :federails_actors, :users
  end
end
</file>

<file path="db/migrate/20240727113216_create_federails_followings.federails.rb">
# This migration comes from federails (originally 20200712143127)
class CreateFederailsFollowings < ActiveRecord::Migration[7.0]
  def change
    create_table :federails_followings do |t|
      t.references :actor, null: false, foreign_key: {to_table: :federails_actors}
      t.references :target_actor, null: false, foreign_key: {to_table: :federails_actors}
      t.integer :status, default: 0
      t.string :federated_url

      t.timestamps

      t.index [:actor_id, :target_actor_id], unique: true
    end
  end
end
</file>

<file path="db/migrate/20240727113217_create_federails_activities.federails.rb">
# This migration comes from federails (originally 20200712174938)
class CreateFederailsActivities < ActiveRecord::Migration[7.0]
  def change
    create_table :federails_activities do |t|
      t.references :entity, polymorphic: true, null: false
      t.string :action, null: false, default: nil
      t.references :actor, null: false, foreign_key: {to_table: :federails_actors}

      t.timestamps
    end
  end
end
</file>

<file path="db/migrate/20240731165646_change_actor_entity_rel_to_polymorphic.federails.rb">
# This migration comes from federails (originally 20240731145400)
class ChangeActorEntityRelToPolymorphic < ActiveRecord::Migration[7.0]
  def change
    remove_foreign_key :federails_actors, column: :user_id, to_table: "users"
    remove_index :federails_actors, :user_id, unique: true
    change_table :federails_actors do |t|
      t.rename :user_id, :entity_id
      t.string :entity_type, null: true
      t.index [:entity_type, :entity_id], name: "index_federails_actors_on_entity", unique: true
    end
  end
end
</file>

<file path="db/migrate/20240827155630_create_caber_relations.rb">
class CreateCaberRelations < ActiveRecord::Migration[7.1]
  def change
    create_table :caber_relations do |t|
      t.references :subject, polymorphic: true, null: true
      t.string :permission
      t.references :object, polymorphic: true, null: false

      t.timestamps
      t.index [:subject_id, :subject_type, :object_id, :object_type], unique: true
    end
  end
end
</file>

<file path="db/migrate/20240904151944_add_public_i_ds_to_models.rb">
class AddPublicIDsToModels < ActiveRecord::Migration[7.1]
  def change
    [:models, :model_files, :problems, :creators, :collections, :libraries].each do |table|
      add_column table, :public_id, :string
      add_index table, :public_id
    end
  end
end
</file>

<file path="db/migrate/20240924122004_add_virtual_columns_for_sorting.rb">
class AddVirtualColumnsForSorting < ActiveRecord::Migration[7.1]
  def change
    [:models, :creators, :collections].each do |table|
      add_column table, :name_lower, :virtual, type: :string, as: "LOWER(name)", stored: true
      add_index table, :name_lower
    end
  end
end
</file>

<file path="db/migrate/20240926162407_add_keypair_to_actors.federails.rb">
# This migration comes from federails (originally 20240926142900)
class AddKeypairToActors < ActiveRecord::Migration[7.0]
  def change
    change_table :federails_actors do |t|
      t.text :public_key
      t.text :private_key
    end
  end
end
</file>

<file path="db/migrate/20241004194445_add_uuids.federails.rb">
# This migration comes from federails (originally 20241002094500)
class AddUuids < ActiveRecord::Migration[7.0]
  def change
    [
      :federails_actors,
      :federails_activities,
      :federails_followings
    ].each do |table|
      change_table table do |t|
        t.string :uuid, default: nil, index: {unique: true}
      end
    end
  end
end
</file>

<file path="db/migrate/20241007182824_create_comments.rb">
class CreateComments < ActiveRecord::Migration[7.1]
  def change
    create_table :comments do |t|
      t.string :public_id, null: false, index: {unique: true}
      t.references :commenter, polymorphic: true, null: false
      t.references :commentable, polymorphic: true, null: false
      t.text :comment

      t.timestamps
    end
  end
end
</file>

<file path="db/migrate/20241009122540_add_system_to_comments.rb">
class AddSystemToComments < ActiveRecord::Migration[7.1]
  def change
    add_column :comments, :system, :boolean, null: false, default: false
  end
end
</file>

<file path="db/migrate/20241015090803_add_omniauth_to_users.rb">
class AddOmniauthToUsers < ActiveRecord::Migration[7.1]
  def change
    add_column :users, :auth_provider, :string
    add_column :users, :auth_uid, :string
  end
end
</file>

<file path="db/migrate/20241017093301_add_sensitive_flag_to_models_and_comments.rb">
class AddSensitiveFlagToModelsAndComments < ActiveRecord::Migration[7.1]
  def change
    [:models, :comments].each do |table|
      add_column table, :sensitive, :boolean, null: false, default: false
    end
  end
end
</file>

<file path="db/migrate/20241017113112_add_sensitive_content_handling_to_users.rb">
class AddSensitiveContentHandlingToUsers < ActiveRecord::Migration[7.1]
  def change
    add_column :users, :sensitive_content_handling, :string, default: nil
  end
end
</file>

<file path="db/migrate/20241021124608_add_public_i_ds_to_users.rb">
class AddPublicIDsToUsers < ActiveRecord::Migration[7.1]
  def change
    change_table :users do |t|
      t.string :public_id
      t.index :public_id
    end
  end
end
</file>

<file path="db/migrate/20241025110218_remove_unneeded_indexes.rb">
class RemoveUnneededIndexes < ActiveRecord::Migration[7.1]
  def change
    # Remove duplicate indexes as detected by PgHero
    remove_index :favorites, name: "index_favorites_on_favoritable", column: [:favoritable_type, :favoritable_id]
    remove_index :federails_followings, name: "index_federails_followings_on_actor_id", column: :actor_id
    remove_index :roles, name: "index_roles_on_name", column: :name
    remove_index :taggings, name: "index_taggings_on_tag_id", column: :tag_id
    remove_index :taggings, name: "index_taggings_on_taggable_id", column: :taggable_id
    remove_index :taggings, name: "index_taggings_on_tagger_id", column: :tagger_id
    remove_index :users_roles, name: "index_users_roles_on_user_id", column: :user_id
  end
end
</file>

<file path="db/migrate/20241105121830_add_in_progress_to_problems.rb">
class AddInProgressToProblems < ActiveRecord::Migration[7.1]
  def change
    add_column :problems, :in_progress, :boolean, default: false, null: false
  end
end
</file>

<file path="db/migrate/20241122121621_add_approved_to_user.rb">
class AddApprovedToUser < ActiveRecord::Migration[7.2]
  def change
    change_table :users do |t|
      t.boolean :approved, default: true, null: false
      t.index :approved
    end
  end
end
</file>

<file path="db/migrate/20241128162213_create_federails_moderation_reports.federails_moderation.rb">
# This migration comes from federails_moderation (originally 20241127105043)
class CreateFederailsModerationReports < ActiveRecord::Migration[7.0]
  def change
    create_table :federails_moderation_reports do |t|
      t.string :federated_url
      t.references :federails_actor, foreign_key: true
      t.string :content
      t.references :object, polymorphic: true
      t.datetime :resolved_at
      t.string :resolution
      t.timestamps
    end
  end
end
</file>

<file path="db/migrate/20241128162214_create_federails_moderation_domain_blocks.federails_moderation.rb">
# This migration comes from federails_moderation (originally 20241128115659)
class CreateFederailsModerationDomainBlocks < ActiveRecord::Migration[7.0]
  def change
    create_table :federails_moderation_domain_blocks do |t|
      t.string "domain", null: false, index: {unique: true}
      t.timestamps
    end
  end
end
</file>

<file path="db/migrate/20250114105808_add_federation_attributes_to_comments.rb">
class AddFederationAttributesToComments < ActiveRecord::Migration[7.2]
  def change
    # Commenter is now optional
    change_column_null :comments, :commenter_id, true
    change_column_null :comments, :commenter_type, true
    # New columns for federation work
    add_column :comments, :federated_url, :string, null: true, default: nil
    add_reference :comments, :federails_actor, null: true, foreign_key: true
  end
end
</file>

<file path="db/migrate/20250121105010_add_s3_path_style_to_library.rb">
class AddS3PathStyleToLibrary < ActiveRecord::Migration[7.2]
  def change
    add_column :libraries, :s3_path_style, :boolean, default: true, null: false
  end
end
</file>

<file path="db/migrate/20250122171731_add_extensions_to_federails_actors.federails.rb">
# This migration comes from federails (originally 20250122160618)
class AddExtensionsToFederailsActors < ActiveRecord::Migration[7.1]
  def change
    add_column :federails_actors, :extensions, :json, default: nil, null: true
  end
end
</file>

<file path="db/migrate/20250222000000_add_creator_to_collections.rb">
class AddCreatorToCollections < ActiveRecord::Migration[7.0]
  def change
    add_reference :collections, :creator, null: true, foreign_key: true
  end
end
</file>

<file path="db/migrate/20250305171530_add_local_to_actors.federails.rb">
# This migration comes from federails (originally 20250301082500)
class AddLocalToActors < ActiveRecord::Migration[7.0]
  def change
    add_column :federails_actors, :local, :boolean, null: false, default: false

    reversible do |dir|
      dir.up do
        exec_update "UPDATE federails_actors SET local=true WHERE entity_type IS NOT NULL"
      end
    end
  end
end
</file>

<file path="db/migrate/20250407160721_add_actor_type_to_actors.federails.rb">
# This migration comes from federails (originally 20250329123939)
class AddActorTypeToActors < ActiveRecord::Migration[7.2]
  def change
    add_column :federails_actors, :actor_type, :string, null: true
  end
end
</file>

<file path="db/migrate/20250407160722_add_tombstoned_at_to_actors.federails.rb">
# This migration comes from federails (originally 20250329123940)
class AddTombstonedAtToActors < ActiveRecord::Migration[7.0]
  def change
    add_column :federails_actors, :tombstoned_at, :datetime, default: nil
  end
end
</file>

<file path="db/migrate/20250408111644_create_doorkeeper_tables.rb">
# frozen_string_literal: true

class CreateDoorkeeperTables < ActiveRecord::Migration[7.2]
  def change
    create_table :oauth_applications do |t|
      t.string :name, null: false
      t.string :uid, null: false
      t.string :secret, null: false
      t.text :redirect_uri
      t.string :scopes, null: false, default: ""
      t.boolean :confidential, null: false, default: true
      t.timestamps null: false
    end

    add_index :oauth_applications, :uid, unique: true

    create_table :oauth_access_grants do |t|
      t.references :resource_owner, null: false
      t.references :application, null: false
      t.string :token, null: false
      t.integer :expires_in, null: false
      t.text :redirect_uri, null: false
      t.string :scopes, null: false, default: ""
      t.datetime :created_at, null: false
      t.datetime :revoked_at
    end

    add_index :oauth_access_grants, :token, unique: true
    add_foreign_key(
      :oauth_access_grants,
      :oauth_applications,
      column: :application_id
    )

    create_table :oauth_access_tokens do |t|
      t.references :resource_owner, index: true

      # Remove `null: false` if you are planning to use Password
      # Credentials Grant flow that doesn't require an application.
      t.references :application, null: false

      # If you use a custom token generator you may need to change this column
      # from string to text, so that it accepts tokens larger than 255
      # characters. More info on custom token generators in:
      # https://github.com/doorkeeper-gem/doorkeeper/tree/v3.0.0.rc1#custom-access-token-generator
      #
      # t.text :token, null: false
      t.string :token, null: false

      t.string :refresh_token
      t.integer :expires_in
      t.string :scopes
      t.datetime :created_at, null: false
      t.datetime :revoked_at

      # The authorization server MAY issue a new refresh token, in which case
      # *the client MUST discard the old refresh token* and replace it with the
      # new refresh token. The authorization server MAY revoke the old
      # refresh token after issuing a new refresh token to the client.
      # @see https://datatracker.ietf.org/doc/html/rfc6749#section-6
      #
      # Doorkeeper implementation: if there is a `previous_refresh_token` column,
      # refresh tokens will be revoked after a related access token is used.
      # If there is no `previous_refresh_token` column, previous tokens are
      # revoked as soon as a new access token is created.
      #
      # Comment out this line if you want refresh tokens to be instantly
      # revoked after use.
      t.string :previous_refresh_token, null: false, default: ""
    end

    add_index :oauth_access_tokens, :token, unique: true

    reversible do |dir|
      dir.up do
        # See https://github.com/doorkeeper-gem/doorkeeper/issues/1592
        if ActiveRecord::Base.connection.adapter_name == "SQLServer"
          execute <<~SQL.squish
            CREATE UNIQUE NONCLUSTERED INDEX index_oauth_access_tokens_on_refresh_token ON oauth_access_tokens(refresh_token)
            WHERE refresh_token IS NOT NULL
          SQL
        else
          add_index :oauth_access_tokens, :refresh_token, unique: true
        end
      end
    end

    add_foreign_key(
      :oauth_access_tokens,
      :oauth_applications,
      column: :application_id
    )

    # Uncomment below to ensure a valid reference to the resource owner's table
    add_foreign_key :oauth_access_grants, :users, column: :resource_owner_id
    add_foreign_key :oauth_access_tokens, :users, column: :resource_owner_id
  end
end
</file>

<file path="db/migrate/20250408145956_add_owner_to_application.rb">
# frozen_string_literal: true

class AddOwnerToApplication < ActiveRecord::Migration[7.2]
  def change
    add_column :oauth_applications, :owner_id, :bigint, null: true
    add_column :oauth_applications, :owner_type, :string, null: true
    add_index :oauth_applications, [:owner_id, :owner_type]
  end
end
</file>

<file path="db/migrate/20250409120155_remove_default_actor_entity_type.rb">
class RemoveDefaultActorEntityType < ActiveRecord::Migration[7.2]
  def up
    change_column_default :federails_actors, :entity_type, nil
  end

  def down
  end
end
</file>

<file path="db/migrate/20250409125753_add_quota_to_users.rb">
class AddQuotaToUsers < ActiveRecord::Migration[7.2]
  def change
    add_column :users, :quota, :integer, default: 1, null: false
    add_column :users, :quota_use_site_default, :boolean, default: true, null: false
  end
end
</file>

<file path="db/migrate/20250423094525_add_lowercase_filename_virtual_field_to_model_files.rb">
class AddLowercaseFilenameVirtualFieldToModelFiles < ActiveRecord::Migration[8.0]
  def change
    add_column :model_files, :filename_lower, :virtual, type: :string, as: "LOWER(filename)", stored: true
    add_index :model_files, :filename_lower
  end
end
</file>

<file path="db/migrate/20250425104619_add_unique_index_to_links.rb">
class AddUniqueIndexToLinks < ActiveRecord::Migration[8.0]
  def change
    add_index :links, [:linkable_id, :linkable_type, :url]
  end
end
</file>

<file path="db/migrate/20250520111046_add_preview_to_model_file.rb">
class AddPreviewToModelFile < ActiveRecord::Migration[8.0]
  def change
    add_column :model_files, :previewable, :boolean, default: false, null: false
  end
end
</file>

<file path="db/migrate/20250609210440_create_altcha_solutions.rb">
class CreateAltchaSolutions < ActiveRecord::Migration[8.0]
  def change
    create_table(:altcha_solutions) do |t|
      t.string :algorithm
      t.string :challenge
      t.string :salt
      t.string :signature
      t.integer :number

      t.timestamps
    end

    add_index :altcha_solutions, [:algorithm, :challenge, :salt, :signature, :number], unique: true, name: "index_altcha_solutions"
  end
end
</file>

<file path="db/migrate/20250620141805_add_indexable_fields.rb">
class AddIndexableFields < ActiveRecord::Migration[8.0]
  def change
    [:models, :creators, :collections].each do |table|
      change_table table do |t|
        t.integer :indexable, null: true, default: nil
        t.integer :ai_indexable, null: true, default: nil
      end
    end
  end
end
</file>

<file path="db/migrate/20250621223410_change_indexable_from_integer_to_string.rb">
class ChangeIndexableFromIntegerToString < ActiveRecord::Migration[8.0]
  def up
    [:models, :creators, :collections].each do |table|
      change_column table, :indexable, :string
      change_column table, :ai_indexable, :string
    end
  end

  def down
    [:models, :creators, :collections].each do |table|
      change_column table, :indexable, :integer
      change_column table, :ai_indexable, :integer
    end
  end
end
</file>

<file path="db/migrate/20250629212656_add_order_indexes_to_tables.rb">
class AddOrderIndexesToTables < ActiveRecord::Migration[8.0]
  def change
    [:models, :creators, :collections].each do |table|
      change_table table do |t|
        t.index :created_at
        t.index :updated_at
      end
    end
  end
end
</file>

<file path="db/data_schema.rb">
DataMigrate::Data.define(version: 20250121164452)
</file>

<file path="db/schema.rb">
# This file is auto-generated from the current state of the database. Instead
# of editing this file, please use the migrations feature of Active Record to
# incrementally modify your database, and then regenerate this schema definition.
#
# This file is the source Rails uses to define your schema when running `bin/rails
# db:schema:load`. When creating a new database, `bin/rails db:schema:load` tends to
# be faster and is potentially less error prone than running all of your
# migrations from scratch. Old migrations may fail to apply correctly if those
# migrations use external dependencies or application code.
#
# It's strongly recommended that you check this file into your version control system.

ActiveRecord::Schema[8.0].define(version: 2025_06_29_212656) do
  create_table "altcha_solutions", force: :cascade do |t|
    t.string "algorithm"
    t.string "challenge"
    t.string "salt"
    t.string "signature"
    t.integer "number"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["algorithm", "challenge", "salt", "signature", "number"], name: "index_altcha_solutions", unique: true
  end

  create_table "caber_relations", force: :cascade do |t|
    t.string "subject_type"
    t.integer "subject_id"
    t.string "permission"
    t.string "object_type", null: false
    t.integer "object_id", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["object_type", "object_id"], name: "index_caber_relations_on_object"
    t.index ["subject_id", "subject_type", "object_id", "object_type"], name: "idx_on_subject_id_subject_type_object_id_object_typ_a279b094be", unique: true
    t.index ["subject_type", "subject_id"], name: "index_caber_relations_on_subject"
  end

  create_table "collections", force: :cascade do |t|
    t.string "name"
    t.text "notes"
    t.text "caption"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.integer "collection_id"
    t.string "slug"
    t.string "public_id"
    t.virtual "name_lower", type: :string, as: "LOWER(name)", stored: true
    t.integer "creator_id"
    t.string "indexable"
    t.string "ai_indexable"
    t.index ["collection_id"], name: "index_collections_on_collection_id"
    t.index ["created_at"], name: "index_collections_on_created_at"
    t.index ["creator_id"], name: "index_collections_on_creator_id"
    t.index ["name"], name: "index_collections_on_name", unique: true
    t.index ["name_lower"], name: "index_collections_on_name_lower"
    t.index ["public_id"], name: "index_collections_on_public_id"
    t.index ["slug"], name: "index_collections_on_slug", unique: true
    t.index ["updated_at"], name: "index_collections_on_updated_at"
  end

  create_table "comments", force: :cascade do |t|
    t.string "public_id", null: false
    t.string "commenter_type"
    t.integer "commenter_id"
    t.string "commentable_type", null: false
    t.integer "commentable_id", null: false
    t.text "comment"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.boolean "system", default: false, null: false
    t.boolean "sensitive", default: false, null: false
    t.string "federated_url"
    t.integer "federails_actor_id"
    t.index ["commentable_type", "commentable_id"], name: "index_comments_on_commentable"
    t.index ["commenter_type", "commenter_id"], name: "index_comments_on_commenter"
    t.index ["federails_actor_id"], name: "index_comments_on_federails_actor_id"
    t.index ["public_id"], name: "index_comments_on_public_id", unique: true
  end

  create_table "creators", force: :cascade do |t|
    t.string "name", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.text "notes"
    t.text "caption"
    t.string "slug"
    t.string "public_id"
    t.virtual "name_lower", type: :string, as: "LOWER(name)", stored: true
    t.string "indexable"
    t.string "ai_indexable"
    t.index ["created_at"], name: "index_creators_on_created_at"
    t.index ["name"], name: "index_creators_on_name", unique: true
    t.index ["name_lower"], name: "index_creators_on_name_lower"
    t.index ["public_id"], name: "index_creators_on_public_id"
    t.index ["slug"], name: "index_creators_on_slug", unique: true
    t.index ["updated_at"], name: "index_creators_on_updated_at"
  end

  create_table "data_migrations", primary_key: "version", id: :string, force: :cascade do |t|
  end

  create_table "favorites", force: :cascade do |t|
    t.string "favoritable_type", null: false
    t.integer "favoritable_id", null: false
    t.string "favoritor_type", null: false
    t.integer "favoritor_id", null: false
    t.string "scope", default: "printed", null: false
    t.boolean "blocked", default: false, null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["blocked"], name: "index_favorites_on_blocked"
    t.index ["favoritable_id", "favoritable_type"], name: "fk_favoritables"
    t.index ["favoritable_type", "favoritable_id", "favoritor_type", "favoritor_id", "scope"], name: "uniq_favorites__and_favoritables", unique: true
    t.index ["favoritor_id", "favoritor_type"], name: "fk_favorites"
    t.index ["favoritor_type", "favoritor_id"], name: "index_favorites_on_favoritor"
    t.index ["scope"], name: "index_favorites_on_scope"
  end

  create_table "federails_activities", force: :cascade do |t|
    t.string "entity_type", null: false
    t.integer "entity_id", null: false
    t.string "action", null: false
    t.integer "actor_id", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.string "uuid"
    t.index ["actor_id"], name: "index_federails_activities_on_actor_id"
    t.index ["entity_type", "entity_id"], name: "index_federails_activities_on_entity"
    t.index ["uuid"], name: "index_federails_activities_on_uuid", unique: true
  end

  create_table "federails_actors", force: :cascade do |t|
    t.string "name"
    t.string "federated_url"
    t.string "username"
    t.string "server"
    t.string "inbox_url"
    t.string "outbox_url"
    t.string "followers_url"
    t.string "followings_url"
    t.string "profile_url"
    t.integer "entity_id"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.string "entity_type"
    t.text "public_key"
    t.text "private_key"
    t.string "uuid"
    t.json "extensions"
    t.boolean "local", default: false, null: false
    t.string "actor_type"
    t.datetime "tombstoned_at"
    t.index ["entity_type", "entity_id"], name: "index_federails_actors_on_entity", unique: true
    t.index ["federated_url"], name: "index_federails_actors_on_federated_url", unique: true
    t.index ["uuid"], name: "index_federails_actors_on_uuid", unique: true
  end

  create_table "federails_followings", force: :cascade do |t|
    t.integer "actor_id", null: false
    t.integer "target_actor_id", null: false
    t.integer "status", default: 0
    t.string "federated_url"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.string "uuid"
    t.index ["actor_id", "target_actor_id"], name: "index_federails_followings_on_actor_id_and_target_actor_id", unique: true
    t.index ["target_actor_id"], name: "index_federails_followings_on_target_actor_id"
    t.index ["uuid"], name: "index_federails_followings_on_uuid", unique: true
  end

  create_table "federails_moderation_domain_blocks", force: :cascade do |t|
    t.string "domain", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["domain"], name: "index_federails_moderation_domain_blocks_on_domain", unique: true
  end

  create_table "federails_moderation_reports", force: :cascade do |t|
    t.string "federated_url"
    t.integer "federails_actor_id"
    t.string "content"
    t.string "object_type"
    t.integer "object_id"
    t.datetime "resolved_at"
    t.string "resolution"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["federails_actor_id"], name: "index_federails_moderation_reports_on_federails_actor_id"
    t.index ["object_type", "object_id"], name: "index_federails_moderation_reports_on_object"
  end

  create_table "flipper_features", force: :cascade do |t|
    t.string "key", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["key"], name: "index_flipper_features_on_key", unique: true
  end

  create_table "flipper_gates", force: :cascade do |t|
    t.string "feature_key", null: false
    t.string "key", null: false
    t.text "value"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["feature_key", "key", "value"], name: "index_flipper_gates_on_feature_key_and_key_and_value", unique: true
  end

  create_table "libraries", force: :cascade do |t|
    t.string "path", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.string "notes"
    t.string "caption"
    t.string "name"
    t.text "tag_regex"
    t.text "icon"
    t.string "storage_service", default: "filesystem", null: false
    t.string "s3_endpoint"
    t.string "s3_region"
    t.string "s3_bucket"
    t.string "s3_access_key_id"
    t.string "s3_secret_access_key"
    t.string "public_id"
    t.boolean "s3_path_style", default: true, null: false
    t.index ["public_id"], name: "index_libraries_on_public_id"
  end

  create_table "links", force: :cascade do |t|
    t.string "url"
    t.string "linkable_type"
    t.integer "linkable_id"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["linkable_id", "linkable_type", "url"], name: "index_links_on_linkable_id_and_linkable_type_and_url"
    t.index ["linkable_type", "linkable_id"], name: "index_links_on_linkable"
  end

  create_table "model_files", force: :cascade do |t|
    t.string "filename"
    t.integer "model_id", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.boolean "presupported", default: false, null: false
    t.boolean "y_up", default: false, null: false
    t.string "digest"
    t.text "notes"
    t.text "caption"
    t.bigint "size"
    t.integer "presupported_version_id"
    t.json "attachment_data"
    t.string "public_id"
    t.virtual "filename_lower", type: :string, as: "LOWER(filename)", stored: true
    t.boolean "previewable", default: false, null: false
    t.index ["digest"], name: "index_model_files_on_digest"
    t.index ["filename", "model_id"], name: "index_model_files_on_filename_and_model_id", unique: true
    t.index ["filename_lower"], name: "index_model_files_on_filename_lower"
    t.index ["model_id"], name: "index_model_files_on_model_id"
    t.index ["presupported_version_id"], name: "index_model_files_on_presupported_version_id"
    t.index ["public_id"], name: "index_model_files_on_public_id"
  end

  create_table "models", force: :cascade do |t|
    t.string "name", null: false
    t.string "path", null: false
    t.integer "library_id", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.integer "preview_file_id"
    t.integer "creator_id"
    t.text "notes"
    t.text "caption"
    t.integer "collection_id"
    t.string "slug"
    t.string "license"
    t.string "public_id"
    t.virtual "name_lower", type: :string, as: "LOWER(name)", stored: true
    t.boolean "sensitive", default: false, null: false
    t.string "indexable"
    t.string "ai_indexable"
    t.index ["collection_id"], name: "index_models_on_collection_id"
    t.index ["created_at"], name: "index_models_on_created_at"
    t.index ["creator_id"], name: "index_models_on_creator_id"
    t.index ["library_id"], name: "index_models_on_library_id"
    t.index ["name_lower"], name: "index_models_on_name_lower"
    t.index ["path", "library_id"], name: "index_models_on_path_and_library_id", unique: true
    t.index ["preview_file_id"], name: "index_models_on_preview_file_id"
    t.index ["public_id"], name: "index_models_on_public_id"
    t.index ["slug"], name: "index_models_on_slug"
    t.index ["updated_at"], name: "index_models_on_updated_at"
  end

  create_table "oauth_access_grants", force: :cascade do |t|
    t.integer "resource_owner_id", null: false
    t.integer "application_id", null: false
    t.string "token", null: false
    t.integer "expires_in", null: false
    t.text "redirect_uri", null: false
    t.string "scopes", default: "", null: false
    t.datetime "created_at", null: false
    t.datetime "revoked_at"
    t.index ["application_id"], name: "index_oauth_access_grants_on_application_id"
    t.index ["resource_owner_id"], name: "index_oauth_access_grants_on_resource_owner_id"
    t.index ["token"], name: "index_oauth_access_grants_on_token", unique: true
  end

  create_table "oauth_access_tokens", force: :cascade do |t|
    t.integer "resource_owner_id"
    t.integer "application_id", null: false
    t.string "token", null: false
    t.string "refresh_token"
    t.integer "expires_in"
    t.string "scopes"
    t.datetime "created_at", null: false
    t.datetime "revoked_at"
    t.string "previous_refresh_token", default: "", null: false
    t.index ["application_id"], name: "index_oauth_access_tokens_on_application_id"
    t.index ["refresh_token"], name: "index_oauth_access_tokens_on_refresh_token", unique: true
    t.index ["resource_owner_id"], name: "index_oauth_access_tokens_on_resource_owner_id"
    t.index ["token"], name: "index_oauth_access_tokens_on_token", unique: true
  end

  create_table "oauth_applications", force: :cascade do |t|
    t.string "name", null: false
    t.string "uid", null: false
    t.string "secret", null: false
    t.text "redirect_uri"
    t.string "scopes", default: "", null: false
    t.boolean "confidential", default: true, null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.bigint "owner_id"
    t.string "owner_type"
    t.index ["owner_id", "owner_type"], name: "index_oauth_applications_on_owner_id_and_owner_type"
    t.index ["uid"], name: "index_oauth_applications_on_uid", unique: true
  end

  create_table "problems", force: :cascade do |t|
    t.string "problematic_type"
    t.integer "problematic_id"
    t.integer "category"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.string "note"
    t.boolean "ignored", default: false, null: false
    t.string "public_id"
    t.boolean "in_progress", default: false, null: false
    t.index ["category", "problematic_id", "problematic_type"], name: "index_problems_on_category_and_problematic_id_and_type", unique: true
    t.index ["problematic_type", "problematic_id"], name: "index_problems_on_problematic"
    t.index ["public_id"], name: "index_problems_on_public_id"
  end

  create_table "roles", force: :cascade do |t|
    t.string "name"
    t.string "resource_type"
    t.integer "resource_id"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["name", "resource_type", "resource_id"], name: "index_roles_on_name_and_resource_type_and_resource_id"
    t.index ["resource_type", "resource_id"], name: "index_roles_on_resource"
  end

  create_table "settings", force: :cascade do |t|
    t.string "var", null: false
    t.text "value"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["var"], name: "index_settings_on_var", unique: true
  end

  create_table "taggings", force: :cascade do |t|
    t.integer "tag_id"
    t.string "taggable_type"
    t.integer "taggable_id"
    t.string "tagger_type"
    t.integer "tagger_id"
    t.string "context", limit: 128
    t.datetime "created_at", precision: nil
    t.index ["context"], name: "index_taggings_on_context"
    t.index ["tag_id", "taggable_id", "taggable_type", "context", "tagger_id", "tagger_type"], name: "taggings_idx", unique: true
    t.index ["taggable_id", "taggable_type", "context"], name: "taggings_taggable_context_idx"
    t.index ["taggable_id", "taggable_type", "tagger_id", "context"], name: "taggings_idy"
    t.index ["taggable_type"], name: "index_taggings_on_taggable_type"
    t.index ["tagger_id", "tagger_type"], name: "index_taggings_on_tagger_id_and_tagger_type"
  end

  create_table "tags", force: :cascade do |t|
    t.string "name"
    t.datetime "created_at", precision: nil
    t.datetime "updated_at", precision: nil
    t.integer "taggings_count", default: 0
    t.index ["name"], name: "index_tags_on_name", unique: true
  end

  create_table "users", force: :cascade do |t|
    t.string "email", default: "", null: false
    t.string "encrypted_password", default: "", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.string "username", null: false
    t.json "pagination_settings", default: {"models" => true, "creators" => true, "collections" => true, "per_page" => 12}
    t.json "renderer_settings", default: {"grid_width" => 200, "grid_depth" => 200, "show_grid" => true, "enable_pan_zoom" => false, "background_colour" => "#000000", "object_colour" => "#cccccc", "render_style" => "normals"}
    t.json "tag_cloud_settings", default: {"threshold" => 2, "heatmap" => true, "keypair" => true, "sorting" => "frequency"}
    t.json "problem_settings", default: {"missing" => "danger", "empty" => "info", "nesting" => "warning", "inefficient" => "info", "duplicate" => "warning", "no_image" => "silent", "no_3d_model" => "silent", "non_manifold" => "warning", "inside_out" => "warning", "no_license" => "silent", "no_links" => "silent", "no_creator" => "silent", "no_tags" => "silent"}
    t.json "file_list_settings", default: {"hide_presupported_versions" => true}
    t.string "reset_password_token"
    t.datetime "remember_created_at"
    t.datetime "reset_password_sent_at"
    t.string "interface_language"
    t.integer "failed_attempts", default: 0, null: false
    t.datetime "locked_at"
    t.string "auth_provider"
    t.string "auth_uid"
    t.string "sensitive_content_handling"
    t.string "public_id"
    t.boolean "approved", default: true, null: false
    t.integer "quota", default: 1, null: false
    t.boolean "quota_use_site_default", default: true, null: false
    t.index ["approved"], name: "index_users_on_approved"
    t.index ["email"], name: "index_users_on_email", unique: true
    t.index ["public_id"], name: "index_users_on_public_id"
    t.index ["reset_password_token"], name: "index_users_on_reset_password_token", unique: true
    t.index ["username"], name: "index_users_on_username", unique: true
  end

  create_table "users_roles", id: false, force: :cascade do |t|
    t.integer "user_id"
    t.integer "role_id"
    t.index ["role_id"], name: "index_users_roles_on_role_id"
    t.index ["user_id", "role_id"], name: "index_users_roles_on_user_id_and_role_id"
  end

  add_foreign_key "collections", "collections"
  add_foreign_key "collections", "creators"
  add_foreign_key "comments", "federails_actors"
  add_foreign_key "federails_activities", "federails_actors", column: "actor_id"
  add_foreign_key "federails_followings", "federails_actors", column: "actor_id"
  add_foreign_key "federails_followings", "federails_actors", column: "target_actor_id"
  add_foreign_key "federails_moderation_reports", "federails_actors"
  add_foreign_key "model_files", "model_files", column: "presupported_version_id"
  add_foreign_key "model_files", "models"
  add_foreign_key "models", "collections"
  add_foreign_key "models", "creators"
  add_foreign_key "models", "libraries"
  add_foreign_key "oauth_access_grants", "oauth_applications", column: "application_id"
  add_foreign_key "oauth_access_grants", "users", column: "resource_owner_id"
  add_foreign_key "oauth_access_tokens", "oauth_applications", column: "application_id"
  add_foreign_key "oauth_access_tokens", "users", column: "resource_owner_id"
  add_foreign_key "taggings", "tags"
end
</file>

<file path="db/seeds.rb">
# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the bin/rails db:seed command (or created alongside the database with db:setup).
#
# Examples:
#
#   movies = Movie.create([{ name: 'Star Wars' }, { name: 'Lord of the Rings' }])
#   Character.create(name: 'Luke', movie: movies.first)
</file>

<file path="docker/s6-rc.d/manyfold/manyfold/run">
#!/command/with-contenv sh
cd /usr/src/app
bin/docker-entrypoint.sh foreman start
</file>

<file path="docker/s6-rc.d/manyfold/manyfold/type">
longrun
</file>

<file path="docker/s6-rc.d/redis/redis/run">
#!/usr/bin/execlineb -P
redis-server
</file>

<file path="docker/s6-rc.d/redis/redis/type">
longrun
</file>

<file path="docker/base.dockerfile">
## COMMON BASE ##########################################

FROM ruby:3.4.1-alpine AS base
WORKDIR /usr/src/app

RUN apk add --no-cache \
  tzdata

RUN gem install bundler -v 2.5.23
RUN bundle config set --local deployment 'true'
RUN bundle config set --local without 'development test'
</file>

<file path="docker/build.dockerfile">
## BUILD STAGE ##########################################

FROM base AS build

RUN apk add --no-cache \
  alpine-sdk \
  bzip2 \
  ca-certificates \
  gmp-dev \
  libffi-dev \
  procps \
  yaml-dev \
  zlib-dev \
  nodejs=~22.13 \
  npm \
  postgresql-dev \
  mariadb-dev \
  libarchive

COPY package.json .
COPY yarn.lock .
RUN npm install --global corepack
RUN corepack enable yarn
RUN yarn install

COPY .ruby-version .
COPY Gemfile* ./
RUN bundle install

COPY . .
RUN \
  DATABASE_URL="nulldb://user:pass@localhost/db" \
  SECRET_KEY_BASE="placeholder" \
  RACK_ENV="production" \
  RAILS_ASSETS_PRECOMPILE=1 \
  bundle exec rake assets:precompile
</file>

<file path="docker/manyfold.dockerfile">
# syntax = devthefuture/dockerfile-x

INCLUDE docker/base.dockerfile
INCLUDE docker/build.dockerfile
INCLUDE docker/runtime.dockerfile

## STANDARD IMAGE ##########################################

FROM runtime as manyfold
</file>

<file path="docker/runtime.dockerfile">
## RUNTIME STAGE ##########################################

FROM base as runtime

RUN apk add --no-cache \
  file \
  s6-overlay \
  jemalloc

COPY . .
COPY --from=build /usr/src/app/vendor/bundle vendor/bundle
COPY --from=build /usr/src/app/public/assets public/assets

# Copy only the dynamic libraries we need from the build image
# It would be better to statically link the gems during build, if we can
COPY --from=build \
  /usr/lib/libmariadb.so.* \
  /usr/lib/libarchive.so.* \
  /usr/lib/libacl.so.*\
  /usr/lib/libexpat.so.* \
  /usr/lib/liblzma.so.* \
  /usr/lib/libzstd.so.* \
  /usr/lib/liblz4.so.* \
  /usr/lib/libbz2.so.* \
  /usr/lib/libpq.so.* \
  /usr/lib

# Set up jemalloc and YJIT for performance
ENV LD_PRELOAD="libjemalloc.so.2"
ENV MALLOC_CONF="dirty_decay_ms:1000,narenas:2,background_thread:true"
ENV RUBY_YJIT_ENABLE="1"

ARG APP_VERSION
ARG GIT_SHA
ARG DOCKER_TAG
ENV APP_VERSION=$APP_VERSION
ENV GIT_SHA=$GIT_SHA
ENV DOCKER_TAG=$DOCKER_TAG

# Runtime environment variables
ENV PORT=3214
ENV RACK_ENV=production
ENV RAILS_ENV=production
ENV NODE_ENV=production
ENV RAILS_SERVE_STATIC_FILES=true
ENV AWS_RESPONSE_CHECKSUM_VALIDATION=when_required
ENV AWS_REQUEST_CHECKSUM_CALCULATION=when_required
# PUID and PGID env vars - these control what user the app is run as inside
# the entrypoint script. Default to root for backwards compatibility with existing
# installations, but the admin will be warned if these aren't overridden with something
# else at runtime, and this default will be removed in future.
ENV PUID=0
ENV PGID=0

RUN gem install foreman

# Tell s6 we're in a read-only root filesystem
ENV S6_READ_ONLY_ROOT=1

# Run the app itself as an s6 service
COPY ./docker/s6-rc.d/manyfold/manyfold /etc/s6-overlay/s6-rc.d/manyfold
COPY ./docker/s6-rc.d/manyfold/user/contents.d/manyfold /etc/s6-overlay/s6-rc.d/user/contents.d/manyfold

EXPOSE 3214
ENTRYPOINT ["/init"]
</file>

<file path="docker/solo.dockerfile">
# syntax = devthefuture/dockerfile-x

INCLUDE docker/base.dockerfile
INCLUDE docker/build.dockerfile
INCLUDE docker/runtime.dockerfile

## SOLO IMAGE ##########################################

FROM runtime as solo

# Install and run redis service
RUN apk add --no-cache redis
COPY ./docker/s6-rc.d/redis/redis /etc/s6-overlay/s6-rc.d/redis
COPY ./docker/s6-rc.d/redis/user/contents.d/redis /etc/s6-overlay/s6-rc.d/user/contents.d/redis
COPY ./docker/s6-rc.d/redis/manyfold/dependencies.d/redis /etc/s6-overlay/s6-rc.d/manyfold/dependencies.d/redis

# Set parameters for solo mode connections
ENV DATABASE_URL=sqlite3:/config/manyfold.sqlite3
ENV REDIS_URL=redis://localhost:6379
ENV DEFAULT_WORKER_CONCURRENCY=1
</file>

<file path="public/400.html">
<!doctype html>

<html lang="en">

  <head>

    <title>The server cannot process the request due to a client error (400 Bad Request)</title>

    <meta charset="utf-8">
    <meta name="viewport" content="initial-scale=1, width=device-width">
    <meta name="robots" content="noindex, nofollow">

    <style>

      *, *::before, *::after {
        box-sizing: border-box;
      }

      * {
        margin: 0;
      }

      html {
        font-size: 16px;
      }

      body {
        background: #FFF;
        color: #261B23;
        display: grid;
        font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, Aptos, Roboto, "Segoe UI", "Helvetica Neue", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
        font-size: clamp(1rem, 2.5vw, 2rem);
        -webkit-font-smoothing: antialiased;
        font-style: normal;
        font-weight: 400;
        letter-spacing: -0.0025em;
        line-height: 1.4;
        min-height: 100vh;
        place-items: center;
        text-rendering: optimizeLegibility;
        -webkit-text-size-adjust: 100%;
      }

      a {
        color: inherit;
        font-weight: 700;
        text-decoration: underline;
        text-underline-offset: 0.0925em;
      }

      b, strong {
        font-weight: 700;
      }

      i, em {
        font-style: italic;
      }

      main {
        display: grid;
        gap: 1em;
        padding: 2em;
        place-items: center;
        text-align: center;
      }

      main header {
        width: min(100%, 12em);
      }

      main header svg {
        height: auto;
        max-width: 100%;
        width: 100%;
      }

      main article {
        width: min(100%, 30em);
      }

      main article p {
        font-size: 75%;
      }

      main article br {

        display: none;

        @media(min-width: 48em) {
          display: inline;
        }

      }

    </style>

  </head>

  <body>

    <!-- This file lives in public/400.html -->

    <main>
      <header>
        <svg height="172" viewBox="0 0 480 172" width="480" xmlns="http://www.w3.org/2000/svg"><path d="m124.48 3.00509-45.6889 100.02991h26.2239v-28.1168h38.119v28.1168h21.628v35.145h-21.628v30.82h-37.308v-30.82h-72.1833v-31.901l50.2851-103.27391zm115.583 168.69891c-40.822 0-64.884-35.146-64.884-85.7015 0-50.5554 24.062-85.700907 64.884-85.700907 40.823 0 64.884 35.145507 64.884 85.700907 0 50.5555-24.061 85.7015-64.884 85.7015zm0-133.2831c-17.572 0-22.709 21.8984-22.709 47.5816 0 25.6835 5.137 47.5815 22.709 47.5815 17.303 0 22.71-21.898 22.71-47.5815 0-25.6832-5.407-47.5816-22.71-47.5816zm140.456 133.2831c-40.823 0-64.884-35.146-64.884-85.7015 0-50.5554 24.061-85.700907 64.884-85.700907 40.822 0 64.884 35.145507 64.884 85.700907 0 50.5555-24.062 85.7015-64.884 85.7015zm0-133.2831c-17.573 0-22.71 21.8984-22.71 47.5816 0 25.6835 5.137 47.5815 22.71 47.5815 17.302 0 22.709-21.898 22.709-47.5815 0-25.6832-5.407-47.5816-22.709-47.5816z" fill="#f0eff0"/><path d="m123.606 85.4445c3.212 1.0523 5.538 4.2089 5.538 8.0301 0 6.1472-4.209 9.5254-11.298 9.5254h-15.617v-34.0033h14.565c7.089 0 11.353 3.1566 11.353 9.2484 0 3.6551-2.049 6.3134-4.541 7.1994zm-12.904-2.9905h5.095c2.603 0 3.988-.9968 3.988-3.1013 0-2.1044-1.385-3.0459-3.988-3.0459h-5.095zm0 6.6456v6.5902h5.981c2.492 0 3.877-1.3291 3.877-3.2674 0-2.049-1.385-3.3228-3.877-3.3228zm43.786 13.9004h-8.362v-1.274c-.831.831-3.323 1.717-5.981 1.717-4.929 0-9.083-2.769-9.083-8.0301 0-4.818 4.154-7.9193 9.581-7.9193 2.049 0 4.486.6646 5.483 1.3845v-1.606c0-1.606-.942-2.9905-3.046-2.9905-1.606 0-2.548.7199-2.935 1.8275h-8.197c.72-4.8181 4.985-8.6393 11.409-8.6393 7.088 0 11.131 3.7659 11.131 10.2453zm-8.362-6.9779v-1.4399c-.554-1.0522-2.049-1.7167-3.655-1.7167-1.717 0-3.434.7199-3.434 2.3813 0 1.7168 1.717 2.4367 3.434 2.4367 1.606 0 3.101-.6645 3.655-1.6614zm27.996 6.9779v-1.994c-1.163 1.329-3.599 2.548-6.147 2.548-7.199 0-11.131-5.8151-11.131-13.0145s3.932-13.0143 11.131-13.0143c2.548 0 4.984 1.2184 6.147 2.5475v-13.0697h8.695v35.997zm0-9.1931v-6.5902c-.664-1.3291-2.159-2.326-3.821-2.326-2.99 0-4.763 2.4368-4.763 5.6488s1.773 5.5934 4.763 5.5934c1.717 0 3.157-.9415 3.821-2.326zm35.471-2.049h-3.101v11.2421h-8.806v-34.0033h15.285c7.31 0 12.35 4.1535 12.35 11.5744 0 5.1503-2.603 8.6947-6.757 10.2453l7.975 12.1836h-9.858zm-3.101-15.2849v8.1962h5.538c3.156 0 4.596-1.606 4.596-4.0981s-1.44-4.0981-4.596-4.0981zm36.957 17.8323h8.03c-.886 5.7597-5.206 9.2487-11.685 9.2487-7.643 0-12.682-5.2613-12.682-13.0145 0-7.6978 5.316-13.0143 12.515-13.0143 7.643 0 11.962 5.095 11.962 12.5159v2.1598h-16.115c.277 2.9905 1.827 4.5965 4.32 4.5965 1.772 0 3.156-.7753 3.655-2.4921zm-3.822-10.0237c-2.049 0-3.433 1.2737-3.987 3.5997h7.532c-.111-2.0491-1.385-3.5997-3.545-3.5997zm30.98 27.5234v-10.799c-1.163 1.329-3.6 2.548-6.147 2.548-7.2 0-11.132-5.9259-11.132-13.0145 0-7.144 3.932-13.0143 11.132-13.0143 2.547 0 4.984 1.2184 6.147 2.5475v-1.9937h8.695v33.726zm0-17.9981v-6.5902c-.665-1.3291-2.105-2.326-3.821-2.326-2.991 0-4.763 2.4368-4.763 5.6488s1.772 5.5934 4.763 5.5934c1.661 0 3.156-.9415 3.821-2.326zm36.789-15.7279v24.921h-8.695v-2.16c-1.329 1.551-3.821 2.714-6.646 2.714-5.482 0-8.75-3.5999-8.75-9.1379v-16.3371h8.64v14.288c0 2.1045.996 3.5997 3.212 3.5997 1.606 0 3.101-1.0522 3.544-2.769v-15.1187zm19.084 16.2263h8.03c-.886 5.7597-5.206 9.2487-11.685 9.2487-7.643 0-12.682-5.2613-12.682-13.0145 0-7.6978 5.316-13.0143 12.515-13.0143 7.643 0 11.963 5.095 11.963 12.5159v2.1598h-16.116c.277 2.9905 1.828 4.5965 4.32 4.5965 1.772 0 3.156-.7753 3.655-2.4921zm-3.822-10.0237c-2.049 0-3.433 1.2737-3.987 3.5997h7.532c-.111-2.0491-1.385-3.5997-3.545-3.5997zm13.428 11.0206h8.474c.387 1.3845 1.606 2.1598 3.156 2.1598 1.44 0 2.548-.5538 2.548-1.7168 0-.9414-.72-1.2737-1.939-1.5506l-4.873-.9969c-4.154-.886-6.867-2.8797-6.867-7.2547 0-5.3165 4.762-8.4178 10.633-8.4178 6.812 0 10.522 3.1567 11.297 8.0855h-8.03c-.277-1.0522-1.052-1.9937-3.046-1.9937-1.273 0-2.326.5538-2.326 1.6614 0 .7753.554 1.163 1.717 1.3845l4.929 1.163c4.541 1.0522 6.978 3.4335 6.978 7.4763 0 5.3168-4.818 8.2518-10.91 8.2518-6.369 0-10.965-2.88-11.741-8.2518zm27.538-.8861v-9.5807h-3.655v-6.7564h3.655v-6.8671h8.584v6.8671h5.205v6.7564h-5.205v8.307c0 1.9383.941 2.769 2.658 2.769.941 0 1.993-.2216 2.769-.5538v7.3654c-.997.443-2.88.775-4.818.775-5.871 0-9.193-2.769-9.193-9.0819z" fill="#d30001"/></svg>
      </header>
      <article>
        <p><strong>The server cannot process the request due to a client error.</strong> Please check the request and try again. If you’re the application owner check the logs for more information.</p>
      </article>
    </main>

  </body>

</html>
</file>

<file path="public/404.html">
<!doctype html>

<html lang="en">

  <head>

    <title>The page you were looking for doesn’t exist (404 Not found)</title>

    <meta charset="utf-8">
    <meta name="viewport" content="initial-scale=1, width=device-width">
    <meta name="robots" content="noindex, nofollow">

    <style>

      *, *::before, *::after {
        box-sizing: border-box;
      }

      * {
        margin: 0;
      }

      html {
        font-size: 16px;
      }

      body {
        background: #FFF;
        color: #261B23;
        display: grid;
        font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, Aptos, Roboto, "Segoe UI", "Helvetica Neue", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
        font-size: clamp(1rem, 2.5vw, 2rem);
        -webkit-font-smoothing: antialiased;
        font-style: normal;
        font-weight: 400;
        letter-spacing: -0.0025em;
        line-height: 1.4;
        min-height: 100vh;
        place-items: center;
        text-rendering: optimizeLegibility;
        -webkit-text-size-adjust: 100%;
      }

      a {
        color: inherit;
        font-weight: 700;
        text-decoration: underline;
        text-underline-offset: 0.0925em;
      }

      b, strong {
        font-weight: 700;
      }

      i, em {
        font-style: italic;
      }

      main {
        display: grid;
        gap: 1em;
        padding: 2em;
        place-items: center;
        text-align: center;
      }

      main header {
        width: min(100%, 12em);
      }

      main header svg {
        height: auto;
        max-width: 100%;
        width: 100%;
      }

      main article {
        width: min(100%, 30em);
      }

      main article p {
        font-size: 75%;
      }

      main article br {

        display: none;

        @media(min-width: 48em) {
          display: inline;
        }

      }

    </style>

  </head>

  <body>

    <!-- This file lives in public/404.html -->

    <main>
      <header>
        <svg height="172" viewBox="0 0 480 172" width="480" xmlns="http://www.w3.org/2000/svg"><path d="m124.48 3.00509-45.6889 100.02991h26.2239v-28.1168h38.119v28.1168h21.628v35.145h-21.628v30.82h-37.308v-30.82h-72.1833v-31.901l50.2851-103.27391zm115.583 168.69891c-40.822 0-64.884-35.146-64.884-85.7015 0-50.5554 24.062-85.700907 64.884-85.700907 40.823 0 64.884 35.145507 64.884 85.700907 0 50.5555-24.061 85.7015-64.884 85.7015zm0-133.2831c-17.572 0-22.709 21.8984-22.709 47.5816 0 25.6835 5.137 47.5815 22.709 47.5815 17.303 0 22.71-21.898 22.71-47.5815 0-25.6832-5.407-47.5816-22.71-47.5816zm165.328-35.41581-45.689 100.02991h26.224v-28.1168h38.119v28.1168h21.628v35.145h-21.628v30.82h-37.308v-30.82h-72.184v-31.901l50.285-103.27391z" fill="#f0eff0"/><path d="m157.758 68.9967v34.0033h-7.199l-14.233-19.8814v19.8814h-8.584v-34.0033h8.307l13.125 18.7184v-18.7184zm28.454 21.5428c0 7.6978-5.15 13.0145-12.737 13.0145-7.532 0-12.738-5.3167-12.738-13.0145s5.206-13.0143 12.738-13.0143c7.587 0 12.737 5.3165 12.737 13.0143zm-8.528 0c0-3.4336-1.496-5.8703-4.209-5.8703-2.659 0-4.154 2.4367-4.154 5.8703s1.495 5.8149 4.154 5.8149c2.713 0 4.209-2.3813 4.209-5.8149zm13.184 3.8766v-9.5807h-3.655v-6.7564h3.655v-6.8671h8.584v6.8671h5.205v6.7564h-5.205v8.307c0 1.9383.941 2.769 2.658 2.769.941 0 1.994-.2216 2.769-.5538v7.3654c-.997.443-2.88.775-4.818.775-5.87 0-9.193-2.769-9.193-9.0819zm37.027 8.5839h-8.806v-34.0033h23.924v7.6978h-15.118v6.7564h13.9v7.5316h-13.9zm41.876-12.4605c0 7.6978-5.15 13.0145-12.737 13.0145-7.532 0-12.738-5.3167-12.738-13.0145s5.206-13.0143 12.738-13.0143c7.587 0 12.737 5.3165 12.737 13.0143zm-8.529 0c0-3.4336-1.495-5.8703-4.208-5.8703-2.659 0-4.154 2.4367-4.154 5.8703s1.495 5.8149 4.154 5.8149c2.713 0 4.208-2.3813 4.208-5.8149zm35.337-12.4605v24.921h-8.695v-2.16c-1.329 1.551-3.821 2.714-6.646 2.714-5.482 0-8.75-3.5999-8.75-9.1379v-16.3371h8.64v14.288c0 2.1045.997 3.5997 3.212 3.5997 1.606 0 3.101-1.0522 3.544-2.769v-15.1187zm4.076 24.921v-24.921h8.694v2.1598c1.385-1.5506 3.822-2.7136 6.701-2.7136 5.538 0 8.806 3.5997 8.806 9.1377v16.3371h-8.639v-14.2327c0-2.049-1.053-3.5443-3.268-3.5443-1.717 0-3.156.9969-3.6 2.7136v15.0634zm44.113 0v-1.994c-1.163 1.329-3.6 2.548-6.147 2.548-7.2 0-11.132-5.8151-11.132-13.0145s3.932-13.0143 11.132-13.0143c2.547 0 4.984 1.2184 6.147 2.5475v-13.0697h8.695v35.997zm0-9.1931v-6.5902c-.665-1.3291-2.16-2.326-3.821-2.326-2.991 0-4.763 2.4368-4.763 5.6488s1.772 5.5934 4.763 5.5934c1.717 0 3.156-.9415 3.821-2.326z" fill="#d30001"/></svg>
      </header>
      <article>
        <p><strong>The page you were looking for doesn’t exist.</strong> You may have mistyped the address or the page may have moved. If you’re the application owner check the logs for more information.</p>
      </article>
    </main>

  </body>

</html>
</file>

<file path="public/406-unsupported-browser.html">
<!doctype html>

<html lang="en">

  <head>

    <title>Your browser is not supported (406 Not Acceptable)</title>

    <meta charset="utf-8">
    <meta name="viewport" content="initial-scale=1, width=device-width">
    <meta name="robots" content="noindex, nofollow">

    <style>

      *, *::before, *::after {
        box-sizing: border-box;
      }

      * {
        margin: 0;
      }

      html {
        font-size: 16px;
      }

      body {
        background: #FFF;
        color: #261B23;
        display: grid;
        font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, Aptos, Roboto, "Segoe UI", "Helvetica Neue", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
        font-size: clamp(1rem, 2.5vw, 2rem);
        -webkit-font-smoothing: antialiased;
        font-style: normal;
        font-weight: 400;
        letter-spacing: -0.0025em;
        line-height: 1.4;
        min-height: 100vh;
        place-items: center;
        text-rendering: optimizeLegibility;
        -webkit-text-size-adjust: 100%;
      }

      a {
        color: inherit;
        font-weight: 700;
        text-decoration: underline;
        text-underline-offset: 0.0925em;
      }

      b, strong {
        font-weight: 700;
      }

      i, em {
        font-style: italic;
      }

      main {
        display: grid;
        gap: 1em;
        padding: 2em;
        place-items: center;
        text-align: center;
      }

      main header {
        width: min(100%, 12em);
      }

      main header svg {
        height: auto;
        max-width: 100%;
        width: 100%;
      }

      main article {
        width: min(100%, 30em);
      }

      main article p {
        font-size: 75%;
      }

      main article br {

        display: none;

        @media(min-width: 48em) {
          display: inline;
        }

      }

    </style>

  </head>

  <body>

    <!-- This file lives in public/406-unsupported-browser.html -->

    <main>
      <header>
        <svg height="172" viewBox="0 0 480 172" width="480" xmlns="http://www.w3.org/2000/svg"><path d="m124.48 3.00509-45.6889 100.02991h26.2239v-28.1168h38.119v28.1168h21.628v35.145h-21.628v30.82h-37.308v-30.82h-72.1833v-31.901l50.2851-103.27391zm115.583 168.69891c-40.822 0-64.884-35.146-64.884-85.7015 0-50.5554 24.062-85.700907 64.884-85.700907 40.823 0 64.884 35.145507 64.884 85.700907 0 50.5555-24.061 85.7015-64.884 85.7015zm0-133.2831c-17.572 0-22.709 21.8984-22.709 47.5816 0 25.6835 5.137 47.5815 22.709 47.5815 17.303 0 22.71-21.898 22.71-47.5815 0-25.6832-5.407-47.5816-22.71-47.5816zm202.906 9.7326h-41.093c-2.433-7.2994-7.84-12.4361-17.302-12.4361-16.221 0-25.413 17.5728-25.954 34.8752v1.3517c5.137-7.0291 16.221-12.4361 30.82-12.4361 33.524 0 54.881 24.0612 54.881 53.7998 0 33.253-23.791 58.396-61.64 58.396-21.628 0-39.741-10.003-50.825-27.576-9.733-14.599-13.788-32.442-13.788-54.3406 0-51.9072 24.331-89.485807 66.236-89.485807 32.712 0 53.258 18.654107 58.665 47.851907zm-82.727 66.2355c0 13.247 9.463 22.439 22.71 22.439 12.977 0 22.439-9.192 22.439-22.439 0-13.517-9.462-22.7091-22.439-22.7091-13.247 0-22.71 9.1921-22.71 22.7091z" fill="#f0eff0"/><path d="m100.761 68.9967v34.0033h-7.1991l-14.2326-19.8814v19.8814h-8.5839v-34.0033h8.307l13.125 18.7184v-18.7184zm28.454 21.5428c0 7.6978-5.15 13.0145-12.737 13.0145-7.532 0-12.738-5.3167-12.738-13.0145s5.206-13.0143 12.738-13.0143c7.587 0 12.737 5.3165 12.737 13.0143zm-8.529 0c0-3.4336-1.495-5.8703-4.208-5.8703-2.659 0-4.154 2.4367-4.154 5.8703s1.495 5.8149 4.154 5.8149c2.713 0 4.208-2.3813 4.208-5.8149zm13.185 3.8766v-9.5807h-3.655v-6.7564h3.655v-6.8671h8.584v6.8671h5.205v6.7564h-5.205v8.307c0 1.9383.941 2.769 2.658 2.769.941 0 1.994-.2216 2.769-.5538v7.3654c-.997.443-2.88.775-4.818.775-5.87 0-9.193-2.769-9.193-9.0819zm39.02-25.4194h9.083l12.958 34.0033h-9.027l-2.436-6.5902h-12.35l-2.381 6.5902h-8.806zm4.431 10.5222-3.489 9.5807h6.978zm17.44 11.0206c0-7.6978 5.095-13.0143 12.572-13.0143 6.701 0 10.854 3.9874 11.574 9.8023h-8.418c-.221-1.4953-1.384-2.6029-3.156-2.6029-2.437 0-3.988 2.2706-3.988 5.8149s1.551 5.7595 3.988 5.7595c1.772 0 2.935-1.0522 3.156-2.5475h8.418c-.72 5.7596-4.873 9.8025-11.574 9.8025-7.477 0-12.572-5.3167-12.572-13.0145zm25.676 0c0-7.6978 5.095-13.0143 12.572-13.0143 6.701 0 10.854 3.9874 11.574 9.8023h-8.418c-.221-1.4953-1.384-2.6029-3.156-2.6029-2.437 0-3.988 2.2706-3.988 5.8149s1.551 5.7595 3.988 5.7595c1.772 0 2.935-1.0522 3.156-2.5475h8.418c-.72 5.7596-4.873 9.8025-11.574 9.8025-7.477 0-12.572-5.3167-12.572-13.0145zm42.013 3.7658h8.031c-.887 5.7597-5.206 9.2487-11.686 9.2487-7.642 0-12.682-5.2613-12.682-13.0145 0-7.6978 5.317-13.0143 12.516-13.0143 7.643 0 11.962 5.095 11.962 12.5159v2.1598h-16.115c.277 2.9905 1.827 4.5965 4.319 4.5965 1.773 0 3.157-.7753 3.655-2.4921zm-3.821-10.0237c-2.049 0-3.433 1.2737-3.987 3.5997h7.532c-.111-2.0491-1.385-3.5997-3.545-3.5997zm23.4 16.7244v10.799h-8.694v-33.726h8.694v1.9937c1.163-1.3291 3.6-2.5475 6.148-2.5475 7.199 0 11.131 5.8703 11.131 13.0143 0 7.0886-3.932 13.0145-11.131 13.0145-2.548 0-4.985-1.219-6.148-2.548zm0-13.7893v6.5902c.665 1.3845 2.16 2.326 3.822 2.326 2.99 0 4.762-2.3814 4.762-5.5934s-1.772-5.6488-4.762-5.6488c-1.717 0-3.157.9969-3.822 2.326zm21.892 7.1994v-9.5807h-3.655v-6.7564h3.655v-6.8671h8.584v6.8671h5.206v6.7564h-5.206v8.307c0 1.9383.941 2.769 2.658 2.769.942 0 1.994-.2216 2.769-.5538v7.3654c-.997.443-2.88.775-4.818.775-5.87 0-9.193-2.769-9.193-9.0819zm39.458 8.5839h-8.363v-1.274c-.83.831-3.322 1.717-5.981 1.717-4.928 0-9.082-2.769-9.082-8.0301 0-4.818 4.154-7.9193 9.581-7.9193 2.049 0 4.486.6646 5.482 1.3845v-1.606c0-1.606-.941-2.9905-3.045-2.9905-1.606 0-2.548.7199-2.936 1.8275h-8.196c.72-4.8181 4.984-8.6393 11.408-8.6393 7.089 0 11.132 3.7659 11.132 10.2453zm-8.363-6.9779v-1.4399c-.553-1.0522-2.049-1.7167-3.655-1.7167-1.716 0-3.433.7199-3.433 2.3813 0 1.7168 1.717 2.4367 3.433 2.4367 1.606 0 3.102-.6645 3.655-1.6614zm20.742 4.9839v1.994h-8.694v-35.997h8.694v13.0697c1.163-1.3291 3.6-2.5475 6.148-2.5475 7.199 0 11.131 5.8149 11.131 13.0143s-3.932 13.0145-11.131 13.0145c-2.548 0-4.985-1.219-6.148-2.548zm0-13.7893v6.5902c.665 1.3845 2.105 2.326 3.822 2.326 2.99 0 4.762-2.3814 4.762-5.5934s-1.772-5.6488-4.762-5.6488c-1.662 0-3.157.9969-3.822 2.326zm28.759-20.2137v35.997h-8.695v-35.997zm19.172 27.3023h8.03c-.886 5.7597-5.206 9.2487-11.685 9.2487-7.643 0-12.682-5.2613-12.682-13.0145 0-7.6978 5.316-13.0143 12.516-13.0143 7.642 0 11.962 5.095 11.962 12.5159v2.1598h-16.116c.277 2.9905 1.828 4.5965 4.32 4.5965 1.772 0 3.157-.7753 3.655-2.4921zm-3.821-10.0237c-2.049 0-3.434 1.2737-3.988 3.5997h7.532c-.111-2.0491-1.384-3.5997-3.544-3.5997z" fill="#d30001"/></svg>
      </header>
      <article>
        <p><strong>Your browser is not supported.</strong><br> Please upgrade your browser to continue.</p>
      </article>
    </main>

  </body>

</html>
</file>

<file path="public/422.html">
<!doctype html>

<html lang="en">

  <head>

    <title>The change you wanted was rejected (422 Unprocessable Entity)</title>

    <meta charset="utf-8">
    <meta name="viewport" content="initial-scale=1, width=device-width">
    <meta name="robots" content="noindex, nofollow">

    <style>

      *, *::before, *::after {
        box-sizing: border-box;
      }

      * {
        margin: 0;
      }

      html {
        font-size: 16px;
      }

      body {
        background: #FFF;
        color: #261B23;
        display: grid;
        font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, Aptos, Roboto, "Segoe UI", "Helvetica Neue", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
        font-size: clamp(1rem, 2.5vw, 2rem);
        -webkit-font-smoothing: antialiased;
        font-style: normal;
        font-weight: 400;
        letter-spacing: -0.0025em;
        line-height: 1.4;
        min-height: 100vh;
        place-items: center;
        text-rendering: optimizeLegibility;
        -webkit-text-size-adjust: 100%;
      }

      a {
        color: inherit;
        font-weight: 700;
        text-decoration: underline;
        text-underline-offset: 0.0925em;
      }

      b, strong {
        font-weight: 700;
      }

      i, em {
        font-style: italic;
      }

      main {
        display: grid;
        gap: 1em;
        padding: 2em;
        place-items: center;
        text-align: center;
      }

      main header {
        width: min(100%, 12em);
      }

      main header svg {
        height: auto;
        max-width: 100%;
        width: 100%;
      }

      main article {
        width: min(100%, 30em);
      }

      main article p {
        font-size: 75%;
      }

      main article br {

        display: none;

        @media(min-width: 48em) {
          display: inline;
        }

      }

    </style>

  </head>

  <body>

    <!-- This file lives in public/422.html -->

    <main>
      <header>
        <svg height="172" viewBox="0 0 480 172" width="480" xmlns="http://www.w3.org/2000/svg"><path d="m124.48 3.00509-45.6889 100.02991h26.2239v-28.1168h38.119v28.1168h21.628v35.145h-21.628v30.82h-37.308v-30.82h-72.1833v-31.901l50.2851-103.27391zm130.453 51.63681c0-8.9215-6.218-15.4099-15.681-15.4099-10.273 0-15.95 7.5698-16.491 16.4913h-44.608c3.244-30.8199 25.683-55.421707 61.099-55.421707 36.498 0 59.477 20.816907 59.477 51.636807 0 21.3577-14.869 36.7676-31.901 52.7186l-27.305 27.035h59.747v37.308h-120.306v-27.846l57.044-56.7736c11.084-11.8954 18.925-20.0059 18.925-29.7385zm140.455 0c0-8.9215-6.218-15.4099-15.68-15.4099-10.274 0-15.951 7.5698-16.492 16.4913h-44.608c3.245-30.8199 25.684-55.421707 61.1-55.421707 36.497 0 59.477 20.816907 59.477 51.636807 0 21.3577-14.87 36.7676-31.902 52.7186l-27.305 27.035h59.747v37.308h-120.305v-27.846l57.043-56.7736c11.085-11.8954 18.925-20.0059 18.925-29.7385z" fill="#f0eff0"/><path d="m19.3936 103.554c-8.9715 0-14.84183-5.0952-14.84183-14.4544v-20.1029h8.86083v19.3276c0 4.8181 2.2706 7.3102 5.981 7.3102 3.6551 0 5.9257-2.4921 5.9257-7.3102v-19.3276h8.8608v20.1583c0 9.3038-5.8149 14.399-14.7865 14.399zm18.734-.554v-24.921h8.6947v2.1598c1.3845-1.5506 3.8212-2.7136 6.701-2.7136 5.538 0 8.8054 3.5997 8.8054 9.1377v16.3371h-8.6393v-14.2327c0-2.049-1.0522-3.5443-3.2674-3.5443-1.7168 0-3.1567.9969-3.5997 2.7136v15.0634zm36.8584-1.994v10.799h-8.6946v-33.726h8.6946v1.9937c1.163-1.3291 3.5997-2.5475 6.1472-2.5475 7.1994 0 11.1314 5.8703 11.1314 13.0143 0 7.0886-3.932 13.0145-11.1314 13.0145-2.5475 0-4.9842-1.219-6.1472-2.548zm0-13.7893v6.5902c.6646 1.3845 2.1599 2.326 3.8213 2.326 2.9905 0 4.7626-2.3814 4.7626-5.5934s-1.7721-5.6488-4.7626-5.6488c-1.7168 0-3.1567.9969-3.8213 2.326zm36.789-9.2485v8.3624c-1.052-.5538-2.215-.7753-3.6-.7753-2.381 0-3.987 1.0522-4.43 2.8244v14.6203h-8.6949v-24.921h8.6949v2.2152c1.218-1.6614 3.156-2.769 5.648-2.769 1.108 0 1.994.2215 2.382.443zm26.769 12.5713c0 7.6978-5.15 13.0145-12.737 13.0145-7.532 0-12.738-5.3167-12.738-13.0145s5.206-13.0143 12.738-13.0143c7.587 0 12.737 5.3165 12.737 13.0143zm-8.528 0c0-3.4336-1.496-5.8703-4.209-5.8703-2.659 0-4.154 2.4367-4.154 5.8703s1.495 5.8149 4.154 5.8149c2.713 0 4.209-2.3813 4.209-5.8149zm10.352 0c0-7.6978 5.095-13.0143 12.571-13.0143 6.701 0 10.855 3.9874 11.574 9.8023h-8.417c-.222-1.4953-1.385-2.6029-3.157-2.6029-2.437 0-3.987 2.2706-3.987 5.8149s1.55 5.7595 3.987 5.7595c1.772 0 2.935-1.0522 3.157-2.5475h8.417c-.719 5.7596-4.873 9.8025-11.574 9.8025-7.476 0-12.571-5.3167-12.571-13.0145zm42.013 3.7658h8.03c-.886 5.7597-5.206 9.2487-11.685 9.2487-7.643 0-12.682-5.2613-12.682-13.0145 0-7.6978 5.316-13.0143 12.516-13.0143 7.642 0 11.962 5.095 11.962 12.5159v2.1598h-16.116c.277 2.9905 1.828 4.5965 4.32 4.5965 1.772 0 3.156-.7753 3.655-2.4921zm-3.821-10.0237c-2.049 0-3.434 1.2737-3.988 3.5997h7.532c-.111-2.0491-1.385-3.5997-3.544-3.5997zm13.428 11.0206h8.473c.387 1.3845 1.606 2.1598 3.156 2.1598 1.44 0 2.548-.5538 2.548-1.7168 0-.9414-.72-1.2737-1.938-1.5506l-4.874-.9969c-4.153-.886-6.867-2.8797-6.867-7.2547 0-5.3165 4.763-8.4178 10.633-8.4178 6.812 0 10.522 3.1567 11.297 8.0855h-8.03c-.277-1.0522-1.052-1.9937-3.046-1.9937-1.273 0-2.326.5538-2.326 1.6614 0 .7753.554 1.163 1.717 1.3845l4.929 1.163c4.541 1.0522 6.978 3.4335 6.978 7.4763 0 5.3168-4.818 8.2518-10.91 8.2518-6.369 0-10.965-2.88-11.74-8.2518zm24.269 0h8.474c.387 1.3845 1.606 2.1598 3.156 2.1598 1.44 0 2.548-.5538 2.548-1.7168 0-.9414-.72-1.2737-1.939-1.5506l-4.873-.9969c-4.154-.886-6.867-2.8797-6.867-7.2547 0-5.3165 4.763-8.4178 10.633-8.4178 6.812 0 10.522 3.1567 11.297 8.0855h-8.03c-.277-1.0522-1.052-1.9937-3.046-1.9937-1.273 0-2.326.5538-2.326 1.6614 0 .7753.554 1.163 1.717 1.3845l4.929 1.163c4.541 1.0522 6.978 3.4335 6.978 7.4763 0 5.3168-4.818 8.2518-10.91 8.2518-6.369 0-10.965-2.88-11.741-8.2518zm47.918 7.6978h-8.363v-1.274c-.831.831-3.323 1.717-5.981 1.717-4.929 0-9.082-2.769-9.082-8.0301 0-4.818 4.153-7.9193 9.581-7.9193 2.049 0 4.485.6646 5.482 1.3845v-1.606c0-1.606-.941-2.9905-3.046-2.9905-1.606 0-2.547.7199-2.935 1.8275h-8.196c.72-4.8181 4.984-8.6393 11.408-8.6393 7.089 0 11.132 3.7659 11.132 10.2453zm-8.363-6.9779v-1.4399c-.554-1.0522-2.049-1.7167-3.655-1.7167-1.717 0-3.434.7199-3.434 2.3813 0 1.7168 1.717 2.4367 3.434 2.4367 1.606 0 3.101-.6645 3.655-1.6614zm20.742 4.9839v1.994h-8.695v-35.997h8.695v13.0697c1.163-1.3291 3.6-2.5475 6.147-2.5475 7.2 0 11.132 5.8149 11.132 13.0143s-3.932 13.0145-11.132 13.0145c-2.547 0-4.984-1.219-6.147-2.548zm0-13.7893v6.5902c.665 1.3845 2.105 2.326 3.821 2.326 2.991 0 4.763-2.3814 4.763-5.5934s-1.772-5.6488-4.763-5.6488c-1.661 0-3.156.9969-3.821 2.326zm28.759-20.2137v35.997h-8.695v-35.997zm19.172 27.3023h8.03c-.886 5.7597-5.206 9.2487-11.685 9.2487-7.643 0-12.682-5.2613-12.682-13.0145 0-7.6978 5.316-13.0143 12.515-13.0143 7.643 0 11.962 5.095 11.962 12.5159v2.1598h-16.115c.277 2.9905 1.827 4.5965 4.32 4.5965 1.772 0 3.156-.7753 3.655-2.4921zm-3.822-10.0237c-2.049 0-3.433 1.2737-3.987 3.5997h7.532c-.111-2.0491-1.385-3.5997-3.545-3.5997zm25.461-15.2849h24.311v7.6424h-15.561v5.3165h14.232v7.4763h-14.232v5.8703h15.561v7.6978h-24.311zm27.942 34.0033v-24.921h8.694v2.1598c1.385-1.5506 3.822-2.7136 6.701-2.7136 5.538 0 8.806 3.5997 8.806 9.1377v16.3371h-8.639v-14.2327c0-2.049-1.053-3.5443-3.268-3.5443-1.717 0-3.157.9969-3.6 2.7136v15.0634zm29.991-8.5839v-9.5807h-3.655v-6.7564h3.655v-6.8671h8.584v6.8671h5.206v6.7564h-5.206v8.307c0 1.9383.941 2.769 2.658 2.769.942 0 1.994-.2216 2.769-.5538v7.3654c-.997.443-2.88.775-4.818.775-5.87 0-9.193-2.769-9.193-9.0819zm26.161-16.3371v24.921h-8.694v-24.921zm.61-6.7564c0 2.8244-2.271 4.652-4.929 4.652s-4.929-1.8276-4.929-4.652c0-2.8797 2.271-4.7073 4.929-4.7073s4.929 1.8276 4.929 4.7073zm5.382 23.0935v-9.5807h-3.655v-6.7564h3.655v-6.8671h8.584v6.8671h5.206v6.7564h-5.206v8.307c0 1.9383.941 2.769 2.658 2.769.941 0 1.994-.2216 2.769-.5538v7.3654c-.997.443-2.88.775-4.818.775-5.87 0-9.193-2.769-9.193-9.0819zm29.22 17.3889h-8.584l3.655-9.414-9.303-24.312h9.026l4.763 14.1773 4.652-14.1773h8.639z" fill="#d30001"/></svg>
      </header>
      <article>
        <p><strong>The change you wanted was rejected.</strong> Maybe you tried to change something you didn’t have access to. If you’re the application owner check the logs for more information.</p>
      </article>
    </main>

  </body>

</html>
</file>

<file path="public/500.html">
<!doctype html>

<html lang="en">

  <head>

    <title>We’re sorry, but something went wrong (500 Internal Server Error)</title>

    <meta charset="utf-8">
    <meta name="viewport" content="initial-scale=1, width=device-width">
    <meta name="robots" content="noindex, nofollow">

    <style>

      *, *::before, *::after {
        box-sizing: border-box;
      }

      * {
        margin: 0;
      }

      html {
        font-size: 16px;
      }

      body {
        background: #FFF;
        color: #261B23;
        display: grid;
        font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, Aptos, Roboto, "Segoe UI", "Helvetica Neue", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
        font-size: clamp(1rem, 2.5vw, 2rem);
        -webkit-font-smoothing: antialiased;
        font-style: normal;
        font-weight: 400;
        letter-spacing: -0.0025em;
        line-height: 1.4;
        min-height: 100vh;
        place-items: center;
        text-rendering: optimizeLegibility;
        -webkit-text-size-adjust: 100%;
      }

      a {
        color: inherit;
        font-weight: 700;
        text-decoration: underline;
        text-underline-offset: 0.0925em;
      }

      b, strong {
        font-weight: 700;
      }

      i, em {
        font-style: italic;
      }

      main {
        display: grid;
        gap: 1em;
        padding: 2em;
        place-items: center;
        text-align: center;
      }

      main header {
        width: min(100%, 12em);
      }

      main header svg {
        height: auto;
        max-width: 100%;
        width: 100%;
      }

      main article {
        width: min(100%, 30em);
      }

      main article p {
        font-size: 75%;
      }

      main article br {

        display: none;

        @media(min-width: 48em) {
          display: inline;
        }

      }

    </style>

  </head>

  <body>

    <!-- This file lives in public/500.html -->

    <main>
      <header>
        <svg height="172" viewBox="0 0 480 172" width="480" xmlns="http://www.w3.org/2000/svg"><path d="m101.23 93.8427c-8.1103 0-15.4098 3.7849-19.7354 8.3813h-36.2269v-99.21891h103.8143v37.03791h-68.3984v24.8722c5.1366-2.7035 15.1396-5.9477 24.6014-5.9477 35.146 0 56.233 22.7094 56.233 55.4215 0 34.605-23.791 57.315-60.558 57.315-37.8492 0-61.64-22.169-63.8028-55.963h42.9857c1.0814 10.814 9.1919 19.195 21.6281 19.195 11.355 0 19.465-8.381 19.465-20.547 0-11.625-7.299-20.5463-20.006-20.5463zm138.833 77.8613c-40.822 0-64.884-35.146-64.884-85.7015 0-50.5554 24.062-85.700907 64.884-85.700907 40.823 0 64.884 35.145507 64.884 85.700907 0 50.5555-24.061 85.7015-64.884 85.7015zm0-133.2831c-17.572 0-22.709 21.8984-22.709 47.5816 0 25.6835 5.137 47.5815 22.709 47.5815 17.303 0 22.71-21.898 22.71-47.5815 0-25.6832-5.407-47.5816-22.71-47.5816zm140.456 133.2831c-40.823 0-64.884-35.146-64.884-85.7015 0-50.5554 24.061-85.700907 64.884-85.700907 40.822 0 64.884 35.145507 64.884 85.700907 0 50.5555-24.062 85.7015-64.884 85.7015zm0-133.2831c-17.573 0-22.71 21.8984-22.71 47.5816 0 25.6835 5.137 47.5815 22.71 47.5815 17.302 0 22.709-21.898 22.709-47.5815 0-25.6832-5.407-47.5816-22.709-47.5816z" fill="#f0eff0"/><path d="m23.1377 68.9967v34.0033h-8.9162v-34.0033zm4.3157 34.0033v-24.921h8.6947v2.1598c1.3845-1.5506 3.8212-2.7136 6.701-2.7136 5.538 0 8.8054 3.5997 8.8054 9.1377v16.3371h-8.6393v-14.2327c0-2.049-1.0522-3.5443-3.2674-3.5443-1.7168 0-3.1567.9969-3.5997 2.7136v15.0634zm29.9913-8.5839v-9.5807h-3.655v-6.7564h3.655v-6.8671h8.5839v6.8671h5.2058v6.7564h-5.2058v8.307c0 1.9383.9415 2.769 2.6583 2.769.9414 0 1.9937-.2216 2.769-.5538v7.3654c-.9969.443-2.8798.775-4.8181.775-5.8703 0-9.1931-2.769-9.1931-9.0819zm32.3666-.1108h8.0301c-.8861 5.7597-5.2057 9.2487-11.6852 9.2487-7.6424 0-12.682-5.2613-12.682-13.0145 0-7.6978 5.3165-13.0143 12.5159-13.0143 7.6424 0 11.9621 5.095 11.9621 12.5159v2.1598h-16.1156c.2769 2.9905 1.8275 4.5965 4.3196 4.5965 1.7722 0 3.1567-.7753 3.6551-2.4921zm-3.8212-10.0237c-2.0491 0-3.4336 1.2737-3.9874 3.5997h7.5317c-.1107-2.0491-1.3845-3.5997-3.5443-3.5997zm31.4299-6.3134v8.3624c-1.052-.5538-2.215-.7753-3.599-.7753-2.382 0-3.988 1.0522-4.431 2.8244v14.6203h-8.694v-24.921h8.694v2.2152c1.219-1.6614 3.157-2.769 5.649-2.769 1.108 0 1.994.2215 2.381.443zm2.949 25.0318v-24.921h8.694v2.1598c1.385-1.5506 3.821-2.7136 6.701-2.7136 5.538 0 8.806 3.5997 8.806 9.1377v16.3371h-8.64v-14.2327c0-2.049-1.052-3.5443-3.267-3.5443-1.717 0-3.157.9969-3.6 2.7136v15.0634zm50.371 0h-8.363v-1.274c-.83.831-3.323 1.717-5.981 1.717-4.929 0-9.082-2.769-9.082-8.0301 0-4.818 4.153-7.9193 9.581-7.9193 2.049 0 4.485.6646 5.482 1.3845v-1.606c0-1.606-.941-2.9905-3.046-2.9905-1.606 0-2.547.7199-2.935 1.8275h-8.196c.72-4.8181 4.984-8.6393 11.408-8.6393 7.089 0 11.132 3.7659 11.132 10.2453zm-8.363-6.9779v-1.4399c-.554-1.0522-2.049-1.7167-3.655-1.7167-1.717 0-3.433.7199-3.433 2.3813 0 1.7168 1.716 2.4367 3.433 2.4367 1.606 0 3.101-.6645 3.655-1.6614zm20.742-29.0191v35.997h-8.694v-35.997zm13.036 25.9178h9.248c.72 2.326 2.714 3.489 5.483 3.489 2.713 0 4.596-1.163 4.596-3.2674 0-1.6061-1.052-2.326-3.212-2.8244l-6.534-1.3845c-4.985-1.1076-8.751-3.7105-8.751-9.47 0-6.6456 5.538-11.0206 13.07-11.0206 8.307 0 13.014 4.5411 13.956 10.4114h-8.695c-.72-1.8829-2.27-3.3228-5.205-3.3228-2.548 0-4.265 1.1076-4.265 2.9905 0 1.4953 1.052 2.326 2.825 2.7137l6.645 1.5506c5.815 1.3845 9.027 4.5412 9.027 9.8023 0 6.9778-5.87 10.9654-13.291 10.9654-8.141 0-13.679-3.9322-14.897-10.6332zm46.509 1.3845h8.031c-.887 5.7597-5.206 9.2487-11.686 9.2487-7.642 0-12.682-5.2613-12.682-13.0145 0-7.6978 5.317-13.0143 12.516-13.0143 7.643 0 11.962 5.095 11.962 12.5159v2.1598h-16.115c.277 2.9905 1.827 4.5965 4.319 4.5965 1.773 0 3.157-.7753 3.655-2.4921zm-3.821-10.0237c-2.049 0-3.433 1.2737-3.987 3.5997h7.532c-.111-2.0491-1.385-3.5997-3.545-3.5997zm31.431-6.3134v8.3624c-1.053-.5538-2.216-.7753-3.6-.7753-2.381 0-3.988 1.0522-4.431 2.8244v14.6203h-8.694v-24.921h8.694v2.2152c1.219-1.6614 3.157-2.769 5.649-2.769 1.108 0 1.994.2215 2.382.443zm18.288 25.0318h-7.809l-9.47-24.921h8.861l4.763 14.288 4.652-14.288h8.528zm25.614-8.6947h8.03c-.886 5.7597-5.206 9.2487-11.685 9.2487-7.642 0-12.682-5.2613-12.682-13.0145 0-7.6978 5.316-13.0143 12.516-13.0143 7.642 0 11.962 5.095 11.962 12.5159v2.1598h-16.116c.277 2.9905 1.828 4.5965 4.32 4.5965 1.772 0 3.157-.7753 3.655-2.4921zm-3.821-10.0237c-2.049 0-3.434 1.2737-3.988 3.5997h7.532c-.111-2.0491-1.384-3.5997-3.544-3.5997zm31.43-6.3134v8.3624c-1.052-.5538-2.215-.7753-3.6-.7753-2.381 0-3.987 1.0522-4.43 2.8244v14.6203h-8.695v-24.921h8.695v2.2152c1.218-1.6614 3.157-2.769 5.649-2.769 1.107 0 1.993.2215 2.381.443zm13.703-8.9715h24.312v7.6424h-15.562v5.3165h14.232v7.4763h-14.232v5.8703h15.562v7.6978h-24.312zm44.667 8.9715v8.3624c-1.052-.5538-2.215-.7753-3.6-.7753-2.381 0-3.987 1.0522-4.43 2.8244v14.6203h-8.695v-24.921h8.695v2.2152c1.218-1.6614 3.156-2.769 5.648-2.769 1.108 0 1.994.2215 2.382.443zm19.673 0v8.3624c-1.053-.5538-2.216-.7753-3.6-.7753-2.381 0-3.987 1.0522-4.43 2.8244v14.6203h-8.695v-24.921h8.695v2.2152c1.218-1.6614 3.156-2.769 5.648-2.769 1.108 0 1.994.2215 2.382.443zm26.769 12.5713c0 7.6978-5.15 13.0145-12.737 13.0145-7.532 0-12.738-5.3167-12.738-13.0145s5.206-13.0143 12.738-13.0143c7.587 0 12.737 5.3165 12.737 13.0143zm-8.529 0c0-3.4336-1.495-5.8703-4.208-5.8703-2.659 0-4.154 2.4367-4.154 5.8703s1.495 5.8149 4.154 5.8149c2.713 0 4.208-2.3813 4.208-5.8149zm28.082-12.5713v8.3624c-1.052-.5538-2.215-.7753-3.6-.7753-2.381 0-3.987 1.0522-4.43 2.8244v14.6203h-8.695v-24.921h8.695v2.2152c1.218-1.6614 3.157-2.769 5.649-2.769 1.107 0 1.993.2215 2.381.443z" fill="#d30001"/></svg>
      </header>
      <article>
        <p><strong>We’re sorry, but something went wrong.</strong><br> If you’re the application owner check the logs for more information.</p>
      </article>
    </main>

  </body>

</html>
</file>

<file path="spec/components/follow_button_spec.rb">
# frozen_string_literal: true

require "rails_helper"

RSpec.describe Components::FollowButton, type: :component do
  let(:follower) { create(:user) }
  let(:target) { create(:creator) }

  before do
    sign_in(follower)
    allow(SiteSettings).to receive(:multiuser_enabled?).and_return(true)
  end

  context "when the follower is not following the target" do
    let(:button) {
      allow(follower).to receive(:following?).with(target).and_return false
      render described_class.new(follower: follower, target: target)
    }

    it "creates a button" do
      expect(button).to include "<button"
    end

    it "is labelled with the word Follow" do
      expect(button).to include "Follow"
    end

    it "links to the create path for the target's follows resource" do # rubocop:todo RSpec/MultipleExpectations
      expect(button).to include "method=\"post\""
      expect(button).to include "action=\"http://test.host/creators/#{target.to_param}/follows\""
    end
  end

  context "when the follower is already following the target" do
    let(:button) {
      allow(follower).to receive(:following?).with(target).and_return :accepted
      render described_class.new(follower: follower, target: target)
    }

    it "creates a button" do
      expect(button).to include "<button"
    end

    it "is labelled with the word Unfollow" do
      expect(button).to include "Unfollow"
    end

    it "links to the delete path for the target's follows resource" do # rubocop:todo RSpec/MultipleExpectations
      expect(button).to include "name=\"_method\" value=\"delete\""
      expect(button).to include "action=\"http://test.host/creators/#{target.to_param}/follows\""
    end
  end
end
</file>

<file path="spec/components/model_card_spec.rb">
# frozen_string_literal: true

require "rails_helper"

RSpec.describe Components::ModelCard, type: :component do
  it "needs testing"

  # it "renders something useful" do
  #   expect(
  #     render_inline(described_class.new(attr: "value")) { "Hello, components!" }.css("p").to_html
  #   ).to include(
  #     "Hello, components!"
  #   )
  # end
end
</file>

<file path="spec/deserializers/activity_pub/collection_deserializer_spec.rb">
require "rails_helper"

RSpec.describe ActivityPub::CollectionDeserializer do
  context "when parsing an ActivityStreams representation" do
    subject(:deserializer) { described_class.new(actor) }

    let(:actor) { create(:actor, :distant, :f3di_collection) }
    let(:output) { deserializer.create! }

    it_behaves_like "GenericDeserializer"
  end
end
</file>

<file path="spec/deserializers/activity_pub/creator_deserializer_spec.rb">
require "rails_helper"

RSpec.describe ActivityPub::CreatorDeserializer do
  context "when parsing an ActivityStreams representation" do
    subject(:deserializer) { described_class.new(actor) }

    let(:actor) { create(:actor, :distant, :f3di_creator) }
    let(:output) { deserializer.create! }

    it_behaves_like "GenericDeserializer"
  end
end
</file>

<file path="spec/deserializers/activity_pub/generic_deserializer_shared.rb">
shared_examples "GenericDeserializer" do
  it "sets name" do
    expect(output.name).to eq actor.name
  end

  it "sets slug from username" do
    expect(output.slug).to eq actor.username
  end

  it "sets links from attachments" do
    expect(output.links&.first&.url).to eql "https://example.org"
  end

  it "ignores non-link attachments" do
    expect(output.links.length).to be 1
  end

  it "sets caption from summary" do
    expect(output.caption).to eq actor.extensions["summary"]
  end

  it "sets notes from content" do
    expect(output.notes).to eq actor.extensions["content"]
  end

  it "sets indexable field" do
    expect(output.indexable?).to eq actor.extensions["indexable"]
  end
end
</file>

<file path="spec/deserializers/activity_pub/model_deserializer_spec.rb">
require "rails_helper"

RSpec.describe ActivityPub::ModelDeserializer do
  context "when parsing an ActivityStreams representation" do
    subject(:deserializer) { described_class.new(actor) }

    before do
      create(:library)
    end

    let(:actor) { create(:actor, :distant, :f3di_model) }
    let(:output) { deserializer.create! }

    it_behaves_like "GenericDeserializer"

    it "sets license from licenseId" do
      expect(output.license).to eq "MIT"
    end

    it "sets correct tags" do
      expect(output.tag_list).to eq ["Hash Tag", "Wizard"]
    end
  end
end
</file>

<file path="spec/deserializers/data_package/collection_deserializer_spec.rb">
require "rails_helper"

RSpec.describe DataPackage::CollectionDeserializer do
  context "when parsing a Data Package" do
    subject(:deserializer) { described_class.new(object) }

    let(:output) { deserializer.deserialize }

    context "with a valid collection linked to this server" do
      let(:collection) { create(:collection) }
      let(:object) do
        {
          "title" => collection.name,
          "path" => "http://localhost:3214/collections/#{collection.to_param}",
          "caption" => "caption goes here",
          "description" => "description goes here",
          "links" => [
            {
              "path" => "http://example.com"
            }
          ]
        }
      end

      it "parses name" do
        expect(output[:name]).to eq collection.name
      end

      it "matches collection ID" do
        expect(output[:id]).to eq collection.id
      end

      it "does not add main detected path as link" do
        expect(output[:links_attributes]).not_to include({url: "http://localhost:3214/collections/#{collection.to_param}"})
      end

      it "parses links" do
        expect(output[:links_attributes]).to include({url: "http://example.com"})
      end

      it "parses notes" do
        expect(output[:notes]).to eq "description goes here"
      end

      it "parses caption" do
        expect(output[:caption]).to eq "caption goes here"
      end
    end

    context "with a valid collection hosted elsewhere" do
      let(:object) do
        {
          "title" => "Bruce Wayne",
          "path" => "http://example.com/bruce-wayne",
          "roles" => ["collection"]
        }
      end

      it "parses name" do
        expect(output[:name]).to eq "Bruce Wayne"
      end

      it "includes main path as link" do
        expect(output[:links_attributes]).to include({
          url: "http://example.com/bruce-wayne"
        })
      end
    end
  end
end
</file>

<file path="spec/deserializers/data_package/creator_deserializer_spec.rb">
require "rails_helper"

RSpec.describe DataPackage::CreatorDeserializer do
  context "when parsing a Data Package" do
    subject(:deserializer) { described_class.new(object) }

    let(:output) { deserializer.deserialize }

    context "with a valid creator linked to this server" do
      let(:creator) { create(:creator) }
      let(:object) do
        {
          "title" => creator.name,
          "path" => "http://localhost:3214/creators/#{creator.to_param}",
          "roles" => ["creator"],
          "caption" => "caption goes here",
          "description" => "description goes here",
          "links" => [
            {
              "path" => "http://example.com"
            }
          ]
        }
      end

      it "parses name" do
        expect(output[:name]).to eq creator.name
      end

      it "matches creator ID" do
        expect(output[:id]).to eq creator.id
      end

      it "does not add main detected path as link" do
        expect(output[:links_attributes]).not_to include({url: "http://localhost:3214/creators/#{creator.to_param}"})
      end

      it "parses links" do
        expect(output[:links_attributes]).to include({url: "http://example.com"})
      end

      it "parses notes" do
        expect(output[:notes]).to eq "description goes here"
      end

      it "parses caption" do
        expect(output[:caption]).to eq "caption goes here"
      end
    end

    context "with a valid creator hosted elsewhere" do
      let(:object) do
        {
          "title" => "Bruce Wayne",
          "path" => "http://example.com/bruce-wayne",
          "roles" => ["creator"]
        }
      end

      it "parses name" do
        expect(output[:name]).to eq "Bruce Wayne"
      end

      it "includes main path as link" do
        expect(output[:links_attributes]).to include({
          url: "http://example.com/bruce-wayne"
        })
      end
    end

    context "with a non-creator contributor" do
      let(:object) do
        {
          "title" => "Contributor Name",
          "path" => "http://localhost:3214/creators/creator-name",
          "roles" => ["contributor"]
        }
      end

      it "ignores item" do
        expect(output).to be_nil
      end
    end
  end
end
</file>

<file path="spec/deserializers/data_package/link_deserializer_spec.rb">
require "rails_helper"

RSpec.describe DataPackage::LinkDeserializer do
  context "when parsing a Data Package" do
    subject(:deserializer) { described_class.new(object) }

    let(:output) { deserializer.deserialize }
    let(:object) do
      {
        "path" => "http://example.com"
      }
    end

    it "parses url" do
      expect(output[:url]).to eq "http://example.com"
    end
  end
end
</file>

<file path="spec/deserializers/data_package/model_deserializer_spec.rb">
require "rails_helper"

RSpec.describe DataPackage::ModelDeserializer do
  context "when generating an Data Package representation" do
    subject(:deserializer) { described_class.new(object) }

    let(:output) { deserializer.deserialize }
    let(:object) do
      {
        "name" => "test-model",
        "title" => "Test Model",
        "homepage" => "https://example.com",
        "image" => "images/pic.png",
        "keywords" => ["fantasy", "wizard"],
        "caption" => "caption",
        "description" => "multiline\nnote",
        "licenses" => [
          {
            "name" => "MIT",
            "path" => "https://spdx.org/licenses/MIT.html"
          }
        ],
        "resources" => [
          {
            "path" => "files/test.stl",
            "mediatype" => "model/stl"
          }
        ],
        "contributors" => [
          {
            "title" => "Bruce Wayne",
            "path" => "http://localhost:3214/creators/bruce-wayne",
            "roles" => ["creator"]
          }
        ],
        "collections" => [
          {
            "title" => "Wonderful Toys",
            "path" => "http://localhost:3214/collections/abc123"
          }
        ],
        "links" => [
          {
            "path" => "https://example.com/other-link"
          },
          {
            "path" => "http://localhost:3214/models/test-model"
          }
        ],
        "sensitive" => true
      }
    end

    it "parses name" do
      expect(output[:name]).to eq "Test Model"
    end

    it "parses caption" do
      expect(output[:caption]).to eq "caption"
    end

    it "parses notes" do
      expect(output[:notes]).to eq "multiline\nnote"
    end

    it "ignores self link" do
      expect(output[:links_attributes]).not_to include({url: "http://localhost:3214/models/test-model"})
    end

    it "parses homepage link" do
      expect(output[:links_attributes]).to include({url: "https://example.com"})
    end

    it "parses other links" do
      expect(output[:links_attributes]).to include({url: "https://example.com/other-link"})
    end

    it "parses preview image" do
      expect(output[:preview_file]).to eq "images/pic.png"
    end

    it "parses tags" do
      expect(output[:tag_list]).to eq ["fantasy", "wizard"]
    end

    it "parses license" do
      expect(output[:license]).to eq "MIT"
    end

    it "parses file data" do
      expect(output.dig(:model_files, 0, :filename)).to eq "files/test.stl"
    end

    it "parses creator ID if creator exists" do
      creator = create(:creator, name: "Bruce Wayne")
      expect(output.dig(:creator, :id)).to eq creator.id
    end

    it "parses creator link if creator doesn't exist" do
      expect(output.dig(:creator, :links_attributes, 0, :url)).to eq "http://localhost:3214/creators/bruce-wayne"
    end

    it "parses collection ID if collection exists" do
      collection = create(:collection, name: "Wonderful Toys", public_id: "abc123")
      expect(output.dig(:collection, :id)).to eq collection.id
    end

    it "parses collection link if collection doesn't exist" do
      expect(output.dig(:collection, :links_attributes, 0, :url)).to eq "http://localhost:3214/collections/abc123"
    end

    it "parses sensitive flag" do
      expect(output[:sensitive]).to be true
    end
  end
end
</file>

<file path="spec/deserializers/data_package/model_file_deserializer_spec.rb">
require "rails_helper"

RSpec.describe DataPackage::ModelFileDeserializer do
  context "when generating an Data Package representation" do
    subject(:deserializer) { described_class.new(object) }

    let(:output) { deserializer.deserialize }
    let(:object) {
      {
        "path" => "files/test.stl",
        "mediatype" => "model/stl",
        "caption" => "caption goes here",
        "description" => "description goes here",
        "up" => "+y",
        "presupported" => true
      }
    }

    it "parses filename" do
      expect(output[:filename]).to eq "files/test.stl"
    end

    it "parses notes" do
      expect(output[:notes]).to eq "description goes here"
    end

    it "parses caption" do
      expect(output[:caption]).to eq "caption goes here"
    end

    it "parses presupported flag" do
      expect(output[:presupported]).to be true
    end

    it "parses orientation" do
      expect(output[:y_up]).to be true
    end
  end
end
</file>

<file path="spec/factories/doorkeeper/access_token.rb">
FactoryBot.define do
  factory :oauth_access_token, class: "Doorkeeper::AccessToken" do
    application { association :oauth_application }
  end
end
</file>

<file path="spec/factories/doorkeeper/application.rb">
FactoryBot.define do
  factory :oauth_application, class: "Doorkeeper::Application" do
    name { Faker::Appliance.equipment }
    redirect_uri { "urn:ietf:wg:oauth:2.0:oob" }
    scopes { ["read", "write", "delete"] }
    confidential { true }
    owner { association :moderator }
  end
end
</file>

<file path="spec/factories/federails/actor.rb">
FactoryBot.define do
  factory :actor, class: "Federails::Actor" do
    name { Faker::Name.name }
    actor_type { "Person" }
    entity { nil }
    extensions {
      {
        summary: Faker::Lorem.sentence,
        content: Faker::Lorem.paragraph,
        attachment: [
          {
            "type" => "Link",
            "href" => "https://example.org"
          },
          {
            "type" => "Ignored",
            "href" => "https://example.org"
          }
        ]
      }
    }

    trait :distant do
      local { false }
      federated_url { "https://example.com/actors/#{rand(1...10_000)}" }
      username { Faker::Internet.username separators: ["-", "_"] }
      server { "example.com" }
      inbox_url { "#{federated_url}/inbox" }
      outbox_url { "#{federated_url}/outbox" }
      followers_url { "#{federated_url}/followers" }
      followings_url { "#{federated_url}/followings" }
      profile_url { "https://example.com/users/#{federated_url.split("/").last}" }
    end

    trait :f3di_model do
      extensions {
        {
          tag: [
            {
              type: "Hashtag",
              name: "Hash Tag",
              href: "http://localhost:3214/models?tag=Hash%20Tag"
            },
            {
              type: "Hashtag",
              name: "#Wizard",
              href: "http://localhost:3214/models?tag=Wizard"
            }
          ],
          summary: Faker::Lorem.sentence,
          content: Faker::Lorem.paragraph,
          "f3di:concreteType": "3DModel",
          "spdx:license": {
            "spdx:licenseId": "MIT"
          },
          indexable: true,
          attachment: [
            {
              "type" => "Link",
              "href" => "https://example.org"
            },
            {
              "type" => "Ignored",
              "href" => "https://example.org"
            }
          ]
        }
      }
    end

    trait :f3di_creator do
      extensions {
        {
          summary: Faker::Lorem.sentence,
          content: Faker::Lorem.paragraph,
          "f3di:concreteType": "Creator",
          indexable: true,
          attachment: [
            {
              "type" => "Link",
              "href" => "https://example.org"
            },
            {
              "type" => "Ignored",
              "href" => "https://example.org"
            }
          ]
        }
      }
    end

    trait :f3di_collection do
      extensions {
        {
          summary: Faker::Lorem.sentence,
          content: Faker::Lorem.paragraph,
          "f3di:concreteType": "Creator",
          indexable: true,
          attachment: [
            {
              "type" => "Link",
              "href" => "https://example.org"
            },
            {
              "type" => "Ignored",
              "href" => "https://example.org"
            }
          ]
        }
      }
    end
  end
end
</file>

<file path="spec/factories/collection.rb">
FactoryBot.define do
  factory :collection do
    name { Faker::Name.name }
    caption { Faker::Lorem.sentence }
    notes { Faker::Lorem.paragraph }
    links_attributes { [{url: "http://example.com"}] }

    trait :public do
      caber_relations_attributes { [{subject: nil, permission: "view"}] }
    end
  end
end
</file>

<file path="spec/factories/comment.rb">
FactoryBot.define do
  factory :comment do
    comment { Faker::Lorem.paragraph }
  end
end
</file>

<file path="spec/factories/creator.rb">
FactoryBot.define do
  factory :creator do
    sequence(:name) { |n| "Creator #{n}" }
    sequence(:public_id) { |n| "creator_#{n}" }
    caption { Faker::Lorem.sentence }
    notes { Faker::Lorem.paragraph }
    links_attributes { [{url: "http://example.com"}] }

    trait :public do
      caber_relations_attributes { [{subject: nil, permission: "view"}] }
    end
  end
end
</file>

<file path="spec/factories/library.rb">
FactoryBot.define do
  factory :library do
    sequence(:name) { |n| "Library #{n}" }
    sequence(:public_id) { |n| "library_#{n}" }
    path { # rubocop:disable RSpec/MissingExampleGroupArgument, RSpec/EmptyExampleGroup
      dir = Dir.mktmpdir(Faker::File.file_name, "/tmp")
      at_exit { FileUtils.remove_entry(dir) }
      dir
    }
  end
end
</file>

<file path="spec/factories/link.rb">
FactoryBot.define do
  factory :link do
    url { Faker::Internet.url }
  end
end
</file>

<file path="spec/factories/model_file.rb">
FactoryBot.define do
  factory :model_file do
    model
    filename { Faker::File.file_name(ext: "stl") }
    attachment { filename ? Rack::Test::UploadedFile.new(StringIO.new, original_filename: filename) : nil }
  end
end
</file>

<file path="spec/factories/model.rb">
FactoryBot.define do
  factory :model do
    sequence(:name) { |n| "Model #{n}" }
    library
    sequence(:public_id) { |n| "model_#{n}" }
    path { Faker::File.dir } # rubocop:disable RSpec/MissingExampleGroupArgument, RSpec/EmptyExampleGroup

    license { "MIT" }
    caption { Faker::Lorem.sentence }
    notes { Faker::Lorem.paragraph }
    links_attributes { [{url: "http://example.com"}] }

    tag_list { "!new" }

    trait :with_tags do
      transient do
        tags_count { 2 }
      end

      after(:create) do |model, evaluator|
        evaluator.tags_count.times do |i|
          model.tag_list.add("Tag ##{i}")
        end
        model.save
      end
    end

    trait :needs_organizing do
      after(:create) do |model|
        model.update!(needs_organizing: true)
      end
    end

    trait :sensitive do
      sensitive { true }
    end

    trait :with_creator do
      creator
    end

    trait :with_collection do
      collection
    end

    trait :public do
      caber_relations_attributes { [{subject: nil, permission: "view"}] }
      creator factory: [:creator, :public]
    end

    trait :remote do
      after(:create) do |model|
        model.federails_actor.update_attribute(:local, false) # rubocop:disable Rails/SkipsModelValidations
      end
    end
  end
end
</file>

<file path="spec/factories/problem.rb">
FactoryBot.define do
  factory :problem do
    category { :missing }
    problematic { association :model_file }

    factory :problem_on_model do
      problematic { association :model }
    end
  end
end
</file>

<file path="spec/factories/report.rb">
FactoryBot.define do
  factory :report, class: "Federails::Moderation::Report" do
    federated_url { Faker::Internet.url }
    federails_actor { create(:user).federails_actor }
    object { association :model }
    content { Faker::Lorem.sentence }
  end
end
</file>

<file path="spec/factories/role.rb">
FactoryBot.define do
  factory :role do
    name { "administrator" }
  end
end
</file>

<file path="spec/factories/tag.rb">
FactoryBot.define do
  factory :tag, class: "ActsAsTaggableOn::Tag" do
    sequence(:name) { |n| "tag_#{n}" }
  end
end
</file>

<file path="spec/factories/traits.rb">
FactoryBot.define do
  trait :without_validations do
    to_create { |instance| instance.save(validate: false) }
  end
end
</file>

<file path="spec/factories/user.rb">
FactoryBot.define do
  factory :user do
    email { Faker::Internet.email }
    username { Faker::Internet.username specifier: 3, separators: [] }
    password { Faker::Internet.password max_length: 32, min_length: 32, mix_case: true, special_characters: true }

    factory :admin do
      after(:create) { |a| a.add_role :administrator }
    end

    factory :moderator do
      after(:create) { |a| a.add_role :moderator }
    end

    factory :contributor do
      after(:create) { |a| a.add_role :contributor }
    end
  end
end
</file>

<file path="spec/fixtures/fix_nil_file_size_values_spec/example.obj">
# Object Export From Tinkercad Server 2015

mtllib obj.mtl

o obj_0
v -1 		-5 		20
v 9 		-15 		0
v 9 		0 		0
v -1 		-15 		0
v -1 		0 		0
# 5 vertices

g group_0_16768282

usemtl color_16768282
s 0

f 1 	2 	3
f 3 	2 	4
f 3 	4 	5
f 5 	4 	1
f 4 	2 	1
f 3 	5 	1
# 6 faces

 #end of obj_0
</file>

<file path="spec/fixtures/model_file_spec/example.obj">
# Object Export From Tinkercad Server 2015

mtllib obj.mtl

o obj_0
v -1 		-5 		20
v 9 		-15 		0
v 9 		0 		0
v -1 		-15 		0
v -1 		0 		0
# 5 vertices

g group_0_16768282

usemtl color_16768282
s 0

f 1 	2 	3
f 3 	2 	4
f 3 	4 	5
f 5 	4 	1
f 4 	2 	1
f 3 	5 	1
# 6 faces

 #end of obj_0
</file>

<file path="spec/helpers/application_helper_spec.rb">
require "rails_helper"

RSpec.describe ApplicationHelper do
  describe "#icon" do
    it "returns the correct HTML for the icon" do # rubocop:todo RSpec/ExampleLength, RSpec/MultipleExpectations
      html = helper.icon("test", "Test Label")
      doc = Nokogiri::HTML(html)
      expect(doc.at("i")["class"]).to eq("bi bi-test")
      expect(doc.at("i")["role"]).to eq("img")
      expect(doc.at("i")["title"]).to eq("Test Label")
    end

    it "supports RPG-awesome icons" do
      html = helper.icon("ra-test", "Test Label")
      doc = Nokogiri::HTML(html)
      expect(doc.at("i")["class"]).to eq("ra ra-test")
    end
  end

  describe "#card" do
    it "returns the correct HTML for the card" do # rubocop:todo RSpec/MultipleExpectations
      html = helper.card("test", "Test Title") { "Test Content" }
      doc = Nokogiri::HTML(html)
      expect(doc.at("div.card")["class"]).to include("card mb-4")
      expect(doc.at("div.card-header")["class"]).to include("text-white bg-test")
      expect(doc.at("div.card-text").text).to eq("Test Content")
    end
  end

  describe "#text_input_row" do
    it "returns the correct HTML for the text input row" do # rubocop:todo RSpec/MultipleExpectations
      form = ActionView::Helpers::FormBuilder.new(:test, nil, helper, {})
      html = helper.text_input_row(form, :field)
      doc = Nokogiri::HTML(html)
      expect(doc.at("div.row")["class"]).to include("mb-3 input-group")
      expect(doc.at("input")["class"]).to include("form-control")
    end
  end

  describe "#rich_text_input_row" do
    it "returns the correct HTML for the rich text input row" do # rubocop:todo RSpec/MultipleExpectations
      form = ActionView::Helpers::FormBuilder.new(:test, nil, helper, {})
      html = helper.rich_text_input_row(form, :field)
      doc = Nokogiri::HTML(html)
      expect(doc.at("div.row")["class"]).to include("mb-3 input-group")
      expect(doc.at("textarea")["class"]).to include("form-control col-auto")
    end
  end

  describe "#nav_link" do
    it "returns the correct HTML for the navigation link" do # rubocop:todo RSpec/MultipleExpectations
      html = helper.nav_link("test", "Test Text", "/")
      doc = Nokogiri::HTML(html)
      expect(doc.at("a")["class"]).to include("nav-link")
      expect(doc.css("span")[1].text).to eq("Test Text")
    end
  end
end
</file>

<file path="spec/helpers/model_files_helper_spec.rb">
require "rails_helper"

RSpec.describe ModelFilesHelper do
  describe "#slicer_url" do
    let(:file) { create(:model_file, filename: "model.stl") }
    let(:slic3r_family_regex) { "://open\\?file=http%3A%2F%2Ftest.host%2Fmodels%2F#{file.model.to_param}%2Fmodel_files%2Fey[0-9a-zA-Z-]+.stl" }

    it "generates orcaslicer links" do
      url = helper.slicer_url(:orca, file)
      expect(url).to match(/orcaslicer#{slic3r_family_regex}/)
    end

    it "generates bambustudio links" do
      url = helper.slicer_url(:bambu, file)
      expect(url).to match(/bambustudioopen#{slic3r_family_regex}/)
    end

    it "generates prusaslicer links" do
      url = helper.slicer_url(:prusa, file)
      expect(url).to match(/prusaslicer#{slic3r_family_regex}/)
    end

    it "generates superslicer links" do
      # Superslicer uses the prusaslicer URL handler
      url = helper.slicer_url(:superslicer, file)
      expect(url).to match(/prusaslicer#{slic3r_family_regex}/)
    end

    it "generates cura links" do
      url = helper.slicer_url(:cura, file)
      expect(url).to match(/cura#{slic3r_family_regex}/)
    end

    it "generates elegoo links" do
      url = helper.slicer_url(:elegoo, file)
      expect(url).to match(/elegooslicer#{slic3r_family_regex}/)
    end
  end
end
</file>

<file path="spec/helpers/models_helper_spec.rb">
require "rails_helper"

RSpec.describe ModelsHelper do
  describe "string concat" do
    let(:files) do
      %w[
        armleft
        arm_right
        head_1
        leg_l
        leg_r
      ].map { |it| build(:model_file, filename: "#{it}.stl") }
    end

    it "groups strings together with similar prefixes" do # rubocop:todo RSpec/MultipleExpectations
      groups = helper.group(files)
      expect(groups["leg_"].count).to eq(2)
      expect(groups["arm"].count).to eq(2)
      expect(groups[nil].count).to eq(1)
    end
  end

  describe "license options" do
    it "creates a suitable hash of options" do
      expect(helper.license_select_options).to include('<option value="CC0-1.0">Creative Commons Zero</option>')
    end

    it "sets selected option" do
      expect(helper.license_select_options(selected: "CC0-1.0")).to include('<option selected="selected" value="CC0-1.0">Creative Commons Zero</option>')
    end
  end
end
</file>

<file path="spec/helpers/problems_helper_spec.rb">
require "rails_helper"

RSpec.describe ProblemsHelper, :as_member do
  include Devise::Test::ControllerHelpers
  let(:model) { create(:model) }

  it "converts a problem to a severity level" do
    expect(helper.problem_severity(
      Problem.new(category: :duplicate, problematic: model)
    )).to eq :warning
  end

  it "works out the maximum severity from a set of problems (warning)" do
    Problem.create(category: :duplicate, problematic: model)
    Problem.create(category: :inefficient, problematic: model)
    expect(helper.max_problem_severity(Problem.all)).to eq :warning
  end

  it "works out the maximum severity from a set of problems (danger)" do
    Problem.create(category: :missing, problematic: model)
    Problem.create(category: :duplicate, problematic: model)
    Problem.create(category: :inefficient, problematic: model)
    expect(helper.max_problem_severity(Problem.all)).to eq :danger
  end
end
</file>

<file path="spec/jobs/activity/model_published_job_spec.rb">
require "rails_helper"

RSpec.describe Activity::ModelPublishedJob do
  let(:creator) { create(:creator) }
  let(:model) { create(:model, creator: creator, tag_list: "tag1, tag2", sensitive: true) }

  it "adds a comment" do
    expect { described_class.new.perform(model.id) }.to change(Comment, :count).by(1)
  end

  context "with a comment" do
    subject(:comment) { model.comments.first }

    before do
      described_class.new.perform(model.id)
    end

    it "sets creator as author" do
      expect(comment.commenter).to eq creator
    end

    it "sets model as the subject" do
      expect(comment.commentable).to eq model
    end

    it "marks comment as a system comment" do
      expect(comment.system).to be true
    end

    it "includes model name in text" do
      expect(comment.comment).to include model.name
    end

    it "includes URL in text" do
      expect(comment.comment).to include "http://localhost:3214/models/#{model.public_id}"
    end

    it "sets sensitive flag from model" do
      expect(comment.sensitive).to be true
    end
  end
end
</file>

<file path="spec/jobs/analysis/analyse_model_file_job_spec.rb">
require "rails_helper"
require "support/mock_directory"

RSpec.describe Analysis::AnalyseModelFileJob do
  context "with an existing file" do
    let(:file) { create(:model_file, filename: "test.3mf", digest: "deadc0de") }

    before do
      allow(ModelFile).to receive(:find).with(file.id).and_return(file)
      allow(File).to receive(:exist?).and_return(true)
      allow(File).to receive(:mtime).once.and_return(1.day.ago)
      allow(file).to receive(:calculate_digest).once.and_return("deadbeef")
    end

    it "calculates file digest if not set" do
      file.update!(digest: nil)
      expect { described_class.perform_now file.id }.to(
        change(file, :digest).from(nil).to("deadbeef")
      )
    end

    it "doesn't queue geometric analysis if file digest doesn't change" do
      expect { described_class.perform_now file.id }.not_to(
        have_enqueued_job(Analysis::GeometricAnalysisJob)
      )
    end

    it "queues geometric analysis if file digest changes" do
      file.update(digest: nil) # force analysis
      expect { described_class.perform_now file.id }.to(
        have_enqueued_job(Analysis::GeometricAnalysisJob).with(file.id).once
      )
    end

    it "detects ASCII STL files and creates a Problem record" do # rubocop:todo RSpec/ExampleLength, RSpec/MultipleExpectations
      allow(file).to receive_messages(extension: "stl", size: 1234)
      allow(file).to receive(:head).with(6).once.and_return("solid ")
      expect { described_class.perform_now file.id }.to change(Problem, :count).from(0).to(1)
      expect(Problem.first.category).to eq "inefficient"
      expect(Problem.first.note).to eq "ASCII STL"
    end

    it "detects Wavefront OBJ files and creates a Problem record" do # rubocop:todo RSpec/MultipleExpectations
      allow(file).to receive_messages(extension: "obj", size: 1234)
      expect { described_class.perform_now file.id }.to change(Problem, :count).from(0).to(1)
      expect(Problem.first.category).to eq "inefficient"
      expect(Problem.first.note).to eq "Wavefront OBJ"
    end

    it "detects ASCII PLY files and creates a Problem record" do # rubocop:todo RSpec/ExampleLength, RSpec/MultipleExpectations
      allow(file).to receive_messages(extension: "ply", size: 1234)
      allow(file).to receive(:head).with(16).once.and_return("ply\rformat ascii")
      expect { described_class.perform_now file.id }.to change(Problem, :count).from(0).to(1)
      expect(Problem.first.category).to eq "inefficient"
      expect(Problem.first.note).to eq "ASCII PLY"
    end

    it "detects duplicate files and creates a Problem record" do # rubocop:todo RSpec/ExampleLength, RSpec/MultipleExpectations
      allow(file).to receive_messages(size: 1234)
      allow(file).to receive(:duplicate?).once.and_return(true)
      expect { described_class.perform_now file.id }.to change(Problem, :count).from(0).to(1)
      expect(Problem.first.category).to eq "duplicate"
    end

    it "detects zero-length files and creates a Problem record" do # rubocop:todo RSpec/ExampleLength, RSpec/MultipleExpectations
      allow(file).to receive_messages(size: 0)
      expect { described_class.perform_now file.id }.to change(Problem, :count).from(0).to(1)
      expect(Problem.first.category).to eq "empty"
    end
  end

  context "when matching supported/unsupported files" do
    let(:model) { create(:model) }

    [
      %w[model.stl model_supported.stl],
      %w[model.stl model_supported.lys],
      %w[model.stl model_sup.stl],
      %w[model.stl SUPPORTED/model.stl],
      %w[unsupported/model.stl supported/model.stl],
      %w[bases_unsupported/model.stl bases_supported/model.stl],
      %w[model.stl supports/model.stl],
      ["no supports/model.stl", "supports/model.stl"],
      %w[model.stl presupported_model.stl],
      ["Beefy Arm R.stl", "Beefy Arm R Supported.stl"],
      ["32mm base 1.stl", "32mm base 1_Supported.stl"]
    ].each do |filename, supported_filename|
      it "matches #{filename} with #{supported_filename}" do
        unsup = create(:model_file, model: model, filename: filename)
        sup = create(:model_file, model: model, filename: supported_filename, presupported: true)
        described_class.new.match_with_supported_file unsup
        expect(unsup.presupported_version).to eq sup
      end
    end

    [
      %w[model_a.stl model_b.stl],
      %w[model.stl model_base.stl],
      %w[model.stl unsupported_model.stl],
      ["Beefy Arm R.stl", "Beefy Arm L Supported.stl"]
    ].each do |filename, supported_filename|
      it "doesn't match #{filename} with #{supported_filename}" do
        unsup = create(:model_file, model: model, filename: filename)
        create(:model_file, model: model, filename: supported_filename, presupported: true)
        described_class.new.match_with_supported_file unsup
        expect(unsup.presupported_version).to be_nil
      end
    end

    [
      ["Beefy Arm B.stl", "Beefy Arm B Supported.stl",
        ["Beefy Arm A Supported.lys", "Beefy Arm A Supported.stl", "Beefy Arm B Supported.lys"]]
    ].each do |filename, correct, incorrect|
      it "matches #{filename} with #{correct} rather than incorrect options" do # rubocop:todo RSpec/ExampleLength
        incorrect.each do |it|
          create(:model_file, model: model, filename: it, presupported: true)
        end
        unsup = create(:model_file, model: model, filename: filename)
        sup = create(:model_file, model: model, filename: correct, presupported: true)
        described_class.new.match_with_supported_file unsup
        expect(unsup.presupported_version).to eq sup
      end
    end

    it "prefers to match same file format if possible even if the text match is a bit worse" do
      unsup = create(:model_file, model: model, filename: "Beefy Arm R.stl")
      sup = create(:model_file, model: model, filename: "Befy Arm R Supported.stl", presupported: true)
      create(:model_file, model: model, filename: "Beefy Arm R Supported.lys", presupported: true)
      described_class.new.match_with_supported_file unsup
      expect(unsup.presupported_version).to eq sup
    end
  end

  it "raises exception if file ID is not found" do
    expect { described_class.perform_now(nil) }.to raise_error(ActiveRecord::RecordNotFound)
  end
end
</file>

<file path="spec/jobs/analysis/file_conversion_job_spec.rb">
require "rails_helper"
require "support/mock_directory"

RSpec.describe Analysis::FileConversionJob do
  around do |ex|
    MockDirectory.create([
      "model_one/files/awesome.stl"
    ]) do |path|
      @library_path = path
      ex.run
    end
  end

  let(:library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable
  let(:model) { create(:model, path: "model_one", library: library) }
  let(:file) { create(:model_file, model: model, filename: "files/awesome.stl") }
  let(:mesh) do
    m = Mittsu::Mesh.new(Mittsu::SphereGeometry.new(2.0, 32, 16))
    m.geometry.merge_vertices
    m
  end

  before do
    allow(file).to receive(:mesh).and_return(mesh)
    allow(ModelFile).to receive(:find).and_call_original
    allow(ModelFile).to receive(:find).with(file.id).and_return(file)
  end

  context "when converting to 3MF" do
    it "creates a new file" do
      expect { described_class.perform_now(file.id, :threemf) }.to change(ModelFile, :count).from(1).to(2)
    end

    it "creates a file with 3mf extension" do
      described_class.perform_now(file.id, :threemf)
      expect(ModelFile.where.not(id: file.id).first.extension).to eq "3mf"
    end

    it "creates a file with the same basename as the original" do
      described_class.perform_now(file.id, :threemf)
      expect(ModelFile.where.not(id: file.id).first.filename).to eq "files/awesome.3mf"
    end

    it "avoids filenames that already exist" do
      allow(library).to receive(:has_file?).with(file.path_within_library.gsub(".stl", ".3mf")).and_return(true).once
      allow(library).to receive(:has_file?).with(file.path_within_library.gsub(".stl", "-1.3mf")).and_return(true).once
      allow(library).to receive(:has_file?).with(file.path_within_library.gsub(".stl", "-2.3mf")).and_return(false)
      described_class.perform_now(file.id, :threemf)
      expect(ModelFile.where.not(id: file.id).first.filename).to eq "files/awesome-2.3mf"
    end

    it "creates an actual 3MF file on disk" do # rubocop:todo RSpec/MultipleExpectations
      described_class.perform_now(file.id, :threemf)
      path = File.join(library.path, ModelFile.where.not(id: file.id).first.path_within_library)
      expect(File.exist?(path)).to be true
      expect(File.size(path)).to be > 10000
    end

    it "does not remove the original file" do
      described_class.perform_now(file.id, :threemf)
      expect { ModelFile.find(file.id) }.not_to raise_error
    end

    it "should create a file equivalence with the original file"

    it "logs an error for non-manifold meshes" do
      allow(mesh).to receive(:manifold?).and_return(false)
      expect { described_class.perform_now(file.id, :threemf) }.to change { Problem.where(category: :non_manifold).count }.by(1)
    end

    it "queues up analysis job for new file" do
      expect { described_class.perform_now(file.id, :threemf) }.to have_enqueued_job(Analysis::AnalyseModelFileJob)
    end
  end

  it "raises exception with an invalid file ID" do
    expect { described_class.perform_now(nil, :threemf) }.to raise_error(ActiveRecord::RecordNotFound)
  end

  it "does nothing with an invalid output format" do
    expect { described_class.perform_now(file.id, :ply) }.to raise_error(UnsupportedFormatError)
  end
end
</file>

<file path="spec/jobs/analysis/geometric_analysis_job_spec.rb">
require "rails_helper"
require "support/mock_directory"

RSpec.describe Analysis::GeometricAnalysisJob do
  let(:file) { create(:model_file, filename: "test.stl") }
  let(:mesh) do
    m = Mittsu::Mesh.new(Mittsu::SphereGeometry.new(2.0, 32, 16))
    m.geometry.merge_vertices
    m
  end

  before do
    allow(file).to receive(:mesh).and_return(mesh)
    allow(ModelFile).to receive(:find).and_call_original
    allow(ModelFile).to receive(:find).with(file.id).and_return(file)
    allow(SiteSettings).to receive(:analyse_manifold).and_return(true)
  end

  it "does not create Problems for a good mesh" do
    allow(file).to receive(:mesh).and_return(mesh)
    expect { described_class.perform_now(file.id) }.not_to change(Problem, :count)
  end

  it "creates a Problem for a non-manifold mesh" do # rubocop:todo RSpec/MultipleExpectations
    allow(mesh).to receive(:manifold?).and_return(false)
    allow(file).to receive(:mesh).and_return(mesh)
    expect { described_class.perform_now(file.id) }.to change(Problem, :count).from(0).to(1)
    expect(Problem.first.category).to eq "non_manifold"
  end

  it "removes a manifold problem if the mesh is OK" do
    allow(file).to receive(:mesh).and_return(mesh)
    create(:problem, problematic: file, category: :non_manifold)
    expect { described_class.perform_now(file.id) }.to change(Problem, :count).from(1).to(0)
  end

  it "creates a Problem for an inside-out mesh" do # rubocop:todo RSpec/MultipleExpectations
    pending "not currently working reliably"
    allow(mesh).to receive(:solid?).and_return(false)
    allow(file).to receive(:mesh).and_return(mesh)
    expect { described_class.perform_now(file.id) }.to change(Problem, :count).from(0).to(1)
    expect(Problem.first.category).to eq "inside_out"
  end

  it "removes an inside-out problem if the mesh is OK" do
    pending "not currently working reliably"
    allow(file).to receive(:mesh).and_return(mesh)
    create(:problem, problematic: file, category: :inside_out)
    expect { described_class.perform_now(file.id) }.to change(Problem, :count).from(1).to(0)
  end

  it "raises exception if file ID is not found" do
    expect { described_class.perform_now(nil) }.to raise_error(ActiveRecord::RecordNotFound)
  end
end
</file>

<file path="spec/jobs/scan/library/create_model_from_path_job_spec.rb">
require "rails_helper"
require "support/mock_directory"

RSpec.describe Scan::Library::CreateModelFromPathJob do
  let(:library) { create(:library) }

  it "creates a single model" do
    expect { described_class.perform_now(library.id, "model") }.to change(Model, :count).from(0).to(1)
  end

  it "creates model in library" do
    described_class.perform_now(library.id, "model")
    expect(library.models.count).to be 1
  end

  it "sets correct path in new model" do
    described_class.perform_now(library.id, "model")
    expect(Model.first.path).to eql "model"
  end

  it "queues model new file scan" do
    described_class.perform_now(library.id, "model")
    expect(Scan::Model::AddNewFilesJob).to have_been_enqueued.with(Model.first.id, include_all_subfolders: false).once
  end

  it "queues model new file scan including subfolders" do
    described_class.perform_now(library.id, "model", include_all_subfolders: true)
    expect(Scan::Model::AddNewFilesJob).to have_been_enqueued.with(Model.first.id, include_all_subfolders: true).once
  end

  it "applies automatic new tag" do
    described_class.perform_now(library.id, "model")
    expect(Model.first.tag_list).to include "!new"
  end

  it "does not apply automatic new tag if there isn't one set" do
    allow(SiteSettings).to receive(:model_tags_auto_tag_new).and_return nil
    described_class.perform_now(library.id, "model")
    expect(Model.first.tag_list).to be_empty
  end
end
</file>

<file path="spec/jobs/scan/library/detect_filesystem_changes_job_spec.rb">
require "rails_helper"
require "support/mock_directory"

RSpec.describe Scan::Library::DetectFilesystemChangesJob do
  context "with files in various folders" do
    around do |ex|
      MockDirectory.create([
        "model_one/part_1.obj",
        "model_one/part_2.obj",
        "subfolder/model_two/part_one.stl"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    let(:library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable

    it "can scan a library directory" do # rubocop:todo RSpec/MultipleExpectations
      described_class.perform_now(library.id)
      expect(Scan::Library::CreateModelFromPathJob).to have_been_enqueued.with(library.id, "model_one")
      expect(Scan::Library::CreateModelFromPathJob).to have_been_enqueued.with(library.id, "subfolder/model_two")
    end

    it "only scans models with changes on rescan" do
      model_one = create(:model, path: "model_one", library: library)
      Scan::Model::AddNewFilesJob.perform_now(model_one.id)
      expect { described_class.perform_now(library.id) }.to have_enqueued_job(Scan::Library::CreateModelFromPathJob).with(library.id, "subfolder/model_two").exactly(1).times
    end
  end

  context "with nested models" do
    around do |ex|
      MockDirectory.create([
        "model_one/part_1.obj",
        "model_one/nested/part_2.obj"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    # rubocop:todo RSpec/InstanceVariable

    let(:library) { create(:library, path: @library_path) }
    # rubocop:enable RSpec/InstanceVariable

    it "pulls out nested model as separate" do # rubocop:todo RSpec/MultipleExpectations
      described_class.perform_now(library.id)
      expect(Scan::Library::CreateModelFromPathJob).to have_been_enqueued.with(library.id, "model_one")
      expect(Scan::Library::CreateModelFromPathJob).to have_been_enqueued.with(library.id, "model_one/nested")
    end
  end

  context "with a thingiverse-style model folder" do
    around do |ex|
      MockDirectory.create([
        "thingiverse_model/files/part_one.stl",
        "thingiverse_model/images/preview.png",
        "thingiverse_model/README.txt"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    # rubocop:todo RSpec/InstanceVariable

    let(:library) { create(:library, path: @library_path) }
    # rubocop:enable RSpec/InstanceVariable

    it "understands that it's a single model" do
      expect { described_class.perform_now(library.id) }.to have_enqueued_job(Scan::Library::CreateModelFromPathJob).with(library.id, "thingiverse_model").exactly(1).times
    end
  end

  context "with a thingiverse-style folder with error files" do
    around do |ex|
      MockDirectory.create([
        "thingiverse_model/files/part_one.stl",
        "thingiverse_model/images/preview.stl"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    let(:library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable
    let(:model) { create(:model, library: library, path: "thingiverse_model") }

    it "detects changes of correct files" do
      expect(described_class.new.folders_with_changes(library)).to eq ["thingiverse_model"]
    end

    it "doesn't detect changes because of incorrect file in images folder" do
      create(:model_file, model: model, filename: "files/part_one.stl") # We already know about the correct file
      expect(described_class.new.folders_with_changes(library)).to eq []
    end
  end

  context "with model folders that contain some common subfolders" do
    around do |ex|
      MockDirectory.create([
        "model/presupported/part_one.stl",
        "model/unsupported/part_one.stl",
        "model/supported/part_one.stl",
        "model/parts/part_one.stl",
        "model/files/part_one.stl",
        "model/images/part_one.png"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    # rubocop:todo RSpec/InstanceVariable

    let(:library) { create(:library, path: @library_path) }
    # rubocop:enable RSpec/InstanceVariable

    it "understands that it's a single model" do
      expect { described_class.perform_now(library.id) }.to have_enqueued_job(Scan::Library::CreateModelFromPathJob).with(library.id, "model").exactly(1).times
    end
  end

  context "with model folders that contain some common subfolders with mixed case" do
    around do |ex|
      MockDirectory.create([
        "model/Presupported/part_one.stl",
        "model/UnSupported/part_one.stl",
        "model/Supported/part_one.stl",
        "model/Parts/part_one.stl",
        "model/Files/part_one.stl",
        "model/Images/part_one.png"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    # rubocop:todo RSpec/InstanceVariable

    let(:library) { create(:library, path: @library_path) }
    # rubocop:enable RSpec/InstanceVariable

    it "ignores case and filters out subfolders correctly" do
      expect { described_class.perform_now(library.id) }.to have_enqueued_job(Scan::Library::CreateModelFromPathJob).with(library.id, "model").exactly(1).times
    end
  end

  context "with hidden files and folders" do
    around do |ex|
      MockDirectory.create([
        "model/file.stl",
        "model/.hidden.stl",
        "model/.git/file.stl"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    # rubocop:todo RSpec/InstanceVariable

    let(:library) { create(:library, path: @library_path) }
    # rubocop:enable RSpec/InstanceVariable

    it "does not include hidden files in file list" do
      expect(described_class.new.filenames_on_disk(library)).not_to include "model/.hidden.stl"
    end

    it "does not include hidden folder contents in file list" do
      expect(described_class.new.filenames_on_disk(library)).not_to include "model/.git/file.stl"
    end
  end

  context "with folders that look like filenames" do
    around do |ex|
      MockDirectory.create([
        "wrong.stl/file.stl"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    # rubocop:todo RSpec/InstanceVariable

    let(:library) { create(:library, path: @library_path) }
    # rubocop:enable RSpec/InstanceVariable

    it "does not include directories in file list" do
      expect(described_class.new.filenames_on_disk(library)).not_to include "wrong.stl"
    end

    it "does include files within directories in file list" do
      expect(described_class.new.filenames_on_disk(library)).to include "wrong.stl/file.stl"
    end
  end

  context "with a case sensitive filesystem", :case_sensitive do
    around do |ex|
      MockDirectory.create([
        "model/file.obj",
        "model/file.OBJ",
        "model/file.Obj"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    # rubocop:todo RSpec/InstanceVariable

    let(:library) { create(:library, path: @library_path) }
    # rubocop:enable RSpec/InstanceVariable

    it "detects lowercase file extensions" do
      expect(described_class.new.filenames_on_disk(library)).to include "model/file.obj"
    end

    it "detects uppercase file extensions" do
      expect(described_class.new.filenames_on_disk(library)).to include "model/file.OBJ"
    end

    it "detects mixed case file extensions" do
      expect(described_class.new.filenames_on_disk(library)).to include "model/file.Obj"
    end
  end

  context "with unusual characters in model folder names" do
    around do |ex|
      MockDirectory.create([
        "model [test]/file.obj"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    let(:library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable

    it "detects files inside models with square brackets" do
      expect(described_class.new.filenames_on_disk(library)).to include "model [test]/file.obj"
    end
  end

  context "with a space in the library folder name" do
    around do |ex|
      MockDirectory.create([
        "3d models/model_one/part_1.obj",
        "3d models/model_one/part_2.obj",
        "3d models/subfolder/model_two/part_one.stl"
      ]) do |path|
        @library_path = path + "/3d models"
        ex.run
      end
    end

    let(:library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable

    it "can scan a library directory" do # rubocop:todo RSpec/MultipleExpectations
      described_class.perform_now(library.id)
      expect(Scan::Library::CreateModelFromPathJob).to have_been_enqueued.with(library.id, "model_one")
      expect(Scan::Library::CreateModelFromPathJob).to have_been_enqueued.with(library.id, "subfolder/model_two")
    end
  end
end
</file>

<file path="spec/jobs/scan/model/add_new_files_job_spec.rb">
require "rails_helper"
require "support/mock_directory"

RSpec.describe Scan::Model::AddNewFilesJob do
  context "with a simple model folder" do
    around do |ex|
      MockDirectory.create([
        "model_one/part_1.lys",
        "model_one/part_2.obj"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    let(:library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable

    let(:model) do
      create(:model, path: "model_one", library: library)
    end

    it "detects model files" do # rubocop:todo RSpec/MultipleExpectations
      expect { described_class.perform_now(model.id) }.to change { model.model_files.count }.to(2)
      expect(model.model_files.map(&:filename).sort).to eq ["part_1.lys", "part_2.obj"].sort
    end

    it "queues up individual file metadata parsing" do
      expect { described_class.perform_now(model.id) }.to have_enqueued_job(Scan::ModelFile::ParseMetadataJob).exactly(2).times
    end

    it "queues up metadata parsing" do
      expect { described_class.perform_now(model.id) }
        .to have_enqueued_job(Scan::Model::ParseMetadataJob).with(model.id).once
    end
  end

  context "with a thingiverse-structured model" do
    around do |ex|
      MockDirectory.create([
        "thingiverse_model/files/part_one.stl",
        "thingiverse_model/images/card_preview_DISPLAY.png",
        "thingiverse_model/images/ignore.stl",
        "thingiverse_model/LICENSE.txt",
        "thingiverse_model/README.txt"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    let(:library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable
    let(:thing) { create(:model, path: "thingiverse_model", library: library) }

    it "scans files" do # rubocop:todo RSpec/MultipleExpectations
      expect { described_class.perform_now(thing.id) }.to change { thing.model_files.count }.to(4)
      expect(thing.model_files.map(&:filename)).to eq ["LICENSE.txt", "README.txt", "files/part_one.stl", "images/card_preview_DISPLAY.png"]
    end

    it "ignores model-type files in image directory" do # rubocop:todo RSpec/MultipleExpectations
      expect { described_class.perform_now(thing.id) }.to change { thing.model_files.count }.to(4)
      expect(thing.model_files.map(&:filename)).not_to include "images/ignore.stl"
    end
  end

  context "with files in some common subfolders" do
    around do |ex|
      MockDirectory.create([
        "model/presupported/part_one.stl",
        "model/unsupported/part_one.stl",
        "model/supported/part_one.stl",
        "model/parts/part_one.stl",
        "model/files/part_one.stl",
        "model/images/part_one.png"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    let(:library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable
    let(:model) { create(:model, path: "model", library: library) }

    it "finds all the files in the subfolders" do
      expect { described_class.perform_now(model.id) }.to change { model.model_files.count }.to(6)
    end
  end

  context "with files in common subfolders with mixed case", :case_sensitive do
    around do |ex|
      MockDirectory.create([
        "model/Presupported/part_one.stl",
        "model/UnSupported/part_one.stl",
        "model/Supported/part_one.stl",
        "model/Parts/part_one.stl",
        "model/Files/part_one.stl",
        "model/Images/part_one.png"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    # rubocop:todo RSpec/InstanceVariable

    let(:library) { create(:library, path: @library_path) }
    # rubocop:enable RSpec/InstanceVariable
    let(:model) { create(:model, path: "model", library: library) }

    it "finds all the files in the subfolders" do
      expect { described_class.perform_now(model.id) }.to change { model.model_files.count }.to(6)
    end
  end

  context "with directories that look like files" do
    around do |ex|
      MockDirectory.create([
        "model/nope.stl/arm.stl",
        "model/leg.stl"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    # rubocop:todo RSpec/InstanceVariable

    let(:mock_library) { create(:library, path: @library_path) }
    # rubocop:enable RSpec/InstanceVariable

    it "doesn't make ModelFile objects for folders" do # rubocop:todo RSpec/MultipleExpectations
      model = create(:model, path: "model", library: mock_library)
      # arm.stl is in a contained model so there should be only one file in this model
      expect { described_class.perform_now(model.id) }.to change { model.model_files.count }.to(1)
      expect(model.model_files.map(&:filename)).not_to include ["nope.stl"]
    end
  end

  context "with special characters in model folder" do
    around do |ex|
      MockDirectory.create([
        "3d models/model_one [test]/part_1.obj"
      ]) do |path|
        @library_path = path + "/3d models"
        ex.run
      end
    end

    let(:library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable

    let(:model) do
      create(:model, path: "model_one [test]", library: library)
    end

    it "generates a correct file list" do
      expect(described_class.new.file_list(
        model.path,
        library
      )).to eq ["#{model.path}/part_1.obj"]
    end

    it "detects model files" do # rubocop:todo RSpec/MultipleExpectations
      expect { described_class.perform_now(model.id) }.to change { model.model_files.count }.to(1)
      expect(model.model_files.map(&:filename)).to eq ["part_1.obj"]
    end
  end

  context "with subfolder inside model folder" do
    around do |ex|
      MockDirectory.create([
        "model_one/part_1.obj",
        "model_one/subfolder/part_2.obj"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    let(:library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable

    let(:model) do
      create(:model, path: "model_one", library: library)
    end

    it "ignores subfolders if not told to include them" do
      expect(described_class.new.file_list(
        model.path,
        library
      )).to eq ["#{model.path}/part_1.obj"]
    end

    it "generates a complete file list if including all subfolders" do
      expect(described_class.new.file_list(
        model.path,
        library,
        include_all_subfolders: true
      )).to eq ["#{model.path}/part_1.obj", "#{model.path}/subfolder/part_2.obj"]
    end
  end

  context "with a datapackage in a model folder" do
    around do |ex|
      MockDirectory.create([
        "model_one/model.stl",
        "model_one/datapackage.json"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    let(:library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable

    let(:model) do
      create(:model, path: "model_one", library: library)
    end

    it "detects model files" do # rubocop:todo RSpec/MultipleExpectations
      expect { described_class.perform_now(model.id) }.to change { model.model_files.count }.to(2)
      expect(model.model_files.map(&:filename).sort).to eq ["model.stl", "datapackage.json"].sort
    end
  end

  it "raises exception if model ID is not found" do
    expect { described_class.perform_now(nil) }.to raise_error(ActiveRecord::RecordNotFound)
  end
end
</file>

<file path="spec/jobs/scan/model/check_for_problems_job_spec.rb">
require "rails_helper"
require "support/mock_directory"

RSpec.describe Scan::Model::CheckForProblemsJob do
  context "when checking for missing files" do
    around do |ex|
      MockDirectory.create([
        "model_one/test.stl"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    let(:library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable

    it "flags models with no folder as a problem" do
      model = create(:model, library: library, path: "missing")
      described_class.perform_now(model.id)
      expect(model.problems.map(&:category)).to include("missing")
    end

    it "flags up problems for files that don't exist on disk" do
      model = create(:model, path: "model_one", library: library)
      file = create(:model_file, filename: "missing.stl", model: model)
      File.delete(File.join(library.path, file.path_within_library))
      described_class.perform_now(model.id)
      expect(model.model_files.first.problems.map(&:category)).to include("missing")
    end
  end

  context "when checking for missing image files" do
    it "flags models without images as a problem" do
      model = create(:model)
      create(:model_file, filename: "3d.stl", model: model)
      described_class.perform_now(model.id)
      expect(model.problems.map(&:category)).to include("no_image")
    end
  end

  context "when checking for missing 3d files" do
    it "flags models without 3d files as a problem" do
      model = create(:model)
      create(:model_file, filename: "image.jpg", model: model)
      described_class.perform_now(model.id)
      expect(model.problems.map(&:category)).to include("no_3d_model")
    end
  end

  context "when checking for missing license" do
    it "flags models without license as a problem" do
      model = create(:model, license: nil)
      described_class.perform_now(model.id)
      expect(model.problems.map(&:category)).to include("no_license")
    end

    it "doesn't raise a problem for models with license" do
      model = create(:model, license: "CC-BY-4.0")
      described_class.perform_now(model.id)
      expect(model.problems.map(&:category)).not_to include("no_license")
    end
  end

  context "when checking for missing creator" do
    it "flags models without creator as a problem" do
      model = create(:model)
      described_class.perform_now(model.id)
      expect(model.problems.map(&:category)).to include("no_creator")
    end

    it "doesn't raise a problem for models with creator" do
      creator = create(:creator)
      model = create(:model, creator: creator)
      described_class.perform_now(model.id)
      expect(model.problems.map(&:category)).not_to include("no_creator")
    end
  end

  context "when checking for missing links" do
    it "flags models without link as a problem" do
      model = create(:model, links_attributes: [])
      described_class.perform_now(model.id)
      expect(model.problems.map(&:category)).to include("no_links")
    end

    it "doesn't raise a problem for models with a link" do
      link = Link.new url: "https://example.com"
      model = create(:model, links: [link])
      described_class.perform_now(model.id)
      expect(model.problems.map(&:category)).not_to include("no_links")
    end
  end

  context "when checking for missing tags" do
    it "flags models without tags as a problem" do
      model = create(:model, tag_list: [])
      described_class.perform_now(model.id)
      expect(model.problems.map(&:category)).to include("no_tags")
    end

    it "doesn't raise a problem for models with tags" do
      model = create(:model, tag_list: ["tag"])
      described_class.perform_now(model.id)
      expect(model.problems.map(&:category)).not_to include("no_tags")
    end
  end

  it "raises exception if model ID is not found" do
    expect { described_class.perform_now(nil) }.to raise_error(ActiveRecord::RecordNotFound)
  end
end
</file>

<file path="spec/jobs/scan/model/parse_metadata_job_spec.rb">
require "rails_helper"
require "support/mock_directory"

RSpec.describe Scan::Model::ParseMetadataJob do
  context "with a simple model folder" do
    let(:model) { create(:model) }

    before do
      create(:model_file, model: model, filename: "part_1.lys")
      create(:model_file, model: model, filename: "part_2.obj")
    end

    it "sets the preview file to the first renderable scanned file by default" do
      expect { described_class.perform_now(model.id) }
        .to change { model.reload.preview_file&.filename }.to("part_2.obj")
    end

    it "queues up check for model problems once complete" do
      expect { described_class.perform_now(model.id) }
        .to have_enqueued_job(Scan::Model::CheckForProblemsJob).with(model.id).once
    end
  end

  it "raises exception if model ID is not found" do
    expect { described_class.perform_now(nil) }
      .to raise_error(ActiveRecord::RecordNotFound)
  end

  context "when generating tags from folder name" do
    before do
      allow(SiteSettings).to receive_messages(
        model_tags_tag_model_directory_name: true,
        parse_metadata_from_path: false
      )
    end

    it "preserves existing tags" do
      model = create(:model, path: "/library1/stuff/testing")
      described_class.perform_now(model.id)
      expect(model.tag_list).to include "!new"
    end

    context "without stop word filtering" do
      before do
        allow(SiteSettings).to receive(:model_tags_filter_stop_words).and_return(false)
      end

      it "skips single letter tags" do
        model = create(:model, path: "/library1/stuff/a")
        described_class.perform_now(model.id)
        expect(model.tag_list).not_to include("a")
      end

      it "generates tag from whitespace delimited file names" do
        model = create(:model, path: "/library1/stuff/this is a fantasy model", tags: [])
        described_class.perform_now(model.id)
        model.reload
        expect(model.tag_list).to include("this", "is", "fantasy", "model")
      end

      it "generates tag from underscore delimited file names" do
        model = create(:model, path: "/library1/stuff/this_is_a_fantasy_model")
        described_class.perform_now(model.id)
        model.reload
        expect(model.tag_list).to include("this", "is", "fantasy", "model")
      end

      it "generates tag from plus delimited file names" do
        model = create(:model, path: "/library1/stuff/this+is+a+fantasy+model")
        described_class.perform_now(model.id)
        model.reload
        expect(model.tag_list).to include("this", "is", "fantasy", "model")
      end

      it "generates tag from hyphen delimited file names" do
        model = create(:model, path: "/library1/stuff/this-is-a-fantasy-model")
        described_class.perform_now(model.id)
        model.reload
        expect(model.tag_list).to include("this", "is", "fantasy", "model")
      end
    end

    context "with stop word filtering" do
      before do
        allow(SiteSettings).to receive_messages(
          model_tags_stop_words_locale: "en",
          model_tags_filter_stop_words: true,
          model_tags_custom_stop_words: ["chicken"]
        )
      end

      it "filters custom stop words" do
        model = create(:model, path: "/library1/stuff/this-is-a-scifi-chicken-model")
        described_class.perform_now(model.id)
        expect(model.reload.tag_list).not_to include("chicken")
      end
    end
  end

  context "when parsing from template and folder name" do
    let(:model) { create(:model, path: "/creator/tag1/tag2/model-name", tag_list: ["existing", "tags"]) }

    before do
      allow(SiteSettings).to receive_messages(
        model_tags_tag_model_directory_name: true,
        parse_metadata_from_path: true,
        model_tags_auto_tag_new: "!new",
        model_path_template: "{creator}/{tags}/{modelName}{modelId}"
      )
      described_class.perform_now(model.id)
      model.reload
    end

    it "includes tags parsed from folder name" do
      expect(model.tag_list).to include("model", "name")
    end

    it "includes tags parsed from path" do
      expect(model.tag_list).to include("tag1", "tag2")
    end

    it "preserves pre-existing tags" do
      expect(model.tag_list).to include("existing", "tags")
    end

    it "doesn't add auto-new tag" do
      expect(model.tag_list).not_to include("!new")
    end

    it "includes creator info parsed from path" do
      expect(model.creator.name).to include("Creator")
    end
  end

  context "when parsing with a path template" do
    let(:model) { create(:model, path: "/library-1/stuff/tags/are/greedy/model-name") }

    before do
      allow(SiteSettings).to receive_messages(
        model_tags_tag_model_directory_name: false,
        parse_metadata_from_path: true,
        model_tags_auto_tag_new: nil,
        model_tags_filter_stop_words: false
      )
    end

    it "preserves existing tags" do
      allow(SiteSettings).to receive(:model_path_template).and_return("{tags}/{modelName}{modelId}")
      described_class.perform_now(model.id)
      model.reload
      expect(model.tag_list).to include "!new"
    end

    it "parses tags" do
      allow(SiteSettings).to receive(:model_path_template).and_return("{tags}/{modelName}{modelId}")
      described_class.perform_now(model.id)
      model.reload
      expect(model.tag_list).to include("library 1", "stuff", "tags", "are", "greedy")
    end

    it "parses creator" do
      allow(SiteSettings).to receive(:model_path_template).and_return("{creator}/{modelName}{modelId}")
      described_class.perform_now(model.id)
      model.reload
      expect(model.creator.name).to eq "Greedy"
    end

    it "parses collection" do
      allow(SiteSettings).to receive(:model_path_template).and_return("{collection}/{modelName}{modelId}")
      described_class.perform_now(model.id)
      model.reload
      expect(model.collection.name).to eq "Greedy"
    end

    it "parses everything at once" do # rubocop:todo RSpec/MultipleExpectations, RSpec/ExampleLength
      allow(SiteSettings).to receive(:model_path_template).and_return("{creator}/{collection}/{tags}/{modelName}{modelId}")
      described_class.perform_now(model.id)
      model.reload
      expect(model.creator.name).to eq "Library 1"
      expect(model.collection.name).to eq "Stuff"
      expect(model.tag_list).to include("tags", "are", "greedy")
    end

    it "ignores extra path components" do # rubocop:todo RSpec/MultipleExpectations, RSpec/ExampleLength
      allow(SiteSettings).to receive(:model_path_template).and_return("{creator}/{modelName}{modelId}")
      described_class.perform_now(model.id)
      model.reload
      expect(model.creator.name).to eq "Greedy"
      expect(model.collection).to be_nil
      expect(model.tag_list).to eq ["!new"]
    end

    it "handles a completely empty template" do # rubocop:todo RSpec/MultipleExpectations, RSpec/ExampleLength
      allow(SiteSettings).to receive(:model_path_template).and_return("")
      described_class.perform_now(model.id)
      model.reload
      expect(model.creator).to be_nil
      expect(model.collection).to be_nil
      expect(model.tag_list).to eq ["!new"]
    end

    it "removes stop words from tag lists" do # rubocop:todo RSpec/ExampleLength
      allow(SiteSettings).to receive_messages(
        model_tags_stop_words_locale: "en",
        model_tags_filter_stop_words: true,
        model_tags_custom_stop_words: ["stuff"],
        model_path_template: "{tags}/{modelName}{modelId}"
      )
      described_class.perform_now(model.id)
      expect(model.tag_list).not_to include "stuff"
    end
  end

  context "when parsing creator out of a path" do
    before do
      allow(SiteSettings).to receive(:model_path_template).and_return("{creator}/{modelName}")
    end

    it "creates a new creator from a human name if there's no match" do # rubocop:todo RSpec/MultipleExpectations
      model = create(:model, path: "Bruce Wayne/model-name")
      described_class.perform_now(model.id)
      model.reload
      expect(model.creator.name).to eq "Bruce Wayne"
      expect(model.creator.slug).to eq "bruce-wayne"
    end

    it "creates a new creator from a slug if there's no match" do # rubocop:todo RSpec/MultipleExpectations
      model = create(:model, path: "bruce-wayne/model-name")
      described_class.perform_now(model.id)
      model.reload
      expect(model.creator.name).to eq "Bruce Wayne"
      expect(model.creator.slug).to eq "bruce-wayne"
    end

    context "with an existing creator" do
      let!(:creator) { create(:creator, name: "Bruce Wayne", slug: "bruce-wayne") }

      it "matches safe path components" do
        model = create(:model, path: "bruce-wayne/model-name")
        described_class.perform_now(model.id)
        model.reload
        expect(model.creator).to eq creator
      end

      it "matches unsafe path components" do
        model = create(:model, path: "Bruce Wayne/model-name")
        described_class.perform_now(model.id)
        model.reload
        expect(model.creator).to eq creator
      end
    end

    context "with a creator already assigned" do
      let(:model) { create(:model, path: "bruce-wayne/toys/model-name", creator: create(:creator, name: "Existing")) }

      before do
        allow(SiteSettings).to receive_messages(
          model_path_template: "{creator}/{collection}/{modelName}",
          parse_metadata_from_path: true
        )
      end

      it "doesn't overwrite existing creator" do
        expect { described_class.perform_now(model.id) }.not_to change { model.reload.creator }
      end

      it "sets collection" do
        expect { described_class.perform_now(model.id) }.to change { model.reload.collection }
      end

      it "sets name" do
        expect { described_class.perform_now(model.id) }.to change { model.reload.name }
      end
    end
  end

  context "when parsing collection out of a path" do
    before do
      allow(SiteSettings).to receive(:model_path_template).and_return("{collection}/{modelName}")
    end

    it "creates a new collection from a human name if there's no match" do # rubocop:todo RSpec/MultipleExpectations
      model = create(:model, path: "Wonderful Toys/model-name")
      described_class.perform_now(model.id)
      model.reload
      expect(model.collection.name).to eq "Wonderful Toys"
      expect(model.collection.slug).to eq "wonderful-toys"
    end

    it "creates a new collection from a slug if there's no match" do # rubocop:todo RSpec/MultipleExpectations
      model = create(:model, path: "wonderful-toys/model-name")
      described_class.perform_now(model.id)
      model.reload
      expect(model.collection.name).to eq "Wonderful Toys"
      expect(model.collection.slug).to eq "wonderful-toys"
    end

    context "with an existing collection" do
      let!(:collection) { create(:collection, name: "Wonderful Toys", slug: "wonderful-toys") }

      it "matches safe path components" do
        model = create(:model, path: "wonderful-toys/model-name")
        described_class.perform_now(model.id)
        model.reload
        expect(model.collection).to eq collection
      end

      it "matches unsafe path components" do
        model = create(:model, path: "Wonderful Toys/model-name")
        described_class.perform_now(model.id)
        model.reload
        expect(model.collection).to eq collection
      end
    end

    context "with a creator already assigned" do
      let(:model) { create(:model, path: "bruce-wayne/toys/model-name", collection: create(:collection, name: "Existing")) }

      before do
        allow(SiteSettings).to receive_messages(
          model_path_template: "{creator}/{collection}/{modelName}",
          parse_metadata_from_path: true
        )
      end

      it "sets creator" do
        expect { described_class.perform_now(model.id) }.to change { model.reload.creator }
      end

      it "doesn't overwrite existing collection" do
        expect { described_class.perform_now(model.id) }.not_to change { model.reload.collection }
      end

      it "sets name" do
        expect { described_class.perform_now(model.id) }.to change { model.reload.name }
      end
    end
  end

  it "discards model ID and doesn't include it in model name" do # rubocop:todo RSpec/MultipleExpectations
    allow(SiteSettings).to receive(:model_path_template).and_return("{modelName}{modelId}")
    model = create(:model, path: "model-name#1234")
    described_class.perform_now(model.id)
    model.reload
    expect(model.name).to eq "Model Name"
  end

  it "handles paths matching a complex templates" do # rubocop:todo RSpec/ExampleLength, RSpec/MultipleExpectations
    allow(SiteSettings).to receive_messages(
      parse_metadata_from_path: true,
      model_path_template: "{tags}/{creator} - {modelName}{modelId}",
      model_tags_auto_tag_new: nil
    )
    model = create(:model, path: "human/wizard/bruce-wayne - model-name#1234")
    described_class.perform_now(model.id)
    model.reload
    expect(model.name).to eq "Model Name"
    expect(model.creator.name).to eq "Bruce Wayne"
    expect(model.tag_list).to include("human", "wizard")
  end

  context "when loading data from datapackage" do
    let(:model) { create(:model, links_attributes: []) }

    before do
      allow(model).to receive(:datapackage_content).and_return({
        "links" => [
          {
            "path" => "https://example.com/"
          }
        ]
      })
      allow(Model).to receive(:find).with(model.id).and_return(model)
    end

    it "adds links" do
      expect { described_class.perform_now(model.id) }.to change { model.links.count }.from(0).to(1)
    end

    it "does not duplicate links" do
      # Parse twice so we might duplicate the links
      described_class.perform_now(model.id)
      expect { described_class.perform_now(model.id) }.not_to change { model.links.count }
    end
  end

  context "when loading information from README" do
    let(:model) { create(:model, notes: nil) }
    let(:readme) { create(:model_file, model: model) }

    context "with nothing in datapackage" do
      before do
        allow(Model).to receive(:find).with(model.id).and_return(model)
        allow(model).to receive_messages(
          model_files: instance_double(ActiveRecord::Relation, find_by: readme, min_by: nil),
          datapackage_content: nil
        )
        allow(readme).to receive(:attachment).and_return class_double(File, read: "new content")
      end

      it "adds content to notes field" do
        expect { described_class.perform_now(model.id) }.to change { model.reload.notes }.from(nil).to("new content")
      end
    end

    context "with description in datapackage" do
      before do
        allow(Model).to receive(:find).with(model.id).and_return(model)
        allow(model).to receive_messages(
          model_files: instance_double(ActiveRecord::Relation, find_by: readme, min_by: nil),
          datapackage_content: {"description" => "from datapackage"}
        )
        allow(readme).to receive(:attachment).and_return class_double(File, read: "from readme")
      end

      it "prefers notes from README" do
        expect { described_class.perform_now(model.id) }.to change { model.reload.notes }.from(nil).to("from readme")
      end
    end

    context "with already-set notes" do
      before do
        model.update!(notes: "already set")
        allow(Model).to receive(:find).with(model.id).and_return(model)
        allow(model).to receive_messages(
          model_files: instance_double(ActiveRecord::Relation, find_by: readme, min_by: nil),
          datapackage_content: nil
        )
        allow(readme).to receive(:attachment).and_return class_double(File, read: "from readme")
      end

      it "does not overwrite existing notes" do
        expect { described_class.perform_now(model.id) }.not_to change { model.reload.notes }
      end
    end
  end

  context "when loading information from a Thingiverse ASCII-art README" do
    let(:content) {
      <<~EOF
                           .:                     :,
        ,:::::::: ::`      :::                   :::
        ,:::::::: ::`      :::                   :::
        .,,:::,,, ::`.:,   ... .. .:,     .:. ..`... ..`   ..   .:,    .. ::  .::,     .:,`
           ,::    :::::::  ::, :::::::  `:::::::.,:: :::  ::: .::::::  ::::: ::::::  .::::::
           ,::    :::::::: ::, :::::::: ::::::::.,:: :::  ::: :::,:::, ::::: ::::::, ::::::::
           ,::    :::  ::: ::, :::  :::`::.  :::.,::  ::,`::`:::   ::: :::  `::,`   :::   :::
           ,::    ::.  ::: ::, ::`  :::.::    ::.,::  :::::: ::::::::: ::`   :::::: :::::::::
           ,::    ::.  ::: ::, ::`  :::.::    ::.,::  .::::: ::::::::: ::`    :::::::::::::::
           ,::    ::.  ::: ::, ::`  ::: ::: `:::.,::   ::::  :::`  ,,, ::`  .::  :::.::.  ,,,
           ,::    ::.  ::: ::, ::`  ::: ::::::::.,::   ::::   :::::::` ::`   ::::::: :::::::.
           ,::    ::.  ::: ::, ::`  :::  :::::::`,::    ::.    :::::`  ::`   ::::::   :::::.
                                        ::,  ,::                               ``
                                        ::::::::
                                         ::::::
                                          `,,`


        http://www.thingiverse.com/thing:1234567
        Test Model by example creator is licensed under the Creative Commons - Attribution - Non-Commercial - Share Alike license.
        http://creativecommons.org/licenses/by-nc-sa/3.0/

        # Summary

        This is a test model
      EOF
    }
    let(:model) { create(:model, notes: nil) }
    let(:readme) { create(:model_file, model: model) }

    context "with nothing in datapackage" do
      before do
        allow(Model).to receive(:find).with(model.id).and_return(model)
        allow(model).to receive_messages(
          model_files: instance_double(ActiveRecord::Relation, find_by: readme, min_by: nil),
          datapackage_content: nil
        )
        allow(readme).to receive(:attachment).and_return class_double(File, read: content)
        described_class.perform_now(model.id)
        model.reload
      end

      it "sets name" do
        expect(model.name).to eq "Test Model"
      end

      it "adds summary section to notes field" do
        expect(model.notes).to eq "This is a test model"
      end

      it "adds thingiverse link" do
        expect(model.links.last.url).to eq "http://www.thingiverse.com/thing:1234567"
      end

      it "sets creator" do
        expect(model.creator.name).to eq "Example Creator"
      end

      it "sets license" do
        expect(model.license).to eq "CC-BY-NC-SA-3.0"
      end
    end
  end

  context "when loading information from a simple Thingiverse README" do
    let(:content) {
      <<~EOF
        Test Model by example creator on Thingiverse: http://www.thingiverse.com/thing:1234567
      EOF
    }
    let(:model) { create(:model, notes: nil) }
    let(:readme) { create(:model_file, model: model) }

    context "with nothing in datapackage" do
      before do
        allow(Model).to receive(:find).with(model.id).and_return(model)
        allow(model).to receive_messages(
          model_files: instance_double(ActiveRecord::Relation, find_by: readme, min_by: nil),
          datapackage_content: nil
        )
        allow(readme).to receive(:attachment).and_return class_double(File, read: content)
        described_class.perform_now(model.id)
        model.reload
      end

      it "sets name" do
        expect(model.name).to eq "Test Model"
      end

      it "adds thingiverse link" do
        expect(model.links.last.url).to eq "http://www.thingiverse.com/thing:1234567"
      end

      it "sets creator" do
        expect(model.creator.name).to eq "Example Creator"
      end
    end
  end
end
</file>

<file path="spec/jobs/scan/model_file/parse_metadata_job_spec.rb">
require "rails_helper"

RSpec.describe Scan::ModelFile::ParseMetadataJob do
  let(:file) { create(:model_file) }
  let(:supported_file) { create(:model_file, filename: "file1_supported.stl") }
  let(:image_file) { create(:model_file, filename: "preview.jpg") }
  let(:doc_file) { create(:model_file, filename: "README.txt") }

  it "detects if file is presupported" do
    described_class.perform_now(supported_file.id)
    supported_file.reload
    expect(supported_file.presupported).to be true
  end

  it "detects if file is unsupported" do
    described_class.perform_now(file.id)
    file.reload
    expect(file.presupported).to be false
  end

  it "sets images as previewable" do
    described_class.perform_now(image_file.id)
    image_file.reload
    expect(image_file.previewable).to be true
  end

  it "defaults models to not be previewable" do
    described_class.perform_now(file.id)
    file.reload
    expect(file.previewable).to be false
  end

  it "queues analysis job" do
    expect { described_class.perform_now(file.id) }.to have_enqueued_job(Analysis::AnalyseModelFileJob).once
  end

  it "works for non-model and non-image files" do
    expect { described_class.perform_now(doc_file.id) }.to have_enqueued_job(Analysis::AnalyseModelFileJob).once
  end

  it "raises exception if file ID is not found" do
    expect { described_class.perform_now(nil) }.to raise_error(ActiveRecord::RecordNotFound)
  end
end
</file>

<file path="spec/jobs/scan/check_all_job_spec.rb">
require "rails_helper"
require "support/mock_directory"

RSpec.describe Scan::CheckAllJob do
  let!(:thing) { create(:model, path: "model_one") } # rubocop:disable RSpec/LetSetup

  it "queues up integrity and analysis jobs for all models and files" do
    expect { described_class.perform_now }.to(
      have_enqueued_job(Scan::CheckModelJob).once
    )
  end
end
</file>

<file path="spec/jobs/scan/check_model_job_spec.rb">
require "rails_helper"

RSpec.describe Scan::CheckModelJob do
  let!(:thing) { create(:model, path: "model_one") }
  let!(:file) { create(:model_file, model: thing) }

  it "queues up model file scan job" do
    expect { described_class.perform_now(thing.id) }.to(
      have_enqueued_job(Scan::Model::AddNewFilesJob).with(thing.id, include_all_subfolders: true).once
    )
  end

  it "queues up analysis jobs for all model files" do
    expect { described_class.perform_now(thing.id) }.to(
      have_enqueued_job(Analysis::AnalyseModelFileJob).with(file.id).once
    )
  end

  it "raises exception if model ID is not found" do
    expect { described_class.perform_now(nil) }.to raise_error(ActiveRecord::RecordNotFound)
  end
end
</file>

<file path="spec/jobs/upgrade/disambiguate_usernames_job_spec.rb">
# frozen_string_literal: true

require "rails_helper"

RSpec.describe Upgrade::DisambiguateUsernamesJob do
  subject(:job) { described_class.new }

  let(:user) { create(:user, username: "conflict") }
  let(:creator) { create(:creator, :without_validations, slug: user.username) }

  it "confirms test creator is invalid" do
    expect(creator).not_to be_valid
  end

  it "detects that there is a duplicate" do
    creator.touch # rubocop:disable Rails/SkipsModelValidations
    expect(job.send(:duplicated_usernames)).to eq ["conflict"]
  end

  it "modifies creator name to remove duplication" do
    expect { job.perform_now }.to change { creator.reload.slug }.from("conflict").to("conflict1")
  end

  it "preserves username" do
    expect { job.perform_now }.not_to change { user.reload.username }
  end
end
</file>

<file path="spec/jobs/upgrade/fix_nil_file_size_values_spec.rb">
# frozen_string_literal: true

require "rails_helper"
require "support/mock_directory"

RSpec.describe Upgrade::FixNilFileSizeValues do
  let(:library) { create(:library, path: Rails.root.join("spec/fixtures")) }
  let(:model1) { create(:model, library: library, path: "fix_nil_file_size_values_spec") }
  let(:part) { create(:model_file, model: model1, filename: "example.obj", size: 284) }

  it "updates file with nil size" do
    part.update(size: nil)
    described_class.perform_now
    part.reload
    expect(part.size).not_to be_nil
  end
end
</file>

<file path="spec/jobs/application_job_spec.rb">
require "rails_helper"

RSpec.describe ApplicationJob do
  it "generates a case-insensitive pattern for all supported files" do # rubocop:todo RSpec/MultipleExpectations
    pattern = described_class.file_pattern
    expect(pattern).to include "[Ss][Tt][Ll],"
    expect(pattern).to include "[Pp][Nn][Gg],"
  end

  it "generates a case-insensitive pattern for image files" do # rubocop:todo RSpec/MultipleExpectations
    pattern = described_class.image_pattern
    expect(pattern).not_to include "[Ss][Tt][Ll],"
    expect(pattern).to include "[Pp][Nn][Gg],"
  end
end
</file>

<file path="spec/jobs/organize_model_job_spec.rb">
require "rails_helper"

RSpec.describe OrganizeModelJob do
  subject(:job) { described_class.new }

  let(:model) { create(:model) }

  it "should call organize"
end
</file>

<file path="spec/jobs/process_uploaded_file_job_spec.rb">
require "rails_helper"

RSpec.describe ProcessUploadedFileJob do
  subject(:job) { described_class.new }

  context "when counting common path prefixes" do
    it "returns zero if there are no directories at all" do
      expect(job.send(:count_common_elements, [])).to eq 0
    end

    it "returns zero if there are no common prefixes" do
      expect(job.send(:count_common_elements, [
        ["folder1"],
        ["folder2"],
        []
      ])).to eq 0
    end

    it "returns the number of common prefixes if present" do
      expect(job.send(:count_common_elements, [
        ["root", "sub", "folder1"],
        ["root", "sub", "folder2"]
      ])).to eq 2
    end

    it "returns correct count where all prefixes are the same" do
      expect(job.send(:count_common_elements, [
        ["root", "sub", "folder"],
        ["root", "sub", "folder"]
      ])).to eq 3
    end

    it "returns correct count where a common folder has a subfolder" do
      expect(job.send(:count_common_elements, [
        ["root", "sub"],
        ["root", "sub", "folder2"]
      ])).to eq 2
    end

    it "returns zero for *some* common prefixes but not on everything" do
      expect(job.send(:count_common_elements, [
        ["folder1", "sub1"],
        ["folder1", "sub2"],
        ["folder2", "sub1"]
      ])).to eq 0
    end
  end

  context "when uploading a file", :after_first_run do
    let(:uploader) { create(:contributor) }
    let(:library) { create(:library) }
    let(:file) { Rack::Test::UploadedFile.new(StringIO.new("solid\n"), original_filename: "test.stl") }

    it "Creates a new model" do
      expect { job.perform(library.id, file) }.to change(Model, :count).by(1)
    end

    it "Sets default owner permission if no owner set" do
      job.perform(library.id, file)
      expect(Model.last.permitted_users.with_permission(:own)).to include SiteSettings.default_user
    end

    it "Sets owner permission to provided user" do
      job.perform(library.id, file, owner: uploader)
      expect(Model.last.permitted_users.with_permission(:own)).to include uploader
    end

    it "Sets default visibility even if a owner is provided" do
      allow(SiteSettings).to receive(:default_viewer_role).and_return("member")
      job.perform(library.id, file, owner: uploader)
      expect(Model.last.permitted_roles.with_permission(:view)).to include Role.find_by(name: "member")
    end

    it "Stores creator if provided" do
      creator = create(:creator)
      job.perform(library.id, file, creator_id: creator.id)
      expect(Model.last.creator).to eq creator
    end

    it "Stores collection if provided" do
      collection = create(:collection)
      job.perform(library.id, file, collection_id: collection.id)
      expect(Model.last.collection).to eq collection
    end

    it "Stores license if provided" do
      job.perform(library.id, file, license: "CC-BY-NC-SA-4.0")
      expect(Model.last.license).to eq "CC-BY-NC-SA-4.0"
    end

    it "Stores tags if provided" do
      job.perform(library.id, file, tags: "tag1, tag2, tag3")
      expect(Model.last.tag_list).to eq ["tag1", "tag2", "tag3"]
    end

    it "sets path using auto-organize" do
      job.perform(library.id, file, tags: "tag1")
      expect(Model.last.path).to eq "tag1/test#1"
    end

    it "queues up model new file scan" do
      expect { job.perform(library.id, file) }.to have_enqueued_job(Scan::Model::AddNewFilesJob).once
    end
  end

  context "when uploading a file to an existing model" do
    let(:uploader) { create(:contributor) }
    let(:library) { create(:library) }
    let!(:model) { create(:model, library: library) }
    let(:file) { Rack::Test::UploadedFile.new(StringIO.new("solid\n"), original_filename: "test.stl") }

    it "doesn't create a new model" do
      expect { job.perform(library.id, file, model: model) }.not_to change(Model, :count)
    end

    it "adds the file to the model" do
      expect { job.perform(library.id, file, model: model) }.to change(model.model_files, :count).by(1)
    end

    it "queues up file metadata parsing" do
      expect { job.perform(library.id, file, model: model) }.to have_enqueued_job(Scan::ModelFile::ParseMetadataJob).once
    end
  end

  context "when errors occur during processing" do
    let(:library) { create(:library) }
    let(:file) { Rack::Test::UploadedFile.new(StringIO.new, original_filename: "test.zip") }

    it "removes the created model" do # rubocop:todo RSpec/ExampleLength
      job = described_class.new
      allow(job).to receive(:unzip).and_raise(StandardError)
      expect {
        begin
          job.perform(library.id, file)
        rescue
          nil
        end
      }.not_to change(Model, :count)
    end

    it "leaves the uploaded file in place"
  end

  context "when extracting a zip file" do
    let(:model) { create(:model) }

    it "extracts files" do # rubocop:todo RSpec/ExampleLength
      Tempfile.create(%w[test .zip]) do |file|
        Zip::File.open(file, create: true) do |zipfile|
          zipfile.get_output_stream("test.stl") { |f| f.puts "solid" }
        end
        upload = Rack::Test::UploadedFile.new(file)
        expect { described_class.new.send(:unzip, model, upload) }.to change(ModelFile, :count).by(1)
      end
    end

    it "extracts subfolders" do # rubocop:todo RSpec/ExampleLength,RSpec/MultipleExpectations
      Tempfile.create(%w[test .zip]) do |file|
        Zip::File.open(file, create: true) do |zipfile|
          zipfile.mkdir("one")
          zipfile.mkdir("two")
          zipfile.get_output_stream("one/test.stl") { |f| f.puts "solid" }
          zipfile.get_output_stream("two/more.stl") { |f| f.puts "solid" }
        end
        described_class.new.send(:unzip, model, Rack::Test::UploadedFile.new(file))
        expect(model.model_files.count).to be 2
        expect(model.model_files.map(&:filename).sort).to eq ["one/test.stl", "two/more.stl"]
      end
    end

    it "strips common subfolders" do # rubocop:todo RSpec/ExampleLength,RSpec/MultipleExpectations
      Tempfile.create(%w[test .zip]) do |file|
        Zip::File.open(file, create: true) do |zipfile|
          zipfile.mkdir("sub")
          zipfile.mkdir("sub/folder")
          zipfile.get_output_stream("sub/test.stl") { |f| f.puts "solid" }
          zipfile.get_output_stream("sub/folder/test2.stl") { |f| f.puts "solid" }
        end
        described_class.new.send(:unzip, model, Rack::Test::UploadedFile.new(file))
        expect(model.model_files.count).to eq 2
        expect(model.model_files.map(&:filename).sort).to eq ["folder/test2.stl", "test.stl"]
      end
    end

    it "handles files in root and single subfolder" do # rubocop:todo RSpec/ExampleLength,RSpec/MultipleExpectations
      Tempfile.create(%w[test .zip]) do |file|
        Zip::File.open(file, create: true) do |zipfile|
          zipfile.mkdir("subfolder")
          zipfile.get_output_stream("test.stl") { |f| f.puts "solid" }
          zipfile.get_output_stream("subfolder/more.stl") { |f| f.puts "solid" }
        end
        described_class.new.send(:unzip, model, Rack::Test::UploadedFile.new(file))
        expect(model.model_files.count).to eq 2
        expect(model.model_files.map(&:filename).sort).to eq ["subfolder/more.stl", "test.stl"]
      end
    end
  end
end
</file>

<file path="spec/jobs/update_datapackage_job_spec.rb">
require "rails_helper"

RSpec.describe UpdateDatapackageJob do
  let(:model) { create(:model) }
  let(:datapackage_json) { model.datapackage_content }

  it "raises exception if model ID is not found" do
    expect { described_class.perform_now(nil) }.to raise_error(ActiveRecord::RecordNotFound)
  end

  context "when creating first datapackage" do
    it "creates file if there isn't one already" do
      expect { described_class.perform_now(model.id) }.to change(ModelFile, :count).from(0).to(1)
    end

    it "doesn't include datapackage in resources" do
      described_class.perform_now(model.id)
      expect(datapackage_json["resources"].map { |it| it["path"] }).not_to include("datapackage.json")
    end
  end

  context "when updating a model with a datapackage" do
    before do
      # Make initial datapackage
      described_class.perform_now(model.id)
    end

    it "uses existing file if one already exists" do
      expect { described_class.perform_now(model.id) }.not_to change(ModelFile, :count)
    end

    it "doesn't include datapackage in resources" do
      expect(datapackage_json["resources"].map { |it| it["path"] }).not_to include("datapackage.json")
    end
  end

  it "updates datapackage file when model changes" do
    described_class.perform_now(model.id)
    model.update! name: "Changed"
    described_class.perform_now(model.id)
    expect(datapackage_json["title"]).to eq "Changed"
  end
end
</file>

<file path="spec/lib/careful_titleize_spec.rb">
require "rails_helper"

RSpec.describe CarefulTitleize do
  [
    "Death Star II",
    "camelCase",
    "OpenGL",
    "3MF",
    "Object3D"
  ].each do |input|
    it "leaves '#{input}' unchanged" do
      expect(input.careful_titleize).to eq input
    end
  end

  {
    "all along the watchtower" => "All Along The Watchtower",
    "left_hand_3" => "Left Hand 3",
    "death_star_II" => "Death Star II"
  }.each_pair do |input, output|
    it "titleizes '#{input}' to '#{output}'" do
      expect(input.careful_titleize).to eq output
    end
  end
end
</file>

<file path="spec/lib/public_url_spec.rb">
require "rails_helper"

RSpec.describe PublicUrl do
  it "provides default hostname as a string" do
    expect(described_class.hostname).to eq "localhost"
  end

  it "provides default port as a string" do
    expect(described_class.port).to eq "3214"
  end

  context "when checking for only nonstandard ports" do
    it "returns nil for port 80" do
      ClimateControl.modify PUBLIC_PORT: "80" do
        expect(described_class.nonstandard_port).to be_nil
      end
    end

    it "returns nil for port 443" do
      ClimateControl.modify PUBLIC_PORT: "443" do
        expect(described_class.nonstandard_port).to be_nil
      end
    end

    it "returns specified port for anything else" do
      expect(described_class.nonstandard_port).to eq "3214"
    end
  end

  context "with only PUBLIC_HOSTNAME set" do
    around do |example|
      ClimateControl.modify PUBLIC_HOSTNAME: "manyfold.example.com" do
        example.run
      end
    end

    it "provides specified hostname" do
      expect(described_class.hostname).to eq "manyfold.example.com"
    end

    it "assumes the standard port 80" do
      expect(described_class.port).to eq "80"
    end

    it "assumes standard port 443 if HTTPS_ONLY is set" do
      ClimateControl.modify HTTPS_ONLY: "enabled" do
        expect(described_class.port).to eq "443"
      end
    end
  end

  context "with only PUBLIC_PORT set" do
    around do |example|
      ClimateControl.modify PUBLIC_PORT: "80" do
        example.run
      end
    end

    it "provides specified port" do
      expect(described_class.port).to eq "80"
    end
  end

  context "with PUBLIC_HOSTNAME and PUBLIC_PORT set" do
    around do |example|
      ClimateControl.modify PUBLIC_PORT: "1234", PUBLIC_HOSTNAME: "example.com" do
        example.run
      end
    end

    it "provides specified port" do
      expect(described_class.port).to eq "1234"
    end
  end

  context "with RAILS_PORT set" do
    around do |example|
      ClimateControl.modify RAILS_PORT: "5000" do
        example.run
      end
    end

    it "provides specified port" do
      expect(described_class.port).to eq "5000"
    end
  end

  context "with RAILS_PORT and PUBLIC_PORT set" do
    around do |example|
      ClimateControl.modify RAILS_PORT: "5000", PUBLIC_PORT: "80" do
        example.run
      end
    end

    it "provides PUBLIC_PORT" do
      expect(described_class.port).to eq "80"
    end
  end
end
</file>

<file path="spec/lib/supported_mime_types_spec.rb">
require "rails_helper"

RSpec.describe SupportedMimeTypes do
  it "includes STL files in model list" do # rubocop:todo RSpec/MultipleExpectations
    expect(described_class.model_types.map(&:to_s)).to include("model/stl")
    expect(described_class.model_extensions).to include("stl")
  end

  it "includes PNG files in image list" do # rubocop:todo RSpec/MultipleExpectations
    expect(described_class.image_types.map(&:to_s)).to include("image/png")
    expect(described_class.image_extensions).to include("png")
  end

  it "does not include DXF in image list" do # rubocop:todo RSpec/MultipleExpectations
    expect(described_class.image_types.map(&:to_s)).not_to include("image/vnd.dxf")
    expect(described_class.image_extensions).not_to include("dxf")
  end

  it "includes alternative extensions for same type" do # rubocop:todo RSpec/MultipleExpectations
    expect(described_class.model_extensions).to include("lys")
    expect(described_class.model_extensions).to include("lyt")
  end

  it "includes PDF files in document list" do # rubocop:todo RSpec/MultipleExpectations
    expect(described_class.document_types.map(&:to_s)).to include("application/pdf")
    expect(described_class.document_extensions).to include("pdf")
  end

  it "includes TXT files in document list" do # rubocop:todo RSpec/MultipleExpectations
    expect(described_class.document_types.map(&:to_s)).to include("text/plain")
    expect(described_class.document_extensions).to include("txt")
  end

  it "includes HTML files in document list" do # rubocop:todo RSpec/MultipleExpectations
    expect(described_class.document_types.map(&:to_s)).to include("text/html")
    expect(described_class.document_extensions).to include("html")
  end

  it "includes Word docs in document list" do # rubocop:todo RSpec/MultipleExpectations
    expect(described_class.document_types.map(&:to_s)).to include("application/msword")
    expect(described_class.document_extensions).to include("doc")
    expect(described_class.document_types.map(&:to_s)).to include("application/vnd.openxmlformats-officedocument.wordprocessingml.document")
    expect(described_class.document_extensions).to include("docx")
  end

  it "includes Gerber files in document list" do # rubocop:todo RSpec/MultipleExpectations
    expect(described_class.document_types.map(&:to_s)).to include("application/x-gerber")
    expect(described_class.document_extensions).to include("gbr")
  end

  it "includes video files in video list" do # rubocop:todo RSpec/MultipleExpectations
    expect(described_class.video_types.map(&:to_s)).to include("video/mp4")
    expect(described_class.video_extensions).to include("mp4")
  end

  context "when listing non-standard model files" do
    it "includes OpenSCAD" do # rubocop:todo RSpec/MultipleExpectations
      expect(described_class.model_types).to include("application/x-openscad")
      expect(described_class.model_extensions).to include("scad")
    end

    it "includes GCode" do # rubocop:todo RSpec/MultipleExpectations
      expect(described_class.model_types).to include("text/x-gcode")
      expect(described_class.model_extensions).to include("gcode")
    end

    it "includes DXF" do # rubocop:todo RSpec/MultipleExpectations
      expect(described_class.model_types).to include("image/vnd.dxf")
      expect(described_class.model_extensions).to include("dxf")
    end
  end
end
</file>

<file path="spec/lib/usage_report_spec.rb">
require "rails_helper"

RSpec.describe UsageReport do
  context "when generating a usage report" do
    before do
      allow(SiteSettings).to receive(:anonymous_usage_id).and_return("guid-goes-here")
      allow(Rails.application.config).to receive_messages(
        app_version: "v0.89.0",
        git_sha: "deadbeef"
      )
    end

    let(:report) { described_class.generate }
    let(:parsed) { JSON.parse(report) }

    it "produces valid JSON" do
      expect(parsed).not_to be_nil
    end

    it "includes application ID" do
      expect(parsed["id"]).to eq "guid-goes-here"
    end

    it "includes architecture" do
      stub_const("RUBY_PLATFORM", "test-arch")
      expect(parsed["version"]["arch"]).to eq "test-arch"
    end

    it "includes application version" do
      expect(parsed["version"]["app"]).to eq "0.89.0"
    end

    it "includes image type" do
      ClimateControl.modify DOCKER_TAG: "ghcr.io/manyfold3d/manyfold:latest" do
        expect(JSON.parse(described_class.generate)["version"]["image"]).to eq "ghcr.io/manyfold3d/manyfold"
      end
    end

    it "works if there is no image type" do
      ClimateControl.modify DOCKER_TAG: nil do
        expect(JSON.parse(described_class.generate)["version"]["image"]).to be_nil
      end
    end

    it "includes git SHA" do
      expect(parsed["version"]["sha"]).to eq "deadbeef"
    end
  end

  it "specifies a default endpoint" do
    ClimateControl.modify USAGE_TRACKING_URL: nil do
      expect(described_class.endpoint).to eq "https://tracking.manyfold.app"
    end
  end

  it "allows custom endpoint in ENV" do
    ClimateControl.modify USAGE_TRACKING_URL: "http://example.com" do
      expect(described_class.endpoint).to eq "http://example.com"
    end
  end
end
</file>

<file path="spec/mailers/moderator_mailer_spec.rb">
require "rails_helper"

RSpec.describe ModeratorMailer do
  let!(:moderator) { create(:moderator) }

  describe "new_report" do
    let(:mail) { described_class.with(report: report).new_report }
    let(:report) { create(:report) }

    it "sets correct subject" do
      expect(mail.subject).to eq("New report received")
    end

    it "bccs moderator" do
      expect(mail.bcc).to eq([moderator.email])
    end

    it "renders the body" do
      expect(mail.body.encoded).to match("has reported content")
    end

    it "includes a link to the reports list" do
      expect(mail.body.encoded).to match("/settings/reports/")
    end
  end

  describe "new_approval" do
    let(:mail) { described_class.with(user: user).new_approval }
    let(:user) { create(:user) }

    it "sets correct subject" do
      expect(mail.subject).to eq("New account needs approval")
    end

    it "bccs moderator" do
      expect(mail.bcc).to eq([moderator.email])
    end

    it "renders the body" do
      expect(mail.body.encoded).to match("requires approval")
    end

    it "includes a link to the user settings" do
      expect(mail.body.encoded).to match("/settings/users/")
    end
  end
end
</file>

<file path="spec/mailers/user_mailer_spec.rb">
require "rails_helper"

RSpec.describe UserMailer do
  describe "account_approved" do
    let(:user) { create(:user) }
    let(:mail) { described_class.with(user: user).account_approved }

    it "sets correct subject" do
      expect(mail.subject).to eq("Account approved")
    end

    it "sends to user" do
      expect(mail.to).to eq([user.email])
    end

    it "renders the body" do
      expect(mail.body.encoded).to match("Hi")
    end
  end

  describe "test_email" do
    let(:user) { create(:user) }
    let(:mail) { described_class.with(user: user).test_email }

    it "sets correct subject" do
      expect(mail.subject).to eq("Test email")
    end

    it "sends to user" do
      expect(mail.to).to eq([user.email])
    end

    it "renders the body" do
      expect(mail.body.encoded).to match("Test email")
    end
  end
end
</file>

<file path="spec/models/concerns/caber_object_shared.rb">
shared_examples "Caber::Object" do
  let(:caber_object) { create(described_class.to_s.underscore.to_sym) }
  let!(:admin) { create(:admin) }
  let(:contributor) { create(:contributor) }
  let(:member) { create(:user) }

  it "has caber relations" do
    expect(caber_object.class).to respond_to :can_grant_permissions_to
  end

  it "is created with a default owner" do
    create(described_class.to_s.underscore.to_sym)
    expect(caber_object.grants_permission_to?("own", admin)).to be true
  end

  it "can be given an explicit owner at creation" do # rubocop:disable RSpec/MultipleExpectations, RSpec/ExampleLength
    object = create(described_class.to_s.underscore.to_sym, described_class.caber_owner(contributor))
    expect(object.grants_permission_to?("own", contributor)).to be true
    expect(object.grants_permission_to?("own", admin)).to be false
  end

  context "with default permissions set to member-visible" do
    before do
      allow(SiteSettings).to receive(:default_viewer_role).and_return(:member)
    end

    let(:object) { create(described_class.to_s.underscore.to_sym) }

    it "grants view permission to member role" do
      expect(object.grants_permission_to?("view", Role.find_by!(name: "member"))).to be true
    end

    it "does not grants public view permission" do
      expect(object.grants_permission_to?("view", nil)).to be false
    end
  end

  context "with default permissions set to private" do
    before do
      allow(SiteSettings).to receive(:default_viewer_role).and_return("")
    end

    let(:object) { create(described_class.to_s.underscore.to_sym, described_class.caber_owner(contributor)) }

    it "does not grant view permission to member role" do
      expect(object.grants_permission_to?("view", Role.find_by!(name: "member"))).to be false
    end

    it "does not grants public view permission" do
      expect(object.grants_permission_to?("view", nil)).to be false
    end
  end
end
</file>

<file path="spec/models/concerns/caber_subject_shared.rb">
shared_examples "Caber::Subject" do
  let(:caber_subject) { create(described_class.to_s.underscore.to_sym) }

  it "has caber relations" do
    expect(caber_subject.class).to respond_to :can_have_permissions_on
  end
end
</file>

<file path="spec/models/concerns/commentable_shared.rb">
shared_examples "Commentable" do
  subject(:target) { create(described_class.to_s.underscore.to_sym) }

  it "has comments" do
    expect(target).to respond_to :comments
  end
end
</file>

<file path="spec/models/concerns/followable_shared.rb">
shared_examples "Followable" do
  context "when being followed" do
    let(:follower) { create(:user) }
    let(:target) { create(described_class.to_s.underscore.to_sym) }

    before do
      follower.follow(target)
    end

    it "shows as being followed by follower" do
      expect(target.followed_by?(follower)).to be true
    end

    it "gets follower count" do
      expect(target.followers.count).to eq 1
    end
  end

  context "when being created" do
    before do
      create(:admin)
    end

    it "posts an activity" do
      entity = create(described_class.to_s.underscore.to_sym)
      expect(Federails::Activity.where(entity: entity.federails_actor, action: "Create").count).to eq 1
    end
  end

  context "when being updated" do
    let!(:entity) { create(described_class.to_s.underscore.to_sym) }

    before do
      create(:admin)
    end

    it "posts an activity after update" do
      entity.update caption: "test"
      expect(Federails::Activity.where(entity: entity.federails_actor, action: "Update").count).to eq 1
    end

    it "doesn't post an activity after update if there's already been one recently" do
      entity.update caption: "change"
      entity.update caption: "change again"
      expect(Federails::Activity.where(entity: entity.federails_actor, action: "Update").count).to eq 1
    end
  end
end
</file>

<file path="spec/models/concerns/follower_shared.rb">
shared_examples "Follower" do
  let(:follower) { create(described_class.to_s.underscore.to_sym) }
  let(:target) { create(:model) }

  before do
    follower.follow(target)
  end

  it "shows as following" do
    expect(follower.following?(target)).to be :accepted
  end

  it "can unfollow the target" do
    follower.unfollow(target)
    expect(follower.following?(target)).to be false
  end

  it "creates a following activity" do # rubocop:todo RSpec/MultipleExpectations
    activity = follower.activities.where(action: "Follow").first
    expect(activity.actor).to eq follower.federails_actor
    expect(activity.entity).to eq target.federails_actor
  end
end
</file>

<file path="spec/models/concerns/indexable_shared.rb">
shared_examples "Indexable" do
  [true, false].each do |state|
    context "with default indexing set to #{state}" do
      before do
        allow(SiteSettings).to receive_messages(default_indexable: state, default_ai_indexable: state)
      end

      let(:object) { create(described_class.name.downcase.to_sym) }

      it "defaults to inherit" do
        expect(object.indexable).to be_nil
      end

      it "uses default indexable value" do
        expect(object.indexable?).to be state
      end

      it "uses default AI indexable value" do
        expect(object.ai_indexable?).to be state
      end
    end
  end

  context "when setting its own indexing preference" do
    before do
      allow(SiteSettings).to receive_messages(default_indexable: true, default_ai_indexable: true)
    end

    let(:object) { create(described_class.name.downcase.to_sym, indexable: "no", ai_indexable: "no") }

    it "overrides default indexing" do
      expect(object.indexable?).to be false
    end

    it "overrides default ai indexing" do
      expect(object.ai_indexable?).to be false
    end
  end
end

shared_examples "IndexableWithCreatorDelegation" do
  context "when delegating to creator indexing preference" do
    before do
      allow(SiteSettings).to receive_messages(default_indexable: true, default_ai_indexable: true)
    end

    let(:object) {
      create(described_class.name.downcase.to_sym,
        creator: create(:creator, indexable: "no", ai_indexable: "no"))
    }

    it "overrides default indexing" do
      expect(object.indexable?).to be false
    end

    it "overrides default ai indexing" do
      expect(object.ai_indexable?).to be false
    end
  end
end

shared_examples "IndexableWithCollectionDelegation" do
  context "when delegating to collection indexing preference" do
    before do
      allow(SiteSettings).to receive_messages(default_indexable: true, default_ai_indexable: true)
    end

    let(:object) {
      create(described_class.name.downcase.to_sym,
        collection: create(:collection, indexable: "no", ai_indexable: "no"))
    }

    it "overrides default indexing" do
      expect(object.indexable?).to be false
    end

    it "overrides default ai indexing" do
      expect(object.ai_indexable?).to be false
    end
  end
end
</file>

<file path="spec/models/concerns/listable_shared.rb">
shared_examples "Listable" do
  let(:thing) { create(described_class.to_s.underscore.to_sym) }
  let(:user) { create(:user) }

  before do
    user.list(thing, :printed)
  end

  it "shows as listed" do
    expect(user.listed?(thing, :printed)).to be true
  end

  it "can access listers" do
    expect(thing.listers(:printed)).to eq [user]
  end
end
</file>

<file path="spec/models/concerns/path_builder_spec.rb">
require "rails_helper"

RSpec.describe PathBuilder do
  context "when creating path from model metadata" do
    let!(:model) {
      create(:model,
        name: "Batarang",
        creator: create(:creator, name: "Bruce Wayne"),
        tag_list: ["bat", "weapon"],
        collection: create(:collection, name: "gadgets"))
    }

    it "includes creator if set" do
      SiteSettings.model_path_template = "{creator}/{modelName}{modelId}"
      expect(model.formatted_path).to eq "bruce-wayne/batarang#1"
    end

    it "includes tags if set" do
      SiteSettings.model_path_template = "{tags}/{modelName}{modelId}"
      expect(model.formatted_path).to eq "bat/weapon/batarang#1"
    end

    it "is invariant to tag ordering" do
      SiteSettings.model_path_template = "{tags}/{modelName}{modelId}"
      model.tag_list.remove "bat" and model.save
      model.tag_list.add "bat" and model.save
      expect(model.formatted_path).to eq "bat/weapon/batarang#1"
    end

    it "orders tags by tagging_count" do
      SiteSettings.model_path_template = "{tags}/{modelName}{modelId}"
      # rubocop:disable Rails/SkipsModelValidations
      # We *intentionally* don't want the callbacks to run, they'll recalculate the count again
      ActsAsTaggableOn::Tag.find_by(name: "weapon").update_column(:taggings_count, 10)
      ActsAsTaggableOn::Tag.find_by(name: "bat").update_column(:taggings_count, 5)
      # rubocop:enable Rails/SkipsModelValidations
      expect(model.reload.formatted_path).to eq "weapon/bat/batarang#1"
    end

    it "includes collection if set" do
      SiteSettings.model_path_template = "{collection}/{modelName}{modelId}"
      expect(model.formatted_path).to eq "gadgets/batarang#1"
    end

    it "includes multiple metadata types if set" do
      SiteSettings.model_path_template = "{collection}/{creator}/{tags}/{modelName}{modelId}"
      expect(model.formatted_path).to eq "gadgets/bruce-wayne/bat/weapon/batarang#1"
    end

    it "includes non-token information as literal text" do
      SiteSettings.model_path_template = "{tags}/{creator} - {collection} - {modelName}{modelId}"
      expect(model.formatted_path).to eq "bat/weapon/bruce-wayne - gadgets - batarang#1"
    end

    it "treats unknown tokens as literal text" do
      SiteSettings.model_path_template = "{bad}/{modelName}{modelId}"
      expect(model.formatted_path).to eq "{bad}/batarang#1"
    end
  end

  context "when creating path from missing model metadata" do
    let(:model) { create(:model, name: "Batarang", tag_list: []) }

    it "includes creator error if set" do
      SiteSettings.model_path_template = "{creator}/{modelName}{modelId}"
      expect(model.formatted_path).to eq "@unattributed/batarang#1"
    end

    it "handles zero tags" do
      SiteSettings.model_path_template = "{tags}/{modelName}{modelId}"
      expect(model.formatted_path).to eq "@untagged/batarang#1"
    end

    it "includes collection error if set" do
      SiteSettings.model_path_template = "{collection}/{modelName}{modelId}"
      expect(model.formatted_path).to eq "@uncollected/batarang#1"
    end

    it "includes non-token information as literal text" do
      SiteSettings.model_path_template = "{tags}/{creator} - {collection} - {modelName}{modelId}"
      expect(model.formatted_path).to eq "@untagged/@unattributed - @uncollected - batarang#1"
    end
  end

  context "when creating model directory name" do
    let(:model) { create(:model, name: "Batarang") }

    it "includes model ID if option is included" do
      SiteSettings.model_path_template = "{modelName}{modelId}"
      expect(model.formatted_path).to eq "batarang#1"
    end

    it "does not include model ID if option is deselected" do
      SiteSettings.model_path_template = "{modelName}"
      expect(model.formatted_path).to eq "batarang"
    end
  end

  context "when creating folders" do
    let(:model) {
      create(:model,
        name: "Bat-a-rang",
        creator: create(:creator, name: "Bruce Wayne"),
        tag_list: ["bat", "weapon"],
        collection: create(:collection, name: "Wonderful Toys"))
    }

    before do
      SiteSettings.model_path_template = "{creator}/{collection}/{tags}/{modelName}{modelId}"
    end

    it "uses safe names in path if safe_folder_names is set" do
      SiteSettings.safe_folder_names = true
      expect(model.formatted_path).to eq "bruce-wayne/wonderful-toys/bat/weapon/bat-a-rang#1"
    end

    it "uses unmodified names in path names if safe_folder_names is not set" do
      SiteSettings.safe_folder_names = false
      expect(model.formatted_path).to eq "Bruce Wayne/Wonderful Toys/bat/weapon/Bat-a-rang#1"
    end
  end
end
</file>

<file path="spec/models/concerns/sluggable_shared.rb">
shared_examples "Sluggable" do
  it "automatically generates a slug from the name" do
    thing = create(described_class.name.parameterize.to_sym, name: "Spın̈al Tap")
    expect(thing.slug).to eq "spin-al-tap"
  end
end
</file>

<file path="spec/models/collection_spec.rb">
require "rails_helper"

RSpec.describe Collection do
  it_behaves_like "Followable"
  it_behaves_like "Commentable"
  it_behaves_like "Caber::Object"
  it_behaves_like "Sluggable"
  it_behaves_like "Indexable"
  it_behaves_like "IndexableWithCreatorDelegation"
  it_behaves_like "IndexableWithCollectionDelegation"

  context "when creating a collection" do
    it "doesn't queue any activity jobs" do
      expect {
        create(:collection)
      }.not_to have_enqueued_job(Activity::CollectionPublishedJob)
    end

    it "queues publish activity job if the collection was created as public" do
      expect {
        create(:collection, :public)
      }.to have_enqueued_job(Activity::CollectionPublishedJob).once
    end

    it "queues publish activity job if the collection created private but then made public" do
      collection = create(:collection)
      expect {
        collection.update!(caber_relations_attributes: [{subject: nil, permission: "view"}])
      }.to have_enqueued_job(Activity::CollectionPublishedJob).once
    end
  end

  context "when updating a collection" do
    let(:parent) { create(:collection) }
    let(:collection) { create(:collection) }

    it "can set parent collection" do
      collection.update(collection: parent)
      expect(collection).to be_valid
    end

    it "cannot set parent collection to self" do
      collection.update(collection: collection)
      expect(collection).not_to be_valid
    end
  end

  context "when making a collection public" do
    let!(:collection) { create(:collection) }

    before do
      collection.update(
        caber_relations_attributes: [{subject: nil, permission: "view"}],
        creator: create(:creator),
        collection: create(:collection)
      )
      collection.validate
    end

    it "makes creator public automatically" do
      expect(collection.creator).to be_public
    end

    it "requires collection to be public if set" do
      expect(collection.errors[:collection]).to include "must be public"
    end

    it "doesn't make collection public if validation failed" do
      expect(collection.reload.public?).to be false
    end
  end
end
</file>

<file path="spec/models/comment_spec.rb">
require "rails_helper"

RSpec.describe Comment do
  context "with public commenter and commentable" do
    let(:commenter) { create(:creator, :public) }
    let(:commentable) { create(:model, :public, creator: commenter, tag_list: "tag one, tag2") }
    let!(:comment) { create(:comment, commenter: commenter, commentable: commentable, sensitive: true) }

    it "posts a Federails Activity on creation" do # rubocop:disable RSpec/MultipleExpectations
      expect { create(:comment, commenter: commenter, commentable: commentable) }.to change(Federails::Activity, :count).by(1)
      expect(Federails::Activity.last.action).to eq "Create"
    end

    it "posts a Federails Activity on update" do # rubocop:disable RSpec/MultipleExpectations
      expect { comment.update(comment: "test") }.to change(Federails::Activity, :count).by(1)
      expect(Federails::Activity.last.action).to eq "Update"
    end

    it "has a federated_url method" do
      expect(comment.federated_url).to eq "http://localhost:3214/federation/published/comments/#{comment.public_id}"
    end

    context "when serializing to an ActivityPub Note" do
      let(:ap_object) { comment.to_activitypub_object }

      it "creates a Note" do
        expect(ap_object["type"]).to eq "Note"
      end

      it "includes content" do
        expect(ap_object["content"]).to be_present
      end

      it "includes id" do
        expect(ap_object["id"]).to eq comment.federated_url
      end

      it "includes commentable ID in context" do
        expect(ap_object["context"]).to eq "http://localhost:3214/models/#{commentable.public_id}"
      end

      it "includes publication time" do
        expect(ap_object["published"]).to be_present
      end

      it "includes sensitive flag" do
        expect(ap_object["sensitive"]).to be true
      end

      it "includes attribution" do
        expect(ap_object["attributedTo"]).to eq commenter.federails_actor.federated_url
      end

      it "includes to field" do
        expect(ap_object["to"]).to include "https://www.w3.org/ns/activitystreams#Public"
      end

      it "includes cc field" do
        expect(ap_object["cc"]).to include commenter.federails_actor.followers_url
      end

      it "includes tags appended to content" do
        {"tag+one": "#TagOne", tag2: "#Tag2"}.each_pair do |link, hashtag|
          expect(ap_object["content"]).to include %(<a role="listitem" href="http://localhost:3214/models?tag=#{link}" class="mention hashtag" rel="tag">#{hashtag}</a>)
        end
      end

      it "includes tags as mentions" do # rubocop:disable RSpec/ExampleLength
        {"tag+one": "#TagOne", tag2: "#Tag2"}.each_pair do |link, hashtag|
          expect(ap_object["tag"]).to include(
            type: "Hashtag",
            href: "http://localhost:3214/models?tag=#{link}",
            name: hashtag
          )
        end
      end
    end
  end

  context "with non-public commenter" do
    let(:commenter) { create(:creator) }
    let(:commentable) { create(:model, :public) }

    it "Does not post a Federails Activity on creation" do
      expect { create(:comment, commenter: commenter, commentable: commentable) }.not_to change(Federails::Activity, :count)
    end

    it "does not have a federated_url" do
      comment = create(:comment, commenter: commenter, commentable: commentable)
      expect(comment.federated_url).to be_nil
    end
  end

  context "with non-public commentable" do
    let(:commenter) { create(:creator, :public) }
    let(:commentable) { create(:model, creator: commenter) }

    it "Does not post a Federails Activity on creation" do
      expect { create(:comment, commenter: commenter, commentable: commentable) }.not_to change(Federails::Activity, :count)
    end

    it "does not have a federated_url" do
      comment = create(:comment, commenter: commenter, commentable: commentable)
      expect(comment.federated_url).to be_nil
    end
  end
end
</file>

<file path="spec/models/creator_spec.rb">
require "rails_helper"

RSpec.describe Creator do
  it_behaves_like "Followable"
  it_behaves_like "Commentable"
  it_behaves_like "Caber::Object"
  it_behaves_like "Sluggable"
  it_behaves_like "Indexable"

  context "when generating an ActivityStreams representation" do
    subject(:creator) { create(:creator, :public) }

    let(:ap) { creator.to_activitypub_object }

    it "includes concrete type" do
      expect(ap[:"f3di:concreteType"]).to eq "Creator"
    end

    it "includes attributionDomain" do
      expect(ap[:attributionDomains]).to eq ["localhost:3214"]
    end

    it "includes caption in summary" do
      expect(ap[:summary]).to include creator.caption
    end

    it "includes notes in content" do
      expect(ap[:content]).to include creator.notes
    end

    it "includes links as attachments" do
      expect(ap[:attachment]).to include({type: "Link", href: "http://example.com"})
    end
  end
end
</file>

<file path="spec/models/library_spec.rb">
require "rails_helper"

RSpec.describe Library do
  context "when being validated" do
    around do |ex|
      MockDirectory.create([]) do |path|
        @library_path = path
        ex.run
      end
    end

    it "is not valid without a path" do
      expect(build(:library, path: nil)).not_to be_valid
    end

    it "is valid if a path is specified" do
      expect(build(:library, path: @library_path)).to be_valid # rubocop:todo RSpec/InstanceVariable
    end

    it "is invalid if a bad path is specified" do # rubocop:todo RSpec/MultipleExpectations
      l = build(:library, path: "/nope", create_path_if_not_on_disk: "0")
      expect(l).not_to be_valid
      expect(l.errors[:path].first).to eq "must be writable"
    end

    it "has many models" do
      expect(build(:library).models).to eq []
    end

    it "must have a unique path" do
      create(:library, path: @library_path) # rubocop:todo RSpec/InstanceVariable
      expect(build(:library, path: @library_path)).not_to be_valid # rubocop:todo RSpec/InstanceVariable
    end

    [
      "/bin",
      "/boot",
      "/dev",
      "/etc",
      "/lib",
      "/lost",
      "/proc",
      "/root",
      "/run",
      "/sbin",
      "/selinux",
      "/srv",
      "/usr"
    ].each do |prefix|
      it "disallows paths under #{prefix}" do
        path = File.join(prefix, "library")
        allow(File).to receive(:exist?).with(path).and_return(true)
        library = build(:library, path: path)
        library.valid?
        expect(library.errors[:path]).to include "cannot be a privileged system path"
      end
    end

    it "allows paths that *begin* with a filtered path" do
      library = build(:library, path: "/libraries")
      library.valid?
      expect(library.errors[:path]).not_to include "cannot be a privileged system path"
    end

    it "disallows root folder" do
      library = build(:library, path: "/")
      library.valid?
      expect(library.errors[:path]).to include "cannot be a privileged system path"
    end

    it "disallows read-only folders" do
      path = "/readonly/library"
      allow(FileTest).to receive(:exist?).with(path).and_return(true)
      library = build(:library, path: path)
      library.valid?
      expect(library.errors[:path]).to include "must be writable"
    end

    it "normalizes paths" do
      path = Rails.root + "tmp/../app"
      library = build(:library, path: path)
      expect(library.path).to eq (Rails.root + "app").to_s
    end
  end

  context "when using a folder containing files" do
    around do |ex|
      MockDirectory.create([
        "3dmodels/model [escapetest]/part_1.obj"
      ]) do |path|
        @library_path = path + "/3dmodels"
        ex.run
      end
    end

    let(:library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable

    it "lists files" do
      expect(library.list_files("**/*")).not_to be_empty
    end
  end

  context "when using a folder with a space in" do
    around do |ex|
      MockDirectory.create([
        "3d models/model [escapetest]/part_1.obj"
      ]) do |path|
        @library_path = path + "/3d models"
        ex.run
      end
    end

    let(:library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable

    it "lists files" do
      expect(library.list_files("**/*")).not_to be_empty
    end
  end

  it "is valid if path can be created" do # rubocop:todo RSpec/MultipleExpectations
    library = build(:library, path: "/tmp/libraries/subdirectory", create_path_if_not_on_disk: "1")
    expect(library).to be_valid
    expect(Dir).to exist(library.path)
  end

  context "when deleting libraries" do
    around do |ex|
      MockDirectory.create([
        "model/file.stl"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    let(:library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable
    let(:model) { create(:model, path: "model", library: library) }
    let!(:file) { create(:model_file, filename: "file.stl", model: model) } # rubocop:disable RSpec/LetSetup

    it "removes associated Models" do
      expect { library.destroy }.to change(Model, :count).from(1).to(0)
    end

    it "removes associated ModelFiles" do
      expect { library.destroy }.to change(ModelFile, :count).from(1).to(0)
    end

    it "preserves files on disk" do # rubocop:disable RSpec/MultipleExpectations
      expect(File.exist?(File.join(@library_path, "model/file.stl"))).to be true # rubocop:todo RSpec/InstanceVariable
      expect { library.destroy }.not_to change { File.exist?(File.join(@library_path, "model/file.stl")) } # rubocop:todo RSpec/InstanceVariable
    end
  end

  context "when attempting to create one library inside another" do
    subject(:library) { build(:library, path: outer_library.path + "/nested_library") }

    let(:outer_library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable

    around do |ex|
      MockDirectory.create([
        "nested_library/model/model.stl"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    it "does not validate" do
      expect(library).not_to be_valid
    end

    it "displays a useful error message" do
      library.validate
      expect(library.errors[:path].first).to eq "cannot be inside another library"
    end
  end

  context "when attempting to create one library outside another" do
    subject(:library) { build(:library, path: nested_library.path.gsub("/nested_library", "")) }

    let(:nested_library) { create(:library, path: @library_path + "/nested_library") } # rubocop:todo RSpec/InstanceVariable

    around do |ex|
      MockDirectory.create([
        "nested_library/model/model.stl"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    it "does not validate" do
      expect(library).not_to be_valid
    end

    it "displays a useful error message" do
      library.validate
      expect(library.errors[:path].first).to eq "cannot contain other libraries"
    end
  end
end
</file>

<file path="spec/models/link_spec.rb">
require "rails_helper"
RSpec.describe Link do
  it "extracts site name from domain" do
    link = described_class.new(url: "https://www.example.com")
    expect(link.site).to eq "example"
  end

  it "extracts site fails safe with bad domain" do
    link = described_class.new(url: "https://boop")
    expect(link.site).to eq "boop"
  end

  it "must have a valid url" do
    model = create(:model, links_attributes: [{url: ""}])
    expect(model.links).to be_empty
  end

  it "must be unique per linkable thing" do
    url = "https://www.example.com"
    model = create(:model, links_attributes: [{url: url}])
    duplicate = described_class.new(linkable: model, url: url)
    expect(duplicate).not_to be_valid
  end

  it "allows same URL in different linkable things" do
    url = "https://www.example.com"
    create(:model, links_attributes: [{url: url}])
    model2 = create(:model)
    duplicate = described_class.new(linkable: model2, url: url)
    expect(duplicate).to be_valid
  end
end
</file>

<file path="spec/models/model_file_spec.rb">
require "rails_helper"
require "support/mock_directory"

RSpec.describe ModelFile do
  it_behaves_like "Listable"

  it "is not valid without a filename" do
    expect(build(:model_file, filename: nil)).not_to be_valid
  end

  it "is not valid without being part of a model" do
    expect(build(:model_file, model: nil)).not_to be_valid
  end

  it "is valid if it has a filename and model" do
    expect(build(:model_file)).to be_valid
  end

  it "must have a unique filename within its model" do
    model = create(:model, path: "model")
    create(:model_file, model: model, filename: "part.stl")
    expect(build(:model_file, model: model, filename: "part.stl")).not_to be_valid
  end

  it "can have the same filename as a file in a different model" do
    library = create(:library)
    model1 = create(:model, library: library, path: "model1")
    create(:model_file, model: model1, filename: "part.stl")
    model2 = create(:model, library: library, path: "model2")
    expect(build(:model_file, model: model2, filename: "part.stl")).to be_valid
  end

  it "calculates a bounding box for model" do
    library = create(:library, path: Rails.root.join("spec/fixtures"))
    model1 = create(:model, library: library, path: "model_file_spec")
    part = create(:model_file, model: model1, filename: "example.obj", attachment: nil)
    expect(part.bounding_box).to eq([10, 15, 20])
  end

  it "calculates file size when attached" do
    library = create(:library, path: Rails.root.join("spec/fixtures"))
    model1 = create(:model, library: library, path: "model_file_spec")
    part = create(:model_file, model: model1, filename: "example.obj", attachment: nil)
    expect(part.size).to eq(284)
  end

  it "calculates digest for a file" do
    library = create(:library, path: Rails.root.join("spec/fixtures"))
    model1 = create(:model, library: library, path: "model_file_spec")
    part = create(:model_file, model: model1, filename: "example.obj", attachment: nil)
    expect(part.calculate_digest.first(16)).to eq("8a0f188378204b67")
  end

  it "finds duplicate files using digest" do # rubocop:todo RSpec/ExampleLength, RSpec/MultipleExpectations
    library = create(:library, path: Rails.root.join("/tmp"))
    model = create(:model, library: library, path: "model")
    part1 = create(:model_file, model: model, filename: "same.obj", digest: "1234")
    part2 = create(:model_file, model: model, filename: "same.stl", digest: "1234")
    create(:model_file, model: model, filename: "different.stl", digest: "4321")
    allow(part1).to receive(:size).and_return(123)
    expect(part1.duplicate?).to be true
    expect(part1.duplicates).to eq [part2]
  end

  it "does not flag duplicates for nil digests" do # rubocop:todo RSpec/ExampleLength
    library = create(:library, path: Rails.root.join("/tmp"))
    model = create(:model, library: library, path: "model1")
    part1 = create(:model_file, model: model, filename: "nil.obj", digest: nil)
    create(:model_file, model: model, filename: "nil.stl", digest: nil)
    expect(part1.duplicate?).to be false
  end

  it "does not flag duplicates for zero-length files" do # rubocop:todo RSpec/ExampleLength
    library = create(:library, path: Rails.root.join("/tmp"))
    model = create(:model, library: library, path: "model1")
    part1 = create(:model_file, model: model, filename: "same.obj", digest: "1234")
    create(:model_file, model: model, filename: "same.stl", digest: "1234")
    allow(part1).to receive(:size).and_return(0)
    expect(part1.duplicate?).to be false
  end

  context "with actual files on disk" do
    around do |ex|
      MockDirectory.create([
        "model_one/part_1.3mf"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    let(:library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable
    let(:model) { create(:model, library: library, path: "model_one") }
    let(:file) { create(:model_file, model: model, filename: "part_1.3mf", digest: "1234") }

    it "renames file on disk" do # rubocop:disable RSpec/MultipleExpectations
      file.update!(filename: "newname.3mf")
      expect(File.exist?(File.join(library.path, "model_one/part_1.3mf"))).to be false
      expect(File.exist?(File.join(library.path, "model_one/newname.3mf"))).to be true
    end

    it "rejects filename change if MIME type would change" do # rubocop:disable RSpec/MultipleExpectations
      file.update(filename: "part_1.stl")
      expect(file).not_to be_valid
      expect(file.errors[:filename].first).to eq "is not the same file type"
    end

    it "rejects case-only filename change" do # rubocop:disable RSpec/MultipleExpectations
      file.update(filename: "part_1.3MF")
      expect(file).not_to be_valid
      expect(file.errors[:filename].first).to eq "cannot be a case-only change"
    end

    it "removes original file from disk when explicitly told to" do
      expect { file.delete_from_disk_and_destroy }.to(
        change { File.exist?(File.join(library.path, file.path_within_library)) }.from(true).to(false)
      )
    end

    it "does not remove original file from disk when destroyed" do
      expect { file.destroy }.not_to(
        change { File.exist?(File.join(library.path, file.path_within_library)) }
      )
    end

    it "ignores missing files on deletion" do
      file.update_attribute :filename, "gone.3mf" # rubocop:disable Rails/SkipsModelValidations
      expect { file.destroy }.not_to raise_exception
    end

    it "queues up rescans for duplicates on destroy" do
      dupe = create(:model_file, model: model, filename: "duplicate.3mf", digest: "1234")
      expect { file.destroy }.to(
        have_enqueued_job(Analysis::AnalyseModelFileJob).with(dupe.id)
      )
    end
  end

  context "with different versions of the same file" do
    let!(:model) { create(:model) }
    let!(:presupported) { create(:model_file, model: model, presupported: true) }
    let!(:unsupported) { create(:model_file, model: model, presupported: false, presupported_version: presupported) }

    it "can access supported part from unsupported part" do
      expect(unsupported.presupported_version).to eq presupported
    end

    it "can access unsupported part from presupported part" do
      expect(presupported.unsupported_version).to eq unsupported
    end

    it "only let presupported files be set as the presupported_version" do # rubocop:todo RSpec/MultipleExpectations
      another_unsupported = create(:model_file, model: model, presupported: false)
      unsupported.presupported_version = another_unsupported
      expect(unsupported).not_to be_valid
      expect(unsupported.errors[:presupported_version].first).to eq "is not a presupported file"
    end

    it "does not allow a presupported_version to be set for presupported files" do # rubocop:todo RSpec/MultipleExpectations
      another_presupported = create(:model_file, model: model, presupported: true)
      presupported.presupported_version = another_presupported
      expect(presupported).not_to be_valid
      expect(presupported.errors[:presupported_version].first).to eq "cannot be set on a presupported file"
    end

    it "clears presupported version if presupported file is set to unsupported" do
      presupported.update!(presupported: false)
      expect(unsupported.reload.presupported_version).to be_nil
    end
  end

  {
    stl: true,
    png: false,
    pdf: false,
    lys: false
  }.each_pair do |extension, result|
    it "shows that #{extension} files are#{"n't" if result == false} renderable" do
      file = create(:model_file, filename: "test.#{extension}")
      expect(file.is_renderable?).to be result
    end
  end

  [true, false].each do |state|
    before do
      allow(SiteSettings).to receive_messages(default_indexable: state, default_ai_indexable: state)
    end

    let(:model) { create(:model) }
    let(:file) { create(:model_file, model: model) }

    it "delegates indexable to model (#{state})" do
      expect(file.indexable?).to eq model.indexable?
    end

    it "delegates AI indexable to model (#{state})" do
      expect(file.ai_indexable?).to eq model.ai_indexable?
    end
  end
end
</file>

<file path="spec/models/model_spec.rb">
require "rails_helper"
require "support/mock_directory"

RSpec.describe Model do
  it_behaves_like "Followable"
  it_behaves_like "Commentable"
  it_behaves_like "Caber::Object"
  it_behaves_like "Sluggable"
  it_behaves_like "Indexable"
  it_behaves_like "IndexableWithCreatorDelegation"

  it "is not valid without a path" do
    expect(build(:model, path: nil)).not_to be_valid
  end

  it "is not valid without a name" do
    expect(build(:model, name: nil)).not_to be_valid
  end

  it "is not valid without being part of a library" do
    expect(build(:model, library: nil)).not_to be_valid
  end

  it "is valid if it has a path, name and library" do
    expect(build(:model)).to be_valid
  end

  it "has many files" do
    expect(build(:model).model_files).to eq []
  end

  context "with license information" do
    it "allows nil license" do
      m = build(:model, license: nil)
      expect(m).to be_valid
    end

    it "stores license info in SPDX" do
      m = build(:model, license: "MIT")
      expect(m).to be_valid
    end

    it "supports complex SPDX definitions" do
      m = build(:model, license: "MIT OR AGPL-3.0+")
      expect(m).to be_valid
    end

    it "checks for SPDX validity" do # rubocop:todo RSpec/MultipleExpectations
      m = build(:model, license: "Made up license")
      expect(m).not_to be_valid
      expect(m.errors[:license].first).to eq "is not a valid license"
    end

    it "allows LicenseRef-Commercial to represent private use only" do
      # See https://scancode-licensedb.aboutcode.org/commercial-license.html
      m = build(:model, license: "LicenseRef-Commercial")
      expect(m).to be_valid
    end

    it "can remove a license on save" do
      m = create(:model, license: "MIT")
      m.license = nil
      expect(m).to be_valid
    end

    it "normalizes blank licenses to nil" do
      m = build(:model, license: "")
      m.validate
      expect(m.license).to be_nil
    end
  end

  it "strips leading and trailing separators from paths" do
    model = create(:model, path: "/models/car/")
    expect(model.path).to eq "models/car"
  end

  it "strips leading and trailing backslashes from tags" do
    model = create(:model, tag_list: ["\\tag1", "tag2\\"])
    expect(model.tag_list).to eq ["tag1", "tag2"]
  end

  context "with a library on disk" do
    around do |ex|
      MockDirectory.create([
        "original_library/model/part.stl",
        "new_library/model/part.stl"
      ]) do |path|
        @libraries_path = path
        ex.run
      end
    end

    it "must have a unique path within its library" do
      library = create(:library, path: "#{@libraries_path}/original_library") # rubocop:todo RSpec/InstanceVariable
      create(:model, library: library, path: "model")
      expect(build(:model, library: library, path: "model")).not_to be_valid
    end

    it "can have the same path as a model in a different library" do
      original_library = create(:library, path: "#{@libraries_path}/original_library") # rubocop:todo RSpec/InstanceVariable
      create(:model, library: original_library, path: "model")
      new_library = create(:library, path: "#{@libraries_path}/new_library") # rubocop:todo RSpec/InstanceVariable
      expect(build(:model, library: new_library, path: "model")).to be_valid
    end
  end

  context "when nested inside another" do
    around do |ex|
      MockDirectory.create([
        "parent/parent_part.stl",
        "parent/child/child_part.stl",
        "parent/child/duplicate.stl"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    let(:library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable
    let!(:parent) { create(:model, library: library, path: "parent") }
    let!(:child) { create(:model, library: library, path: "parent/child") }

    it "lists contained models" do
      expect(parent.contained_models.to_a).to eql [child]
    end

    it "identifies the parent" do
      expect(child.parents).to eql [parent]
    end

    it "has a bool check for contained models" do # rubocop:todo RSpec/MultipleExpectations
      expect(parent.contains_other_models?).to be true
      expect(child.contains_other_models?).to be false
    end

    context "when merging into parent" do
      it "moves files" do # rubocop:todo RSpec/MultipleExpectations
        file = create(:model_file, model: child, filename: "child_part.stl")
        child.merge_into! parent
        file.reload
        expect(file.filename).to eql "child/child_part.stl"
        expect(file.model).to eql parent
      end

      it "deletes merged model" do
        expect {
          child.merge_into! parent
        }.to change(described_class, :count).from(2).to(1)
      end
    end

    context "when merging models that have duplicated files" do
      before do
        create(:model_file, model: parent, filename: "parent_part.stl")
        create(:model_file, model: parent, filename: "child/duplicate.stl")
        create(:model_file, model: child, filename: "duplicate.stl")
        create(:model_file, model: child, filename: "child_part.stl")
      end

      it "removes duplicated file" do
        expect {
          child.merge_into! parent
        }.to change(ModelFile, :count).by(-1)
      end

      it "rehomes distinct file" do
        child.merge_into! parent
        expect(parent.model_files.exists?(filename: "child/child_part.stl")).to be true
      end

      it "keeps all real files intact" do
        child.merge_into! parent
        parent.model_files.each do |file|
          expect(file.exists_on_storage?).to be true
        end
      end
    end
  end

  context "when nested inside another with underscores in the name" do
    around do |ex|
      MockDirectory.create([
        "model_one/part.stl",
        "model_one/nested_model/part.stl"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    let(:library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable
    let!(:parent) { create(:model, library: library, path: "model_one") }
    let!(:child) { create(:model, library: library, path: "model_one/nested_model") }

    it "correctly flags up contained models" do # rubocop:todo RSpec/MultipleExpectations
      expect(parent.contains_other_models?).to be true
      expect(child.contains_other_models?).to be false
    end
  end

  context "when organizing" do
    around do |ex|
      Dir.mktmpdir do |library_path|
        @library_path = library_path
        ex.run
      end
    end

    let(:library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable
    let!(:model) {
      FileUtils.mkdir_p(File.join(library.path, "original"))
      m = create(:model, library: library, name: "test model", path: "original", tag_list: [])
      create(:model_file, model: m)
      m
    }

    it "moves model folder" do # rubocop:todo RSpec/MultipleExpectations
      expect { model.organize! }.not_to raise_error
      expect(Dir.exist?(File.join(library.path, "original"))).to be false
      expect(Dir.exist?(File.join(library.path, "@untagged", "test-model#1"))).to be true
    end

    it "has a validation error if the destination path already exists, and does not move anything" do # rubocop:todo RSpec/MultipleExpectations
      FileUtils.mkdir_p(File.join(library.path, "@untagged/test-model#1"))
      expect { model.organize! }.to raise_error(ActiveRecord::RecordInvalid)
      expect(model.errors.full_messages).to include("Path already exists")
      expect(Dir.exist?(File.join(library.path, "original"))).to be true
    end

    it "throws an error if the model has submodels, and does not move anything" do # rubocop:todo RSpec/MultipleExpectations
      create(:model, library: library, name: "sub model", path: "original/submodel")
      expect { model.organize! }.to raise_error(ActiveRecord::RecordInvalid)
      expect(model.errors.full_messages).to include("Path can't be changed, model contains other models")
      expect(Dir.exist?(File.join(library.path, "original"))).to be true
      expect(Dir.exist?(File.join(library.path, "@untagged", "test-model#1"))).to be false
    end
  end

  context "when changing library" do
    around do |ex|
      Dir.mktmpdir do |library_path|
        Dir.mkdir File.join(library_path, "original_library")
        Dir.mkdir File.join(library_path, "new_library")
        @library_path = library_path
        ex.run
      end
    end

    # rubocop:todo RSpec/InstanceVariable
    let(:original_library) { create(:library, path: File.join(@library_path, "original_library")) }
    let(:new_library) { create(:library, path: File.join(@library_path, "new_library")) }
    # rubocop:enable RSpec/InstanceVariable
    let!(:model) {
      FileUtils.mkdir_p(File.join(original_library.path, "model"))
      m = create(:model, library: original_library, name: "test model", path: "model")
      create(:model_file, model: m)
      m
    }
    let(:submodel) { create(:model, library: original_library, name: "sub model", path: "model/submodel") }

    it "moves model folder" do # rubocop:todo RSpec/MultipleExpectations
      expect { model.update! library: new_library }.not_to raise_error
      expect(Dir.exist?(File.join(original_library.path, "model"))).to be false
      expect(Dir.exist?(File.join(new_library.path, "model"))).to be true
    end

    it "has a validation error if the destination path already exists, and does not move folder" do # rubocop:todo RSpec/MultipleExpectations
      FileUtils.mkdir_p(File.join(new_library.path, "model"))
      expect { model.update! library: new_library }.to raise_error(ActiveRecord::RecordInvalid)
      expect(model.errors.full_messages).to include("Path already exists")
      expect(Dir.exist?(File.join(original_library.path, "model"))).to be true
    end

    it "has a validation error if the model has submodels, and does not move anything" do # rubocop:todo RSpec/MultipleExpectations
      create(:model, library: original_library, name: "sub model", path: "model/submodel")
      expect { model.update! library: new_library }.to raise_error(ActiveRecord::RecordInvalid)
      expect(model.errors.full_messages).to include("Library can't be changed, model contains other models")
      expect(Dir.exist?(File.join(original_library.path, "model"))).to be true
      expect(Dir.exist?(File.join(new_library.path, "model"))).to be false
    end
  end

  context "when splitting" do
    subject!(:model) {
      create(:admin) # We need a user for permission setting
      m = create(:model, creator: create(:creator), collection: create(:collection), license: "CC-BY-4.0", caption: "test", notes: "note")
      m.tag_list << "tag1"
      m.tag_list << "tag2"
      create(:model_file, model: m)
      create(:model_file, model: m)
      m
    }

    it "creates a new model" do
      expect { model.split! }.to change(described_class, :count).by(1)
    end

    it "prepends 'Copy of' to name" do
      new_model = model.split!
      expect(new_model.name).to eq "Copy of #{model.name}"
    end

    [:notes, :caption, :collection, :creator, :license, :tags].each do |field|
      it "copies old model #{field}" do
        new_model = model.split!
        expect(new_model.send(field)).to eq model.send(field)
      end
    end

    it "creates an empty model if no files are specified" do
      new_model = model.split!
      expect(new_model.model_files).to be_empty
    end

    it "does not add or remove files" do
      expect { model.split! }.not_to change(ModelFile, :count)
    end

    it "adds selected files to new model" do
      new_model = model.split! files: [model.model_files.first]
      expect(new_model.model_files.count).to eq 1
    end

    it "retains existing preview file for new model if selected for split" do # rubocop:todo RSpec/MultipleExpectations
      file_to_split = model.model_files.first
      model.update!(preview_file: file_to_split)
      new_model = model.split! files: [file_to_split]
      expect(new_model.preview_file).to eq file_to_split
      expect(model.reload.preview_file).to be_nil
    end

    it "new model gets no preview file if not selected" do # rubocop:todo RSpec/MultipleExpectations
      preview_file = model.model_files.first
      model.update!(preview_file: preview_file)
      new_model = model.split! files: [model.model_files.last]
      expect(new_model.reload.preview_file).to be_nil
      expect(model.preview_file).to eq preview_file
    end

    it "copies permissions" do # rubocop:disable RSpec/ExampleLength, RSpec/MultipleExpectations
      member_role = Role.find_by(name: :member)
      model.revoke_permission("view", member_role)
      new_model = model.split! files: [model.model_files.first]
      expect(model.caber_relations.count).to eq 1
      expect(new_model.caber_relations.count).to eq 1
      model.caber_relations.each do |relation|
        expect(new_model.grants_permission_to?(relation.permission, relation.subject)).to be true
      end
    end
  end

  context "with filesystem conflicts" do
    around do |ex|
      MockDirectory.create([
        "model/file.obj"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    # rubocop:todo RSpec/InstanceVariable

    let(:library) { create(:library, path: @library_path) }
    # rubocop:enable RSpec/InstanceVariable

    let(:model_without_leading_separator) {
      create(:model, library: library, path: "model")
    }
    let(:model_with_leading_separator) {
      model = create(:model, library: library, path: "model")
      # Set leading separator bypassing validators
      model.update_columns(path: "/model") # rubocop:disable Rails/SkipsModelValidations
      model
    }

    it "allows removal of leading separators without having to move files" do # rubocop:todo RSpec/MultipleExpectations
      expect(model_with_leading_separator.path).to eql "/model"
      expect { model_with_leading_separator.update!(path: "model") }.not_to raise_error
    end

    it "fails validation if removing a leading separator causes a conflict" do # rubocop:todo RSpec/MultipleExpectations
      expect(model_with_leading_separator.path).to eql "/model"
      expect(model_without_leading_separator.path).to eql "model"
      expect { model_with_leading_separator.update!(path: "model") }.to raise_error(ActiveRecord::RecordInvalid)
    end
  end

  context "when removing files from disk" do
    around do |ex|
      MockDirectory.create([
        "model_one/part_1.3mf"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    # rubocop:todo RSpec/InstanceVariable

    let(:library) { create(:library, path: @library_path) }
    # rubocop:enable RSpec/InstanceVariable
    let(:model) { create(:model, library: library, path: "model_one") }

    it "removes original folder from disk" do
      expect { model.delete_from_disk_and_destroy }.to(
        change { File.exist?(File.join(library.path, model.path)) }.from(true).to(false)
      )
    end

    it "ignores missing files on deletion" do
      model.update! path: "gone"
      expect { model.delete_from_disk_and_destroy }.not_to raise_exception
    end

    it "calls standard destroy" do
      allow(model).to receive(:destroy)
      model.delete_from_disk_and_destroy
      expect(model).to have_received(:destroy).once
    end

    it "calls destroy on files" do # rubocop:todo RSpec/ExampleLength
      file = create(:model_file, model: model, filename: "part_1.3mf", digest: "1234")
      allow(file).to receive(:delete_from_disk_and_destroy)
      mock = [file]
      without_partial_double_verification do
        allow(mock).to receive(:update_all).and_return(true)
      end
      allow(model).to receive(:model_files).and_return(mock)
      model.delete_from_disk_and_destroy
      expect(file).to have_received(:delete_from_disk_and_destroy).once
    end
  end

  context "when making changes" do
    it "writes datapackage if model has changed" do
      model = create(:model)
      expect { model.update(name: "Changed") }.to have_enqueued_job(UpdateDatapackageJob).with(model.id)
    end

    it "doesn't update datapackage if model didn't actually change" do
      model = create(:model)
      expect { model.update(name: model.name) }.not_to have_enqueued_job(UpdateDatapackageJob)
    end
  end

  it "detects if a model has both supported and unsupported files" do
    model = create(:model)
    create(:model_file, model: model, presupported: true)
    create(:model_file, model: model, presupported: false)
    expect(model.has_supported_and_unsupported?).to be true
  end

  it "detects if a model has only supported files" do
    model = create(:model)
    create(:model_file, model: model, presupported: true)
    expect(model.has_supported_and_unsupported?).to be false
  end

  it "detects if a model has only unsupported files" do
    model = create(:model)
    create(:model_file, model: model, presupported: false)
    expect(model.has_supported_and_unsupported?).to be false
  end

  it "generates list of file extensions" do
    model = create(:model)
    create(:model_file, model: model, filename: "test.stl")
    create(:model_file, model: model, filename: "test2.stl")
    create(:model_file, model: model, filename: "test.obj")
    expect(model.file_extensions.sort).to eq ["obj", "stl"]
  end

  context "when adding links" do
    let(:url) { "https://example.com" }
    let(:model) { create(:model, links_attributes: [{url: url}]) }

    it "adds unique links" do
      opts = {links_attributes: [{url: "https://new.url.com"}]}
      expect { model.update! opts }.to change { model.links.count }.from(1).to(2)
    end

    it "doesn't add duplicate links" do
      opts = {links_attributes: [{url: url}]}
      expect { model.update! opts }.not_to change { model.links.count }
    end

    it "filters duplicate links without raising an error" do
      opts = {links_attributes: [{url: url}]}
      expect { model.update! opts }.not_to raise_error
    end
  end

  context "when creating a model" do
    it "queues model publish activity job if the model is public" do
      expect {
        create(:model, :public)
      }.to have_enqueued_job(Activity::ModelPublishedJob).once
    end

    it "doesn't queue any activity jobs if the model isn't public" do
      expect {
        create(:model)
      }.not_to have_enqueued_job(Activity::ModelPublishedJob)
    end
  end

  context "when making a model public" do
    let!(:model) { create(:model, license: nil) }

    before do
      model.clear_changes_information
      model.update(caber_relations_attributes: [{subject: nil, permission: "view"}])
      model.validate
    end

    it "requires a creator" do
      expect(model.errors[:creator]).to include "can't be blank"
    end

    it "make creators public" do
      new_creator = create(:creator)
      model.update!(creator: new_creator, license: "MIT")
      expect(new_creator).to be_public
    end

    it "requires a license" do
      expect(model.errors[:license]).to include "can't be blank"
    end

    it "doesn't make model public if validation failed" do
      expect(model.reload.public?).to be false
    end
  end

  context "when updating a private model" do
    let!(:model) { create(:model, creator: create(:creator, :public)) }

    before do
      model.clear_changes_information
    end

    it "doesn't queue any activity jobs" do
      expect {
        model.update!(caption: "new caption!")
      }.not_to have_enqueued_job(Activity::ModelUpdatedJob)
    end

    it "queues publish activity job if the model was just made public" do
      expect {
        model.update!(caber_relations_attributes: [{subject: nil, permission: "view"}])
      }.to have_enqueued_job(Activity::ModelPublishedJob).once
    end
  end

  context "when updating a public model" do
    let!(:model) { create(:model, :public) }

    before do
      model.clear_changes_information
    end

    it "queues update activity job" do
      expect {
        model.update!(caption: "new caption!")
      }.to have_enqueued_job(Activity::ModelUpdatedJob).once
    end

    it "doesn't queue any activity jobs if the update isn't noteworthy" do
      expect {
        model.update(path: "test")
      }.not_to have_enqueued_job(Activity::ModelUpdatedJob)
    end

    it "queues publish activity job if the creator was changed to a public one" do
      expect {
        model.update!(creator: create(:creator, :public))
      }.to have_enqueued_job(Activity::ModelPublishedJob).once
    end

    it "queues collected activity job if the collection was changed to a public one" do
      expect {
        model.update!(collection: create(:collection, :public))
      }.to have_enqueued_job(Activity::ModelCollectedJob).once
    end

    it "queues normal update activity job if the collection was changed to a private one" do
      expect {
        model.update!(collection: create(:collection))
      }.to have_enqueued_job(Activity::ModelUpdatedJob).once
    end
  end
end
</file>

<file path="spec/models/problem_spec.rb">
require "rails_helper"

RSpec.describe Problem do
  describe "querying visible scope" do
    let(:settings) do
      {
        missing: :silent,
        empty: :info,
        nesting: :warning,
        inefficient: :info,
        duplicate: :warning
      }
    end

    before do
      create_list(:problem, 3, :missing)
      create_list(:problem, 3, :inefficient)
    end

    it "lists visible problems" do # rubocop:todo RSpec/MultipleExpectations
      expect(described_class.visible(settings).length).to eq 3
      expect(described_class.visible(settings).map { |it| it.category.to_sym }).to include :inefficient
    end

    it "does not include silenced problems" do
      expect(described_class.visible(settings).map { |it| it.category.to_sym }).not_to include :missing
    end

    it "falls back to default visibility settings" do # rubocop:todo RSpec/MultipleExpectations
      expect(described_class.visible({missing: :silent}).length).to eq 3
      expect(described_class.visible({missing: :silent}).map { |it| it.category.to_sym }).to include :inefficient
    end
  end

  context "when being ignored" do
    it "have an ignored flag" do
      p = build(:problem)
      expect(p).to respond_to(:ignored)
    end

    it "leaves out ignored problems by default" do
      create(:problem)
      create(:problem, ignored: true)
      expect(described_class.count).to eq(1)
    end

    it "includes ignored problems when specified" do
      create(:problem)
      create(:problem, ignored: true)
      expect(described_class.unscoped.count).to eq(2)
    end

    it "can ignore an existing problem" do # rubocop:todo RSpec/ExampleLength, RSpec/MultipleExpectations
      p = create(:problem)
      expect(p.ignored).to be(false)
      expect(described_class.count).to eq(1)
      p.update!(ignored: true)
      expect(p.ignored).to be(true)
      expect(described_class.count).to eq(0)
    end

    it "can unignore an existing problem" do # rubocop:todo RSpec/ExampleLength, RSpec/MultipleExpectations
      p = create(:problem, ignored: true)
      expect(p.ignored).to be(true)
      expect(described_class.count).to eq(0)
      p.update!(ignored: false)
      expect(p.ignored).to be(false)
      expect(described_class.count).to eq(1)
    end
  end

  context "when updating problem state" do
    let(:model) { create(:model, license: nil) }

    it "creates a problem that should exist but doesn't" do
      expect {
        described_class.create_or_clear model, :no_license, model.license.blank?
      }.to change(described_class, :count).from(0).to(1)
    end

    it "removes a problem that shouldn't exist but does" do
      described_class.create_or_clear model, :no_license, model.license.blank?
      model.update!(license: "CC-BY-4.0")
      expect {
        described_class.create_or_clear model, :no_license, model.license.blank?
      }.to change(described_class, :count).from(1).to(0)
    end

    it "does nothing with a problem that shouldn't exist and doesn't" do
      model.update!(license: "CC-BY-4.0")
      expect {
        described_class.create_or_clear model, :no_license, model.license.blank?
      }.not_to change(described_class, :count)
    end

    it "does nothing with a problem that should exist and does" do
      described_class.create_or_clear model, :no_license, model.license.blank?
      expect {
        described_class.create_or_clear model, :no_license, model.license.blank?
      }.not_to change(described_class, :count)
    end
  end
end
</file>

<file path="spec/models/role_spec.rb">
require "rails_helper"
RSpec.describe Role do
  let(:user) { create(:user) }

  it_behaves_like "Caber::Subject"

  it "can be given to a user" do
    user.add_role :administrator
    expect(user.has_role?(:administrator)).to be true
  end

  it "must be from the allowed list" do # rubocop:disable RSpec/MultipleExpectations
    expect { user.add_role :batman }.to raise_error(ActiveRecord::RecordInvalid)
    expect(user.has_role?(:batman)).to be false
  end

  context "when administrator" do
    let(:admin) { create(:admin) }

    it "has administrator permission" do
      expect(admin.is_administrator?).to be true
    end

    it "inherits moderator permission" do
      expect(admin.is_moderator?).to be true
    end

    it "inherits contributor permission" do
      expect(admin.is_contributor?).to be true
    end

    it "inherits member permission" do
      expect(admin.is_member?).to be true
    end
  end

  context "when moderator" do
    let(:moderator) { create(:moderator) }

    it "does not have administrator permission" do
      expect(moderator.is_administrator?).to be false
    end

    it "has moderator permission" do
      expect(moderator.is_moderator?).to be true
    end

    it "inherits contributor permission" do
      expect(moderator.is_contributor?).to be true
    end

    it "inherits member permission" do
      expect(moderator.is_member?).to be true
    end
  end

  context "when contributor" do
    let(:contributor) { create(:contributor) }

    it "does not have administrator permission" do
      expect(contributor.is_administrator?).to be false
    end

    it "does not have moderator permission" do
      expect(contributor.is_moderator?).to be false
    end

    it "has contributor permission" do
      expect(contributor.is_contributor?).to be true
    end

    it "inherits member permission" do
      expect(contributor.is_member?).to be true
    end
  end

  context "when member" do
    let(:member) { create(:user) }

    it "does not have administrator permission" do
      expect(member.is_administrator?).to be false
    end

    it "does not have moderator permission" do
      expect(member.is_moderator?).to be false
    end

    it "does not have contributor permission" do
      expect(member.is_contributor?).to be false
    end

    it "has member permission" do
      expect(member.is_member?).to be true
    end
  end

  context "when duplicate roles exist" do
    let!(:user) { create(:user) }
    let!(:moderator) { create(:moderator) } # rubocop:disable RSpec/LetSetup

    before do
      # Rename moderator role to member without validations so we get a duplicate
      described_class.where(name: "member").update_all(name: "moderator") # rubocop:disable Rails/SkipsModelValidations
      user.reload
      user.add_role :member
    end

    it "sets up two roles called moderator" do
      expect(described_class.where(name: "moderator").count).to eq 2
    end

    it "shows that user has one of the moderator roles" do
      expect(user.roles.map(&:name)).to include "moderator"
    end

    it "combines duplicated roles" do
      expect { described_class.merge_duplicates! }.to change(described_class, :count).from(3).to(2)
    end

    it "preserves user's mod role" do
      described_class.merge_duplicates!
      expect(user.is_moderator?).to be true
    end

    it "leaves user with two valid roles" do
      described_class.merge_duplicates!
      expect(user.roles.map(&:name)).to eq ["moderator", "member"]
    end

    it "preserves moderator's mod role" do
      described_class.merge_duplicates!
      expect(moderator.is_moderator?).to be true
    end
  end
end
</file>

<file path="spec/models/site_settings_spec.rb">
require "rails_helper"

RSpec.describe SiteSettings do
  context "when detecting ignored files" do
    %w[
      ./test.stl
      /test.stl
      test.stl
      test/test.stl
    ].each do |pathname|
      it "accepts `#{pathname}`" do
        expect(described_class.send(:ignored_file?, pathname)).to be false
      end
    end

    %w[
      .test.stl
      test/.test.stl
      .test/test.stl
      model/@eaDir/test.png/SYNOPHOTO_THUMB_S.png
      model/__MACOSX
    ].each do |pathname|
      it "ignores `#{pathname}`" do
        expect(described_class.send(:ignored_file?, pathname)).to be true
      end
    end
  end
end
</file>

<file path="spec/models/user_spec.rb">
require "rails_helper"

RSpec.describe User do
  it_behaves_like "Follower"
  it_behaves_like "Caber::Subject"

  it "requires a username" do
    expect(build(:user, username: nil)).not_to be_valid
  end

  it "allows single-character usernames" do
    expect(build(:user, username: "a")).to be_valid
  end

  it "allows two-character usernames" do
    expect(build(:user, username: "ab")).to be_valid
  end

  it "allow three-character usernames" do
    expect(build(:user, username: "abc")).to be_valid
  end

  it "allows numbers in usernames" do
    expect(build(:user, username: "3jane")).to be_valid
  end

  it "allows non-ASCII usernames" do
    expect(build(:user, username: "إعلانات")).to be_valid
  end

  it "doesn't allows punctuation in usernames" do
    expect(build(:user, username: "user-name")).not_to be_valid
  end

  it "doesn't allow usernames that differ by case" do
    create(:user, username: "userName")
    expect(build(:user, username: "USERNAME")).not_to be_valid
  end

  it "gets member role by default" do
    u = create(:user)
    expect(u).to have_role(:member)
  end

  it "gets contributor and member roles if contributor is set as default" do # rubocop:disable RSpec/MultipleExpectations
    allow(SiteSettings).to receive(:default_signup_role).and_return("contributor")
    u = create(:user)
    expect(u).to have_role(:member)
    expect(u).to have_role(:contributor)
  end

  it "enables quotas" do
    SiteSettings.enable_user_quota = true
    SiteSettings.default_user_quota = 100
    expect(build(:user).has_quota?).to be_truthy # rubocop:disable RSpec/PredicateMatcher
  end

  it "assigned site quota not explicitly defined" do
    expect(build(:user).quota).to eq SiteSettings.default_user_quota
  end

  it "uses site default quota" do
    SiteSettings.default_user_quota = 100
    user = create(:user, quota: 42, quota_use_site_default: true)
    expect(user.quota).to eq SiteSettings.default_user_quota
  end

  it "considers zero quota value as unlimited" do
    user = create(:user, quota: 0, quota_use_site_default: false)
    expect(user.has_quota?).to be_falsey # rubocop:disable RSpec/PredicateMatcher
  end

  context "when autocreating creator" do
    it "creates creator successfully if data is valid" do
      user = create(:user, creators_attributes: [{slug: "creator", name: "Creator"}])
      expect(user.creators.first.name).to eq "Creator"
    end

    it "validates creator data properly" do
      user = build(:user, creators_attributes: [{slug: "invalid+slug", name: ""}])
      expect(user).not_to be_valid
    end

    it "logs errors with creator data properly" do # rubocop:disable RSpec/MultipleExpectations
      user = build(:user, creators_attributes: [{slug: "invalid+slug", name: ""}])
      user.validate
      expect(user.errors.where("creators.name").first.type).to eq :blank
      expect(user.errors.where("creators.slug").first.type).to eq :invalid
    end
  end

  context "with owner permissions on a creator" do
    let!(:user) { create(:user) }
    let!(:creator) { create(:creator) }

    it "accesses owned creators through association" do
      creator.grant_permission_to("own", user)
      expect(user.reload.creators).to include creator
    end

    it "can't access non-owned creators through association" do
      creator.grant_permission_to("own", create(:moderator))
      expect(user.creators).to be_empty
    end

    it "doesn't access viewable creators through association" do
      creator.grant_permission_to("view", user)
      expect(user.reload.creators).to be_empty
    end
  end

  context "with omniauth" do
    let(:auth_data) do
      OpenStruct.new({
        provider: "openid_connect",
        uid: "auth|123456789",
        info: OpenStruct.new({
          email: "test@example.com",
          preferred_username: "username",
          nickname: "nick"
        })
      })
    end

    it "can create a valid user from auth data" do
      expect(described_class.from_omniauth(auth_data)).to be_valid
    end

    it "stores auth provider" do
      user = described_class.from_omniauth(auth_data)
      expect(user.auth_provider).to eq "openid_connect"
    end

    it "stores auth uid" do
      user = described_class.from_omniauth(auth_data)
      expect(user.auth_uid).to eq "auth|123456789"
    end

    it "stores email" do
      user = described_class.from_omniauth(auth_data)
      expect(user.email).to eq "test@example.com"
    end

    it "stores username" do
      user = described_class.from_omniauth(auth_data)
      expect(user.username).to eq "username"
    end

    it "stores nickname as username if preferred username not available" do
      auth_data.info.preferred_username = nil
      user = described_class.from_omniauth(auth_data)
      expect(user.username).to eq "nick"
    end

    it "stores email username as username if preferred username and nickname not available" do
      auth_data.info.preferred_username = nil
      auth_data.info.nickname = nil
      user = described_class.from_omniauth(auth_data)
      expect(user.username).to eq "test"
    end

    it "matches an existing user with identical auth details" do
      user = create(:user, auth_provider: "openid_connect", auth_uid: "auth|123456789")
      expect(described_class.from_omniauth(auth_data)).to eq user
    end

    it "matches an existing user with matching email" do
      user = create(:user, email: "test@example.com")
      expect(described_class.from_omniauth(auth_data)).to eq user
    end

    it "deconflicts a user with matching username by using one of the other options" do
      create(:user, username: "username")
      new_user = described_class.from_omniauth(auth_data)
      expect(new_user.username).to eq "nick"
    end
  end
end
</file>

<file path="spec/policies/application_policy/owner_scope_spec.rb">
require "rails_helper"

describe ApplicationPolicy::OwnerScope do
  subject(:scope) { described_class.new(member, item.class) }

  let!(:item) { create(:model) }
  let!(:member) { create(:user) }

  it "includes owned item in scope" do
    item.grant_permission_to("own", member)
    expect(scope.resolve).to include(item)
  end

  it "excludes non-owned item from scope" do
    expect(scope.resolve).not_to include(item)
  end
end
</file>

<file path="spec/policies/application_policy/scope_spec.rb">
require "rails_helper"

describe ApplicationPolicy::Scope do
  subject(:scope) { described_class.new(member, item.class) }

  let(:item) { create(:model) }
  let(:member) { create(:user) }

  it "includes viewable item in scope" do
    expect(scope.resolve).to include(item)
  end

  it "excludes non-viewable item from scope" do
    item.revoke_permission("view", Role.find_by(name: :member))
    expect(scope.resolve).not_to include(item)
  end
end
</file>

<file path="spec/policies/application_policy/update_scope_spec.rb">
require "rails_helper"

describe ApplicationPolicy::UpdateScope do
  subject(:scope) { described_class.new(member, item.class) }

  let(:item) { create(:model) }
  let(:member) { create(:user) }

  it "includes editable item in scope" do
    item.grant_permission_to("edit", member)
    expect(scope.resolve).to include(item)
  end

  it "excludes non-editable item from scope" do
    expect(scope.resolve).not_to include(item)
  end
end
</file>

<file path="spec/policies/model_file_policy/scope_spec.rb">
require "rails_helper"

describe ModelFilePolicy::Scope do
  subject(:scope) { described_class.new(user, model.model_files) }

  let(:model) { create(:model) }
  let!(:previewable_file) { create(:model_file, model: model, previewable: true) }
  let!(:private_file) { create(:model_file, model: model) }

  context "with public preview permission granted" do
    let(:user) { nil }

    before do
      model.grant_permission_to "preview", nil
    end

    it "includes previewable file" do
      expect(scope.resolve).to include previewable_file
    end

    it "doesn't include private file" do
      expect(scope.resolve).not_to include private_file
    end
  end

  context "with no public permission granted" do
    let(:user) { nil }

    it "doesn't include previewable file" do
      expect(scope.resolve).not_to include previewable_file
    end

    it "doesn't include private file" do
      expect(scope.resolve).not_to include private_file
    end
  end
end
</file>

<file path="spec/policies/model_policy/scope_spec.rb">
require "rails_helper"

describe ModelPolicy::Scope do
  subject(:scope) { described_class.new(member, Model) }

  let(:member) { create(:user) }

  context "without sensitive content" do
    let(:model) { create(:model) }

    it "finds all" do
      expect(scope.resolve).to include model
    end

    it "finds all if public and no user" do
      model.grant_permission_to "view", nil
      scope = described_class.new(nil, Model)
      expect(scope.resolve).to include model
    end

    it "finds all if user has chose to hide sensitive content" do
      member.update sensitive_content_handling: "hide"
      expect(scope.resolve).to include model
    end
  end

  context "with sensitive content" do
    let(:model) { create(:model, sensitive: true) }

    it "finds all by default" do
      expect(scope.resolve).to include model
    end

    it "finds all if public and no user" do
      model.grant_permission_to "view", nil
      scope = described_class.new(nil, Model)
      expect(scope.resolve).to include model
    end

    it "doesn't include sensitive models if user has chose to hide sensitive content" do
      member.update sensitive_content_handling: "hide"
      expect(scope.resolve).not_to include model
    end
  end

  context "when granting preview" do
    let(:model) { create(:model) }

    it "doesn't find model without permission" do
      scope = described_class.new(nil, Model)
      expect(scope.resolve).not_to include model
    end

    it "finds model if preview grant exists" do
      model.grant_permission_to "preview", nil
      scope = described_class.new(nil, Model)
      expect(scope.resolve).to include model
    end
  end
end
</file>

<file path="spec/policies/shared/application_policy_shared.rb">
shared_examples "ApplicationPolicy" do
  subject(:policy) { described_class }

  let(:member) { create(:user) }
  let(:object) { create(target_class.to_s.underscore.to_sym) }

  permissions :index?, :show? do
    it "allows users with member role by default" do
      expect(policy).to permit(member, object)
    end

    it "falls back to member role if ReBAC isn't available on the record" do
      problem = create(:problem)
      expect(policy).to permit(member, problem)
    end

    context "when default member role access is removed" do
      before do
        object.revoke_permission("view", Role.find_by(name: :member))
      end

      it "denies users without individual view permission" do
        expect(policy).not_to permit(member, object)
      end

      it "allows users with individual view permission" do
        object.grant_permission_to "view", member
        expect(policy).to permit(member, object)
      end
    end

    context "with an unknown user" do
      it "denies access if public view permission isn't set" do
        expect(policy).not_to permit(nil, object)
      end

      it "allows access if public view permission is set" do
        object.grant_permission_to "view", nil
        expect(policy).to permit(nil, object)
      end
    end
  end

  permissions :create?, :new? do
    let(:contributor) { create(:contributor) }

    it "allows users with contributor role by default" do
      expect(policy).to permit(contributor)
    end

    it "denies users with member role by default" do
      expect(policy).not_to permit(member)
    end

    it "denies unknown users" do
      expect(policy).not_to permit(nil)
    end
  end

  permissions :edit?, :update?, :destroy? do
    let(:moderator) { create(:moderator) }
    let(:contributor) { create(:contributor) }

    it "allows all users with moderator role" do
      expect(policy).to permit(moderator, object)
    end

    it "denies users with contributor role" do
      expect(policy).not_to permit(contributor, object)
    end

    it "allows users with granted edit permission" do
      object.grant_permission_to "edit", member
      expect(policy).to permit(member, object)
    end

    it "allows users with granted owner permission" do
      object.grant_permission_to "own", member
      expect(policy).to permit(member, object)
    end

    it "denies unknown users on public objects" do
      object.grant_permission_to "view", nil
      expect(policy).not_to permit(nil, object)
    end
  end
end
</file>

<file path="spec/policies/collection_policy_spec.rb">
require "rails_helper"

describe CollectionPolicy do
  let(:target_class) { Collection }

  it_behaves_like "ApplicationPolicy"
end
</file>

<file path="spec/policies/creator_policy_spec.rb">
require "rails_helper"

describe CreatorPolicy do
  let(:target_class) { Creator }

  it_behaves_like "ApplicationPolicy"
end
</file>

<file path="spec/policies/model_file_policy_spec.rb">
require "rails_helper"

describe ModelFilePolicy do
  subject(:policy) { described_class }

  let(:model) { create(:model) }
  let(:previewable_file) { create(:model_file, model: model, previewable: true) }
  let(:private_file) { create(:model_file, model: model) }

  permissions :show? do
    context "with public preview permission granted" do
      before do
        model.grant_permission_to "preview", nil
      end

      it "shows previewable file" do
        expect(policy).to permit(nil, previewable_file)
      end

      it "doesn't show private file" do
        expect(policy).not_to permit(nil, private_file)
      end
    end

    context "with no public permission granted" do
      it "doesn't show previewable file" do
        expect(policy).not_to permit(nil, previewable_file)
      end

      it "doesn't show private file" do
        expect(policy).not_to permit(nil, private_file)
      end
    end
  end
end
</file>

<file path="spec/policies/model_policy_spec.rb">
require "rails_helper"

describe ModelPolicy do
  subject(:policy) { described_class }

  let(:target_class) { Model }

  let(:nested) { create(:model) }
  let(:model) { create(:model) }
  let(:moderator) { create(:moderator) }
  let(:member) { create(:user) }

  it_behaves_like "ApplicationPolicy"

  permissions :destroy? do
    it "denies deletion to users with member role" do
      expect(policy).not_to permit(member, model)
    end

    it "allows deletion by users with moderator role" do
      expect(policy).to permit(moderator, model)
    end

    it "denies deletion for models that contain others" do
      create(:model, library: model.library, path: model.path + "/nested")
      expect(policy).not_to permit(moderator, model.reload)
    end
  end

  permissions :show? do
    context "with sensitive content" do
      before do
        model.update(sensitive: true)
      end

      it "allows by default" do
        expect(policy).to permit(member, model)
      end

      it "allows public items with no user" do
        model.grant_permission_to "view", nil
        expect(policy).to permit(nil, model)
      end

      it "denies if user has chosen to hide sensitive" do
        member.update sensitive_content_handling: "hide"
        expect(policy).not_to permit(member, model)
      end
    end

    context "with preview granted" do
      it "allows preview items with no user" do
        model.grant_permission_to "preview", nil
        expect(policy).to permit(nil, model)
      end

      it "allows user with standard permissions to preview" do
        model.revoke_all_permissions(Role.find_by!(name: :member))
        model.grant_permission_to "preview", nil
        expect(policy).to permit(member, model)
      end

      it "allows user with specific preview grant" do
        model.revoke_all_permissions(Role.find_by!(name: :member))
        model.grant_permission_to "preview", member
        expect(policy).to permit(member, model)
      end
    end
  end
end
</file>

<file path="spec/requests/admin/collections_spec.rb">
require "rails_helper"

RSpec.describe "Admin::Collections" do
  it "is inaccessible to anything less than admin", :as_moderator do
    get "/admin/collections"
    expect(response).to have_http_status(:unauthorized)
  end

  context "with admin permission", :as_administrator do
    it "is accessible" do
      get "/admin/collections"
      expect(response).to have_http_status(:success)
    end

    it "is inaccessible in demo mode", :demo_mode do
      get("/admin/collections")
      expect(response).to have_http_status(:forbidden)
    end
  end
end
</file>

<file path="spec/requests/admin/creators_spec.rb">
require "rails_helper"

RSpec.describe "Admin::Creators" do
  it "is inaccessible to anything less than admin", :as_moderator do
    get "/admin/creators"
    expect(response).to have_http_status(:unauthorized)
  end

  context "with admin permission", :as_administrator do
    it "is accessible" do
      get "/admin/creators"
      expect(response).to have_http_status(:success)
    end

    it "is inaccessible in demo mode", :demo_mode do
      get("/admin/creators")
      expect(response).to have_http_status(:forbidden)
    end
  end
end
</file>

<file path="spec/requests/admin/dashboard_spec.rb">
require "rails_helper"

RSpec.describe "Admin::Dashboard" do
  it "is inaccessible to anything less than admin", :as_moderator do
    get "/admin"
    expect(response).to have_http_status(:unauthorized)
  end

  context "with admin permission", :as_administrator do
    it "is accessible" do
      get "/admin"
      expect(response).to have_http_status(:success)
    end

    it "is inaccessible in demo mode", :demo_mode do
      get("/admin")
      expect(response).to have_http_status(:forbidden)
    end
  end
end
</file>

<file path="spec/requests/admin/link_spec.rb">
require "rails_helper"

RSpec.describe "Admin::Links" do
  it "is inaccessible to anything less than admin", :as_moderator do
    get "/admin/links"
    expect(response).to have_http_status(:unauthorized)
  end

  context "with admin permission", :as_administrator do
    it "is accessible" do
      get "/admin/links"
      expect(response).to have_http_status(:success)
    end

    it "is inaccessible in demo mode", :demo_mode do
      get("/admin/links")
      expect(response).to have_http_status(:forbidden)
    end
  end
end
</file>

<file path="spec/requests/admin/models_spec.rb">
require "rails_helper"

RSpec.describe "Admin::Models" do
  it "is inaccessible to anything less than admin", :as_moderator do
    get "/admin/models"
    expect(response).to have_http_status(:unauthorized)
  end

  context "with admin permission", :as_administrator do
    it "is accessible" do
      get "/admin/models"
      expect(response).to have_http_status(:success)
    end

    it "is inaccessible in demo mode", :demo_mode do
      get("/admin/models")
      expect(response).to have_http_status(:forbidden)
    end
  end
end
</file>

<file path="spec/requests/admin/problem_spec.rb">
require "rails_helper"

RSpec.describe "Admin::Problems" do
  it "is inaccessible to anything less than admin", :as_moderator do
    get "/admin/problems"
    expect(response).to have_http_status(:unauthorized)
  end

  context "with admin permission", :as_administrator do
    it "is accessible" do
      get "/admin/problems"
      expect(response).to have_http_status(:success)
    end

    it "is inaccessible in demo mode", :demo_mode do
      get("/admin/problems")
      expect(response).to have_http_status(:forbidden)
    end
  end
end
</file>

<file path="spec/requests/admin/tags_spec.rb">
require "rails_helper"

RSpec.describe "Admin::Tags" do
  it "is inaccessible to anything less than admin", :as_moderator do
    get "/admin/acts_as_taggable_on_tags"
    expect(response).to have_http_status(:unauthorized)
  end

  context "with admin permission", :as_administrator do
    it "is accessible" do
      get "/admin/acts_as_taggable_on_tags"
      expect(response).to have_http_status(:success)
    end

    it "is inaccessible in demo mode", :demo_mode do
      get("/admin/acts_as_taggable_on_tags")
      expect(response).to have_http_status(:forbidden)
    end
  end
end
</file>

<file path="spec/requests/api/oembed/api_endpoint_spec.rb">
# spec/requests/blogs_spec.rb
require "swagger_helper"

describe "oEmbed" do # rubocop:disable RSpec/EmptyExampleGroup, RSpec/DescribeClass
  path "/oembed" do
    get "generic oEmbed API endpoint" do
      tags "oEmbed"
      parameter name: :url, in: :query, type: :string, required: true
      parameter name: :maxwidth, in: :query, type: :integer, required: false
      parameter name: :maxheight, in: :query, type: :integer, required: false

      response "303", "Redirect to oembed version of the provided URL" do
        let(:url) { "http://www.example.com/models/abc123" }
        let(:maxwidth) { 256 }
        let(:maxheight) { 256 }

        run_test! do |response|
          expect(response).to redirect_to "http://www.example.com/models/abc123.oembed?maxheight=256&maxwidth=256"
        end
      end
    end
  end
end
</file>

<file path="spec/requests/api/oembed/collections_spec.rb">
# spec/requests/blogs_spec.rb
require "swagger_helper"

describe "Collections", :after_first_run, :multiuser do # rubocop:disable RSpec/EmptyExampleGroup
  path "/collections/{id}.oembed" do
    get "oEmbed response for Collections" do
      tags "oEmbed"
      produces "application/json+oembed"
      parameter name: :id, in: :path, type: :string
      parameter name: :maxwidth, in: :query, type: :integer, required: false
      parameter name: :maxheight, in: :query, type: :integer, required: false

      response "200", "Success" do
        schema oneOf:
          [
            {"$ref" => "#/components/schemas/oembed_rich"},
            {"$ref" => "#/components/schemas/oembed_photo"},
            {"$ref" => "#/components/schemas/oembed_video"},
            {"$ref" => "#/components/schemas/oembed_link"}
          ],
          discriminator: {
            propertyName: :type,
            mapping: {
              rich: "#/components/schemas/oembed_rich",
              photo: "#/components/schemas/oembed_photo",
              video: "#/components/schemas/oembed_video",
              link: "#/components/schemas/oembed_link"
            }
          }

        let(:id) { create(:collection, :public).to_param }

        run_test!
      end

      response "404", "Not Found or Unauthorized" do
        let(:id) { create(:collection).to_param }

        run_test!
      end
    end
  end
end
</file>

<file path="spec/requests/api/oembed/creators_spec.rb">
# spec/requests/blogs_spec.rb
require "swagger_helper"

describe "Creators", :after_first_run, :multiuser do # rubocop:disable RSpec/EmptyExampleGroup
  path "/creators/{id}.oembed" do
    get "oEmbed response for Creators" do
      tags "oEmbed"
      produces "application/json+oembed"
      parameter name: :id, in: :path, type: :string
      parameter name: :maxwidth, in: :query, type: :integer, required: false
      parameter name: :maxheight, in: :query, type: :integer, required: false

      response "200", "Success" do
        schema "$ref" => "#/components/schemas/oembed_link"

        let(:id) { create(:creator, :public).to_param }

        run_test!
      end

      response "404", "Not Found or Unauthorized" do
        let(:id) { create(:creator).to_param }

        run_test!
      end
    end
  end
end
</file>

<file path="spec/requests/api/oembed/models_spec.rb">
# spec/requests/blogs_spec.rb
require "swagger_helper"

describe "Models", :after_first_run, :multiuser do # rubocop:disable RSpec/EmptyExampleGroup
  path "/models/{id}.oembed" do
    get "oEmbed response for Models" do
      tags "oEmbed"
      produces "application/json+oembed"
      parameter name: :id, in: :path, type: :string
      parameter name: :maxwidth, in: :query, type: :integer, required: false
      parameter name: :maxheight, in: :query, type: :integer, required: false

      response "200", "Success" do
        schema oneOf:
          [
            {"$ref" => "#/components/schemas/oembed_rich"},
            {"$ref" => "#/components/schemas/oembed_photo"},
            {"$ref" => "#/components/schemas/oembed_video"},
            {"$ref" => "#/components/schemas/oembed_link"}
          ],
          discriminator: {
            propertyName: :type,
            mapping: {
              rich: "#/components/schemas/oembed_rich",
              photo: "#/components/schemas/oembed_photo",
              video: "#/components/schemas/oembed_video",
              link: "#/components/schemas/oembed_link"
            }
          }

        let(:id) { create(:model, :public).to_param }

        run_test!
      end

      response "404", "Not Found, or Unauthorized" do
        let(:id) { create(:model).to_param }

        run_test!
      end
    end
  end
end
</file>

<file path="spec/requests/api/v0/collections_spec.rb">
# spec/requests/blogs_spec.rb
require "swagger_helper"

describe "Collections", :after_first_run, :multiuser do # rubocop:disable RSpec/EmptyExampleGroup
  path "/collections" do
    get "A list of collections" do
      before do
        create_list(:collection, 9)
        create_list(:collection, 3, :public)
      end

      tags "Collections"
      produces Mime[:manyfold_api_v0].to_s
      parameter name: :page, in: :query, type: :integer, example: 1, description: "Specify which page of results to retrieve.", required: false
      parameter name: :order, in: :query, type: :string, enum: ["name", "recent"], description: "Specify order of results; either by name or creation time", example: "name", required: false
      security [client_credentials: ["public", "read"]]

      response "200", "Success" do
        schema type: :object,
          properties: {
            "@context": {"$ref" => "#/components/schemas/jsonld_context"},
            "@id": {type: :string, example: "https://example.com/collections"},
            "@type": {type: :string, example: "hydra:Collection"},
            totalItems: {type: :integer, example: 42},
            member: {
              type: :array,
              items: {
                type: :object,
                properties: {
                  "@id": {type: :string, example: "/collections/abc123", description: "The URL of the collection"},
                  name: {type: :string, example: "Printer Parts", description: "The human name of the collection"}
                },
                required: ["@id", "name"]
              }
            },
            view: {
              type: :object,
              properties: {
                "@id": {type: :string, example: "https://example.com/collections?page=2"},
                "@type": {type: :string, example: "hydra:PartialCollectionView"},
                first: {type: :string, example: "https://example.com/collections?page=1"},
                prev: {type: :string, example: "https://example.com/collections?page=1"},
                next: {type: :string, example: "https://example.com/collections?page=3"},
                last: {type: :string, example: "https://example.com/collections?page=10"}
              },
              required: ["@id", "@type", "first", "last"]
            }
          },
          required: ["@context", "@id", "@type", "totalItems", "member", "view"]

        context "with public scope" do
          let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "public").plaintext_token}" } # rubocop:disable RSpec/VariableName

          run_test! "produces valid linked data" do
            graph = RDF::Graph.new << JSON::LD::API.toRdf(response.parsed_body)
            expect(graph).to be_valid
          end

          run_test! do
            expect(response.parsed_body["totalItems"]).to eq 3
          end
        end

        context "with read scope" do
          let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "read").plaintext_token}" } # rubocop:disable RSpec/VariableName

          run_test! do
            expect(response.parsed_body["totalItems"]).to eq 12
          end
        end
      end

      response "401", "Unauthorized; the request did not provide valid authentication details" do
        let(:Authorization) { nil } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "403", "Forbidden; the provided credentials do not have permission to perform the requested action" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end
    end

    post "Create a new collection" do
      tags "Collections"
      consumes Mime[:manyfold_api_v0].to_s
      produces Mime[:manyfold_api_v0].to_s
      security [client_credentials: ["write"]]
      parameter name: :body, in: :body, schema: ManyfoldApi::V0::CollectionDeserializer.schema_ref

      response "201", "Collection created" do
        schema ManyfoldApi::V0::CollectionSerializer.schema_ref
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "write").plaintext_token}" } # rubocop:disable RSpec/VariableName
        let(:body) { {"name" => "My Favourites"} }

        run_test! "produces valid linked data" do # rubocop:todo RSpec/MultipleExpectations
          # Tests are currently combined because database doesn't seem to clear between run_test! runs
          # Check JSON-LD
          graph = RDF::Graph.new << JSON::LD::API.toRdf(response.parsed_body)
          expect(graph).to be_valid
          # Check attributes
          expect(response.parsed_body["name"]).to eq "My Favourites"
        end
      end

      response "400", "The request structure was incorrect" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "write").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "422", "Creation failed due to invalid data" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "write").plaintext_token}" } # rubocop:disable RSpec/VariableName
        let(:body) { {"name" => create(:collection).name} }

        run_test! do
          expect(response.parsed_body["name"]).to include("has already been taken")
        end
      end

      response "401", "Unauthorized; the request did not provide valid authentication details" do
        let(:Authorization) { nil } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "403", "Forbidden; the provided credentials do not have permission to perform the requested action" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end
    end
  end

  path "/collections/{id}" do
    parameter name: :id, in: :path, type: :string, required: true, example: "abc123"
    let(:collection) { create(:collection, creator: create(:creator), collection: create(:collection)) }
    let(:id) { collection.to_param }

    get "Details of a single collection" do
      tags "Collections"
      produces Mime[:manyfold_api_v0].to_s
      security [client_credentials: ["public", "read"]]

      response "200", "Success" do
        schema ManyfoldApi::V0::CollectionSerializer.schema_ref
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "read").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test! "produces valid linked data" do
          graph = RDF::Graph.new << JSON::LD::API.toRdf(response.parsed_body)
          expect(graph).to be_valid
        end

        run_test! do
          expect(response.parsed_body["name"]).to eq collection.name
        end

        run_test! do
          expect(response.parsed_body["description"]).to eq collection.notes
        end

        run_test! do
          expect(response.parsed_body["caption"]).to eq collection.caption
        end

        run_test! do
          expect(response.parsed_body.dig("links", 0, "url")).to eq "http://example.com"
        end

        run_test! do
          expect(response.parsed_body.dig("creator", "@id")).to include collection.creator.to_param
        end

        run_test! do
          expect(response.parsed_body.dig("isPartOf", "@id")).to include collection.collection.to_param
        end
      end

      response "401", "Unauthorized; the request did not provide valid authentication details" do
        let(:Authorization) { nil } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "403", "Forbidden; the provided credentials do not have permission to perform the requested action" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end
    end

    patch "Update a collection" do
      tags "Collections"
      consumes Mime[:manyfold_api_v0].to_s
      produces Mime[:manyfold_api_v0].to_s
      security [client_credentials: ["write"]]
      parameter name: :body, in: :body, schema: ManyfoldApi::V0::CollectionDeserializer.schema_ref

      response "200", "Collection updated" do
        schema ManyfoldApi::V0::CollectionSerializer.schema_ref
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "write").plaintext_token}" } # rubocop:disable RSpec/VariableName
        let(:creator) { create(:creator) }
        let(:parent_collection) { create(:collection) }
        let(:body) {
          {
            "name" => "My Favourites",
            "creator" => {"@id" => "http://localhost:3214/creators/#{creator.to_param}"},
            "isPartOf" => {"@id" => "http://localhost:3214/collections/#{parent_collection.to_param}"}
          }
        }

        run_test! "produces valid linked data" do
          graph = RDF::Graph.new << JSON::LD::API.toRdf(response.parsed_body)
          expect(graph).to be_valid
        end

        run_test! do
          expect(response.parsed_body["name"]).to eq "My Favourites"
        end

        run_test! do
          expect(response.parsed_body.dig("creator", "@id")).to eq "http://localhost:3214/creators/#{creator.to_param}"
        end

        run_test! do
          expect(response.parsed_body.dig("isPartOf", "@id")).to eq "http://localhost:3214/collections/#{parent_collection.to_param}"
        end
      end

      response "400", "The request structure was incorrect" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "write").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "422", "Creation failed due to invalid data" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "write").plaintext_token}" } # rubocop:disable RSpec/VariableName
        let(:body) { {"name" => create(:collection).name} }

        run_test! do
          expect(response.parsed_body["name"]).to include("has already been taken")
        end
      end

      response "401", "Unauthorized; the request did not provide valid authentication details" do
        let(:Authorization) { nil } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "403", "Forbidden; the provided credentials do not have permission to perform the requested action" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end
    end

    delete "Remove a collection" do
      tags "Collections"
      produces Mime[:manyfold_api_v0].to_s
      security [client_credentials: ["delete"]]
      response "204", "Success" do
        schema type: nil
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "delete").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "401", "Unauthorized; the request did not provide valid authentication details" do
        let(:Authorization) { nil } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "403", "Forbidden; the provided credentials do not have permission to perform the requested action" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end
    end
  end
end
</file>

<file path="spec/requests/api/v0/creators_spec.rb">
# spec/requests/blogs_spec.rb
require "swagger_helper"

describe "Creators", :after_first_run, :multiuser do # rubocop:disable RSpec/EmptyExampleGroup
  path "/creators" do
    get "A list of creators" do
      before do
        create_list(:creator, 9)
        create_list(:creator, 3, :public)
      end

      tags "Creators"
      produces Mime[:manyfold_api_v0].to_s
      parameter name: :page, in: :query, type: :integer, example: 1, description: "Specify which page of results to retrieve.", required: false
      parameter name: :order, in: :query, type: :string, enum: ["name", "recent"], description: "Specify order of results; either by name or creation time", example: "name", required: false
      security [client_credentials: ["public", "read"]]

      response "200", "Success" do
        schema type: :object,
          properties: {
            "@context": {"$ref" => "#/components/schemas/jsonld_context"},
            "@id": {type: :string, example: "https://example.com/creators"},
            "@type": {type: :string, example: "hydra:Collection"},
            totalItems: {type: :integer, example: 42},
            member: {
              type: :array,
              items: {
                type: :object,
                properties: {
                  "@id": {type: :string, example: "/creators/abc123", description: "The URL of the creator"},
                  name: {type: :string, example: "Fred", description: "The human name of the creator"}
                },
                required: ["@id", "name"]
              }
            },
            view: {
              type: :object,
              properties: {
                "@id": {type: :string, example: "https://example.com/creators?page=2"},
                "@type": {type: :string, example: "hydra:PartialCollectionView"},
                first: {type: :string, example: "https://example.com/creators?page=1"},
                prev: {type: :string, example: "https://example.com/creators?page=1"},
                next: {type: :string, example: "https://example.com/creators?page=3"},
                last: {type: :string, example: "https://example.com/creators?page=10"}
              },
              required: ["@id", "@type", "first", "last"]
            }
          },
          required: ["@context", "@id", "@type", "totalItems", "member", "view"]

        context "with public scope" do
          let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "public").plaintext_token}" } # rubocop:disable RSpec/VariableName

          run_test! do
            expect(response.parsed_body["totalItems"]).to eq 3
          end
        end

        context "with read scope" do
          let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "read").plaintext_token}" } # rubocop:disable RSpec/VariableName

          run_test! "produces valid linked data" do
            graph = RDF::Graph.new << JSON::LD::API.toRdf(response.parsed_body)
            expect(graph).to be_valid
          end

          run_test! do
            expect(response.parsed_body["totalItems"]).to eq 12
          end
        end
      end

      response "401", "Unauthorized; the request did not provide valid authentication details" do
        let(:Authorization) { nil } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "403", "Forbidden; the provided credentials do not have permission to perform the requested action" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end
    end

    post "Create a creator" do
      tags "Creators"
      consumes Mime[:manyfold_api_v0].to_s
      produces Mime[:manyfold_api_v0].to_s
      security [client_credentials: ["write"]]
      parameter name: :body, in: :body, schema: ManyfoldApi::V0::CreatorDeserializer.schema_ref

      response "201", "Creator created" do
        schema ManyfoldApi::V0::CreatorSerializer.schema_ref
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "write").plaintext_token}" } # rubocop:disable RSpec/VariableName
        let(:body) { {"name" => "Bruce Wayne"} }

        run_test! "produces valid linked data" do # rubocop:todo RSpec/MultipleExpectations
          # Tests are currently combined because database doesn't seem to clear between run_test! runs
          # Check JSON-LD
          graph = RDF::Graph.new << JSON::LD::API.toRdf(response.parsed_body)
          expect(graph).to be_valid
          # Check attributes
          expect(response.parsed_body["name"]).to eq "Bruce Wayne"
        end
      end

      response "400", "The request structure was incorrect" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "write").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "422", "Creation failed due to invalid data" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "write").plaintext_token}" } # rubocop:disable RSpec/VariableName
        let(:body) { {"name" => create(:creator).name} }

        run_test! do
          expect(response.parsed_body["name"]).to include("has already been taken")
        end
      end

      response "401", "Unauthorized; the request did not provide valid authentication details" do
        let(:Authorization) { nil } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "403", "Forbidden; the provided credentials do not have permission to perform the requested action" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end
    end
  end

  path "/creators/{id}" do
    parameter name: :id, in: :path, type: :string, required: true, example: "abc123"

    let(:user) { create(:user) }
    let(:creator) { create(:creator) }
    let(:id) { creator.to_param }

    get "Details of a single creator" do
      tags "Creators"
      produces Mime[:manyfold_api_v0].to_s
      security [client_credentials: ["public", "read"]]

      response "200", "Success" do
        schema ManyfoldApi::V0::CreatorSerializer.schema_ref
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "read").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test! "produces valid linked data" do
          graph = RDF::Graph.new << JSON::LD::API.toRdf(response.parsed_body)
          expect(graph).to be_valid
        end
      end

      response "401", "Unauthorized; the request did not provide valid authentication details" do
        let(:Authorization) { nil } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "403", "Forbidden; the provided credentials do not have permission to perform the requested action" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end
    end

    patch "Update a creator" do
      tags "Creators"
      consumes Mime[:manyfold_api_v0].to_s
      produces Mime[:manyfold_api_v0].to_s
      security [client_credentials: ["write"]]
      parameter name: :body, in: :body, schema: ManyfoldApi::V0::CreatorDeserializer.schema_ref

      response "200", "Creator updated" do
        schema ManyfoldApi::V0::CreatorSerializer.schema_ref
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "write").plaintext_token}" } # rubocop:disable RSpec/VariableName
        let(:body) { {"name" => "Bruce Wayne"} }

        run_test! "produces valid linked data" do
          graph = RDF::Graph.new << JSON::LD::API.toRdf(response.parsed_body)
          expect(graph).to be_valid
        end

        run_test! do
          expect(response.parsed_body["name"]).to eq "Bruce Wayne"
        end
      end

      response "400", "The request structure was incorrect" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "write").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "422", "Creation failed due to invalid data" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "write").plaintext_token}" } # rubocop:disable RSpec/VariableName
        let(:body) { {"name" => create(:creator).name} }

        run_test! do
          expect(response.parsed_body["name"]).to include("has already been taken")
        end
      end

      response "401", "Unauthorized; the request did not provide valid authentication details" do
        let(:Authorization) { nil } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "403", "Forbidden; the provided credentials do not have permission to perform the requested action" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end
    end

    delete "Remove a creator" do
      tags "Creators"
      produces Mime[:manyfold_api_v0].to_s
      security [client_credentials: ["delete"]]
      response "204", "Success" do
        schema type: nil
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "delete").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "401", "Unauthorized; the request did not provide valid authentication details" do
        let(:Authorization) { nil } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "403", "Forbidden; the provided credentials do not have permission to perform the requested action" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end
    end
  end
end
</file>

<file path="spec/requests/api/v0/model_files_spec.rb">
# spec/requests/blogs_spec.rb
require "swagger_helper"

describe "ModelFiles", :after_first_run, :multiuser do # rubocop:disable RSpec/EmptyExampleGroup
  path "/models/{model_id}/model_files" do
    post "Add a new file to a model" do
      tags "Files"
      consumes Mime[:manyfold_api_v0].to_s
      produces Mime[:manyfold_api_v0].to_s
      security [client_credentials: ["write"]]

      parameter name: :model_id, in: :path, type: :string, required: true, example: "abc123"
      parameter name: :body, in: :body, schema: ManyfoldApi::V0::UploadedFileDeserializer.schema_ref

      let(:model) { create(:model, creator: create(:creator), collection: create(:collection)) }
      let(:model_id) { model.to_param }

      response "202", "Accepted; the files will be added to the model after processing" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "write").plaintext_token}" } # rubocop:disable RSpec/VariableName
        let(:body) {
          {
            files: [
              id: "https://example.com/uploads/tus_id",
              name: "test.stl"
            ]
          }
        }

        run_test! do # rubocop:disable RSpec/ExampleLength
          expect(ProcessUploadedFileJob).to have_been_enqueued.with(Library.first.id, {
            id: "https://example.com/uploads/tus_id",
            storage: "cache",
            metadata: {
              filename: "test.stl"
            }
          }, model: model).once
        end
      end

      response "401", "Unauthorized; the request did not provide valid authentication details" do
        let(:Authorization) { nil } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "403", "Forbidden; the provided credentials do not have permission to perform the requested action" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end
    end
  end

  path "/models/{model_id}/model_files/{id}" do
    parameter name: :model_id, in: :path, type: :string, required: true, example: "abc123"
    parameter name: :id, in: :path, type: :string, required: true, example: "def456"

    let(:model) { create(:model, creator: create(:creator), collection: create(:collection)) }
    let(:supported_file) { create(:model_file, model: model, presupported: true) }
    let(:file) { create(:model_file, model: model, presupported_version: supported_file) }

    let(:model_id) { model.to_param }
    let(:id) { file.to_param }

    get "Details of a single file in a model" do
      tags "Files"
      produces Mime[:manyfold_api_v0].to_s
      security [client_credentials: ["public", "read"]]

      response "200", "Success" do
        schema ManyfoldApi::V0::ModelFileSerializer.schema_ref

        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "read").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test! "produces valid linked data" do
          graph = RDF::Graph.new << JSON::LD::API.toRdf(response.parsed_body)
          expect(graph).to be_valid
        end
      end

      response "401", "Unauthorized; the request did not provide valid authentication details" do
        let(:Authorization) { nil } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "403", "Forbidden; the provided credentials do not have permission to perform the requested action" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end
    end

    patch "Update file details" do
      tags "Files"
      consumes Mime[:manyfold_api_v0].to_s
      produces Mime[:manyfold_api_v0].to_s
      security [client_credentials: ["write"]]
      parameter name: :body, in: :body, schema: ManyfoldApi::V0::ModelFileDeserializer.schema_ref

      response "200", "File updated" do
        schema ManyfoldApi::V0::ModelFileSerializer.schema_ref
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "write").plaintext_token}" } # rubocop:disable RSpec/VariableName
        let(:new_supported_file) { create(:model_file, model: model, presupported: true) }
        let(:body) {
          {
            "description" => "lorem ipsum etc",
            "related" => [{
              "@id" => "http://localhost:3214/models/#{model_id}/model_files/#{new_supported_file.to_param}",
              "relationship" => "presupported_version"
            }]
          }
        }

        run_test! "produces valid linked data" do
          graph = RDF::Graph.new << JSON::LD::API.toRdf(response.parsed_body)
          expect(graph).to be_valid
        end

        run_test! do
          expect(response.parsed_body["description"]).to eq "lorem ipsum etc"
        end

        run_test! do
          expect(response.parsed_body.dig("related", 0, "@id")).to eq "http://localhost:3214/models/#{model_id}/model_files/#{new_supported_file.to_param}"
        end
      end

      response "400", "The request structure was incorrect" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "write").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "422", "Update failed due to invalid data" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "write").plaintext_token}" } # rubocop:disable RSpec/VariableName
        let(:body) { {"filename" => ""} }

        run_test! do
          expect(response.parsed_body["filename"]).to include("can't be blank")
        end
      end

      response "401", "Unauthorized; the request did not provide valid authentication details" do
        let(:Authorization) { nil } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "403", "Forbidden; the provided credentials do not have permission to perform the requested action" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end
    end

    delete "Remove a single file" do
      tags "Files"
      produces Mime[:manyfold_api_v0].to_s
      security [client_credentials: ["delete"]]
      response "204", "Success" do
        schema type: nil
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "delete").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "401", "Unauthorized; the request did not provide valid authentication details" do
        let(:Authorization) { nil } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "403", "Forbidden; the provided credentials do not have permission to perform the requested action" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end
    end
  end
end
</file>

<file path="spec/requests/api/v0/models_spec.rb">
# spec/requests/blogs_spec.rb
require "swagger_helper"

describe "Models", :after_first_run, :multiuser do # rubocop:disable RSpec/EmptyExampleGroup
  path "/models" do
    get "A list of models" do
      before do
        create_list(:model, 9, creator: create(:creator), collection: create(:collection))
        create_list(:model, 3, :public, creator: create(:creator, :public), collection: create(:collection, :public))
      end

      tags "Models"
      produces Mime[:manyfold_api_v0].to_s
      parameter name: :page, in: :query, type: :integer, example: 1, description: "Specify which page of results to retrieve.", required: false
      parameter name: :order, in: :query, type: :string, enum: ["name", "recent"], description: "Specify order of results; either by name or creation time", example: "name", required: false
      parameter name: :creator, in: :query, type: :string, description: "The ID of a creator to filter the model list", example: "abc123", required: false
      parameter name: :collection, in: :query, type: :string, description: "The ID of a collection to filter the model list", example: "abc123", required: false
      security [client_credentials: ["public", "read"]]

      response "200", "Success" do
        schema type: :object,
          properties: {
            "@context": {"$ref" => "#/components/schemas/jsonld_context"},
            "@id": {type: :string, example: "https://example.com/models"},
            "@type": {type: :string, example: "hydra:Collection"},
            totalItems: {type: :integer, example: 42},
            member: {
              type: :array,
              items: {
                type: :object,
                properties: {
                  "@id": {type: :string, example: "/models/abc123", description: "The URL of the model"},
                  "@type": {type: :string, example: "3DModel"},
                  name: {type: :string, example: "Model", description: "The human name of the model"}
                },
                required: ["@id", "name"]
              }
            },
            view: {
              type: :object,
              properties: {
                "@id": {type: :string, example: "https://example.com/models?page=2"},
                "@type": {type: :string, example: "hydra:PartialCollectionView"},
                first: {type: :string, example: "https://example.com/models?page=1"},
                prev: {type: :string, example: "https://example.com/models?page=1"},
                next: {type: :string, example: "https://example.com/models?page=3"},
                last: {type: :string, example: "https://example.com/models?page=10"}
              },
              required: ["@id", "@type", "first", "last"]
            }
          },
          required: ["@context", "@id", "@type", "totalItems", "member", "view"]

        context "with public scope" do
          let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "public").plaintext_token}" } # rubocop:disable RSpec/VariableName

          run_test! do
            expect(response.parsed_body["totalItems"]).to eq 3
          end
        end

        context "with read scope" do
          let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "read").plaintext_token}" } # rubocop:disable RSpec/VariableName

          run_test! "produces valid linked data" do
            graph = RDF::Graph.new << JSON::LD::API.toRdf(response.parsed_body)
            expect(graph).to be_valid
          end

          run_test! do
            expect(response.parsed_body["totalItems"]).to eq 12
          end
        end
      end

      response "401", "Unauthorized; the request did not provide valid authentication details" do
        let(:Authorization) { nil } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "403", "Forbidden; the provided credentials do not have permission to perform the requested action" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end
    end

    path "/models" do
      post "Create new models from uploaded files" do
        tags "Models"
        consumes Mime[:manyfold_api_v0].to_s
        produces Mime[:manyfold_api_v0].to_s
        security [client_credentials: ["write"]]

        parameter name: :body, in: :body, schema: ManyfoldApi::V0::UploadedModelDeserializer.schema_ref

        before { create(:library) }

        response "202", "Accepted; the files will be processed and turned into new models" do
          let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "write").plaintext_token}" } # rubocop:disable RSpec/VariableName
          let(:body) {
            {
              files: [
                id: "https://example.com/uploads/tus_id",
                name: "test.stl"
              ],
              "spdx:license": {
                licenseId: "MIT"
              },
              sensitive: true,
              keywords: ["tag1", "tag2"]
            }
          }

          run_test! do # rubocop:disable RSpec/ExampleLength
            expect(ProcessUploadedFileJob).to have_been_enqueued.with(
              Library.first.id,
              {
                id: "https://example.com/uploads/tus_id",
                storage: "cache",
                metadata: {
                  filename: "test.stl"
                }
              },
              owner: User.last,
              creator_id: nil,
              collection_id: nil,
              license: "MIT",
              sensitive: true,
              tags: ["tag1", "tag2"]
            ).once
          end
        end

        response "401", "Unauthorized; the request did not provide valid authentication details" do
          let(:Authorization) { nil } # rubocop:disable RSpec/VariableName

          run_test!
        end

        response "403", "Forbidden; the provided credentials do not have permission to perform the requested action" do
          let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "").plaintext_token}" } # rubocop:disable RSpec/VariableName

          run_test!
        end
      end
    end
  end

  path "/models/{id}" do
    parameter name: :id, in: :path, type: :string, required: true, example: "abc123"
    let(:model) { create(:model) }
    let(:id) { model.to_param }

    get "Details of a single model" do
      tags "Models"
      produces Mime[:manyfold_api_v0].to_s
      security [client_credentials: ["public", "read"]]

      response "200", "Success" do
        schema ManyfoldApi::V0::ModelSerializer.schema_ref

        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "read").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test! "produces valid linked data" do
          graph = RDF::Graph.new << JSON::LD::API.toRdf(response.parsed_body)
          expect(graph).to be_valid
        end
      end

      response "401", "Unauthorized; the request did not provide valid authentication details" do
        let(:Authorization) { nil } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "403", "Forbidden; the provided credentials do not have permission to perform the requested action" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end
    end

    patch "Update a model" do
      tags "Models"
      consumes Mime[:manyfold_api_v0].to_s
      produces Mime[:manyfold_api_v0].to_s
      security [client_credentials: ["write"]]
      parameter name: :body, in: :body, schema: ManyfoldApi::V0::ModelDeserializer.schema_ref

      response "200", "Model updated" do
        schema ManyfoldApi::V0::ModelSerializer.schema_ref
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "write").plaintext_token}" } # rubocop:disable RSpec/VariableName
        let(:preview_file) { create(:model_file, model: model) }
        let(:body) {
          {"name" => "New Model Name",
           "preview_file" => {
             "@id" => "http://localhost:3214/models/#{id}/model_files/#{preview_file.to_param}"
           }}
        }

        run_test! "produces valid linked data" do
          graph = RDF::Graph.new << JSON::LD::API.toRdf(response.parsed_body)
          expect(graph).to be_valid
        end

        run_test! do
          expect(response.parsed_body["name"]).to eq "New Model Name"
        end

        run_test! do
          expect(response.parsed_body.dig("preview_file", "@id")).to eq "http://localhost:3214/models/#{id}/model_files/#{preview_file.to_param}"
        end
      end

      response "400", "The request structure was incorrect" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "write").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "422", "Update failed due to invalid data" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "write").plaintext_token}" } # rubocop:disable RSpec/VariableName
        let(:body) { {"spdx:license" => {"licenseId" => "Ceci n'est pas un License"}} }

        run_test! do
          expect(response.parsed_body["license"]).to include("is not a valid license")
        end
      end

      response "401", "Unauthorized; the request did not provide valid authentication details" do
        let(:Authorization) { nil } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "403", "Forbidden; the provided credentials do not have permission to perform the requested action" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end
    end

    delete "Remove an entire model" do
      tags "Models"
      produces Mime[:manyfold_api_v0].to_s
      security [client_credentials: ["delete"]]
      response "204", "Success" do
        schema type: nil
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "delete").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "401", "Unauthorized; the request did not provide valid authentication details" do
        let(:Authorization) { nil } # rubocop:disable RSpec/VariableName

        run_test!
      end

      response "403", "Forbidden; the provided credentials do not have permission to perform the requested action" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "").plaintext_token}" } # rubocop:disable RSpec/VariableName

        run_test!
      end
    end
  end
end
</file>

<file path="spec/requests/api/v0/uploads_spec.rb">
require "swagger_helper"

# rubocop:disable RSpec/VariableName

describe "File Uploading", :after_first_run, :multiuser do # rubocop:disable RSpec/EmptyExampleGroup
  path "/upload" do
    options "Details of upload capabilities" do
      tags "File Uploading"
      description "Manyfold uses the Tus protocol for resumable uploading; see https://tus.io/protocols/resumable-upload for full details."
      produces Mime[:manyfold_api_v0].to_s
      security [client_credentials: ["upload"]]

      response "204", "Upload capabilities" do
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "upload").plaintext_token}" }

        header "Tus-Resumable", schema: {
          type: :string,
          example: "1.0.0",
          description: "Tus protocol version"
        }
        header "Tus-Version", schema: {
          type: :string,
          example: "1.0.0,0.2.2,0.2.1",
          description: "Comma separated versions of the Tus protocol supported by the server"
        }
        header "Tus-Extension", schema: {
          type: :string,
          example: "creation,termination,expiration,concatenation",
          description: "Comma separated list of Tus protocol extensions supported by the server"
        }
        header "Tus-Max-Size", schema: {
          type: :integer,
          example: 1_073_741_824,
          description: "The maximum file size that can be uploaded to the server"
        }

        run_test!
      end
    end

    post "Create a new upload" do
      tags "File Uploading"
      description "Manyfold uses the Tus protocol for resumable uploading; see https://tus.io/protocols/resumable-upload for full details."
      produces Mime[:manyfold_api_v0].to_s

      parameter in: :header, name: "Tus-Resumable", description: "Tus protocol version", example: "1.0.0", required: true
      parameter in: :header, name: "Upload-Length", description: "Total size of upload, in bytes", example: 0, required: true
      parameter in: :header, name: "Upload-Metadata", description: "See https://tus.io/protocols/resumable-upload#upload-metadata", required: false
      security [client_credentials: ["upload"]]

      let(:"Tus-Resumable") { "1.0.0" }

      response "201", "Upload created successfully" do
        let(:"Upload-Length") { 10 }
        let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "upload").plaintext_token}" }

        header "Location", schema: {
          type: :string,
          example: "/upload/24e533e02ec3bc40c387f1a0e460e216",
          description: "URL for the newly created upload"
        }

        run_test!
      end

      context "without upload scope" do
        response "403", "Forbidden" do
          let(:"Upload-Length") { 10 }
          let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "").plaintext_token}" }

          run_test!
        end
      end

      context "without authentication details" do
        response "401", "Unauthorized" do
          let(:"Upload-Length") { 10 }
          let(:Authorization) { nil }

          run_test!
        end
      end
    end
  end

  path "/upload/{id}" do
    parameter in: :path, name: :id, example: "24e533e02ec3bc40c387f1a0e460e216"
    parameter in: :header, name: "Tus-Resumable", description: "Tus protocol version", example: "1.0.0", required: true

    let(:Authorization) { "Bearer #{create(:oauth_access_token, scopes: "upload").plaintext_token}" }
    let(:"Tus-Resumable") { "1.0.0" }
    let(:id) { "24e533e02ec3bc40c387f1a0e460e216" }

    around do |example|
      storage = Tus::Storage::Filesystem.new("tmp")
      Tus::Server.opts[:storage] = storage
      storage.create_file(id)
      storage.update_info(id, {"Upload-Length" => 1024, "Upload-Offset" => 384})
      example.run
      storage.delete_file(id)
    end

    head "Get status of upload" do
      tags "File Uploading"
      description "Manyfold uses the Tus protocol for resumable uploading; see https://tus.io/protocols/resumable-upload for full details."
      produces Mime[:manyfold_api_v0].to_s

      security [client_credentials: ["upload"]]

      response "204", "Upload status" do
        header "Tus-Resumable", schema: {
          type: :string,
          example: "1.0.0",
          description: "Tus protocol version"
        }
        header "Upload-Length", schema: {
          type: :integer,
          example: 1024,
          description: "The expected total length of the file to be uploaded"
        }
        header "Upload-Offset", schema: {
          type: :integer,
          example: 384,
          description: "The number of bytes of the file that have been uploaded so far"
        }

        run_test!
      end
    end

    patch "Upload bytes at specified offset" do
      tags "File Uploading"
      description "Manyfold uses the Tus protocol for resumable uploading; see https://tus.io/protocols/resumable-upload for full details."
      produces Mime[:manyfold_api_v0].to_s

      parameter in: :header, name: "Upload-Offset", description: "File offset for bytes being sent. Must be the same as current Upload-Offset value reported by the HEAD request.", example: 384, required: true
      parameter in: :header, name: "Content-Length", description: "The number of bytes being sent in the POST body", example: 128, required: true
      parameter in: :body, name: "bytes", required: true, schema: {type: :string, format: :byte}, example: "<binary data>"
      consumes "application/offset+octet-stream"
      security [client_credentials: ["upload"]]

      response "204", "Upload successful" do
        header "Upload-Offset", schema: {
          type: :integer,
          description: "The new upload offset after the uploaded bytes have been added",
          example: 512
        }

        let(:"Upload-Offset") { 384 }
        let(:"Content-Length") { 128 }
        let(:bytes) { SecureRandom.bytes(128) }

        run_test!
      end
    end
  end
end
# rubocop:enable RSpec/VariableName
</file>

<file path="spec/requests/api/nodeinfo_spec.rb">
# spec/requests/blogs_spec.rb
require "swagger_helper"

describe "NodeInfo" do # rubocop:disable RSpec/EmptyExampleGroup
  path "/.well-known/nodeinfo" do
    get "Discovery URL for NodeInfo protocol" do
      tags "NodeInfo"
      produces "application/json; profile=\"http://nodeinfo.diaspora.software/ns/schema/2.0#\""

      response "200", "Success" do
        schema type: :object,
          properties: {
            links: {
              type: :array,
              items: {
                type: :object,
                properties: {
                  rel: {type: :string, example: "https://nodeinfo.diaspora.software/ns/schema/2.0"},
                  href: {type: :string, example: "/nodeinfo/2.0", description: "The URL to the full NodeInfo document"}
                }
              }
            }
          },
          required: ["links"]

        run_test!
      end
    end
  end

  path "/nodeinfo/2.0" do
    get "Get server metadata in NodeInfo 2.0 format" do
      tags "NodeInfo"
      produces "application/json; profile=\"http://nodeinfo.diaspora.software/ns/schema/2.0#\""

      response "200", "Success" do
        schema type: :object,
          properties: {
            version: {type: :string, example: "2.0"},
            software: {
              type: :object,
              properties: {
                name: {type: :string, example: "Manyfold"},
                version: {type: :string, example: "v0.103.0"}
              }
            },
            protocols: {
              type: :array,
              items: {
                type: :string,
                example: "activitypub"
              }
            },
            services: {
              type: :object,
              properties: {
                inbound: {type: :array, items: {type: :string}, example: []},
                outbound: {type: :array, items: {type: :string}, example: []}
              }
            },
            openRegistrations: {type: :boolean},
            usage: {
              type: :object,
              properties: {
                users: {
                  type: :object,
                  properties: {
                    total: {type: :integer},
                    activeMonth: {type: :integer},
                    activeHalfyear: {type: :integer}
                  }
                }
              }
            },
            metadata: {type: :object}
          },
          required: ["version", "software", "protocols", "openRegistrations"]

        run_test!
      end
    end
  end
end
</file>

<file path="spec/requests/settings/users_spec.rb">
require "rails_helper"

RSpec.describe "/settings/users", :multiuser do
  describe "GET /index", :as_moderator do
    before { create(:user) }

    it "renders a successful response" do
      get "/settings/users"
      expect(response).to be_successful
    end
  end

  describe "GET /show", :as_moderator do
    let(:user) { create(:user) }

    it "renders a successful response" do
      get "/settings/users/#{user.to_param}"
      expect(response).to be_successful
    end
  end

  describe "GET /new", :as_moderator do
    it "renders a successful response" do
      get new_settings_user_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit", :as_moderator do
    let(:user) { create(:user) }

    it "renders a successful response" do
      get "/settings/users/#{user.to_param}/edit"
      expect(response).to be_successful
    end
  end

  describe "POST /create", :as_moderator do
    context "with valid parameters" do
      it "creates a new Settings::User" do
        attributes = attributes_for(:user)
        attributes[:password_confirmation] = attributes[:password]
        expect {
          post "/settings/users", params: {user: attributes}
        }.to change(User, :count).by(1)
      end

      it "redirects to the created user" do
        attributes = attributes_for(:user)
        attributes[:password_confirmation] = attributes[:password]
        post "/settings/users", params: {user: attributes}
        expect(response).to redirect_to(settings_user_url(User.last))
      end
    end

    context "with invalid parameters" do
      let(:invalid_attributes) { {email: "invalid"} }

      it "does not create a new Settings::User" do
        expect {
          post "/settings/users", params: {user: invalid_attributes}
        }.not_to change(User, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post "/settings/users", params: {user: invalid_attributes}
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update assigning roles" do
    let(:user) { create(:user) }

    before do
      Role::ROLES.each do |r|
        Role.find_or_create_by name: r
      end
    end

    context "when administrator", :as_administrator do
      it "can grant admin permissions" do
        patch "/settings/users/#{user.to_param}",
          params: {user: {role_ids: [Role.find_by!(name: :administrator).id.to_s]}}
        expect(user.reload.is_administrator?).to be true
      end

      it "can grant moderator permissions" do
        patch "/settings/users/#{user.to_param}",
          params: {user: {role_ids: [Role.find_by!(name: :moderator).id.to_s]}}
        expect(user.reload.is_moderator?).to be true
      end
    end

    context "when moderator", :as_moderator do
      it "cannot grant admin permissions" do
        patch "/settings/users/#{user.to_param}",
          params: {user: {role_ids: [Role.find_by!(name: :administrator).id.to_s]}}
        expect(user.reload.is_administrator?).to be false
      end

      it "cannot grant moderator permissions" do
        patch "/settings/users/#{user.to_param}",
          params: {user: {role_ids: [Role.find_by!(name: :moderator).id.to_s]}}
        expect(user.reload.is_moderator?).to be false
      end

      it "cannot grant contributor permissions" do
        patch "/settings/users/#{user.to_param}",
          params: {user: {role_ids: [Role.find_by!(name: :contributor).id.to_s]}}
        expect(user.reload.is_contributor?).to be true
      end
    end
  end

  describe "PATCH /update", :as_moderator do
    let(:user) { create(:user) }

    context "with valid parameters" do
      let(:attributes) { attributes_for(:user) }

      it "updates the requested user" do # rubocop:todo RSpec/MultipleExpectations
        patch "/settings/users/#{user.to_param}", params: {user: attributes}
        user.reload
        expect(user.email).to eq attributes[:email]
        expect(user.username).to eq attributes[:username]
      end

      it "redirects to the user" do
        patch "/settings/users/#{user.to_param}", params: {user: attributes}
        user.reload
        expect(response).to redirect_to("/settings/users/#{user.to_param}")
      end
    end

    context "with invalid parameters" do
      let(:attributes) { {email: "invalid"} }

      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        patch "/settings/users/#{user.to_param}", params: {user: attributes}
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end

    context "with password reset parameter" do
      it "sets a reset token" do
        patch "/settings/users/#{user.to_param}", params: {reset: true}
        user.reload
        expect(user.reset_password_token).to be_present
      end

      it "returns to user page" do
        patch "/settings/users/#{user.to_param}", params: {reset: true}
        expect(response).to redirect_to("/settings/users/#{user.to_param}")
      end
    end
  end
end
</file>

<file path="spec/requests/users/passwords_spec.rb">
require "rails_helper"

# .well-known/change-password GET    /.well-known/change-password
#  new_user_password          GET    /users/password/new(.:format)
# edit_user_password          GET    /users/password/edit(.:format)
#      user_password          PATCH  /users/password(.:format)
#                             PUT    /users/password(.:format)
#                             POST   /users/password(.:format)

RSpec.describe "Users::Passwords" do
  let(:new_password) { Faker::Internet.password max_length: 32, min_length: 32, mix_case: true, special_characters: true }
  let(:reset_password_token) { SecureRandom.hex }
  let!(:admin) {
    create(:admin)
  }
  let(:post_options) {
    {
      user: {
        email: admin.email
      }
    }
  }
  let(:patch_options) {
    {
      user: {
        password: new_password,
        password_confirmation: new_password
      }
    }
  }

  context "when signed out" do
    describe "GET /.well-known/change-password" do
      it "redirects to password change" do
        get "/.well-known/change-password"
        expect(response).to redirect_to("/users/edit")
      end
    end
  end

  context "when in single user mode", :singleuser do
    context "when signed out" do
      describe "GET /users/password/new" do
        it "raises an error" do
          get "/users/password/new"
          expect(response).to have_http_status(:forbidden)
        end
      end

      describe "POST /users/password" do
        it "raises an error" do
          post "/users/password", params: post_options
          expect(response).to have_http_status(:forbidden)
        end
      end

      describe "GET /users/password/edit" do
        it "redirects to sign in page" do
          get "/users/password/edit"
          expect(response).to redirect_to("/users/sign_in")
        end
      end

      describe "PATCH /users/password" do
        it "redirects to sign in page" do
          patch "/users/password", params: patch_options
          expect(response).to have_http_status(:forbidden)
        end
      end
    end

    context "when signed in" do
      before { sign_in admin }

      describe "GET /users/password/new" do
        it "redirects to root" do
          get "/users/password/new"
          expect(response).to redirect_to("/")
        end
      end

      describe "POST /users/password" do
        it "redirects to root" do
          post "/users/password", params: post_options
          expect(response).to redirect_to("/")
        end
      end

      describe "GET /users/password/edit" do
        it "redirects to root" do
          get "/users/password/edit"
          expect(response).to redirect_to("/")
        end
      end

      describe "PATCH /users/password" do
        it "redirects to root" do
          patch "/users/password", params: patch_options
          expect(response).to redirect_to("/")
        end
      end
    end
  end

  context "when in multiuser mode", :multiuser do
    context "when signed out" do
      describe "GET /users/password/new" do
        it "shows the forgot password page" do
          get "/users/password/new"
          expect(response).to have_http_status(:success)
        end
      end

      describe "POST /users/password" do
        it "redirects to sign in page" do
          post "/users/password", params: post_options
          expect(response).to redirect_to("/users/sign_in")
        end

        it "sends a password reset email" do # rubocop:disable RSpec/ExampleLength
          expect {
            post "/users/password", params: post_options
          }.to send_email(
            from: "notifications@localhost",
            to: admin.email,
            subject: "Reset password instructions"
          )
        end
      end

      describe "GET /users/password/edit" do
        it "redirects to sign in page if the reset token isn't provided" do
          get "/users/password/edit"
          expect(response).to redirect_to("/users/sign_in")
        end

        it "shows the change password page if reset token is provided" do
          get "/users/password/edit", params: {reset_password_token: "abcdef"}
          expect(response).to have_http_status(:success)
        end
      end

      describe "PATCH /users/password" do # rubocop:disable RSpec/MultipleMemoizedHelpers
        let(:reset_token) {
          admin.send_reset_password_instructions
        }

        before do
          patch_options[:user][:reset_password_token] = reset_token
          patch "/users/password", params: patch_options
        end

        it "redirects to root" do
          expect(response).to redirect_to("/")
        end

        it "changes the password" do
          admin.reload
          expect(admin.valid_password?(new_password)).to be true
        end
      end
    end

    context "when signed in" do
      before { sign_in admin }

      describe "GET /users/password/new" do
        it "redirects to root" do
          get "/users/password/new"
          expect(response).to redirect_to("/")
        end
      end

      describe "POST /users/password" do
        it "redirects to root" do
          post "/users/password", params: post_options
          expect(response).to redirect_to("/")
        end
      end

      describe "GET /users/password/edit" do
        it "redirects to root" do
          get "/users/password/edit"
          expect(response).to redirect_to("/")
        end
      end

      describe "PATCH /users/password" do
        it "redirects to root" do
          patch "/users/password", params: patch_options
          expect(response).to redirect_to("/")
        end
      end
    end
  end
end
</file>

<file path="spec/requests/users/registrations_spec.rb">
require "rails_helper"

# cancel_user_registration GET    /users/cancel(.:format)                                                 users/registrations#cancel
#    new_user_registration GET    /users/sign_up(.:format)                                                users/registrations#new
#   edit_user_registration GET    /users/edit(.:format)                                                   users/registrations#edit
#        user_registration PATCH  /users(.:format)                                                        users/registrations#update
#                          PUT    /users(.:format)                                                        users/registrations#update
#                          DELETE /users(.:format)                                                        users/registrations#destroy
#                          POST   /users(.:format)                                                        users/registrations#create

RSpec.describe "Users::Registrations" do
  let(:old_password) { Faker::Internet.password max_length: 32, min_length: 32, mix_case: true, special_characters: true }
  let(:new_password) { Faker::Internet.password max_length: 32, min_length: 32, mix_case: true, special_characters: true }
  let!(:admin) {
    create(:admin, password: old_password)
  }
  let(:post_options) {
    {
      user: {
        email: Faker::Internet.email,
        username: Faker::Internet.username(specifier: 3, separators: []),
        password: old_password,
        password_confirmation: old_password
      }
    }
  }
  let(:patch_options) {
    {
      user: {
        email: Faker::Internet.email,
        password: new_password,
        password_confirmation: new_password,
        current_password: old_password
      }
    }
  }

  context "when in single user mode", :singleuser do
    context "when signed out" do
      describe "GET /users/sign_up" do
        it "raises an error" do
          get "/users/sign_up"
          expect(response).to have_http_status(:forbidden)
        end
      end

      describe "POST /users" do
        it "raises an error" do
          post "/users", params: post_options
          expect(response).to have_http_status(:forbidden)
        end
      end

      describe "GET /users/edit" do
        it "redirects to sign in page" do
          get "/users/edit"
          expect(response).to redirect_to("/users/sign_in")
        end
      end

      describe "PATCH /users/" do
        it "redirects to sign in page" do
          patch "/users", params: patch_options
          expect(response).to redirect_to("/users/sign_in")
        end
      end

      describe "DELETE /users" do
        it "redirects to sign in page" do
          delete "/users"
          expect(response).to redirect_to("/users/sign_in")
        end
      end

      describe "GET /users/cancel without a signup in progress" do
        it "raises an error" do
          get "/users/cancel"
          expect(response).to have_http_status(:forbidden)
        end
      end
    end

    context "when signed in" do
      before { sign_in admin }

      describe "GET /users/sign_up" do
        before { get "/users/sign_up" }

        it "redirects to root" do
          expect(response).to redirect_to("/")
        end
      end

      describe "POST /users" do
        before { post "/users", params: post_options }

        it "redirects to root" do
          expect(response).to redirect_to("/")
        end

        it "does not create a user" do
          expect(User.count).to eq 1
        end
      end

      describe "GET /users/edit" do
        before { get "/users/edit" }

        it "shows edit page" do
          expect(response).to have_http_status(:success)
        end
      end

      describe "PATCH /users/" do
        before { patch "/users", params: patch_options }

        it "remains on settings page" do
          expect(response).to redirect_to("/users/edit")
        end

        it "updates password" do
          expect(User.first.valid_password?(new_password)).to be true
        end
      end

      describe "DELETE /users" do
        it "raises an error" do
          delete "/users"
          expect(response).to have_http_status(:forbidden)
        end
      end

      describe "GET /users/cancel without a signup in progress" do
        before { get "/users/cancel" }

        it "redirects to root" do
          expect(response).to redirect_to("/")
        end
      end
    end
  end

  context "when in multiuser mode with closed registrations", :multiuser do
    before do
      allow(SiteSettings).to receive(:registration_enabled?).and_return(false)
    end

    context "when signed out" do
      describe "GET /users/sign_up" do
        it "raises an error" do
          get "/users/sign_up"
          expect(response).to have_http_status(:forbidden)
        end
      end

      describe "POST /users" do
        it "raises an error" do
          post "/users", params: post_options
          expect(response).to have_http_status(:forbidden)
        end
      end

      describe "GET /users/edit" do
        before { get "/users/edit" }

        it "redirects to sign in page" do
          expect(response).to redirect_to("/users/sign_in")
        end
      end

      describe "PATCH /users/" do
        before { patch "/users", params: patch_options }

        it "redirects to sign in page" do
          expect(response).to redirect_to("/users/sign_in")
        end
      end

      describe "DELETE /users" do
        before { delete "/users" }

        it "redirects to sign in page" do
          expect(response).to redirect_to("/users/sign_in")
        end
      end

      describe "GET /users/cancel without a signup in progress" do
        before { get "/users/cancel" }

        it "redirects to sign up page" do
          expect(response).to redirect_to("/users/sign_up")
        end
      end
    end

    context "when signed in" do
      before { sign_in admin }

      describe "GET /users/sign_up" do
        before { get "/users/sign_up" }

        it "redirects to root" do
          expect(response).to redirect_to("/")
        end
      end

      describe "POST /users" do
        before { post "/users", params: post_options }

        it "does not create a new user" do
          expect(User.count).to eq 1
        end

        it "redirects to root" do
          expect(response).to redirect_to("/")
        end
      end

      describe "GET /users/edit" do
        before { get "/users/edit" }

        it "shows edit page" do
          expect(response).to have_http_status(:success)
        end
      end

      describe "PATCH /users/" do
        before { patch "/users", params: patch_options }

        it "remains on settings page" do
          expect(response).to redirect_to("/users/edit")
        end

        it "updates password" do
          expect(User.first.valid_password?(new_password)).to be true
        end
      end

      describe "DELETE /users" do
        before { delete "/users" }

        it "removes the user" do
          expect(User.count).to eq 0
        end

        it "redirects to root" do
          expect(response).to redirect_to("/")
        end

        it "signs out the user" do
          expect(controller.current_user).to be_nil
        end
      end

      describe "GET /users/cancel without a signup in progress" do
        before { get "/users/cancel" }

        it "redirects to root" do
          expect(response).to redirect_to("/")
        end
      end
    end
  end

  context "when in multiuser mode with open registrations", :multiuser do
    before do
      allow(SiteSettings).to receive(:registration_enabled?).and_return(true)
    end

    context "when signed out" do
      describe "GET /users/sign_up" do
        before { get "/users/sign_up" }

        it "shows signup page" do
          expect(response).to have_http_status(:success)
        end
      end

      describe "POST /users with approval disabled" do
        before {
          allow(SiteSettings).to receive(:approve_signups).and_return(false)
          allow(AltchaSolution).to receive(:verify_and_save).and_return(true)
          post "/users", params: post_options
        }

        it "creates a new user" do
          expect(User.count).to eq 2
        end

        it "creates user in approved state" do
          expect(User.last).to be_approved
        end

        it "redirects to welcome page" do
          expect(response).to redirect_to("/welcome")
        end

        it "signs in the user" do
          expect(controller.current_user&.username).to eq post_options[:user][:username]
        end
      end

      describe "POST /users with approval disabled and creator options" do # rubocop:disable RSpec/MultipleMemoizedHelpers
        before {
          allow(SiteSettings).to receive_messages(
            approve_signups: false,
            autocreate_creator_for_new_users: true
          )
          allow(AltchaSolution).to receive(:verify_and_save).and_return(true)
        }

        let(:post_with_creator_options) {
          {
            user: {
              email: Faker::Internet.email,
              password: old_password,
              password_confirmation: old_password,
              creators_attributes: {
                "0" => {
                  name: Faker::Name.name,
                  slug: Faker::Internet.username(specifier: 3, separators: [])
                }
              }
            }
          }
        }
        let(:form_post) { post "/users", params: post_with_creator_options }

        it "creates a new user" do
          expect { form_post }.to change(User, :count).by(1)
        end

        it "sets a username derived from the creator username" do
          form_post
          expect(controller.current_user&.username).to eq "u;" + post_with_creator_options.dig(:user, :creators_attributes, "0", :slug)
        end

        it "adds a Creator" do
          expect { form_post }.to change(Creator, :count).by(1)
        end

        it "adds a permission" do
          allow(SiteSettings).to receive(:default_viewer_role).and_return(nil)
          expect { form_post }.to change(Caber::Relation, :count).by(1)
        end

        it "sets up ownership relation with the Creator" do
          form_post
          expect(controller.current_user.creators.count).to eq 1
        end
      end

      describe "POST /users with approval enabled" do
        before {
          allow(SiteSettings).to receive(:approve_signups).and_return(true)
          allow(AltchaSolution).to receive(:verify_and_save).and_return(true)
          post "/users", params: post_options
        }

        it "creates a new user" do
          expect(User.count).to eq 2
        end

        it "creates user in pending state" do
          expect(User.last).not_to be_approved
        end

        it "redirects to root" do
          expect(response).to redirect_to("/")
        end

        it "does not sign in the user" do
          expect(controller.current_user).to be_nil
        end
      end

      describe "GET /users/cancel without a signup in progress" do
        before { get "/users/cancel" }

        it "redirects to sign up page" do
          expect(response).to redirect_to("/users/sign_up")
        end
      end
    end
  end
end
</file>

<file path="spec/requests/users/sessions_spec.rb">
require "rails_helper"

#     new_user_session GET    /users/sign_in(.:format)                                                devise/sessions#new
#         user_session POST   /users/sign_in(.:format)                                                devise/sessions#create
# destroy_user_session DELETE /users/sign_out(.:format)                                               devise/sessions#destroy

RSpec.describe "Users::Sessions" do
  context "when in multiuser mode", :multiuser do
    context "when signed out on first use" do
      describe "GET /users/sign_in" do
        it "creates a default account" do
          expect { get "/users/sign_in" }.to change(User, :count).from(0).to(1)
        end

        it "gives default account admin permissions" do
          get "/users/sign_in"
          expect(User.first.is_administrator?).to be true
        end

        it "automatically logs in on first use" do
          get "/users/sign_in"
          expect(controller.current_user).to be_present
        end
      end
    end

    context "when signed out after first use" do
      describe "GET /users/sign_in" do
        let(:admin) { create(:admin) }

        before do
          admin.update(reset_password_token: nil)
        end

        it "doesn't auto sign in" do
          get "/users/sign_in"
          expect(controller.current_user).to be_nil
        end

        it "shows login page" do
          get "/users/sign_in"
          expect(response).to have_http_status(:success)
        end
      end
    end

    context "when signed in", :as_member do
      describe "GET /users/sign_in" do
        it "redirects to root" do
          get "/users/sign_in"
          expect(response).to redirect_to("/")
        end
      end
    end
  end

  context "when in single user mode", :singleuser do
    context "when signed out" do
      describe "/" do
        it "forces login" do
          expect(get("/")).to redirect_to("/users/sign_in")
        end
      end

      describe "GET /users/sign_in" do
        it "creates a default account" do
          expect { get "/users/sign_in" }.to change(User, :count).from(0).to(1)
        end

        it "gives default account admin permissions" do
          get "/users/sign_in"
          expect(controller.current_user.is_administrator?).to be true
        end

        it "auto logs in and redirects to root" do
          get "/users/sign_in"
          expect(controller.current_user).to be_present
        end

        it "redirects to root" do
          get "/users/sign_in"
          expect(response).to redirect_to("/")
        end
      end
    end

    context "when signed in", :as_member do
      describe "GET /users/sign_in" do
        it "redirects to root" do
          get "/users/sign_in"
          expect(response).to redirect_to("/")
        end
      end
    end
  end
end
</file>

<file path="spec/requests/activity_spec.rb">
require "rails_helper"

RSpec.describe "Activities" do
  context "when logged in as admin", :as_administrator do
    describe "GET /" do
      it "returns http success" do
        allow(ActiveJob::Status).to receive(:all).and_return([])
        get "/activity"
        expect(response).to have_http_status(:success)
      end
    end
  end

  context "when logged in as non-admin", :as_moderator do
    describe "GET /" do
      it "raises a routing error" do
        get "/activity"
        expect(response).to have_http_status :not_found
      end
    end
  end
end
</file>

<file path="spec/requests/collections_spec.rb">
require "rails_helper"

#      collections GET    /collections(.:format)                                                  collections#index
#                  POST   /collections(.:format)                                                  collections#create
#   new_collection GET    /collections/new(.:format)                                              collections#new
#  edit_collection GET    /collections/:id/edit(.:format)                                         collections#edit
#       collection GET    /collections/:id(.:format)                                              collections#show
#                  PATCH  /collections/:id(.:format)                                              collections#update
#                  PUT    /collections/:id(.:format)                                              collections#update
#                  DELETE /collections/:id(.:format)                                              collections#destroy

RSpec.describe "Collections" do
  context "when signed out in multiuser mode", :after_first_run, :multiuser do
    context "with public collection" do
      let!(:collection) { create(:collection, :public) }

      describe "GET /collections" do
        it "includes indexing directive header" do
          allow(SiteSettings).to receive_messages(default_indexable: true, default_ai_indexable: false)
          get "/collections"
          expect(response.headers["X-Robots-Tag"]).to eq "noai noimageai"
        end

        it "includes indexing directive meta tag" do
          allow(SiteSettings).to receive_messages(default_indexable: true, default_ai_indexable: false)
          get "/collections"
          expect(response.body).to include %(<meta name="robots" content="noai noimageai">)
        end
      end

      describe "GET /collections/:id" do
        it "returns http success" do
          get "/collections/#{collection.to_param}"
          expect(response).to have_http_status(:success)
        end

        it "includes indexing directive header" do
          allow(SiteSettings).to receive_messages(default_indexable: true, default_ai_indexable: false)
          get "/collections/#{collection.to_param}"
          expect(response.headers["X-Robots-Tag"]).to eq "noai noimageai"
        end

        it "includes indexing directive meta tag" do
          allow(SiteSettings).to receive_messages(default_indexable: true, default_ai_indexable: false)
          get "/collections/#{collection.to_param}"
          expect(response.body).to include %(<meta name="robots" content="noai noimageai">)
        end
      end
    end

    context "with non-public collection" do
      let!(:collection) { create(:collection) }

      describe "GET /collections/:id" do
        it "returns not found" do
          get "/collections/#{collection.to_param}"
          expect(response).to be_not_found
        end
      end
    end
  end

  context "when signed in" do
    let(:collection) { create(:collection) }

    before do
      build_list(:collection, 13) do |collection|
        collection.save! # See https://dev.to/hernamvel/the-optimal-way-to-create-a-set-of-records-with-factorybot-createlist-factorybot-buildlist-1j64
        create_list(:link, 1, linkable: collection)
        create_list(:model, 1, collection: collection)
      end
    end

    describe "GET /collections" do
      it "returns paginated collections", :as_member do # rubocop:todo RSpec/MultipleExpectations
        get "/collections?page=2"
        expect(response).to have_http_status(:success)
        expect(response.body).to match(/pagination/)
      end
    end

    describe "POST /collections" do
      it "creates a new collection and redirects to list", :as_contributor do
        post "/collections", params: {collection: {name: "newname"}}
        expect(response).to redirect_to("/collections")
      end

      it "creates a new collection owned by the current user", :as_contributor do # rubocop:disable RSpec/MultipleExpectations
        post "/collections", params: {collection: {name: "newname"}}
        object = Collection.find_by(name: "newname")
        expect(object.grants_permission_to?("own", controller.current_user)).to be true
      end

      it "creates a new collection and redirects to return location if set", :as_contributor do
        model = Model.first
        allow_any_instance_of(CollectionsController).to receive(:session).and_return({return_after_new: edit_model_path(model)}) # rubocop:disable RSpec/AnyInstance
        post "/collections", params: {collection: {name: "newname"}}
        expect(response).to redirect_to("/models/#{model.to_param}/edit?new_collection=#{Collection.find_by(name: "newname").to_param}")
      end

      it "denies member permission", :as_member do
        post "/collections", params: {collection: {name: "newname"}}
        expect(response).to have_http_status(:forbidden)
      end
    end

    describe "GET /collections/new" do
      before { get "/collections/new" }

      it "Shows the new collection form", :as_contributor do
        expect(response).to have_http_status(:success)
      end

      it "denies member permission", :as_member do
        expect(response).to have_http_status(:forbidden)
      end
    end

    describe "GET /collections/:id/edit" do
      before { get "/collections/#{collection.to_param}/edit" }

      it "Shows the new collection form", :as_moderator do
        expect(response).to have_http_status(:success)
      end

      it "is denied to non-moderators", :as_contributor do
        expect(response).to have_http_status(:forbidden)
      end
    end

    describe "GET /collections/:id", :as_member do
      it "Shows that collection" do
        get "/collections/#{collection.to_param}"
        expect(response).to have_http_status(:success)
      end
    end

    describe "PATCH /collections/:id" do
      it "saves details", :as_moderator do
        patch "/collections/#{collection.to_param}", params: {collection: {name: "newname"}}
        expect(response).to redirect_to("/collections")
      end
    end

    describe "DELETE /collections/:id" do
      before { delete "/collections/#{collection.to_param}" }

      it "removes collection", :as_moderator do
        expect(response).to redirect_to("/collections")
      end

      it "is denied to non-moderators", :as_contributor do
        expect(response).to have_http_status(:forbidden)
      end
    end
  end
end
</file>

<file path="spec/requests/comments_spec.rb">
require "rails_helper"

RSpec.describe "Comments" do
  context "when on a public item in multiuser mode", :multiuser do
    let(:user) { create(:user) }
    let(:model) { create(:model, :public) }
    let(:comment) { model.comments.create(commenter: user, comment: Faker::Lorem.paragraph) }

    describe "GET #show" do
      context "when requesting ActivityPub JSON" do
        before do
          get "/models/#{model.public_id}/comments/#{comment.public_id}", headers: {accept: "application/activity+json"}
        end

        it "returns http success" do
          expect(response).to have_http_status(:success)
        end

        it "returns activitypub" do
          expect(response.content_type).to start_with "application/ld+json"
        end

        it "returns a Note" do
          expect(response.parsed_body["type"]).to eq "Note"
        end

        it "includes standard JSON-LD context" do
          expect(response.parsed_body["@context"]).to include("https://www.w3.org/ns/activitystreams")
        end

        it "includes extended JSON-LD context" do
          expect(response.parsed_body["@context"]).to include("https://purl.archive.org/miscellany")
        end
      end
    end
  end
end
</file>

<file path="spec/requests/creators_spec.rb">
require "rails_helper"

#     creators GET    /creators(.:format)                                                     creators#index
#              POST   /creators(.:format)                                                     creators#create
#  new_creator GET    /creators/new(.:format)                                                 creators#new
# edit_creator GET    /creators/:id/edit(.:format)                                            creators#edit
#      creator GET    /creators/:id(.:format)                                                 creators#show
#              PATCH  /creators/:id(.:format)                                                 creators#update
#              PUT    /creators/:id(.:format)                                                 creators#update
#              DELETE /creators/:id(.:format)                                                 creators#destroy

RSpec.describe "Creators" do
  context "when signed out in multiuser mode", :after_first_run, :multiuser do
    context "with public creator" do
      let!(:creator) { create(:creator, :public) }

      describe "GET /creators" do
        it "includes indexing directive header" do
          allow(SiteSettings).to receive_messages(default_indexable: true, default_ai_indexable: false)
          get "/creators"
          expect(response.headers["X-Robots-Tag"]).to eq "noai noimageai"
        end

        it "includes indexing directive meta tag" do
          allow(SiteSettings).to receive_messages(default_indexable: true, default_ai_indexable: false)
          get "/creators"
          expect(response.body).to include %(<meta name="robots" content="noai noimageai">)
        end
      end

      describe "GET /creators/:id" do
        it "returns http success" do
          get "/creators/#{creator.to_param}"
          expect(response).to have_http_status(:success)
        end

        it "includes indexing directive header" do
          allow(SiteSettings).to receive_messages(default_indexable: true, default_ai_indexable: false)
          get "/creators/#{creator.to_param}"
          expect(response.headers["X-Robots-Tag"]).to eq "noai noimageai"
        end

        it "includes indexing directive meta tag" do
          allow(SiteSettings).to receive_messages(default_indexable: true, default_ai_indexable: false)
          get "/creators/#{creator.to_param}"
          expect(response.body).to include %(<meta name="robots" content="noai noimageai">)
        end
      end
    end

    context "with non-public creator" do
      let(:creator) { create(:creator) }

      describe "GET /creators/:id" do
        it "returns not found" do
          get "/creators/#{creator.to_param}"
          expect(response).to be_not_found
        end
      end
    end
  end

  context "when signed in" do
    before do
      build_list(:creator, 13) do |creator|
        creator.save! # See https://dev.to/hernamvel/the-optimal-way-to-create-a-set-of-records-with-factorybot-createlist-factorybot-buildlist-1j64
        create_list(:link, 1, linkable: creator)
        create_list(:model, 1, creator: creator)
      end
    end

    describe "GET /creators" do
      it "returns paginated creators", :as_member do # rubocop:todo RSpec/MultipleExpectations
        get "/creators?page=2"
        expect(response).to have_http_status(:success)
        expect(response.body).to match(/pagination/)
      end
    end

    describe "POST /creators" do
      it "creates a new creator and redirects to new item", :as_contributor do
        post "/creators", params: {creator: {name: "newname"}}
        expect(response).to redirect_to("/creators/#{Creator.last.to_param}")
      end

      it "creates a new creator owned by the current user", :as_contributor do # rubocop:disable RSpec/MultipleExpectations
        post "/creators", params: {creator: {name: "newname"}}
        object = Creator.find_by(name: "newname")
        expect(object.grants_permission_to?("own", controller.current_user)).to be true
      end

      it "creates a new creator and redirects to return location if set", :as_contributor do
        model = Model.first
        allow_any_instance_of(CreatorsController).to receive(:session).and_return({return_after_new: edit_model_path(model)}) # rubocop:disable RSpec/AnyInstance
        post "/creators", params: {creator: {name: "newname"}}
        expect(response).to redirect_to("/models/#{model.to_param}/edit?new_creator=#{Creator.find_by(name: "newname").to_param}")
      end

      it "denies member permission", :as_member do
        post "/creators", params: {creator: {name: "newname"}}
        expect(response).to have_http_status(:forbidden)
      end
    end

    describe "GET /creators/new" do
      before { get "/creators/new" }

      it "Shows the new creator form", :as_contributor do
        expect(response).to have_http_status(:success)
      end

      it "denies member permission", :as_member do
        expect(response).to have_http_status(:forbidden)
      end
    end

    describe "GET /creators/:id/edit" do
      let(:creator) { create(:creator) }

      before { get "/creators/#{creator.to_param}/edit" }

      it "Shows the new creator form", :as_moderator do
        expect(response).to have_http_status(:success)
      end

      it "is denied to non-moderators", :as_contributor do
        expect(response).to have_http_status(:forbidden)
      end
    end

    describe "GET /creators/:id", :as_member do
      let(:creator) { create(:creator) }

      it "Redirects to a list of models with that creator" do
        get "/creators/#{creator.to_param}"
        expect(response).to have_http_status(:success)
      end
    end

    describe "PATCH /creators/:id" do
      let(:creator) { create(:creator) }

      before { patch "/creators/#{creator.to_param}", params: {creator: {slug: "newname"}} }

      it "saves details", :as_moderator do
        expect(response).to redirect_to("/creators/newname")
      end

      it "is denied to non-moderators", :as_contributor do
        expect(response).to have_http_status(:forbidden)
      end
    end

    describe "DELETE /creators/:id" do
      let(:creator) { create(:creator) }

      before { delete "/creators/#{creator.to_param}" }

      it "removes creator", :as_moderator do
        expect(response).to redirect_to("/creators")
      end

      it "is denied to non-moderators", :as_contributor do
        expect(response).to have_http_status(:forbidden)
      end
    end
  end
end
</file>

<file path="spec/requests/follows_spec.rb">
require "rails_helper"

RSpec.describe "Follows" do
  describe "POST /create" do
    it "should add a follow relationship for current user"
    it "should not add another follow relationship if one already exists"
  end

  describe "DELETE /" do
    it "should remove a follow relationship for current user"
    it "should work even if current user is not following target"
  end
end
</file>

<file path="spec/requests/home_spec.rb">
require "rails_helper"

# root GET    /                                                                       home#index

RSpec.describe "Home" do
  context "when signed out" do
    it "needs testing when multiuser is enabled"
  end

  context "when signed in" do
    describe "GET /" do
      it "redirects to library creation if there isn't one already", :as_member do
        get "/"
        expect(response).to redirect_to("/libraries/new")
      end

      it "shows the homepage if a library has been created", :as_member do
        create(:library)
        get "/"
        expect(response).to have_http_status(:success)
      end
    end
  end
end
</file>

<file path="spec/requests/libraries_spec.rb">
require "rails_helper"

#   scan_library POST   /libraries/:id/scan(.:format)                                           libraries#scan
# scan_libraries POST   /libraries/scan(.:format)                                               libraries#scan_all
#      libraries GET    /libraries(.:format)                                                    libraries#index
#                POST   /libraries(.:format)                                                    libraries#create
#    new_library GET    /libraries/new(.:format)                                                libraries#new
#   edit_library GET    /libraries/:id/edit(.:format)                                           libraries#edit
#        library GET    /libraries/:id(.:format)                                                libraries#show
#                PATCH  /libraries/:id(.:format)                                                libraries#update
#                PUT    /libraries/:id(.:format)                                                libraries#update
#                DELETE /libraries/:id(.:format)                                                libraries#destroy

RSpec.describe "Libraries" do
  context "when signed out" do
    it "needs testing when multiuser is enabled"
  end

  context "when signed in" do
    let!(:library) do
      create(:library) do |l|
        create_list(:model, 2, library: l)
      end
    end

    describe "POST /libraries/:id/scan" do
      it "scans a single library", :as_contributor do # rubocop:todo RSpec/MultipleExpectations
        expect { post "/libraries/#{library.to_param}/scan" }.to have_enqueued_job(Scan::Library::DetectFilesystemChangesJob).exactly(:once)
        expect(response).to redirect_to("/libraries/#{library.public_id}")
      end

      it "denies member permission", :as_member do
        post "/libraries/#{library.to_param}/scan"
        expect(response).to have_http_status(:forbidden)
      end
    end

    describe "POST /libraries/scan" do
      it "scans all libraries", :as_contributor do # rubocop:todo RSpec/MultipleExpectations
        expect { post "/libraries/scan" }.to have_enqueued_job(Scan::Library::DetectFilesystemChangesJob).exactly(:once)
        expect(response).to redirect_to("/models")
      end

      it "denies member permission", :as_member do
        post "/libraries/scan"
        expect(response).to have_http_status(:forbidden)
      end
    end

    describe "GET /settings/libraries" do
      before { get "/settings/libraries" }

      it "denies permission", :as_member do
        expect(response).to have_http_status(:not_found)
      end

      it "shows list", :as_administrator do
        expect(response).to have_http_status(:success)
      end
    end

    describe "POST /libraries/" do
      before { post "/libraries", params: {library: {name: "new", path: "."}} }

      it "creates a new library", :as_administrator do
        expect(response).to redirect_to("/libraries/#{Library.last.to_param}")
      end

      it "is denied to non-admins", :as_moderator do
        expect(response).to have_http_status(:forbidden)
      end
    end

    describe "GET /libraries/new" do
      before { get "/libraries/new" }

      it "shows the new library form", :as_administrator do
        expect(response).to have_http_status(:success)
      end

      it "is denied to non-admins", :as_moderator do
        expect(response).to have_http_status(:forbidden)
      end
    end

    describe "GET /libraries/:id/edit" do
      before { get "/libraries/#{library.to_param}/edit" }

      it "shows the edit library form", :as_administrator do
        expect(response).to have_http_status(:success)
      end

      it "is denied to non-administrators", :as_moderator do
        expect(response).to have_http_status(:forbidden)
      end
    end

    describe "GET /libraries/:id" do
      it "redirects to models index with library filter", :as_member do
        get "/libraries/#{library.to_param}"
        expect(response).to redirect_to("/models?library=#{library.public_id}")
      end
    end

    describe "PATCH /libraries/:id" do
      before { patch "/libraries/#{library.to_param}", params: {library: {name: "new"}} }

      it "updates the library", :as_administrator do
        expect(response).to redirect_to("/models")
      end

      it "is denied to non-administrators", :as_moderator do
        expect(response).to have_http_status(:forbidden)
      end
    end

    describe "DELETE /libraries/:id" do
      before do
        # Add a model and file to test cascading removal
        model = create(:model, library: library)
        create(:model_file, model: model)
        # Remove library
        delete "/libraries/#{library.to_param}"
      end

      it "removes the library", :as_administrator do
        expect(response).to redirect_to("/settings/libraries")
      end

      it "is denied to non-administrators", :as_moderator do
        expect(response).to have_http_status(:forbidden)
      end
    end
  end
end
</file>

<file path="spec/requests/model_files_spec.rb">
require "rails_helper"
require "support/mock_directory"

# edit_model_model_files GET    /models/:model_id/model_files/edit(.:format)      model_files#bulk_edit
#      model_model_files PATCH  /models/:model_id/model_files/update(.:format)    model_files#bulk_update
#                        POST   /models/:model_id/model_files(.:format)           model_files#create
#  edit_model_model_file GET    /models/:model_id/model_files/:id/edit(.:format)  model_files#edit
#       model_model_file GET    /models/:model_id/model_files/:id(.:format)       model_files#show
#                        PATCH  /models/:model_id/model_files/:id(.:format)       model_files#update
#                        PUT    /models/:model_id/model_files/:id(.:format)       model_files#update
#                        DELETE /models/:model_id/model_files/:id(.:format)       model_files#destroy

RSpec.describe "Model Files" do
  context "when signed out in multiuser mode", :after_first_run, :multiuser do
    context "with a public model" do
      let(:model) { create(:model, :public) }
      let(:file) { create(:model_file, model: model) }

      it "includes indexing directive header" do
        allow(SiteSettings).to receive_messages(default_indexable: true, default_ai_indexable: false)
        get "/models/#{model.to_param}/model_files/#{file.to_param}"
        expect(response.headers["X-Robots-Tag"]).to eq "noai noimageai"
      end

      it "includes indexing directive meta tag" do
        allow(SiteSettings).to receive_messages(default_indexable: true, default_ai_indexable: false)
        get "/models/#{model.to_param}/model_files/#{file.to_param}"
        expect(response.body).to include %(<meta name="robots" content="noai noimageai">)
      end
    end
  end

  [:multiuser, :singleuser].each do |mode|
    context "when signed out in #{mode} mode", mode, :after_first_run do
      context "when downloading via a signed ID" do
        let!(:file) { create(:model_file, filename: "test.jpg") }

        it "succeeds with a valid ID" do
          id = file.signed_id(expires_in: 1.minute, purpose: "download")
          get "/models/#{file.model.to_param}/model_files/#{id}.jpg?download=true"
          expect(response).to have_http_status(:success)
        end

        it "fails if expired" do
          id = file.signed_id(expires_at: 1.minute.ago, purpose: "download")
          get "/models/#{file.model.to_param}/model_files/#{id}.jpg?download=true"
          expect(response).to have_http_status(:not_found)
        end

        it "fails if purpose doesn't match" do
          id = file.signed_id(expires_in: 1.minute, purpose: "shenanigans")
          get "/models/#{file.model.to_param}/model_files/#{id}.jpg?download=true"
          expect(response).to have_http_status(:not_found)
        end
      end
    end
  end

  context "when signed in" do
    let!(:jpg_file) { create(:model_file, model: model, filename: "test.jpg") }
    let!(:stl_file) { create(:model_file, model: model, filename: "test.stl") }
    let!(:model) { create(:model, library: library, path: "model_one") }
    let(:library) { create(:library, path: @library_path) } # rubocop:todo RSpec/InstanceVariable

    around do |ex|
      MockDirectory.create([
        "model_one/test.stl",
        "model_one/test.jpg"
      ]) do |path|
        @library_path = path
        ex.run
      end
    end

    describe "GET /models/:model_id/model_files/edit", :as_moderator do
      it "shows bulk update form" do
        get bulk_edit_model_model_files_path(model)
        expect(response).to have_http_status(:success)
      end
    end

    describe "PATCH /models/:model_id/model_files/update", :as_moderator do
      let(:params) { {model_files: {stl_file.public_id => "1", jpg_file.public_id => "0"}} }

      it "bulk updates Y Up on the selected files" do
        expect {
          patch bulk_update_model_model_files_path(model, params: params.merge(y_up: "1"))
        }.to change { stl_file.reload.y_up }.from(false).to(true)
      end

      it "bulk updates presupported flag on the selected files" do
        expect {
          patch bulk_update_model_model_files_path(model, params: params.merge(presupported: "1"))
        }.to change { stl_file.reload.presupported }.from(false).to(true)
      end

      it "bulk updates printed flag on the selected files" do
        get bulk_edit_model_model_files_path(model) # Do a get so we have controller reference available
        expect {
          patch bulk_update_model_model_files_path(model, params: params.merge(printed: "1"))
        }.to change { stl_file.listers(:printed).include? controller.current_user }.from(false).to(true)
      end

      it "renames selected files" do
        expect {
          patch bulk_update_model_model_files_path(model, params: params.merge(pattern: "s", replacement: "n"))
        }.to change { stl_file.reload.filename }.from("test.stl").to("tent.stl")
      end

      it "does not modify non-selected files" do
        expect {
          patch bulk_update_model_model_files_path(model, params: params.merge(y_up: "1"))
        }.not_to change { jpg_file.reload.y_up }
      end

      it "splits model" do
        expect {
          patch bulk_update_model_model_files_path(model, params: params.merge(split: "split"))
        }.to change(Model, :count).by(1)
      end
    end

    describe "GET /models/:model_id/model_files/:id/edit", :as_moderator do
      it "shows edit page for file" do
        get edit_model_model_file_path(model, stl_file)
        expect(response).to have_http_status(:success)
      end
    end

    describe "GET /models/:model_id/model_files/:id", :as_member do
      describe "GET a model file in its original file format" do
        before do
          get model_model_file_path(model, stl_file, format: :stl)
        end

        it "returns http success" do
          expect(response).to have_http_status(:success)
        end

        it "has correct MIME type" do
          expect(response.media_type).to eq("model/stl")
        end
      end

      describe "GET an image file in its original file format", :as_member do
        before do
          get model_model_file_path(model, jpg_file, format: :jpg)
        end

        it "returns http success" do
          expect(response).to have_http_status(:success)
        end

        it "has correct MIME type" do
          expect(response.media_type).to eq("image/jpeg")
        end
      end
    end

    describe "POST /models/:model_id/model_files", :as_moderator do
      context "when requesting a conversion" do
        let(:params) { {convert: {id: stl_file.to_param, to: "threemf"}} }

        it "queues a conversion job" do
          expect { post model_model_files_path(model, params: params) }.to have_enqueued_job(Analysis::FileConversionJob).with(stl_file.id, :threemf)
        end

        it "redirects back to file list" do
          post model_model_files_path(model, params: params)
          expect(response).to redirect_to model_model_file_path(model, stl_file)
        end

        it "shows success message if conversion job was queued" do
          post model_model_files_path(model, params: params)
          follow_redirect!
          expect(response.body).to include "alert-info"
        end
      end

      context "when uploading a file" do
        let(:params) {
          {file: {
            "0" => {
              id: "upload_key",
              name: "test.stl"
            }
          }}
        }

        it "queues post-upload job" do # rubocop:disable RSpec/ExampleLength
          expect { post model_model_files_path(model, params: params) }
            .to have_enqueued_job(ProcessUploadedFileJob)
            .with(Library.first.id, {
              id: "upload_key",
              storage: "cache",
              metadata: {
                filename: "test.stl"
              }
            }, model: model).once
        end
      end

      it "shows an error with missing parameters" do
        post model_model_files_path(model, params: {})
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end

    describe "PATCH /models/:model_id/model_files/:id", :as_moderator do
      it "updates the file" do
        patch model_model_file_path(model, stl_file), params: {model_file: {name: "name"}}
        expect(response).to redirect_to(model_model_file_path(model, stl_file))
      end
    end

    describe "DELETE /models/:model_id/model_files/:id", :as_moderator do
      it "removes the file" do
        delete model_model_file_path(model, stl_file)
        expect(response).to redirect_to(model_path(model))
      end
    end

    describe "GET /models/:model_id/model_files/:filename", :as_member do
      describe "GET a model file from its filename" do
        before do
          create(:model_file, model: model, filename: "subfolder/test.stl")
          get model_model_file_by_filename_path(model_id: model.to_param, id: "subfolder/test", format: :stl)
        end

        it "returns http success" do
          expect(response).to have_http_status(:success)
        end

        it "has correct MIME type" do
          expect(response.media_type).to eq("model/stl")
        end
      end

      describe "GET a model file from its filename with uppercase content" do
        before do
          file = create(:model_file, model: model, filename: "subfolder/Test.STL")
          get model_model_file_by_filename_path(model_id: model.to_param, id: file.filename)
        end

        it "returns http success" do
          expect(response).to have_http_status(:success)
        end

        it "has correct MIME type" do
          expect(response.media_type).to eq("model/stl")
        end
      end
    end
  end
end
</file>

<file path="spec/requests/models_spec.rb">
require "rails_helper"

#    edit_model GET    /models/:id/edit(.:format)                        models#edit
#         model GET    /models/:id(.:format)                             models#show
#               PATCH  /models/:id(.:format)                             models#update
#               PUT    /models/:id(.:format)                             models#update
#               DELETE /models/:id(.:format)                             models#destroy
#   edit_models GET    /models/edit(.:format)                                                  models#bulk_edit
# update_models PATCH  /models/update(.:format)                                                models#bulk_update
#        models GET    /models(.:format)                                                       models#index
#     new_model GET    /models/new(.:format)                                                      uploads#index
#               POST   /models(.:format)                                                      uploads#create
#   merge_model POST   /models/:id/merge(.:format)                       models#merge
#   scan_model  POST   /models/:id/scan(.:format)                        models#scan

RSpec.describe "Models" do
  context "when signed out in multiuser mode", :after_first_run, :multiuser do
    context "with public model" do
      let!(:model) { create(:model, :public) }

      describe "GET /models" do
        it "includes indexing directive header" do
          allow(SiteSettings).to receive_messages(default_indexable: true, default_ai_indexable: false)
          get "/models"
          expect(response.headers["X-Robots-Tag"]).to eq "noai noimageai"
        end

        it "includes indexing directive meta tag" do
          allow(SiteSettings).to receive_messages(default_indexable: true, default_ai_indexable: false)
          get "/models"
          expect(response.body).to include %(<meta name="robots" content="noai noimageai">)
        end
      end

      describe "GET /models/:id" do
        it "returns http success" do
          get "/models/#{model.to_param}"
          expect(response).to have_http_status(:success)
        end

        it "includes indexing directive header" do
          allow(SiteSettings).to receive_messages(default_indexable: true, default_ai_indexable: false)
          get "/models/#{model.to_param}"
          expect(response.headers["X-Robots-Tag"]).to eq "noai noimageai"
        end

        it "includes indexing directive meta tag" do
          allow(SiteSettings).to receive_messages(default_indexable: true, default_ai_indexable: false)
          get "/models/#{model.to_param}"
          expect(response.body).to include %(<meta name="robots" content="noai noimageai">)
        end
      end
    end

    context "with non-public model" do
      let!(:model) { create(:model) }

      describe "GET /models/:id" do
        it "returns not found" do
          get "/models/#{model.to_param}"
          expect(response).to be_not_found
        end
      end
    end
  end

  [:multiuser, :singleuser].each do |mode|
    context "when signed in in #{mode} mode", mode do
      let!(:creator) { create(:creator) }
      let!(:collection) { create(:collection) }
      let!(:library) do
        l = create(:library)
        build_list(:model, 5, library: l) { |it| it.save! }
        build_list(:model, 5, library: l, creator: creator) { |it| it.save! }
        build_list(:model, 5, library: l, collection: collection) { |it| it.save! }
        build_list(:model, 5, library: l, creator: creator, collection: collection) { |it| it.save! }
        l
      end

      describe "GET /models/:id", :as_member do
        it "returns http success" do
          get "/models/#{library.models.first.to_param}"
          expect(response).to have_http_status(:success)
        end
      end

      describe "GET /models/:id/edit" do
        before { get "/models/#{library.models.first.to_param}/edit" }

        it "shows edit page for file", :as_moderator do
          expect(response).to have_http_status(:success)
        end

        it "sets returnable session param", :as_moderator do
          expect(session[:return_after_new]).to eq "/models/#{library.models.first.to_param}/edit"
        end

        it "is denied to non-moderators", :as_contributor do
          expect(response).to have_http_status(:forbidden)
        end
      end

      describe "PUT /models/:id" do
        it "adds tags to a model", :as_moderator do # rubocop:todo RSpec/ExampleLength, RSpec/MultipleExpectations
          put "/models/#{library.models.first.to_param}", params: {model: {tag_list: ["a", "b", "c"]}}
          expect(response).to have_http_status(:redirect)
          expect(library.models.first.tag_list).to include("a", "b", "c")
        end

        it "clears returnable session param", :as_moderator do
          put "/models/#{library.models.first.to_param}", params: {model: {tag_list: ["a", "b", "c"]}}
          expect(session[:return_after_new]).to be_nil
        end

        it "removes tags from a model", :as_moderator do # rubocop:todo RSpec/ExampleLength, RSpec/MultipleExpectations
          first = library.models.first
          first.tag_list = "a, b, c"
          first.save

          put "/models/#{library.models.first.to_param}", params: {model: {tag_list: ["a", "b"]}}
          expect(response).to have_http_status(:redirect)
          first.reload
          tags = first.tag_list
          expect(tags.length).to eq 2
          expect(tags[0]).to eq "a"
          expect(tags[1]).to eq "b"
        end

        it "both adds and removes tags from a model", :as_moderator do # rubocop:todo RSpec/ExampleLength, RSpec/MultipleExpectations
          first = library.models.first
          first.tag_list = "a, b, c"
          first.save

          put "/models/#{library.models.first.to_param}", params: {model: {tag_list: ["a", "b", "d"]}}
          expect(response).to have_http_status(:redirect)
          first.reload
          tags = first.tag_list
          expect(tags.length).to eq 3
          expect(tags[0]).to eq "a"
          expect(tags[1]).to eq "b"
          expect(tags[2]).to eq "d"
        end

        it "auto-publishes creator if being made public", :as_moderator do # rubocop:todo RSpec/ExampleLength, RSpec/MultipleExpectations
          private_creator = create(:creator)
          private_model = create(:model, creator: private_creator)
          put "/models/#{private_model.to_param}", params: {
            model: {
              creator_id: private_creator.id,
              caber_relations_attributes: {"0" => {subject: "role::public", permission: "view"}}
            }
          }
          expect(response).to have_http_status(:redirect)
          expect(private_model.reload).to be_public
          expect(private_creator.reload).to be_public
        end

        it "is denied to non-moderators", :as_contributor do
          put "/models/#{library.models.first.to_param}"
          expect(response).to have_http_status(:forbidden)
        end
      end

      describe "DELETE /models/:id" do # rubocop:todo RSpec/RepeatedExampleGroupBody
        before { delete "/models/#{library.models.first.to_param}" }

        it "redirects to model list after deletion", :as_moderator do
          expect(response).to redirect_to("/")
        end

        it "is denied to non-moderators", :as_contributor do
          expect(response).to have_http_status(:forbidden)
        end
      end

      describe "GET /models/edit" do # rubocop:todo RSpec/RepeatedExampleGroupBody
        before { get edit_models_path }

        it "shows bulk edit page", :as_moderator do
          expect(response).to have_http_status(:success)
        end

        it "sets returnable session param", :as_moderator do
          expect(session[:return_after_new]).to eq "/models/edit"
        end

        it "is denied to non-moderators", :as_contributor do
          expect(response).to have_http_status(:forbidden)
        end

        context "with filters", :as_moderator do
          let(:tag) { create(:tag) }
          let!(:tagged_model) { create(:model, library: library, tag_list: [tag.name]) }

          it "shows filtered models" do
            get edit_models_path(tag: [tag.name])
            expect(response.body).to include(tagged_model.name)
          end

          it "doesn't show other models" do
            get edit_models_path(tag: [tag.name])
            library.models.each do |model|
              next if model == tagged_model
              expect(response.body).not_to include(model.name)
            end
          end
        end
      end

      describe "PATCH /models/update" do
        let(:model_params) {
          model_params = {}
          library.models.each do |model|
            model_params[model.to_param] = 1
          end
          model_params
        }

        it "updates models creator", :as_moderator do # rubocop:todo RSpec/ExampleLength, RSpec/MultipleExpectations
          models = library.models.take(2)
          update = {}
          update[models[0].to_param] = 1
          update[models[1].to_param] = 1

          patch update_models_path, params: {models: update, creator_id: creator.id}

          expect(response).to have_http_status(:redirect)
          models.each { |model| model.reload }
          expect(models[0].creator_id).to eq creator.id
          expect(models[1].creator_id).to eq creator.id
        end

        it "adds tags to models", :as_moderator do # rubocop:todo RSpec/ExampleLength, RSpec/MultipleExpectations
          patch update_models_path, params: {models: model_params, add_tags: ["a", "b", "c"]}

          expect(response).to have_http_status(:redirect)
          library.models.take(2).each do |model|
            expect(model.tag_list).to include("a", "b", "c")
          end
        end

        it "removes tags from models", :as_moderator do # rubocop:todo RSpec/ExampleLength, RSpec/MultipleExpectations
          library.models.take(2).each do |model|
            model.tag_list = "a, b, c"
            model.save
          end

          patch update_models_path, params: {models: model_params, remove_tags: ["a", "b"]}

          expect(response).to have_http_status(:redirect)
          library.models.take(2).each do |model|
            model.reload
            expect(model.tag_list).to eq ["c"]
          end
        end

        it "clears returnable session param", :as_moderator do
          patch update_models_path, params: {models: model_params, remove_tags: ["a", "b"]}
          expect(session[:return_after_new]).to be_nil
        end

        it "is denied to non-moderators", :as_contributor do
          update = {}
          library.models.take(2).each { |it| update[it.to_param] = 1 }
          patch update_models_path, params: {models: model_params, remove_tags: ["a", "b"]}
          expect(response).to have_http_status(:forbidden)
        end

        context "when updating all filtered models", :as_moderator do # rubocop:todo RSpec/MultipleMemoizedHelpers
          let(:tag) { create(:tag) }
          let!(:tagged_model) { create(:model, library: library, tag_list: [tag.name]) }
          let(:new_library) { create(:library) }

          let(:params) do
            {
              update_all: I18n.t("models.bulk_edit.update_all"),
              new_library_id: new_library.id,
              tag: [tag.name]
            }
          end

          it "updates all models matching the filter" do
            patch update_models_path, params: params

            library.models.each do |model|
              next if model == tagged_model
              expect(model.reload.library_id).to eq(library.id)
            end
          end
        end

        context "with organization", :as_moderator do
          let(:params) do
            {
              models: library.models.take(2).map { |m| [m.to_param, "1"] }.to_h,
              organize: "1"
            }
          end

          it "enqueues organize jobs for selected models" do
            expect {
              patch update_models_path, params: params
            }.to have_enqueued_job(OrganizeModelJob).exactly(2).times
          end
        end
      end

      describe "GET /models", :as_member do
        it "allows search queries" do
          get "/models?q=#{library.models.first.name}"
          expect(response).to have_http_status(:success)
        end

        it "allows tag filters" do
          m = library.models.first
          m.tag_list << "test"
          m.save
          get "/models?tag[]=test"
          expect(response).to have_http_status(:success)
        end

        it "allows link filters" do
          get "/models?link="
          expect(response).to have_http_status(:success)
        end

        it "returns paginated models" do # rubocop:todo RSpec/MultipleExpectations
          get "/models?library=#{library.to_param}&page=2"
          expect(response).to have_http_status(:success)
          expect(response.body).to match(/pagination/)
        end
      end

      describe "POST /models/:id/merge" do
        before { post "/models/#{library.models.first.to_param}/merge" }

        it "gives a bad request response if no merge parameter is provided", :as_moderator do
          expect(response).to have_http_status(:bad_request)
        end

        it "is denied to non-moderators", :as_contributor do
          expect(response).to have_http_status(:forbidden)
        end
      end

      describe "POST /models/:id/scan" do
        it "schedules a scan job", :as_moderator do
          expect { post "/models/#{library.models.first.to_param}/scan" }.to(
            have_enqueued_job(Scan::CheckModelJob).with(library.models.first.id).once
          )
        end

        it "redirects back to model page", :as_contributor do
          post "/models/#{library.models.first.to_param}/scan"
          expect(response).to redirect_to("/models/#{library.models.first.public_id}")
        end

        it "is denied to non-contributors", :as_member do
          post "/models/#{library.models.first.to_param}/scan"
          expect(response).to have_http_status(:forbidden)
        end
      end

      describe "GET /models/new" do
        before { get "/models/new" }

        it "shows upload form", :as_contributor do
          expect(response).to have_http_status(:success)
        end

        it "sets returnable session param", :as_contributor do
          expect(session[:return_after_new]).to eq "/models/new"
        end

        it "denies member permission", :as_member do
          expect(response).to have_http_status(:forbidden)
        end
      end

      describe "POST /models" do
        let(:creator) { create(:creator) }
        let(:collection) { create(:collection) }
        let(:post_models) {
          post "/models", params: {
            library: library.to_param,
            scan: "1",
            file: {
              "0" => {
                id: "upload_key",
                name: "test.stl"
              }
            },
            creator_id: creator.id,
            collection_id: collection.id,
            license: "MIT",
            sensitive: "1",
            add_tags: ["tag1", "tag2"]
          }
        }

        it "enqueues processing job", :as_contributor do # rubocop:disable RSpec/ExampleLength
          expect { post_models }
            .to have_enqueued_job(ProcessUploadedFileJob)
            .with(Library.first.id,
              {
                id: "upload_key",
                storage: "cache",
                metadata: {
                  filename: "test.stl"
                }
              },
              owner: User.last,
              creator_id: creator.id.to_s,
              collection_id: collection.id.to_s,
              license: "MIT",
              sensitive: true,
              tags: ["tag1", "tag2"]).once
        end

        it "redirect back to index after upload", :as_contributor do
          post_models
          expect(response).to redirect_to("/models")
        end

        it "clears returnable session param", :as_contributor do
          post_models
          expect(session[:return_after_new]).to be_nil
        end

        it "denies member permission", :as_member do
          post_models
          expect(response).to have_http_status(:forbidden)
        end
      end
    end
  end
end
</file>

<file path="spec/requests/problems_spec.rb">
require "rails_helper"

# problems GET    /problems(.:format)                                                     problems#index
#  problem PATCH  /problems/:id(.:format)                                                 problems#update

RSpec.describe "Problems" do
  context "when signed out" do
    it "needs testing when multiuser is enabled"
  end

  context "when signed in" do
    describe "GET /problems", :as_contributor do
      it "is denied to contributors" do
        get "/problems/index"
        expect(response).to have_http_status(:forbidden)
      end
    end

    describe "GET /problems", :as_moderator do
      before do
        create_list(:problem, 2, category: :inefficient)
        create_list(:problem_on_model, 3, category: :missing)
      end

      it "returns success" do
        get "/problems/index"
        expect(response).to have_http_status(:success)
      end

      it "lists problems" do
        get "/problems/index"
        expect(assigns(:problems).length).to eq 5
      end

      context "with silenced problems" do
        before do
          u = User.first
          u.problem_settings["missing"] = "silent"
          u.save!
          sign_in u
        end

        it "doesn't show problems with silent severity" do
          get "/problems/index"
          expect(assigns(:problems).length).to eq 2
        end
      end

      context "when filtering by category" do
        it "only shows selected categories" do
          get "/problems/index", params: {"category[]": "missing"}
          expect(assigns(:problems).length).to eq 3
        end

        it "can show more than one category" do
          get "/problems/index", params: {"category[]": ["missing", "inefficient"]}
          expect(assigns(:problems).length).to eq 5
        end
      end

      context "when filtering by object type" do
        it "only shows selected types" do
          get "/problems/index", params: {"type[]": "model"}
          expect(assigns(:problems).length).to eq 3
        end

        it "can show more than one type" do
          get "/problems/index", params: {"type[]": ["model", "model_file"]}
          expect(assigns(:problems).length).to eq 5
        end
      end

      context "when filtering by severity" do
        it "only shows selected severities" do
          get "/problems/index", params: {"severity[]": "info"}
          expect(assigns(:problems).length).to eq 2
        end

        it "can show more than one severity" do
          get "/problems/index", params: {"severity[]": ["danger", "info"]}
          expect(assigns(:problems).length).to eq 5
        end
      end

      context "when filtering by severity AND category" do
        it "only shows the intersection of both" do
          get "/problems/index", params: {"category[]": ["missing"], "severity[]": ["danger", "info"]}
          expect(assigns(:problems).length).to eq 3
        end
      end
    end

    describe "PATCH /problems/:id" do
      let(:problem) { create(:problem) }

      before { patch "/problems/#{problem.to_param}", params: {problem: {ignored: true}} }

      it "updates the problem and returns to list", :as_moderator do
        expect(response).to redirect_to("/problems")
      end

      it "is denied to non-moderators", :as_contributor do
        expect(response).to have_http_status(:forbidden)
      end
    end
  end
end
</file>

<file path="spec/requests/robots_spec.rb">
require "rails_helper"

RSpec.describe "Robots" do
  describe "GET /robots.txt" do
    it "returns http success if crawling is not enabled (default)" do
      allow(SiteSettings).to receive(:allow_robots).and_return(false)
      get "/robots.txt"
      expect(response).to have_http_status(:success)
    end

    it "excludes all robots if crawling is not enabled (default)" do # rubocop:disable RSpec/MultipleExpectations
      allow(SiteSettings).to receive(:allow_robots).and_return(false)
      get "/robots.txt"
      expect(response.body).to include "User-Agent: *"
      expect(response.body).to include "Disallow: /"
      expect(response.body).not_to include "Allow: /"
    end

    it "allows robots if crawling is enabled" do
      allow(SiteSettings).to receive(:allow_robots).and_return(true)
      get "/robots.txt"
      expect(response.body).to include "Allow: /"
    end

    it "includes sitemap link if crawling is enabled" do
      allow(SiteSettings).to receive(:allow_robots).and_return(true)
      get "/robots.txt"
      expect(response.body).to include "Sitemap: http://www.example.com/sitemap.xml"
    end

    it "does not include AI training directives if AI training is enabled" do # rubocop:disable RSpec/MultipleExpectations
      allow(SiteSettings).to receive(:allow_ai_bots).and_return(true)
      get "/robots.txt"
      expect(response.body).not_to include "DisallowAITraining: /"
      expect(response.body).not_to include "Content-Usage: ai=n"
      expect(response.body).not_to include "GPTBot"
    end

    it "includes AI training directives if AI training is disabled" do # rubocop:disable RSpec/MultipleExpectations
      allow(SiteSettings).to receive(:allow_ai_bots).and_return(false)
      get "/robots.txt"
      expect(response.body).to include "DisallowAITraining: /"
      expect(response.body).to include "Content-Usage: ai=n"
    end

    it "excludes known AI bots if AI training is disabled" do # rubocop:disable RSpec/MultipleExpectations
      allow(SiteSettings).to receive(:allow_ai_bots).and_return(false)
      get "/robots.txt"
      expect(response.body).to include "User-Agent: FirecrawlAgent\nDisallow: /"
    end
  end

  describe "GET /sitemap.xml" do
    it "returns http success" do
      get "/sitemap.xml"
      expect(response).to have_http_status(:success)
    end
  end
end
</file>

<file path="spec/requests/settings_spec.rb">
require "rails_helper"

#  user_settings GET    /users/:user_id/settings(.:format)                                      settings#show
#                PATCH  /users/:user_id/settings(.:format)                                      settings#update
#                PUT    /users/:user_id/settings(.:format)                                      settings#update

RSpec.describe "Settings" do
  context "when signed out" do
    describe "GET /settings" do
      it "returns access denied" do
        get "/settings"
        expect(response).to redirect_to("/users/sign_in")
      end
    end
  end

  context "when signed in", :as_contributor do
    describe "GET /settings" do
      it "returns not found" do
        get "/settings"
        expect(response).to have_http_status(:not_found)
      end
    end
  end

  context "when signed in", :as_administrator do
    describe "GET /settings" do
      it "returns http success" do
        get "/settings"
        expect(response).to have_http_status(:success)
      end
    end

    describe "PATCH /settings" do
      it "redirects back to settings on success" do
        patch "/settings"
        expect(response).to redirect_to("/settings")
      end

      context "with folder settings params" do
        let(:params) {
          {
            folders: {
              model_path_template: "test/{tags}/{modelName}{modelId}",
              parse_metadata_from_path: "1",
              safe_folder_names: "0"
            }
          }
        }

        before do
          SiteSettings.model_path_template = "before"
          SiteSettings.parse_metadata_from_path = false
          SiteSettings.safe_folder_names = true
          patch "/settings", params: params
        end

        it "saves path template" do
          expect(SiteSettings.model_path_template).to eq "test/{tags}/{modelName}{modelId}"
        end

        it "saves parsing setting" do
          expect(SiteSettings.parse_metadata_from_path).to be true
        end

        it "saves safe folder name setting" do
          expect(SiteSettings.safe_folder_names).to be false
        end
      end

      context "with file settings params" do
        let(:params) {
          {
            files: {
              model_ignored_files: "/.*\\.lys/\n/.*\\.lyt/"
            }
          }
        }

        before do
          patch "/settings", params: params
        end

        it "saves file ignore regexes" do
          expect(SiteSettings.model_ignored_files).to eq [/.*\.lys/, /.*\.lyt/]
        end
      end
    end
  end
end
</file>

<file path="spec/requests/uploads_spec.rb">
require "rails_helper"

RSpec.describe "Uploads" do
  context "when signed out" do
    describe "POST /uploads" do
      it "is denied" do
        post "/uploads"
        expect(response).to have_http_status :not_found
      end
    end
  end

  context "when signed in" do
    describe "POST /uploads" do
      it "is denied to non-contributors", :as_member do
        post "/uploads"
        expect(response).to have_http_status :not_found
      end

      it "is OK for contributors", :as_contributor do
        pending "test does not yet work with authenticate block in routes.rb"
        post "/uploads"
        expect(response).to be_http_success
      end
    end
  end
end
</file>

<file path="spec/requests/webfinger_spec.rb">
require "rails_helper"

[:multiuser, :singleuser].each do |mode|
  RSpec.describe "Webfinger (#{mode})", mode do
    context "when looking up a creator by at_address" do
      let(:creator) { create(:creator, :public) }

      before do
        get("/.well-known/webfinger?resource=#{creator.federails_actor.acct_uri}")
      end

      it "returns a successful response" do
        expect(response).to have_http_status :success
      end

      it "responds with data on the correct user" do
        expect(response.parsed_body["links"][0]["href"]).to eq creator.federails_actor.federated_url
      end
    end

    [ # rubocop:disable Performance/CollectionLiteralInLoop
      :user,
      :collection,
      :creator,
      :model
    ].each do |followable|
      context "when looking up a #{followable} by URL" do
        let(:object) { create(followable) }

        before do
          get("/.well-known/webfinger?resource=#{object.federails_actor.federated_url}")
        end

        it "returns a successful response" do
          expect(response).to have_http_status :success
        end

        it "responds with data on the correct #{followable}" do
          expect(response.parsed_body["links"][0]["href"]).to eq object.federails_actor.federated_url
        end

        it "returns a not found response if item doesn't exist" do
          get("/.well-known/webfinger?resource=#{object.federails_actor.federated_url}9999")
          expect(response).to have_http_status :not_found
        end
      end
    end
  end
end
</file>

<file path="spec/serializers/activity_pub/collection_serializer_spec.rb">
require "rails_helper"

RSpec.describe ActivityPub::CollectionSerializer do
  context "when generating an ActivityStreams representation" do
    subject(:serializer) { described_class.new(object) }

    let(:ap) { serializer.serialize }
    let(:object) { create(:collection, :public) }

    it_behaves_like "GenericActivityPubSerializer"

    it "includes concrete type" do
      expect(ap[:"f3di:concreteType"]).to eq "Collection"
    end

    it "includes preview images" do # rubocop:disable RSpec/ExampleLength
      model = create(:model, collection: object)
      file = create(:model_file, filename: "image.png", model: model)
      model.update!(preview_file: file)
      expect(ap[:preview]).to include({
        type: "Image",
        mediaType: "image/png",
        url: "http://localhost:3214/models/#{model.to_param}/model_files/#{file.to_param}.png"
      })
    end

    it "includes preview videos" do # rubocop:disable RSpec/ExampleLength
      model = create(:model, collection: object)
      file = create(:model_file, filename: "video.mp4", model: model)
      model.update!(preview_file: file)
      expect(ap[:preview]).to include({
        type: "Video",
        mediaType: "video/mp4",
        url: "http://localhost:3214/models/#{model.to_param}/model_files/#{file.to_param}.mp4"
      })
    end

    it "includes preview HTML" do # rubocop:disable RSpec/ExampleLength, RSpec/MultipleExpectations
      model = create(:model, collection: object)
      file = create(:model_file, filename: "model.stl", model: model)
      model.update!(preview_file: file)
      expect(ap[:preview]).to include({
        type: "Document",
        mediaType: "text/html"
      })
      expect(ap[:preview][:content]).to start_with "<iframe"
    end
  end
end
</file>

<file path="spec/serializers/activity_pub/comment_serializer_spec.rb">
require "rails_helper"

RSpec.describe ActivityPub::CommentSerializer do
  subject(:serializer) { described_class.new(comment) }

  let(:ap) { serializer.serialize }

  context "when commenting on something with tags" do
    let(:model) { create(:model, tag_list: ["tag"]) }
    let(:comment) { create(:comment, commentable: model, commenter: model) }

    it "adds tag list to a trailing paragraph in content" do
      expect(ap["content"]).to include "<p role=\"list\">"
    end

    it "adds tag link" do
      expect(ap["content"]).to include "<a role=\"listitem\" href=\"http://localhost:3214/models?tag=tag\" class=\"mention hashtag\" rel=\"tag\">#Tag</a>"
    end
  end

  context "when commenting on something with no tags" do
    let(:model) { create(:model, tag_list: nil) }
    let(:comment) { create(:comment, commentable: model, commenter: model) }

    it "doesn't include tag list paragraph" do
      expect(ap["content"]).not_to include "<p role=\"list\">"
    end
  end

  context "when a public creator comments on a public model" do
    let(:creator) { create(:creator, :public) }
    let(:model) { create(:model, :public) }
    let(:comment) { create(:comment, commenter: creator, commentable: model) }

    it "includes public collection in to" do
      expect(serializer.to).to include "https://www.w3.org/ns/activitystreams#Public"
    end

    it "includes model followers collection in cc" do
      expect(serializer.cc).to include model.federails_actor.followers_url
    end

    it "includes creator followers collection in cc" do
      expect(serializer.cc).to include creator.federails_actor.followers_url
    end
  end

  context "when a public creator comments on a public model in a public collection" do
    let(:creator) { create(:creator, :public) }
    let(:collection) { create(:collection, :public) }
    let(:model) { create(:model, :public, collection: collection) }
    let(:comment) { create(:comment, commenter: creator, commentable: model) }

    it "includes collection followers collection in cc" do
      expect(serializer.cc).to include collection.federails_actor.followers_url
    end
  end

  context "when a public creator comments on a public collection" do
    let(:creator) { create(:creator, :public) }
    let(:collection) { create(:collection, :public) }
    let(:comment) { create(:comment, commenter: creator, commentable: collection) }

    it "includes collection followers collection in cc" do
      expect(serializer.cc).to include collection.federails_actor.followers_url
    end
  end

  context "when a public collection comments on itself with a public creator" do
    let(:creator) { create(:creator, :public) }
    let(:collection) { create(:collection, :public, creator: creator) }
    let(:comment) { create(:comment, commenter: collection, commentable: collection) }

    it "includes creator followers collection in cc" do
      expect(serializer.cc).to include creator.federails_actor.followers_url
    end
  end

  context "when a public creator comments on a public collection that is itself inside a public collection" do
    let(:creator) { create(:creator, :public) }
    let(:parent_collection) { create(:collection, :public) }
    let(:collection) { create(:collection, :public, collection: parent_collection) }
    let(:comment) { create(:comment, commenter: creator, commentable: collection) }

    it "includes parent collection followers collection in cc" do
      expect(serializer.cc).to include parent_collection.federails_actor.followers_url
    end
  end
end
</file>

<file path="spec/serializers/activity_pub/creator_serializer_spec.rb">
require "rails_helper"

RSpec.describe ActivityPub::CreatorSerializer do
  context "when generating an ActivityStreams representation" do
    subject(:serializer) { described_class.new(object) }

    let(:ap) { serializer.serialize }
    let(:object) { create(:creator, :public) }

    it_behaves_like "GenericActivityPubSerializer"

    it "includes concrete type" do
      expect(ap[:"f3di:concreteType"]).to eq "Creator"
    end

    it "includes attributionDomain" do
      expect(ap[:attributionDomains]).to eq ["localhost:3214"]
    end
  end
end
</file>

<file path="spec/serializers/activity_pub/generic_activity_pub_serializer_shared.rb">
shared_examples "GenericActivityPubSerializer" do
  it "includes caption in summary" do
    expect(ap[:summary]).to include object.caption
  end

  it "includes notes in content" do
    expect(ap[:content]).to include object.notes
  end

  it "includes links as attachments" do
    expect(ap[:attachment]).to include({type: "Link", href: "http://example.com"})
  end

  it "includes inherited indexable flag" do
    allow(SiteSettings).to receive(:default_indexable).and_return(false)
    object.update!(indexable: "inherit")
    expect(ap).to include({
      indexable: false
    })
  end

  it "includes explicit indexable flag" do
    allow(SiteSettings).to receive(:default_indexable).and_return(false)
    object.update!(indexable: "yes")
    expect(ap).to include({
      indexable: true
    })
  end
end
</file>

<file path="spec/serializers/activity_pub/model_serializer_spec.rb">
require "rails_helper"

RSpec.describe ActivityPub::ModelSerializer do
  context "when generating an ActivityStreams representation" do
    subject(:serializer) { described_class.new(object) }

    let(:ap) { serializer.serialize }
    let(:object) { create(:model, :with_tags, :public, tag_list: []) }

    it_behaves_like "GenericActivityPubSerializer"

    it "includes concrete type" do
      expect(ap[:"f3di:concreteType"]).to eq "3DModel"
    end

    it "includes right number of tags" do
      expect(ap[:tag].count).to eq 2
    end

    it "has valid tag structure" do
      expect(ap[:tag].first).to eq({
        type: "Hashtag",
        name: "Tag #0",
        href: "http://localhost:3214/models?tag=Tag+%230"
      })
    end

    it "includes preview images" do # rubocop:disable RSpec/ExampleLength
      file = create(:model_file, filename: "image.png", model: object)
      object.update!(preview_file: file)
      expect(ap[:preview]).to include({
        type: "Image",
        mediaType: "image/png",
        url: "http://localhost:3214/models/#{object.to_param}/model_files/#{file.to_param}.png"
      })
    end

    it "includes preview videos" do # rubocop:disable RSpec/ExampleLength
      file = create(:model_file, filename: "video.mp4", model: object)
      object.update!(preview_file: file)
      expect(ap[:preview]).to include({
        type: "Video",
        mediaType: "video/mp4",
        url: "http://localhost:3214/models/#{object.to_param}/model_files/#{file.to_param}.mp4"
      })
    end

    it "includes preview HTML" do # rubocop:disable RSpec/ExampleLength, RSpec/MultipleExpectations
      file = create(:model_file, filename: "image.stl", model: object)
      object.update!(preview_file: file)
      expect(ap[:preview]).to include({
        type: "Document",
        mediaType: "text/html"
      })
      expect(ap[:preview][:content]).to start_with "<iframe"
    end

    it "includes preview file name and summary" do # rubocop:disable RSpec/ExampleLength
      file = create(:model_file, filename: "model_name.stl", model: object, caption: "caption here")
      object.update!(preview_file: file)
      expect(ap[:preview]).to include({
        name: "Model Name",
        summary: "caption here"
      })
    end
  end
end
</file>

<file path="spec/serializers/activity_pub/user_serializer_spec.rb">
require "rails_helper"

RSpec.describe ActivityPub::UserSerializer do
  context "when generating an ActivityStreams representation" do
    subject(:serializer) { described_class.new(object) }

    let(:ap) { serializer.serialize }
    let(:object) { create(:contributor) }

    it "includes concrete type" do
      expect(ap[:"f3di:concreteType"]).to eq "User"
    end
  end
end
</file>

<file path="spec/serializers/data_package/collection_serializer_spec.rb">
require "rails_helper"

RSpec.describe DataPackage::CollectionSerializer do
  context "when generating an Data Package representation" do
    subject(:serializer) { described_class.new(object) }

    let(:output) { serializer.serialize }
    let(:object) {
      create(:collection,
        links_attributes: [{url: "https://example.com"}],
        caption: "caption goes here",
        notes: "notes go here")
    }

    it "includes name" do
      expect(output[:title]).to eq object.name
    end

    it "includes path" do
      expect(output[:path]).to eq "http://localhost:3214/collections/#{object.to_param}"
    end

    context "with extension fields" do
      it "includes links" do
        expect(output.dig(:links, 0, :path)).to be_present
      end

      it "includes caption" do
        expect(output[:caption]).to eq object.caption
      end

      it "includes notes" do
        expect(output[:description]).to eq object.notes
      end
    end
  end
end
</file>

<file path="spec/serializers/data_package/creator_serializer_spec.rb">
require "rails_helper"

RSpec.describe DataPackage::CreatorSerializer do
  context "when generating an Data Package representation" do
    subject(:serializer) { described_class.new(object) }

    let(:output) { serializer.serialize }
    let(:object) {
      create(:creator,
        links_attributes: [{url: "https://example.com"}],
        caption: "caption goes here",
        notes: "notes go here")
    }

    it "includes name" do
      expect(output[:title]).to eq object.name
    end

    it "includes creator role" do
      expect(output[:roles][0]).to eq "creator"
    end

    it "includes path" do
      expect(output[:path]).to eq "http://localhost:3214/creators/#{object.to_param}"
    end

    context "with extension fields" do
      it "includes links" do
        expect(output.dig(:links, 0, :path)).to be_present
      end

      it "includes caption" do
        expect(output[:caption]).to eq object.caption
      end

      it "includes notes" do
        expect(output[:description]).to eq object.notes
      end
    end
  end
end
</file>

<file path="spec/serializers/data_package/link_serializer_spec.rb">
require "rails_helper"

RSpec.describe DataPackage::LinkSerializer do
  context "when generating an Data Package representation" do
    subject(:serializer) { described_class.new(object) }

    let(:output) { serializer.serialize }
    let(:object) { create(:link, linkable: create(:model)) }

    it "includes path" do
      expect(output[:path]).to eq object.url
    end
  end
end
</file>

<file path="spec/serializers/data_package/model_file_serializer_spec.rb">
require "rails_helper"

RSpec.describe DataPackage::ModelFileSerializer do
  context "when generating an Data Resource representation" do
    subject(:serializer) { described_class.new(object) }

    let(:output) { serializer.serialize }
    let(:object) {
      create(:model_file,
        filename: "files/test model.stl",
        presupported: true,
        y_up: true,
        caption: "caption goes here",
        notes: "description goes here")
    }

    it "includes name" do
      expect(output[:name]).to eq "test-model"
    end

    it "includes path" do
      expect(output[:path]).to eq "files/test model.stl"
    end

    it "includes media type" do
      expect(output[:mediatype]).to eq "model/stl"
    end

    context "with extension fields" do
      it "includes notes" do
        expect(output[:description]).to eq "description goes here"
      end

      it "includes caption" do
        expect(output[:caption]).to eq "caption goes here"
      end

      it "includes presupported flag" do
        expect(output[:presupported]).to be true
      end

      it "includes orientation" do
        expect(output[:up]).to eq "+y"
      end
    end
  end
end
</file>

<file path="spec/serializers/data_package/model_serializer_spec.rb">
require "rails_helper"

RSpec.describe DataPackage::ModelSerializer do
  context "when generating an Data Package representation" do
    subject(:serializer) { described_class.new(object) }

    let(:output) { serializer.serialize }
    let(:object) {
      m = create(:model, :with_tags,
        name: "Test Model",
        creator: create(:creator),
        collection: create(:collection),
        sensitive: true,
        links_attributes: [
          {url: "https://example.com"}
        ])
      image = create(:model_file, filename: "image.png", model: m)
      m.preview_file = image
      create(:model_file, filename: "model.stl", model: m)
      m
    }

    it "includes name" do
      expect(output[:name]).to eq "test-model"
    end

    it "includes title" do
      expect(output[:title]).to eq "Test Model"
    end

    it "includes notes in description field" do
      expect(output[:description]).to eq object.notes
    end

    it "includes homepage" do
      expect(output[:homepage]).to eq "http://localhost:3214/models/#{object.to_param}"
    end

    it "includes image if preview is set to an image" do
      expect(output[:image]).to eq "image.png"
    end

    it "does not include image if preview is missing" do
      object.preview_file = nil
      expect(output[:image]).to be_nil
    end

    it "does not include image if preview is a 3d model" do
      object.preview_file = object.model_files.find_by(filename: "model.stl")
      expect(output[:image]).to be_nil
    end

    it "includes tags in keywords" do
      expect(output[:keywords]).to include(
        "Tag #0",
        "Tag #1"
      )
    end

    it "includes license" do
      expect(output[:licenses][0]).to eq({
        name: "MIT",
        path: "https://spdx.org/licenses/MIT.html"
      })
    end

    it "supports commercial license with no path" do
      object.license = "LicenseRef-Commercial"
      expect(output[:licenses][0]).to eq({
        name: "LicenseRef-Commercial"
      })
    end

    it "works with no license" do
      object.license = nil
      expect(output[:licenses]).to be_nil
    end

    it "includes resources" do
      expect(output[:resources]).not_to be_empty
    end

    it "includes valid resource data" do
      expect(output[:resources][0]).to have_key(:path)
    end

    it "includes valid contributor data" do
      expect(output[:contributors][0]).to have_key(:title)
    end

    it "does not include contributors if there is no creator" do
      object.creator = nil
      expect(output[:contributors]).to be_nil
    end

    context "with extension fields" do
      it "includes link to extension schema" do
        expect(output[:$schema]).to eq "https://manyfold.app/profiles/0.0/datapackage.json"
      end

      it "includes links" do
        expect(output.dig(:links, 0, :path)).to be_present
      end

      it "includes collection data" do
        expect(output.dig(:collections, 0, :title)).to be_present
      end

      it "includes caption" do
        expect(output[:caption]).to eq object.caption
      end

      it "includes sensitive flag" do
        expect(output[:sensitive]).to eq object.sensitive
      end
    end
  end
end
</file>

<file path="spec/serializers/manyfold_api/v0/collection_list_serializer_spec.rb">
require "rails_helper"

RSpec.describe ManyfoldApi::V0::CollectionListSerializer do
  context "when generating a JSON-LD representation" do
    subject(:serializer) { described_class.new(object) }

    before do
      create_list(:collection, 10)
    end

    let(:output) { serializer.serialize }
    let(:object) { Collection.all.page(0).per(2) }
    let(:collection) { Collection.first }

    it "uses HYDRA JSON-LD context" do
      expect(output[:@context][1]).to include({hydra: "http://www.w3.org/ns/hydra/core#"})
    end

    it "uses HYDRA collection type" do
      expect(output[:@type]).to eq "hydra:Collection"
    end

    it "has collection list URL in @id" do
      expect(output[:@id]).to eq "/collections"
    end

    it "has total item count" do
      expect(output[:totalItems]).to eq 10
    end

    it "has view object for pagination" do
      expect(output).to have_key :view
    end

    it "view object has current page in ID" do
      expect(output[:view][:@id]).to eq "/collections?page=1"
    end

    it "view object has correct type" do
      expect(output[:view][:@type]).to eq "hydra:PartialCollectionView"
    end

    it "view object includes link to first page" do
      expect(output[:view][:first]).to eq "/collections?page=1"
    end

    it "view object includes link to next page" do
      expect(output[:view][:next]).to eq "/collections?page=2"
    end

    it "view object has no link to previous page if at start" do
      expect(output[:view][:prev]).to be_nil
    end

    it "view object includes link to last page" do
      expect(output[:view][:last]).to eq "/collections?page=5"
    end

    it "produces member array" do
      expect(output[:member]).to be_an Array
    end

    it "includes ID for each collection" do
      expect(output[:member][0][:@id]).to eq "/collections/#{collection.to_param}"
    end

    it "includes name for each collection" do
      expect(output[:member][0][:name]).to eq collection.name
    end
  end
end
</file>

<file path="spec/serializers/manyfold_api/v0/creator_list_serializer_spec.rb">
require "rails_helper"

RSpec.describe ManyfoldApi::V0::CreatorListSerializer do
  context "when generating a JSON-LD representation" do
    subject(:serializer) { described_class.new(object) }

    before do
      create_list(:creator, 10)
    end

    let(:output) { serializer.serialize }
    let(:object) { Creator.all.page(0).per(2) }
    let(:creator) { Creator.first }

    it "uses HYDRA JSON-LD context" do
      expect(output[:@context][1]).to include({hydra: "http://www.w3.org/ns/hydra/core#"})
    end

    it "uses HYDRA collection type" do
      expect(output[:@type]).to eq "hydra:Collection"
    end

    it "has creator list URL in @id" do
      expect(output[:@id]).to eq "/creators"
    end

    it "has total item count" do
      expect(output[:totalItems]).to eq 10
    end

    it "has view object for pagination" do
      expect(output).to have_key :view
    end

    it "view object has current page in ID" do
      expect(output[:view][:@id]).to eq "/creators?page=1"
    end

    it "view object has correct type" do
      expect(output[:view][:@type]).to eq "hydra:PartialCollectionView"
    end

    it "view object includes link to first page" do
      expect(output[:view][:first]).to eq "/creators?page=1"
    end

    it "view object includes link to next page" do
      expect(output[:view][:next]).to eq "/creators?page=2"
    end

    it "view object has no link to previous page if at start" do
      expect(output[:view][:prev]).to be_nil
    end

    it "view object includes link to last page" do
      expect(output[:view][:last]).to eq "/creators?page=5"
    end

    it "produces member array" do
      expect(output[:member]).to be_an Array
    end

    it "includes ID for each creator" do
      expect(output[:member][0][:@id]).to eq "/creators/#{creator.to_param}"
    end

    it "includes name for each creator" do
      expect(output[:member][0][:name]).to eq creator.name
    end
  end
end
</file>

<file path="spec/serializers/manyfold_api/v0/model_list_serializer_spec.rb">
require "rails_helper"

RSpec.describe ManyfoldApi::V0::ModelListSerializer do
  context "when generating a JSON-LD representation" do
    subject(:serializer) { described_class.new(object) }

    before do
      create_list(:model, 10)
    end

    let(:output) { serializer.serialize }
    let(:object) { Model.all.page(0).per(2) }
    let(:model) { Model.first }

    it "uses HYDRA JSON-LD context" do
      expect(output[:@context][1]).to include({hydra: "http://www.w3.org/ns/hydra/core#"})
    end

    it "uses HYDRA collection type" do
      expect(output[:@type]).to eq "hydra:Collection"
    end

    it "has model list URL in @id" do
      expect(output[:@id]).to eq "/models"
    end

    it "has total item count" do
      expect(output[:totalItems]).to eq 10
    end

    it "has view object for pagination" do
      expect(output).to have_key :view
    end

    it "view object has current page in ID" do
      expect(output[:view][:@id]).to eq "/models?page=1"
    end

    it "view object has correct type" do
      expect(output[:view][:@type]).to eq "hydra:PartialCollectionView"
    end

    it "view object includes link to first page" do
      expect(output[:view][:first]).to eq "/models?page=1"
    end

    it "view object includes link to next page" do
      expect(output[:view][:next]).to eq "/models?page=2"
    end

    it "view object has no link to previous page if at start" do
      expect(output[:view][:prev]).to be_nil
    end

    it "view object includes link to last page" do
      expect(output[:view][:last]).to eq "/models?page=5"
    end

    it "produces member array" do
      expect(output[:member]).to be_an Array
    end

    it "includes ID for each model" do
      expect(output[:member][0][:@id]).to eq "http://localhost:3214/models/#{model.to_param}"
    end

    it "includes name for each model" do
      expect(output[:member][0][:name]).to eq model.name
    end
  end
end
</file>

<file path="spec/serializers/o_embed/collection_serializer_spec.rb">
require "rails_helper"

RSpec.describe OEmbed::CollectionSerializer do
  context "when generating oEmbed representation" do
    subject(:serializer) { described_class.new(collection) }

    let(:result) { serializer.serialize }

    context "when serializing the basics" do
      let(:collection) { create(:collection, :public) }

      it_behaves_like "GenericOEmbedSerializer"

      it "includes collection name" do
        expect(result[:title]).to eq collection.name
      end
    end

    context "when serializing creator info" do
      let(:creator) { create(:creator, :public) }
      let(:collection) { create(:collection, :public, creator: creator) }

      it "includes creator name" do
        expect(result[:author_name]).to eq creator.name
      end

      it "includes creator link" do
        expect(result[:author_url]).to eq "http://localhost:3214/creators/#{creator.to_param}"
      end
    end

    context "when showing a collection with an image preview" do
      let(:model) {
        m = create(:model, :public)
        m.update!(preview_file: create(:model_file, filename: "image.png", model: m))
        m
      }
      let(:collection) {
        c = create(:collection, :public)
        model.update!(collection: c)
        c
      }

      it "has photo type" do
        expect(result[:type]).to eq "photo"
      end

      it "includes image url" do
        expect(result[:url]).to eq "http://localhost:3214/models/#{model.to_param}/model_files/#{model.preview_file.to_param}.png"
      end
    end

    context "when showing a collection with a video preview" do
      let(:model) {
        m = create(:model, :public)
        m.update!(preview_file: create(:model_file, filename: "video.mp4", model: m))
        m
      }
      let(:collection) {
        c = create(:collection, :public)
        model.update!(collection: c)
        c
      }

      it "has video type" do
        expect(result[:type]).to eq "video"
      end

      it "generates HTML video tag" do
        expect(result[:html]).to start_with "<video"
      end
    end

    context "when showing a collection with a 3d preview" do
      let(:model) {
        m = create(:model, :public)
        m.update!(preview_file: create(:model_file, filename: "model.stl", model: m))
        m
      }
      let(:collection) {
        c = create(:collection, :public)
        model.update!(collection: c)
        c
      }

      it "has rich type" do
        expect(result[:type]).to eq "rich"
      end

      it "generates HTML iframe tag" do
        expect(result[:html]).to start_with "<iframe"
      end
    end

    context "when showing a collection with a PDF preview" do
      let(:model) {
        m = create(:model, :public)
        m.update!(preview_file: create(:model_file, filename: "instructions.pdf", model: m))
        m
      }
      let(:collection) {
        c = create(:collection, :public)
        model.update!(collection: c)
        c
      }

      it "has link type" do
        expect(result[:type]).to eq "link"
      end
    end

    context "when showing a collection with no preview" do
      let(:collection) { create(:collection, :public) }

      it "has link type" do
        expect(result[:type]).to eq "link"
      end
    end
  end
end
</file>

<file path="spec/serializers/o_embed/creator_serializer_spec.rb">
require "rails_helper"

RSpec.describe OEmbed::CreatorSerializer do
  context "when generating oEmbed representation" do
    subject(:serializer) { described_class.new(creator) }

    let(:result) { serializer.serialize }

    context "when serializing the basics" do
      let(:creator) { create(:creator, :public) }

      it_behaves_like "GenericOEmbedSerializer"

      it "includes Creator name" do
        expect(result[:title]).to eq creator.name
      end

      it "has link type" do
        expect(result[:type]).to eq "link"
      end
    end
  end
end
</file>

<file path="spec/serializers/o_embed/generic_o_embed_serializer_shared.rb">
shared_examples "GenericOEmbedSerializer" do
  it "includes version" do
    expect(result[:version]).to eq "1.0"
  end

  it "includes cache age" do
    expect(result[:cache_age]).to eq 86400
  end

  it "includes site name" do
    expect(result[:provider_name]).to eq "Manyfold"
  end

  it "includes site url" do
    expect(result[:provider_url]).to eq "http://localhost:3214/"
  end
end
</file>

<file path="spec/serializers/o_embed/model_serializer_spec.rb">
require "rails_helper"

RSpec.describe OEmbed::ModelSerializer do
  context "when generating oEmbed representation" do
    subject(:serializer) { described_class.new(model) }

    let(:result) { serializer.serialize }

    context "when serializing the basics" do
      let(:model) { create(:model, :public) }

      it_behaves_like "GenericOEmbedSerializer"

      it "includes model name" do
        expect(result[:title]).to eq model.name
      end
    end

    context "when serializing creator info" do
      let(:creator) { create(:creator, :public) }
      let(:model) { create(:model, :public, creator: creator) }

      it "includes creator name" do
        expect(result[:author_name]).to eq creator.name
      end

      it "includes creator link" do
        expect(result[:author_url]).to eq "http://localhost:3214/creators/#{creator.to_param}"
      end
    end

    context "when showing a model with an image preview" do
      let(:model) {
        m = create(:model, :public)
        m.preview_file = create(:model_file, filename: "image.png", model: m)
        m
      }

      it "has photo type" do
        expect(result[:type]).to eq "photo"
      end

      it "includes image url" do
        expect(result[:url]).to eq "http://localhost:3214/models/#{model.to_param}/model_files/#{model.preview_file.to_param}.png"
      end
    end

    context "when showing a model with an video preview" do
      let(:model) {
        m = create(:model, :public)
        m.preview_file = create(:model_file, filename: "video.mp4", model: m)
        m
      }

      it "has video type" do
        expect(result[:type]).to eq "video"
      end

      it "includes video url" do
        expect(result[:url]).to eq "http://localhost:3214/models/#{model.to_param}/model_files/#{model.preview_file.to_param}.mp4"
      end

      it "generates HTML video tag" do
        expect(result[:html]).to start_with "<video"
      end
    end

    context "when showing a model with a 3d preview" do
      let(:model) {
        m = create(:model, :public)
        m.preview_file = create(:model_file, filename: "model.stl", model: m)
        m
      }

      it "has rich type" do
        expect(result[:type]).to eq "rich"
      end

      it "generates HTML iframe tag" do
        expect(result[:html]).to start_with "<iframe"
      end
    end

    context "when showing a model with a PDF preview" do
      let(:model) {
        m = create(:model, :public)
        m.preview_file = create(:model_file, filename: "instructions.pdf", model: m)
        m
      }

      it "has link type" do
        expect(result[:type]).to eq "link"
      end
    end

    context "when showing a model with no preview" do
      let(:model) { create(:model, :public) }

      it "has link type" do
        expect(result[:type]).to eq "link"
      end
    end
  end
end
</file>

<file path="spec/services/search/model_search_service_spec.rb">
require "rails_helper"

RSpec.describe Search::ModelSearchService do
  subject(:service) { described_class.new(Model) }

  context "with a range of models" do
    before do
      seuss = create(:creator, name: "Dr Seuss")
      bats = create(:collection, name: "Chiroptera")
      create(:model, name: "cat in the hat", tag_list: ["dog", "log", "frog", "cat"], creator: seuss, notes: "lorem ipsum", caption: nil)
      create(:model, name: "hat on the cat", tag_list: ["dog"], creator: seuss, notes: nil, caption: "dolor sit amet")
      create(:model, name: "bat on a mat", tag_list: ["log"], collection: bats, notes: nil, caption: nil)
      model = create(:model, name: "bat on a hat", tag_list: ["frog"], collection: bats, notes: nil, caption: nil)
      create(:model_file, filename: "big_hat.stl", model: model)
    end

    it "searches for a simple term" do
      expect(service.search("cat").pluck(:name)).to eq [
        "cat in the hat",
        "hat on the cat"
      ]
    end

    it "searches for term which match a tag" do
      expect(service.search("dog").pluck(:name)).to eq [
        "cat in the hat",
        "hat on the cat"
      ]
    end

    it "searches in creator names" do
      expect(service.search("seuss").pluck(:name)).to eq [
        "cat in the hat",
        "hat on the cat"
      ]
    end

    it "searches in collection names" do
      expect(service.search("chiro").pluck(:name)).to eq [
        "bat on a mat",
        "bat on a hat"
      ]
    end

    it "searches for results with any of the specified terms" do
      expect(service.search("cat or in or the or hat").pluck(:name)).to eq [
        "cat in the hat",
        "hat on the cat",
        "bat on a hat"
      ]
    end

    it "searches for results containing two unquoted terms" do
      expect(service.search("the hat").pluck(:name)).to eq [
        "cat in the hat",
        "hat on the cat"
      ]
    end

    it "searches for results containing the exact quoted term" do
      expect(service.search('"the hat"').pluck(:name)).to eq [
        "cat in the hat"
      ]
    end

    it "searches for results which don't have an excluded term" do
      expect(service.search("hat and not cat").pluck(:name)).to eq [
        "bat on a hat"
      ]
    end

    it "searches for AND combination of exclusions" do
      expect(service.search("not cat and not hat").pluck(:name)).to eq [
        "bat on a mat"
      ]
    end

    it "searches for OR combination of exclusions" do
      expect(service.search("not cat or not hat").pluck(:name)).to eq [
        "bat on a mat",
        "bat on a hat"
      ]
    end

    it "searches for complex combinations" do
      expect(service.search("(cat or hat) and not on").pluck(:name)).to eq [
        "cat in the hat"
      ]
    end

    it "searches for other complex combinations" do
      expect(service.search("(cat or bat) and hat").pluck(:name)).to eq [
        "cat in the hat",
        "hat on the cat",
        "bat on a hat"
      ]
    end

    it "searches for results which have all the words" do
      expect(service.search("cat hat").pluck(:name)).to eq [
        "cat in the hat",
        "hat on the cat"
      ]
    end

    it "searches for results which have a specific tag" do
      expect(service.search("hat tag=cat").pluck(:name)).to eq [
        "cat in the hat"
      ]
    end

    it "searches for results which don't have the specified tag" do
      expect(service.search("bat tag != frog").pluck(:name)).to eq [
        "bat on a mat"
      ]
    end

    it "finds results which have a required word and a required tag" do
      expect(service.search("on tag=frog").pluck(:name)).to eq [
        "bat on a hat"
      ]
    end

    it "finds results with a combination of tags" do
      expect(service.search("tag=frog tag=dog").pluck(:name)).to eq [
        "cat in the hat"
      ]
    end

    it "finds results with an OR combination of tags" do
      expect(service.search("tag=frog or tag=dog").pluck(:name)).to eq [
        "cat in the hat",
        "bat on a hat",
        "hat on the cat"
      ]
    end

    it "search specifically by creator name" do
      expect(service.search("hat creator~dr").pluck(:name)).to eq [
        "cat in the hat",
        "hat on the cat"
      ]
    end

    it "filter specifically by collection name" do
      expect(service.search("hat collection~chiro").pluck(:name)).to eq [
        "bat on a hat"
      ]
    end

    it "searches in notes if specified" do
      expect(service.search("description ~ lorem").pluck(:name)).to eq [
        "cat in the hat"
      ]
    end

    it "searches in captions" do
      expect(service.search("dolor").pluck(:name)).to eq [
        "hat on the cat"
      ]
    end

    it "searches in model filenames if specified" do
      expect(service.search("filename ~ big").pluck(:name)).to eq [
        "bat on a hat"
      ]
    end
  end

  context "with indexing controls" do
    let!(:local_indexable) { create(:model, name: "test local indexable", indexable: "yes") }
    let!(:local_non_indexable) { create(:model, name: "test local nonindexable", indexable: "no") }
    let!(:remote_indexable) { create(:model, :remote, name: "test remote indexable", indexable: "yes") }
    let!(:remote_non_indexable) { create(:model, :remote, name: "test remote nonindexable", indexable: "no") }

    it "matches local models which are marked as indexable" do
      expect(service.search("test")).to include local_indexable
    end

    it "matches local models which are marked as non-indexable" do
      expect(service.search("test")).to include local_non_indexable
    end

    it "matches remote models which are marked as indexable" do
      expect(service.search("test")).to include remote_indexable
    end

    it "doesn't match remote models which are marked as non-indexable" do
      expect(service.search("test")).not_to include remote_non_indexable
    end
  end
end
</file>

<file path="spec/services/path_parser_service_spec.rb">
require "rails_helper"

RSpec.describe PathParserService do
  subject(:service) { described_class.new(SiteSettings.model_path_template, path) }

  let(:path) { "/top/middle/bottom/prefix - name#42" }

  {
    "{tags}" => %r{^/?.*?(?<tags>[[:print:]]*)$},
    "{creator}" => %r{^/?.*?(?<creator>[[:print:]&&[^/]]*?)$},
    "{collection}" => %r{^/?.*?(?<collection>[[:print:]&&[^/]]*?)$},
    "{tags}/{creator}" => %r{^/?.*?(?<tags>[[:print:]]*)/(?<creator>[[:print:]&&[^/]]*?)$},
    "{tags}/{creator}/{modelName}{modelId}" => %r{^/?.*?(?<tags>[[:print:]]*)/(?<creator>[[:print:]&&[^/]]*?)/(?<model_name>[[:print:]&&[^/]]*?)(?<model_id>#[[:digit:]]+)?$},
    "@{creator}{modelId}" => %r{^/?.*?@(?<creator>[[:print:]&&[^/]]*?)(?<model_id>#[[:digit:]]+)?$},
    "{creator}/{collection}/{tags}/{modelName}{modelId}" => %r{^/?.*?(?<creator>[[:print:]&&[^/]]*?)/(?<collection>[[:print:]&&[^/]]*?)/(?<tags>[[:print:]]*)/(?<model_name>[[:print:]&&[^/]]*?)(?<model_id>#[[:digit:]]+)?$}
  }.each_pair do |tag, regexp|
    it "correctly converts #{tag} into a regexp matcher" do
      allow(SiteSettings).to receive(:model_path_template).and_return(tag)
      expect(service.send(:path_parse_pattern)).to eql regexp
    end
  end

  {
    "{tags}/{modelName}{modelId}" => {
      tags: ["top", "middle", "bottom"],
      model_name: "prefix - name"
    },
    "{creator}/{modelName}{modelId}" => {
      creator: "bottom",
      model_name: "prefix - name"
    },
    "{collection}/{modelName}{modelId}" => {
      collection: "bottom",
      model_name: "prefix - name"
    },
    "{tags}/{creator}/{modelName}{modelId}" => {
      creator: "bottom",
      tags: ["top", "middle"],
      model_name: "prefix - name"
    },
    "{creator}{modelId}" => {
      creator: "prefix - name"
    },
    "{tags}/{creator}/{collection} - {modelName}{modelId}" => {
      tags: ["top", "middle"],
      creator: "bottom",
      collection: "prefix",
      model_name: "name"
    }
  }.each_pair do |tag, values|
    it "correctly matches components of #{tag}" do
      allow(SiteSettings).to receive(:model_path_template).and_return(tag)
      expect(service.call).to eql values
    end
  end
end
</file>

<file path="spec/support/database_cleaner.rb">
RSpec.configure do |config|
  config.before(:suite) do
    DatabaseCleaner.strategy = :transaction
    DatabaseCleaner.clean_with(:truncation)
  end

  config.around do |example|
    DatabaseCleaner.cleaning do
      example.run
    end
  end
end
</file>

<file path="spec/support/devise.rb">
RSpec.configure do |config|
  config.include Devise::Test::IntegrationHelpers, type: :request
end
</file>

<file path="spec/support/error_handling.rb">
RSpec.configure do |config|
  config.around(:each, type: :request) do |example|
    # Make Rails respond to errors like it would in production
    env_config = Rails.application.env_config
    original_show_exceptions = env_config["action_dispatch.show_exceptions"]
    original_show_detailed_exceptions = env_config["action_dispatch.show_detailed_exceptions"]
    env_config["action_dispatch.show_exceptions"] = true
    env_config["action_dispatch.show_detailed_exceptions"] = false
    # Test
    example.run
  ensure
    # Restore config
    env_config["action_dispatch.show_exceptions"] = original_show_exceptions
    env_config["action_dispatch.show_detailed_exceptions"] = original_show_detailed_exceptions
  end
end
</file>

<file path="spec/support/factory_bot.rb">
require "factory_bot"

RSpec.configure do |config|
  config.include FactoryBot::Syntax::Methods
  config.before(:suite) do
    FactoryBot.find_definitions
  end
end
</file>

<file path="spec/support/features.rb">
RSpec.configure do |config|
  config.before(:each, :multiuser) do
    allow(SiteSettings).to receive(:multiuser_enabled?).and_return(true)
  end

  config.before(:each, :singleuser) do
    allow(SiteSettings).to receive(:multiuser_enabled?).and_return(false)
  end

  config.before(:each, :federated) do
    allow(SiteSettings).to receive(:federation_enabled?).and_return(true)
  end

  config.before(:each, :demo_mode) do
    allow(SiteSettings).to receive(:demo_mode_enabled?).and_return(true)
  end

  config.before(:each, :after_first_run) do
    create(:admin)
  end
end
</file>

<file path="spec/support/maintain_test_assets.rb">
# From https://stackoverflow.com/questions/71262775/how-do-i-ensure-assets-are-present-with-rail-7-cssbundling-rails-jsbundling-ra

# Under Rails 7 with 'cssbundling-rails' and/or the 'jsbundling-rails' gems,
# entirely external systems are used for asset management. With Sprockets no
# longer synchronously building assets on-demand and only when the source files
# changed, compiled assets might be (during local development) or will almost
# always be (CI systems) either out of date or missing when tests are run.
#
# People are used to "bundle exec rspec" and things working. The out-of-box gem
# 'cssbundling-rails' hooks into a vanilla Rails "prepare" task, running a full
# "css:build" task in response. This is quite slow and generates console spam
# on every test run, but points to a slightly better solution for RSpec.
#
# This class is a way of packaging that solution. The class wrapper is really
# just a namespace / container for the code.
#
# First, if you aren't already doing this, add the folllowing lines to
# "spec_helper.rb" somewhere *after* the "require 'rspec/rails'" line:
#
#     require 'rake'
#     YourAppName::Application.load_tasks
#
# ...and call MaintainTestAssets::maintain! (see that method's documentation
# for details). See also constants MaintainTestAssets::ASSET_SOURCE_FOLDERS and
# MaintainTestAssets::EXPECTED_ASSETS for things you may want to customise.
#
class MaintainTestAssets
  # All the places where you have asset files of any kind that you expect to be
  # dynamically compiled/transpiled/etc. via external tooling. The given arrays
  # are passed to "Rails.root.join..." to generate full pathnames.
  #
  # Folders are checked recursively. If any file timestamp therein is greater
  # than (newer than) any of EXPECTED_ASSETS, a rebuild is triggered.
  #
  ASSET_SOURCE_FOLDERS = [
    ["app", "assets", "stylesheets"],
    ["app", "javascript"]
  ]

  # The leaf files that ASSET_SOURCE_FOLDERS will build. These are all checked
  # for in "File.join(Rails.root, 'app', 'assets', 'builds')". Where files are
  # written together - e.g. a ".js" and ".js.map" file - you only need to list
  # any one of the group of concurrently generated files.
  #
  # In a standard JS / CSS combination this would just be 'application.css' and
  # 'application.js', but more complex applications might have added or changed
  # entries in the "scripts" section of 'package.json'.
  #
  EXPECTED_ASSETS = %w[
    application.js
    themes/default.css
  ]

  # Call this method somewhere at test startup, e.g. in "spec_helper.rb" before
  # tests are actually run (just above "RSpec.configure..." works reasonably).
  #
  def self.maintain!
    newest_mtime = 100.years.ago

    # Find the newest modificaftion time across all source files of any type -
    # for simplicity, timestamps of JS vs CSS aren't considered
    #
    ASSET_SOURCE_FOLDERS.each do |relative_array|
      glob_path = Rails.root.join(*relative_array, "**", "*")

      Dir[glob_path].each do |filename|
        next if File.directory?(filename) # NOTE EARLY LOOP RESTART

        source_mtime = File.mtime(filename)
        newest_mtime = source_mtime if source_mtime > newest_mtime
      end
    end

    # Compile the built asset leaf names into full file names for convenience.
    #
    built_assets = EXPECTED_ASSETS.map do |leaf|
      Rails.root.join("app", "assets", "builds", leaf)
    end

    # If any of the source files are newer than expected built assets, or if
    # any of those assets are missing, trigger a rebuild task *and* force a new
    # timestamp on all output assets (just in case build script optimisations
    # result in a file being skipped as "already up to date", which would cause
    # the code here to otherwise keep trying to rebuild it on every run).
    #
    run_build = built_assets.any? do |filename|
      File.exist?(filename) == false || File.mtime(filename) < newest_mtime
    end

    if run_build
      Rake::Task["javascript:build"].invoke
      Rake::Task["css:build"].invoke

      built_assets.each { |filename| FileUtils.touch(filename, nocreate: true) }
    end
  end
end

MaintainTestAssets.maintain!
</file>

<file path="spec/support/mock_directory.rb">
module MockDirectory
  def self.create(file_list)
    Dir.mktmpdir do |temp_path|
      # Create file stubs
      file_list.each do |f|
        begin
          FileUtils.mkdir_p(File.join(temp_path, File.dirname(f)))
        rescue Errno::EEXIST
          nil
        end
        FileUtils.touch(File.join(temp_path, f))
      end
      yield temp_path
    end
  end
end
</file>

<file path="spec/support/parsed_body.rb">
ActionDispatch::IntegrationTest.register_encoder :manyfold_api_v0,
  param_encoder: ->(params) { params.to_json },
  response_parser: ->(body) { JSON.parse(body) }
</file>

<file path="spec/support/phlex.rb">
module PhlexTestHelpers
  def render(...)
    view_context.render(...)
  end

  delegate :view_context, to: :controller

  def controller
    @controller ||= ActionView::TestCase::TestController.new
  end

  def sign_in(user)
    allow(controller).to receive(:current_user).and_return(user)
  end
end

RSpec.configure do |config|
  config.include PhlexTestHelpers, type: :component
end
</file>

<file path="spec/support/pundit.rb">
require "pundit/rspec"
</file>

<file path="spec/support/screenshot_helpers.rb">
# frozen_string_literal: true

module ScreenshotHelpers
  module Constants # rubocop:disable Metrics/ModuleLength
    COLOR = "#ef2929"
    DOTS_STYLE = <<~CSS.squish
      .documentation-dot {
          position: absolute;
          z-index: 1000;
          display: block;
          width: 1.5rem;
          height: 1.5rem;
          background-color: #{COLOR};
          content: '';
      }

      .documentation-dot--top {
          border-radius: 0.75rem 0.75rem 0.1rem 0.75rem;
          transform: translateX(-50%) translateY(-100%) rotate(45deg);
      }

      .documentation-dot--right {
          border-radius: 0.75rem 0.75rem 0.75rem 0.1rem;
          transform: translateX(0%) translateY(-50%) rotate(45deg);
      }

      .documentation-dot--bottom {
          border-radius: 0.1rem 0.75rem 0.75rem 0.75rem;
          transform: translateX(-50%) rotate(45deg);
      }

      .documentation-dot--left {
          border-radius: 0.75rem 0.1rem 0.75rem 0.75rem;
          transform: translateX(-100%) translateY(-50%) rotate(45deg);
      }

      .documentation-dot__counter {
        background-color: white;
        border-radius: 0.75rem;
        border: 2px solid #{COLOR};
        color: #{COLOR};
        font-family: monospace;
        font-size: 0.8rem;
        height: 1.5rem;
        line-height: 0.8rem;
        padding: 0.3rem 0;
        text-align: center;
        transform: rotate(-45deg);
        width: 1.5rem;
      }
    CSS

    CIRCLES_STYLE = <<~CSS.squish
      .documentation-circle{
        position: absolute;
        z-index: 1000;
        display: block;
        width: 2rem;
        height: 2rem;
        padding: 0.3rem 0;
        border: 2px solid #{COLOR};
        border-radius: 1rem;
        transform: translateX(-50%) translateY(-50%);
      }
    CSS

    OUTLINES_STYLE = <<~CSS.squish
      .documentation-outline{
        position: absolute;
        z-index: 1000;
        display: block;
        border: 2px solid #{COLOR};
      }
    CSS

    BOX_SHADOW = "0 0 0 2px #{COLOR}".freeze

    COMMON_JAVASCRIPT = <<~JS.squish
      if(!window.test_getElementPosition) {
        window.test_getElementPosition = function(element) {
          var width = element.offsetWidth;
          var height = element.offsetHeight;
          var top = 0, left = 0;
          do {
            top += element.offsetTop  || 0;
            left += element.offsetLeft || 0;
            element = element.offsetParent;
          } while(element);

          return {top: top,left: left, width: width, height: height};
        };
      }
    JS

    DOTS_JAVASCRIPT = <<~JS.squish
      if(!window.test_addDot){
        window.test_addDot = function(target, {counter = 1, offsetX = null, offsetY = null, position= 'top'}){
          var elementPosition = test_getElementPosition(target);
          elementPosition.bottom = elementPosition.top + elementPosition.height;
          elementPosition.right = elementPosition.left + elementPosition.width;

          console.log(position, elementPosition);

          var element = document.createElement('div');
          var counterElement = document.createElement('div');
          counterElement.innerHTML = counter;
          element.appendChild(counterElement);

          counterElement.classList.add("documentation-dot__counter");
          element.classList.add("documentation-dot");
          element.classList.add("documentation-dot--" + position);

          var transform = [];
          if(offsetX) transform.push('translateX('+offsetX+')');
          if(offsetY) transform.push('translateY('+offsetY+')');
          element.style.transform = transform.join(' ');

          if(position === 'top' || position === 'bottom'){
            element.style.top = elementPosition[position] + 'px';
            element.style.left = (elementPosition.left + elementPosition.width / 2) + 'px';
          }

          if(position === 'left' || position === 'right'){
            element.style.left = elementPosition[position] + 'px';
            element.style.top = (elementPosition.top + elementPosition.height / 2) + 'px';
          }
          document.body.appendChild(element);
        };

        var style = document.createElement('style');
        style.innerHTML = "#{DOTS_STYLE}";
        document.body.appendChild(style);
      }
    JS

    CIRCLES_JAVASCRIPT = <<~JS.squish
      if(!window.test_addCircle) {
        window.test_addCircle = function(target){
          var position = test_getElementPosition(target);
          var element = document.createElement('div');

          element.classList.add("documentation-circle");

          element.style.top = position.top + (position.height/2) + 'px';
          element.style.left = position.left + (position.width/2) + 'px';
          document.body.appendChild(element);
        };

        var style = document.createElement('style');
        style.innerHTML = "#{CIRCLES_STYLE}";
        document.body.appendChild(style);
      }
    JS

    OUTLINES_JAVASCRIPT = <<~JS.squish
      if(!window.test_addOutline) {
        window.test_addOutline = function(target){
          var position = test_getElementPosition(target);
          var element = document.createElement('div');
          element.classList.add("documentation-outline");
          element.style.top = position.top - 2 + 'px';
          element.style.left = position.left - 2 + 'px';
          element.style.width = position.width + 4 + 'px';
          element.style.height = position.height + 4 + 'px';
          document.body.appendChild(element);
        };

        var style = document.createElement('style');
        style.innerHTML = "#{OUTLINES_STYLE}";
        document.body.appendChild(style);
      }
    JS

    BOX_SHADOW_JAVASCRIPT = <<~JS.squish
      if(!window.test_addBoxShadow) {
        window.test_boxShadows = [];
        window.test_addBoxShadow = function(target) {
          var boxShadow = target.style.boxShadow;
          window.test_boxShadows.push({element: target, boxShadow: boxShadow});
          if (boxShadow.length > 0) target.style.boxShadow += "#{BOX_SHADOW}";
          else target.style.boxShadow = "#{BOX_SHADOW}";
        };
      }
    JS
  end

  def inject_dots(nodes = [], counter: 1, offset_x: nil, offset_y: nil, position: :top) # rubocop:disable Metrics/MethodLength
    execute_script Constants::COMMON_JAVASCRIPT
    execute_script Constants::DOTS_JAVASCRIPT

    nodes.each do |node|
      node = find(node) if node.is_a? String
      node.execute_script <<~JS.squish
        test_addDot(this, { counter: #{counter},
                            offsetX: #{offset_x ? "'#{offset_x}'" : "null"},
                            offsetX: #{offset_y ? "'#{offset_y}'" : "null"},
                            position: '#{position}'
        });
      JS
      counter += 1
    end
  end

  def inject_circles(nodes = [])
    execute_script Constants::COMMON_JAVASCRIPT
    execute_script Constants::CIRCLES_JAVASCRIPT

    nodes.each do |node|
      node = find(node) if node.is_a? String
      node.execute_script "test_addCircle(this)"
    end
  end

  # Adds a box around the nodes, with a small margin
  def inject_outlines(nodes = [])
    execute_script Constants::COMMON_JAVASCRIPT
    execute_script Constants::OUTLINES_JAVASCRIPT

    nodes.each do |node|
      node = find(node) if node.is_a? String
      node.execute_script "test_addOutline(this)"
    end
  end

  def inject_outlined_dots(nodes = [], counter: 1, style: :rectangle)
    case style
    when :rectangle
      inject_outlines nodes
    else
      outline_elements nodes
    end

    inject_dots nodes, counter: counter
  end

  # Adds a box shadow outlining the nodes. It will be really close to the nodes,
  # following their shapes.
  def outline_elements(nodes = [])
    execute_script Constants::COMMON_JAVASCRIPT
    execute_script Constants::BOX_SHADOW_JAVASCRIPT

    nodes.each do |node|
      node = find(node) if node.is_a? String
      node.execute_script "test_addBoxShadow(this)"
    end
  end

  def remove_injected_elements
    execute_script Constants::COMMON_JAVASCRIPT
    execute_script <<~JS.squish
      document.querySelectorAll('.documentation-dot').forEach(function(element){element.remove()});
      document.querySelectorAll('.documentation-circle').forEach(function(element){element.remove()});
      document.querySelectorAll('.documentation-outline').forEach(function(element){element.remove()});
      if (window.test_boxShadows) {
        window.test_boxShadows.forEach(function (node) {node.element.style.boxShadow = node.boxShadow});
        window.test_boxShadows = [];
      }
    JS
  end

  def take_and_crop_screenshot(name, top: 0, left: 0, width: nil, height: nil)
    name += "_#{I18n.locale}"

    paths = screenshot_and_save_page prefix: name, html: false
    path = File.join(Capybara::Screenshot.capybara_tmp_path, "#{name}.png")
    FileUtils.mv paths[:image], path

    processed = ImageProcessing::MiniMagick.source(path).crop!(left, top, width, height)
    FileUtils.mv processed, path
  end

  def reload_page
    execute_script "window.location.reload()"
  end

  def resize_window(width: nil, height: nil)
    size = Capybara.page.driver.browser.manage.window.size
    width ||= size.width
    height ||= size.height
    Capybara.page.driver.browser.manage.window.resize_to(width, height)
  end
end
</file>

<file path="spec/support/shared_examples.rb">
Rails.root.glob("spec/**/*_shared.rb").each { |f| require f }
</file>

<file path="spec/support/sidekiq.rb">
RSpec.configure do |config|
  config.before do
    ActiveJob::Base.queue_adapter = :test
    ActiveJob::Uniqueness.test_mode!
    allow(Sidekiq::Queue).to receive(:new).with("scan").and_return([])
  end
end
</file>

<file path="spec/support/sign_in_role.rb">
RSpec.configure do |config|
  config.before(:each, :as_administrator) do
    sign_in create(:admin)
  end

  config.before(:each, :as_moderator) do
    sign_in create(:moderator)
  end

  config.before(:each, :as_contributor) do
    sign_in create(:contributor)
  end

  config.before(:each, :as_member) do
    sign_in create(:user)
  end
end
</file>

<file path="spec/support/with_model.rb">
require "with_model"

RSpec.configure do |config|
  config.extend WithModel
end
</file>

<file path="spec/system/documentation_screenshots_spec.rb">
require "rails_helper"

RSpec.describe "Documentation screenshots", :documentation do
  before do
    driven_by :selenium
  end

  describe "home page" do
    it "contains things" do
      visit "/"

      inputs = find_all "input"
      inject_outlines inputs
      inject_dots inputs

      take_and_crop_screenshot "home_page"
    end
  end
end
</file>

<file path="spec/validators/multimodel_uniqueness_validator_spec.rb">
# frozen_string_literal: true

require "rails_helper"

RSpec.describe MultimodelUniquenessValidator do
  before do
    create(:creator, public_id: "abc123")
    create(:collection, public_id: "DEF456")
    create(:model, public_id: "ghi789")
  end

  context "when in case sensitive mode (default)" do
    with_model :Thing do
      table do |t|
        t.string :public_id
      end
      model do
        validates :public_id, multimodel_uniqueness: {check: {creator: :public_id, collection: :public_id, thing: :public_id}}
      end
    end

    it "adds error if value is present in one of checked models" do
      thing = Thing.new(public_id: "abc123")
      thing.validate
      expect(thing.errors).to be_of_kind(:public_id, :taken)
    end

    it "does not add error if value is in an unchecked model" do
      thing = Thing.new(public_id: "ghi789")
      expect(thing).to be_valid
    end

    it "does not add error if value is present but different case" do
      thing = Thing.new(public_id: "def456")
      expect(thing).to be_valid
    end

    it "does not add error if value is unique" do
      thing = Thing.new(public_id: "cba321")
      expect(thing).to be_valid
    end

    it "does not check against itself" do
      Thing.create(public_id: "cba321")
      thing = Thing.last
      expect(thing).to be_valid
    end
  end

  context "when in case insensitive mode" do
    with_model :Thing do
      table do |t|
        t.string :public_id
      end
      model do
        validates :public_id, multimodel_uniqueness: {case_sensitive: false, check: {creator: :public_id, collection: :public_id}}
      end
    end

    it "adds error if value in uppercase is in one of checked models" do
      thing = Thing.new(public_id: "def456")
      thing.validate
      expect(thing.errors).to be_of_kind(:public_id, :taken)
    end
  end
end
</file>

<file path="spec/validators/regex_array_validator_spec.rb">
# frozen_string_literal: true

require "rails_helper"

RSpec.describe RegexArrayValidator do
  subject(:validator) { described_class.new({attributes: {any: true}}) }

  let(:errors) { ActiveModel::Errors.new(subject) }

  let(:record) { instance_double(ActiveModel::Validations, errors: errors) }

  let(:array_of_regexes) {
    %w[
      /^\.[^\.]+/
      /.*\/@eaDir\/.*/
      /__MACOSX/
    ]
  }

  describe "#validate_each(record, attribute, value)" do
    it "adds error to invalid record when the array has an invalid regex" do
      array_of_regexes.push "INVALID_REGEX"
      expect {
        validator.validate_each(record, :model_ignore_files, array_of_regexes)
      }.to change(record.errors, :count)
        .and change { record.errors.first&.type }.to eq(:invalid)
    end

    it "does not add error to invalid record when array contains only regexes" do
      expect {
        validator.validate_each(record, :model_ignore_files, array_of_regexes)
      }.not_to change(record.errors, :count)
    end
  end
end
</file>

<file path="spec/rails_helper.rb">
# This file is copied to spec/ when you run 'rails generate rspec:install'
require "spec_helper"

ENV["RAILS_ENV"] ||= "test"
require "simplecov"
require "simplecov-cobertura"
SimpleCov.start "rails" do
  enable_coverage :branch
  SimpleCov.formatter = SimpleCov::Formatter::CoberturaFormatter
end

require File.expand_path("../config/environment", __dir__)
# Prevent database truncation if the environment is production
abort("The Rails environment is running in production mode!") if Rails.env.production?
require "rspec/rails"
# Add additional requires below this line. Rails is not loaded until this point!

require "rake"
Rails.application.load_tasks

Capybara::Screenshot.prune_strategy = :keep_last_run

Rails.root.glob("spec/support/**/*.rb").sort.each { |f| require f }

# Checks for pending migrations and applies them before tests are run.
# If you are not using ActiveRecord, you can remove these lines.
begin
  ActiveRecord::Migration.maintain_test_schema!
rescue ActiveRecord::PendingMigrationError => e
  puts e.to_s.strip
  exit 1
end
RSpec.configure do |config|
  # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures
  config.fixture_paths = [Rails.root.join("spec/fixtures")]

  # If you're not using ActiveRecord, or you'd prefer not to run each of your
  # examples within a transaction, remove the following line or assign false
  # instead of true.
  config.use_transactional_fixtures = true

  # You can uncomment this line to turn off ActiveRecord support entirely.
  # config.use_active_record = false

  # RSpec Rails can automatically mix in different behaviours to your tests
  # based on their file location, for example enabling you to call `get` and
  # `post` in specs under `spec/controllers`.
  #
  # You can disable this behaviour by removing the line below, and instead
  # explicitly tag your specs with their type, e.g.:
  #
  #     RSpec.describe UsersController, type: :controller do
  #       # ...
  #     end
  #
  # The different available types are documented in the features, such as in
  # https://relishapp.com/rspec/rspec-rails/docs
  config.infer_spec_type_from_file_location!

  # Filter lines from Rails gems in backtraces.
  config.filter_rails_from_backtrace!
  # arbitrary gems may also be filtered via:
  # config.filter_gems_from_backtrace("gem name")

  # Exclude case-sensitive filesystem tests if our local filesystem isn't
  Dir.mktmpdir do |tmp|
    if Sys::Filesystem.stat(tmp).case_insensitive?
      config.filter_run_excluding case_sensitive: true
    end
  end

  config.filter_run_excluding :documentation unless ENV.fetch("DOC_SCREENSHOT", false) === "true"

  config.include ScreenshotHelpers, type: :system
end

# Copy parsers into integration tests - this doesn't happen automatically for some reason
[:xrd, :jrd, :activitypub, :nodeinfo].each do |mime_type|
  ActionDispatch::IntegrationTest.register_encoder mime_type,
    response_parser: ActionDispatch::Request.parameter_parsers[mime_type]
end
</file>

<file path="spec/spec_helper.rb">
# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups

  # The settings below are suggested to provide a good initial experience
  # with RSpec, but feel free to customize to your heart's content.
  #   # This allows you to limit a spec run to individual examples or groups
  #   # you care about by tagging them with `:focus` metadata. When nothing
  #   # is tagged with `:focus`, all examples get run. RSpec also provides
  #   # aliases for `it`, `describe`, and `context` that include `:focus`
  #   # metadata: `fit`, `fdescribe` and `fcontext`, respectively.
  #   config.filter_run_when_matching :focus
  #
  #   # Allows RSpec to persist some state between runs in order to support
  #   # the `--only-failures` and `--next-failure` CLI options. We recommend
  #   # you configure your source control system to ignore this file.
  #   config.example_status_persistence_file_path = "spec/examples.txt"
  #
  #   # Limits the available syntax to the non-monkey patched syntax that is
  #   # recommended. For more details, see:
  #   #   - http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/
  #   #   - http://www.teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
  #   #   - http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#zero-monkey-patching-mode
  #   config.disable_monkey_patching!
  #
  #   # Many RSpec users commonly either run the entire suite or an individual
  #   # file, and it's useful to allow more verbose output when running an
  #   # individual spec file.
  #   if config.files_to_run.one?
  #     # Use the documentation formatter for detailed output,
  #     # unless a formatter has already been configured
  #     # (e.g. via a command-line flag).
  #     config.default_formatter = "doc"
  #   end
  #
  #   # Print the 10 slowest examples and example groups at the
  #   # end of the spec run, to help surface which specs are running
  #   # particularly slow.
  #   config.profile_examples = 10
  #
  #   # Run specs in random order to surface order dependencies. If you find an
  #   # order dependency and want to debug it, you can fix the order by providing
  #   # the seed, which is printed after each run.
  #   #     --seed 1234
  #   config.order = :random
  #
  #   # Seed global randomization in this process using the `--seed` CLI option.
  #   # Setting this allows you to use `--seed` to deterministically reproduce
  #   # test failures related to randomization by passing the same `--seed` value
  #   # as the one that triggered the failure.
  #   Kernel.srand config.seed
end
</file>

<file path="spec/swagger_helper.rb">
# frozen_string_literal: true

require "rails_helper"

RSpec.configure do |config|
  # Specify a root folder where Swagger JSON files are generated
  # NOTE: If you're using the rswag-api to serve API descriptions, you'll need
  # to ensure that it's configured to serve Swagger from the same folder
  config.openapi_root = Rails.root.join("app/api").to_s

  # Define one or more Swagger documents and provide global metadata for each one
  # When you run the 'rswag:specs:swaggerize' rake task, the complete Swagger will
  # be generated at the provided relative path under openapi_root
  # By default, the operations defined in spec files are added to the first
  # document below. You can override this behavior by adding a openapi_spec tag to the
  # the root example_group in your specs, e.g. describe '...', openapi_spec: 'v2/swagger.json'
  config.openapi_specs = {
    "v0/openapi.json" => {
      openapi: "3.0.1",
      info: {
        title: "Manyfold API",
        version: "0",
        description: <<~EOF
          This document describes the REST API for this [Manyfold](https://manyfold.app) instance.

          Warning! This API...

          * ... is not complete! Functionality is limited for now, but future releases will add more capabilities.
          * ... is not yet at v1! It's subject to breaking changes at any time.
          * ... is only valid for this host! Other Manyfold instances running different software versions may expose a different set of API functionality.
        EOF
      },
      paths: {},
      servers: [
        {
          url: "https://try.manyfold.app"
        }
      ],
      components: {
        securitySchemes: {
          client_credentials: {
            type: :oauth2,
            description: "Authentication with the OAuth2 Client Credentials grant flow. You can generate client app credentials at /oauth/applications.",
            flows: {
              clientCredentials: {
                tokenUrl: "/oauth/token",
                scopes: {
                  public: "read public data accessible without logging in",
                  read: "read data accessible to the OAuth application's owner",
                  write: "create or change data that the OAuth application's owner has appropriate permissions for",
                  delete: "remove data that the OAuth application's owner has appropriate permissions for"
                }
              }
            }
          }
        },
        schemas: {
          :jsonld_context => {
            type: :array,
            items: {
              oneOf: [
                {type: :string},
                {type: :object}
              ]
            }
          },
          :oembed_link => {
            type: :object,
            properties: {
              version: {type: :string, example: "1.0"},
              type: {type: :string, example: "link"},
              title: {type: :string, example: "Model Title"},
              author_name: {type: :string, example: "Creator Name"},
              author_url: {type: :string, example: "https://example.com/creators/bob"},
              provider_name: {type: :string, example: "Manyfold"},
              provider_url: {type: :string, example: "https://example.com"},
              cache_age: {type: :integer, example: 86400}
            },
            required: [:version, :type]
          },
          :oembed_photo => {
            type: :object,
            properties: {
              version: {type: :string, example: "1.0"},
              type: {type: :string, example: "photo"},
              url: {type: :string, example: "https://example.com/models/123/model_files/456.png"},
              width: {type: :integer, example: "256"},
              height: {type: :integer, example: "256"},
              title: {type: :string, example: "Model Title"},
              author_name: {type: :string, example: "Creator Name"},
              author_url: {type: :string, example: "https://example.com/creators/bob"},
              provider_name: {type: :string, example: "Manyfold"},
              provider_url: {type: :string, example: "https://example.com"},
              cache_age: {type: :integer, example: 86400}
            },
            required: [:version, :type, :url, :width, :height]
          },
          :oembed_video => {
            type: :object,
            properties: {
              version: {type: :string, example: "1.0"},
              type: {type: :string, example: "video"},
              html: {type: :string, example: "<iframe>...</iframe>"},
              width: {type: :integer, example: "256"},
              height: {type: :integer, example: "256"},
              title: {type: :string, example: "Model Title"},
              author_name: {type: :string, example: "Creator Name"},
              author_url: {type: :string, example: "https://example.com/creators/bob"},
              provider_name: {type: :string, example: "Manyfold"},
              provider_url: {type: :string, example: "https://example.com"},
              cache_age: {type: :integer, example: 86400}
            },
            required: [:version, :type, :html, :width, :height]
          },
          :oembed_rich => {
            type: :object,
            properties: {
              version: {type: :string, example: "1.0"},
              type: {type: :string, example: "rich"},
              html: {type: :string, example: "<iframe>...</iframe>"},
              width: {type: :integer, example: "256"},
              height: {type: :integer, example: "256"},
              title: {type: :string, example: "Model Title"},
              author_name: {type: :string, example: "Creator Name"},
              author_url: {type: :string, example: "https://example.com/creators/bob"},
              provider_name: {type: :string, example: "Manyfold"},
              provider_url: {type: :string, example: "https://example.com"},
              cache_age: {type: :integer, example: 86400}
            },
            required: [:version, :type, :html, :width, :height]
          },
          :spdxLicense => {
            type: :object,
            properties: {
              "@type": {type: :string, example: "spdx:License"},
              "@id": {type: :string, example: "http://spdx.org/licenses/MIT"},
              licenseId: {type: :string, example: "MIT"}
            },
            required: ["@type", "licenseId"]
          },
          ManyfoldApi::V0::LinkDeserializer.schema_ref_name => ManyfoldApi::V0::LinkDeserializer.schema,
          ManyfoldApi::V0::CollectionDeserializer.schema_ref_name => ManyfoldApi::V0::CollectionDeserializer.schema,
          ManyfoldApi::V0::CollectionSerializer.schema_ref_name => ManyfoldApi::V0::CollectionSerializer.schema,
          ManyfoldApi::V0::CreatorDeserializer.schema_ref_name => ManyfoldApi::V0::CreatorDeserializer.schema,
          ManyfoldApi::V0::CreatorSerializer.schema_ref_name => ManyfoldApi::V0::CreatorSerializer.schema,
          ManyfoldApi::V0::ModelDeserializer.schema_ref_name => ManyfoldApi::V0::ModelDeserializer.schema,
          ManyfoldApi::V0::ModelSerializer.schema_ref_name => ManyfoldApi::V0::ModelSerializer.schema,
          ManyfoldApi::V0::ModelFileDeserializer.schema_ref_name => ManyfoldApi::V0::ModelFileDeserializer.schema,
          ManyfoldApi::V0::ModelFileSerializer.schema_ref_name => ManyfoldApi::V0::ModelFileSerializer.schema,
          ManyfoldApi::V0::UploadedFileDeserializer.schema_ref_name => ManyfoldApi::V0::UploadedFileDeserializer.schema,
          ManyfoldApi::V0::UploadedModelDeserializer.schema_ref_name => ManyfoldApi::V0::UploadedModelDeserializer.schema
        }
      }
    }
  }

  # Specify the format of the output Swagger file when running 'rswag:specs:swaggerize'.
  # The openapi_specs configuration option has the filename including format in
  # the key, this may want to be changed to avoid putting yaml in json files.
  # Defaults to json. Accepts ':json' and ':yaml'.
  config.openapi_format = :json

  config.openapi_no_additional_properties = true
end
</file>

<file path=".codeclimate.yml">
plugins:
  brakeman:
    enabled: true
</file>

<file path=".dockerignore">
/docker/*.dockerfile
/docker-compose.*
/.dockerignore
/.bundle
/db/*.sqlite3
/db/*.sqlite3-*
/log/*
/tmp/*
/storage/*
/public/assets
.byebug_history
/config/master.key
/public/packs
/public/packs-test
/node_modules
/yarn-error.log
/yarn-debug.log*
/.yarn-integrity
/.env
/config/credentials/*.key
/.git
</file>

<file path=".erb_lint.yml">
---
EnableDefaultLinters: true
exclude:
  - "**/vendor/**/*"
  - "**/node_modules/**/*"
linters:
  # Non-default linters
  PartialInstanceVariable:
    enabled: false # TODO
  DeprecatedClasses:
    enabled: true
  ErbSafety:
    enabled: true
  Rubocop:
    enabled: true
    rubocop_config:
      inherit_from:
        - .rubocop.yml
      # Disable unhelpful rules for ERB templates
      Layout/InitialIndentation:
        Enabled: false # ERB tags start at unusual indentations
      Layout/TrailingEmptyLines:
        Enabled: false # We don't need a newline inside every ERB tag!
      # Temporarily disabled while we fix
      Lint/UselessAssignment:
        Enabled: false # TODO
      Style/NestedTernaryOperator:
        Enabled: false # TODO
  RequireScriptNonce:
    enabled: true
  NoUnusedDisable:
    enabled: true
</file>

<file path=".eslintignore">
app/assets/builds
</file>

<file path=".gitattributes">
# See https://git-scm.com/docs/gitattributes for more about git attribute files.

# Mark the database schema as having been generated.
db/schema.rb linguist-generated

# Mark the yarn lockfile as having been generated.
yarn.lock linguist-generated

# Mark any vendored files as having been vendored.
vendor/* linguist-vendored

# Change line endings to lf
* text=auto eol=lf
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files for more about ignoring files.
#
# If you find yourself ignoring temporary files generated by your text editor
# or operating system, you probably want to add a global ignore instead:
#   git config --global core.excludesfile '~/.gitignore_global'

# Ignore bundler config.
/.bundle

# Ignore the default SQLite database.
/db/*.sqlite3
/db/*.sqlite3-*

# Ignore all logfiles and tempfiles.
/log/*
/tmp/*
!/log/.keep
!/tmp/.keep

# Ignore pidfiles, but keep the directory.
/tmp/pids/*
!/tmp/pids/
!/tmp/pids/.keep

# Ignore uploaded files in development.
/storage/*
!/storage/.keep

/public/assets
.byebug_history

# Ignore master key for decrypting credentials and more.
/config/master.key

/public/packs
/public/packs-test
/node_modules
/yarn-error.log
yarn-debug.log*
.yarn-integrity

/vendor/bundle

.env*

/config/credentials/test.key
docker-compose.yml

/app/assets/builds/*
!/app/assets/builds/.keep

/coverage

# Generated on-the-fly
/app/javascript/src/locales.json

# Translation.io artefacts that we don't want for now
/config/locales/.translation_io
/config/locales/gettext
/config/locales/localization.*.yml
/config/locales/translation.*.yml

# ignore asdf config files
/.tool-versions
dump.rdb

# IDE workspace files
*.code-workspace

.yarn
</file>

<file path=".node-version">
22.13.0
</file>

<file path=".rspec">
--require spec_helper
--format Rswag::Specs::SwaggerFormatter
--format progress
</file>

<file path=".rubocop.yml">
require:
  - standard
  - rubocop-pundit

plugins:
  - rubocop-performance
  - rubocop-capybara
  - rubocop-rails
  - rubocop-rspec
  - rubocop-rspec_rails
  - rubocop-i18n
  - rubocop-factory_bot

inherit_gem:
  standard: config/base.yml
  rswag-specs: .rubocop_rspec_alias_config.yml

AllCops:
  TargetRubyVersion: 3.4
  NewCops: enable
  Exclude:
    - db/schema.rb
    - bin/bundle
    - bin/yarn
    - "node_modules/**/*"
    - "tmp/**/*"
    - "vendor/**/*"
    - ".git/**/*"

I18n/GetText:
  Enabled: false
I18n/RailsI18n:
  Enabled: true
  Exclude:
    - "spec/**/*"
    - "bin/manyfold"
RSpec/NestedGroups:
  Max: 5
RSpec/MultipleMemoizedHelpers:
  Exclude:
    - "spec/requests/api/**/*"
RSpec/NoExpectationExample:
  Exclude:
    - spec/system/documentation_screenshots_spec.rb
</file>

<file path=".ruby-version">
3.4.1
</file>

<file path=".yarnrc.yml">
nodeLinker: node-modules
</file>

<file path="babel.config.js">
module.exports = function (api) {
  const validEnv = ['development', 'test', 'production']
  const currentEnv = api.env()
  const isDevelopmentEnv = api.env('development')
  const isProductionEnv = api.env('production')
  const isTestEnv = api.env('test')

  if (!validEnv.includes(currentEnv)) {
    throw new Error(
      'Please specify a valid `NODE_ENV` or ' +
        '`BABEL_ENV` environment variables. Valid values are "development", ' +
        '"test", and "production". Instead, received: ' +
        JSON.stringify(currentEnv) +
        '.'
    )
  }

  return {
    presets: [
      isTestEnv && [
        '@babel/preset-env',
        {
          targets: {
            node: 'current'
          }
        }
      ],
      (isProductionEnv || isDevelopmentEnv) && [
        '@babel/preset-env',
        {
          forceAllTransforms: true,
          useBuiltIns: 'entry',
          corejs: 3,
          modules: false,
          exclude: ['transform-typeof-symbol']
        }
      ],
      ['@babel/preset-typescript', { allExtensions: true, isTSX: true }]
    ].filter(Boolean),
    plugins: [
      'babel-plugin-macros',
      '@babel/plugin-syntax-dynamic-import',
      isTestEnv && 'babel-plugin-dynamic-import-node',
      '@babel/plugin-transform-destructuring',
      [
        '@babel/plugin-proposal-class-properties',
        {
          loose: true
        }
      ],
      [
        '@babel/plugin-proposal-object-rest-spread',
        {
          useBuiltIns: true
        }
      ],
      [
        '@babel/plugin-transform-runtime',
        {
          helpers: false
        }
      ],
      [
        '@babel/plugin-transform-regenerator',
        {
          async: false
        }
      ]
    ].filter(Boolean)
  }
}
</file>

<file path="config.ru">
# This file is used by Rack-based servers to start the application.

require_relative "config/environment"

map ActionController::Base.config.relative_url_root || "/" do
  run Rails.application
  Rails.application.load_server
end
</file>

<file path="docker-compose.example.yml">
version: "3"

services:
  app:
    image: ghcr.io/manyfold3d/manyfold:latest
    ports:
      - 3214:3214
    volumes:
      # Uncomment to add a filesystem volume for your model library (or multiple if
      # you want multiple libraries), in the form <local_path>:<container_path>.
      # The local path could be a folder that already contains models, in which case Manyfold
      # will scan and import them, or it could be empty.
      # The container path can be anything; you will need to enter it in the "new library" form.
      # - /local/path/to/your/models:/models
    environment:
      PUID: 1000 # The ID of the user the app will run as
      PGID: 1000 # The ID of the group the app will run as
      SECRET_KEY_BASE: a_nice_long_random_string
      REDIS_URL: redis://redis:6379/1

      # Database connection details; we recommend using a separate PostgreSQL
      # server for best performance
      DATABASE_ADAPTER: postgresql
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: manyfold
      DATABASE_PASSWORD: password
      DATABASE_NAME: manyfold

      # "mysql2" is also available, and you can specify all details in a
      # single DATABASE_URL variable if you prefer:
      # DATABASE_URL: {adapter}://{user}:{password}@{host}/{name}

      # You can also use the "sqlite3" adapter if you don't want to run a separate
      # database server. If you do, specify a path to your database file in DATABASE_NAME,
      # and make sure it's on a persistent volume! Host, user and password aren't required.
      # DATABASE_URL: sqlite3:/config/manyfold.sqlite3

      # For details of other optional environment variables, including features such
      # as multiuser mode, visit https://manyfold.app/sysadmin/configuration.html
    depends_on:
      - postgres
      - redis
    networks:
      - manyfold
    links:
      - postgres
      - redis

  postgres:
    image: postgres:15
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: manyfold
      POSTGRES_PASSWORD: password
    restart: on-failure
    networks:
      - manyfold

  redis:
    image: redis:7
    restart: on-failure
    networks:
      - manyfold

volumes:
  db_data:


networks:
  manyfold:
</file>

<file path="env.example">
# MULTIUSER: enabled
# For details of other optional environment variables, including features such
# as multiuser mode, visit https://manyfold.app/sysadmin/configuration.html
</file>

<file path="FEDERATION.md">
# Federation

## Supported federation protocols and standards

- [ActivityPub](https://www.w3.org/TR/activitypub/) (Server-to-Server)
- [WebFinger](https://webfinger.net/)
- [NodeInfo](https://nodeinfo.diaspora.software/)

## Supported FEPs

- [FEP-5feb: Search indexing consent for actors](https://codeberg.org/fediverse/fep/src/branch/main/fep/5feb/fep-5feb.md)
- [FEP-67ff: FEDERATION.md](https://codeberg.org/fediverse/fep/src/branch/main/fep/67ff/fep-67ff.md)
- [FEP-a974: All Actor types should be followable](https://codeberg.org/fediverse/fep/src/branch/main/fep/a974/fep-a974.md)
- [FEP-f1d5: NodeInfo in Fediverse Software](https://codeberg.org/fediverse/fep/src/branch/main/fep/f1d5/fep-f1d5.md)

## ActivityPub

Manyfold's ActivityPub usage is described in detail at https://manyfold.app/technology/activitypub.html
</file>

<file path="Gemfile">
source "https://rubygems.org"
git_source(:github) { |repo| "https://github.com/#{repo}.git" }

ruby file: ".ruby-version"

# Bundle edge Rails instead: gem 'rails', github: 'rails/rails'
gem "rails", "~> 8.0.0"
# Use Puma as the app server
gem "puma", "~> 6.6"
# Deliver assets with Propshaft
gem "propshaft", "~> 1.1"
# Bundle and transpile JavaScript [https://github.com/rails/jsbundling-rails]
gem "jsbundling-rails"
gem "cssbundling-rails", "~> 1.4"
# Build JSON APIs with ease. Read more: https://github.com/rails/jbuilder
gem "jbuilder", "~> 2.13"
# Use Redis adapter to run Action Cable in production
gem "redis", "~> 5.4"
# Use Active Model has_secure_password
# gem 'bcrypt', '~> 3.1.7'

# Use Active Storage variant
# gem 'image_processing', '~> 1.2'

gem "dotenv-rails", "~> 3.1", group: :development
gem "acts-as-taggable-on", "~> 12.0"

gem "ffi-libarchive", "~> 1.1"

# Reduces boot times through caching; required in config/boot.rb
gem "bootsnap", "~> 1.18", require: false

# Database adapters
gem "activerecord-enhancedsqlite3-adapter", "~> 0.8"
group :production do
  gem "mysql2", "~> 0.5"
  gem "pg", "~> 1.5"
end

group :development, :test do
  # Call 'byebug' anywhere in the code to stop execution and get a debugger console
  gem "byebug", platforms: [:mri, :mingw, :x64_mingw]
  gem "rspec-rails"
  gem "standard", "~> 1.50"
  gem "factory_bot"
  gem "faker", "~> 3.5"
  gem "guard", "~> 2.19"
  gem "guard-rspec", "~> 4.7"
  gem "database_cleaner-active_record", "~> 2.2"
  gem "rubocop-rails", require: false
  gem "rubocop-rspec", require: false
  gem "rubocop-rspec_rails", require: false
  gem "rubocop-factory_bot", require: false
  gem "rubocop-capybara", require: false
  gem "rubocop-i18n", require: false
  gem "rubocop-performance", "~> 1.23", require: false
  gem "rubocop-pundit", github: "manyfold3d/rubocop-pundit", require: false
  gem "rubyzip", "~> 2.4"
  gem "i18n-tasks", "~> 1.0"
  gem "simplecov", "~> 0.22", require: false
  gem "simplecov-cobertura", require: false
  gem "with_model", "~> 2.2"

  # system tests and custom screenshots
  gem "capybara"
  gem "capybara-screenshot", github: "el-cms/capybara-screenshot", branch: "custom-prefixes"
  gem "image_processing"
  gem "selenium-webdriver"
end

group :development do
  # Access an interactive console on exception pages or by calling 'console' anywhere in the code.
  gem "web-console", "~> 4.1"
  gem "scout_apm"
  gem "listen", "~> 3.9"
  # Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring
  gem "spring"
end

# Windows does not include zoneinfo files, so bundle the tzinfo-data gem
gem "tzinfo-data", platforms: [:mingw, :mswin, :x64_mingw, :jruby]

gem "cocooned", "~> 2.4"

gem "public_suffix", "~> 6.0"

gem "activerecord-nulldb-adapter", "~> 1.1"

gem "memoist", "~> 0.16"
gem "stopwords-filter2", require: "stopwords"

gem "devise", "~> 4.9"

gem "data_migrate", "~> 11.3"

gem "rails-settings-cached", "~> 2.9"
gem "activeadmin", "~> 3.3"

gem "kaminari", "~> 1.2"

gem "lograge", "~> 0.14"

gem "acts_as_favoritor", "~> 6.0"

gem "sqlite3_ar_regexp", "~> 3.0"

gem "mittsu", "~> 0.5"
gem "mittsu-mesh_analysis"
gem "mittsu-3mf"

gem "rails-controller-testing", "~> 1.0", group: :test

gem "pundit", "~> 2.5"

gem "spdx", "~> 4.1"
gem "rack-contrib", "~> 2.5"

gem "rails-i18n", "~> 8.0"

gem "erb_lint", "~> 0.9", group: :development, require: false

gem "i18n-js", "~> 4.2"

gem "translation", "~> 1.41", group: :development

gem "string-similarity", "~> 2.1"

gem "rolify", "~> 6.0"

gem "letter_opener", "~> 1.10", group: :development

gem "sidekiq", "~> 8.0"

# gem "sidekiq-failures", "~> 1.0"
gem "activejob-status", "~> 1.0"

gem "brakeman", "~> 7.0"

gem "i18n_data", "~> 1.1"
gem "bullet", "~> 8.0", group: :development

gem "logstash-event", "~> 1.2"

gem "climate_control", "~> 1.2", group: :test

gem "sys-filesystem", "~> 1.5"
gem "shrine", "~> 3.6"
gem "tus-server", "~> 2.3"
gem "shrine-tus", "~> 2.1"

gem "aws-sdk-s3", "< 1.192"

gem "better_content_security_policy", "~> 0.1"

gem "devise_zxcvbn", "~> 6.0"

gem "federails", git: "https://gitlab.com/experimentslabs/federails.git", branch: "merge-contexts"
gem "federails-moderation", "~> 0.3"
gem "caber", github: "manyfold3d/caber"

gem "nanoid", "~> 2.0"

gem "kramdown", "~> 2.5"

gem "omniauth", "~> 2.1"
gem "omniauth-rails_csrf_protection", "~> 1.0"
gem "omniauth_openid_connect", "~> 0.8"

gem "sidekiq-cron", "~> 2.3"

group :development, :production do
  gem "sys-cpu", "~> 1.1"
  gem "get_process_mem", "~> 1.0"
  gem "rails_performance", "~> 1.4"
  gem "redis-namespace"
end

gem "pghero", "~> 3.7"
gem "pg_query", "~> 6.1"

gem "to_regexp", "~> 0.2"

gem "activejob-uniqueness", "~> 0.4", require: "active_job/uniqueness/sidekiq_patch"

gem "job-iteration", "~> 1.10"
gem "rswag", "~> 2.16"
gem "warning", "~> 1.5"

gem "rack-cors", "~> 3.0"

gem "doorkeeper", "~> 5.8"

gem "kramdown-parser-gfm", "~> 1.1"

gem "doorkeeper-i18n", "~> 5.2"

gem "phlex-rails", "~> 2.3"

gem "turbo-rails", "~> 2.0"

gem "stimulus-rails", "~> 1.3"

gem "scoped_search", "~> 4.2"

gem "altcha-rails", "~> 0.0.6"
</file>

<file path="Guardfile">
# A sample Guardfile
# More info at https://github.com/guard/guard#readme

## Uncomment and set this to only include directories you want to watch
# directories %w(app lib config test spec features) \
#  .select{|d| Dir.exist?(d) ? d : UI.warning("Directory #{d} does not exist")}

## Note: if you are using the `directories` clause above and you are not
## watching the project directory ('.'), then you will want to move
## the Guardfile to a watched dir and symlink it back, e.g.
#
#  $ mkdir config
#  $ mv Guardfile config/
#  $ ln -s config/Guardfile .
#
# and, you'll have to watch "config/Guardfile" instead of "Guardfile"

# Note: The cmd option is now required due to the increasing number of ways
#       rspec may be run, below are examples of the most common uses.
#  * bundler: 'bundle exec rspec'
#  * bundler binstubs: 'bin/rspec'
#  * spring: 'bin/rspec' (This will use spring if running and you have
#                          installed the spring binstubs per the docs)
#  * zeus: 'zeus rspec' (requires the server to be started separately)
#  * 'just' rspec: 'rspec'

guard :rspec, cmd: "bundle exec rspec" do
  require "guard/rspec/dsl"
  dsl = Guard::RSpec::Dsl.new(self)

  # Feel free to open issues for suggestions and improvements

  # RSpec files
  rspec = dsl.rspec
  watch(rspec.spec_helper) { rspec.spec_dir }
  watch(rspec.spec_support) { rspec.spec_dir }
  watch(rspec.spec_files)

  # Ruby files
  ruby = dsl.ruby
  dsl.watch_spec_files_for(ruby.lib_files)

  # Rails files
  rails = dsl.rails(view_extensions: %w[erb haml slim])
  dsl.watch_spec_files_for(rails.app_files)
  dsl.watch_spec_files_for(rails.views)

  watch(rails.controllers) do |m|
    [
      rspec.spec.call("routing/#{m[1]}_routing"),
      rspec.spec.call("controllers/#{m[1]}_controller"),
      rspec.spec.call("acceptance/#{m[1]}")
    ]
  end

  # Rails config changes
  watch(rails.spec_helper) { rspec.spec_dir }
  watch(rails.routes) { "#{rspec.spec_dir}/routing" }
  watch(rails.app_controller) { "#{rspec.spec_dir}/controllers" }

  # Capybara features specs
  watch(rails.view_dirs) { |m| rspec.spec.call("features/#{m[1]}") }
  watch(rails.layouts) { |m| rspec.spec.call("features/#{m[1]}") }

  # Turnip features and steps
  watch(%r{^spec/acceptance/(.+)\.feature$})
  watch(%r{^spec/acceptance/steps/(.+)_steps\.rb$}) do |m|
    Dir[File.join("**/#{m[1]}.feature")][0] || "spec/acceptance"
  end
end
</file>

<file path="LICENSE.md">
# The MIT License

Copyright 2021 James Smith <james@floppy.org.uk>

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
</file>

<file path="package.json">
{
  "name": "manyfold",
  "private": true,
  "scripts": {
    "lint:ts": "ts-standard --fix",
    "build": "bundle exec i18n export --config=./config/i18n-js.yml && esbuild app/javascript/*.* --minify=true --tree-shaking=true --bundle --sourcemap --outdir=app/assets/builds --public-path=assets",
    "build:css": "yarn build:css:compile && yarn build:css:prefix",
    "build:css:compile": "sass ./app/assets/stylesheets/entrypoints:./app/assets/builds --no-source-map --load-path=node_modules --quiet-deps --silence-deprecation import",
    "build:css:prefix": "postcss ./app/assets/builds/*.css --use=autoprefixer -d ./app/assets/builds/",
    "watch:css": "nodemon --watch ./app/assets/stylesheets/ --ext scss --exec \"yarn build:css\"",
    "typecheck": "bundle exec i18n export --config=./config/i18n-js.yml && tsc --project tsconfig.json"
  },
  "dependencies": {
    "@activeadmin/activeadmin": "^3.3.0",
    "@hotwired/stimulus": "^3.2.2",
    "@hotwired/turbo-rails": "^8.0.13",
    "@infinizhen/rpg-awesome-continued": "^1.0.6",
    "@notus.sh/cocooned": "^2.4.1",
    "@popperjs/core": "^2.11.8",
    "@rails/ujs": "^7.1.501",
    "@uppy/core": "^4.4.5",
    "@uppy/dashboard": "^4.3.4",
    "@uppy/form": "^4.1.1",
    "@uppy/locales": "^4.5.2",
    "@uppy/tus": "^4.2.2",
    "@uppy/utils": "^6.1.4",
    "@zxcvbn-ts/core": "^3.0.4",
    "@zxcvbn-ts/language-common": "^3.0.4",
    "@zxcvbn-ts/language-en": "^3.0.2",
    "altcha": "^2.0.3",
    "autoprefixer": "^10.4.21",
    "bootstrap": "^5.3.6",
    "bootstrap-icons": "^1.13.1",
    "bootswatch": "^5.3.6",
    "comlink": "^4.4.2",
    "esbuild": "^0.25.4",
    "i18n-js": "^4.5.1",
    "masonry-layout": "^4.2.2",
    "nodemon": "^3.1.10",
    "postcss": "^8.5.3",
    "postcss-cli": "^11.0.1",
    "sass-embedded": "^1.89.0",
    "three": "manyfold3d/three.js#ldraw-materials",
    "threejs-webworker-3mf-loader": "https://github.com/manyfold3d/threejs-webworker-3mf-loader",
    "tom-select": "^2.4.3"
  },
  "version": "0.1.0",
  "devDependencies": {
    "@babel/core": "^7",
    "@babel/eslint-parser": "^7.27.1",
    "@babel/preset-typescript": "^7.27.1",
    "@types/bootstrap": "^5.2.10",
    "@types/i18n-js": "^4.0.1",
    "@types/jquery": "^3.5.32",
    "@types/lodash": "^4.17.17",
    "@types/node": "^20.17.50",
    "@types/three": "^0.176.0",
    "@types/webpack-env": "^1.18.8",
    "@types/webxr": "^0.5.22",
    "@typescript-eslint/parser": "^8.32.1",
    "eslint": "^9.27.0",
    "husky": "^9.1.7",
    "ts-standard": "^12.0.2",
    "typescript": "^5.8.3"
  },
  "packageManager": "yarn@3.8.5",
  "browserslist": [
    "defaults"
  ],
  "volta": {
    "node": "22.13.0"
  }
}
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: [
    require('postcss-import'),
    require('postcss-flexbugs-fixes'),
    require('postcss-preset-env')({
      autoprefixer: {
        flexbox: 'no-2009'
      },
      stage: 3
    })
  ]
}
</file>

<file path="Procfile">
rails: bundle exec rails server -p $PORT -b [::]
default_worker: bundle exec sidekiq -C config/workers/default.yml
performance_worker: bundle exec sidekiq -C config/workers/performance.yml
</file>

<file path="Procfile.dev">
rails: SCOUT_DEV_TRACE=false bin/rails server -p $PORT -b [::]
default_worker: bundle exec sidekiq -C config/workers/default.yml
performance_worker: bundle exec sidekiq -C config/workers/performance.yml
js: yarn build --watch
css: yarn watch:css
typecheck: yarn typecheck --watch --preserveWatchOutput
</file>

<file path="Rakefile">
# Add your own tasks in files placed in lib/tasks ending in .rake,
# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.

require_relative "config/application"
Rails.application.load_tasks

unless ENV["RACK_ENV"] === "production"
  require "rubocop/rake_task"
  RuboCop::RakeTask.new
end

locales = [
  :cs,
  :de,
  :es,
  :fr,
  :ja,
  :nl,
  :pl
]

namespace :translation do
  namespace :clobber_and_sync do
    task all: locales
    locales.each do |locale|
      task locale => :environment do
        puts "-- Clobbering #{locale}.yml files"
        system "find config/locales -name #{locale}.yml | xargs rm -v"
        puts "-- Downloading from translation.io"
        system "rake translation:sync"
        system "find config/locales -name translation.*.yml | grep -v #{locale} | xargs rm"
        puts "-- Normalizing files"
        system "i18n-tasks normalize -p"
        puts "-- Done!"
      end
    end
  end
end

namespace :db do
  task chown: :environment do
    # Only do this for SQLite
    if ActiveRecord::Base.connection.is_a? ActiveRecord::ConnectionAdapters::SQLite3Adapter
      # Find all the database files
      files = Dir.glob(ActiveRecord::Base.connection.instance_variable_get(:@config)[:database] + "*")
      # Change ownership - this will fail safe if the env vars aren't set
      FileUtils.chown(ENV.fetch("PUID", nil), ENV.fetch("PGID", nil), files, verbose: true)
    end
  end
end

namespace :themes do
  task generate: :environment do
    raw = Net::HTTP.get(URI.parse("https://bootswatch.com/api/5.json"))
    json = JSON.parse(raw)
    json["themes"].each do |theme|
      name = theme["name"].downcase
      contents = <<~EOF
        @import "bootswatch/dist/#{name}/variables";
        @import '../../application';
        @import "bootswatch/dist/#{name}/bootswatch";
      EOF
      Rails.root.join("app/assets/stylesheets/entrypoints/themes/#{name}.scss").write(contents)
    end
  end
end
</file>

<file path="README.md">
# Manyfold

Manyfold is an open source, self-hosted web application for managing a collection of 3d models, particularly focused on 3d printing.

Visit [manyfold.app](https://manyfold.app/) for more details, installation instructions, and user and administration guides! Or, to have a go straight away, try our demo at [try.manyfold.app](https://try.manyfold.app).

## Help and Support

There are a few routes to get help:

* [GitHub issues](https://github.com/manyfold3d/manyfold/issues/new) is the best place to report bugs.
* [Live chat](https://matrix.to/#/#manyfold:matrix.org) to the "team" on Matrix (an open Discord/Slack-like chat system).
* Get in touch with our [social media](https://3dp.chat/@manyfold) presence in the Fediverse (Mastodon, etc).

And, if you want to contribute financially to development efforts...

[<img src="https://opencollective.com/manyfold/donate/button@2x.png?color=blue" alt="Donate with OpenCollective" width="20%" />](https://opencollective.com/manyfold/donate)

## Developer Documentation

Manyfold is open source software, and we encourage contributions! If you want to get involved, follow the guidance below, which explains how to get up and running. Then take a look at our [good first issue](https://github.com/manyfold3d/manyfold/labels/good%20first%20issue) tag for tasks that might suit newcomers to the codebase, or take a look at our [development roadmap](https://github.com/orgs/manyfold3d/projects/1).

### Application architecture

The application is built in [Ruby on Rails](https://rubyonrails.org), and tries to follow the best practices of that framework wherever possible. If you're not familiar with Rails, their [Getting Started](https://guides.rubyonrails.org/getting_started.html) guide is a good first introduction.

In general, Manyfold is a server-side app that uses plain old HTTP requests. We don't have any code using XHR, Websockets, or other more interactive comms yet (though could do in future).

The application consists of the application server itself, plus a background job runner using [Sidekiq](https://sidekiq.org/) for asynchronous tasks.

There are a few other major components that we build with:

* [Bootstrap 5](https://getbootstrap.com) provides the frontend CSS / JS
* [THREE.js](https://threejs.org/) (via TypeScript) is used for the client-side 3D rendering
* [Mittsu](https://github.com/danini-the-panini/mittsu), a Ruby port of THREE.js, is used for server-side 3D code
* [ActiveAdmin](https://activeadmin.info/) is used for now to provide an advanced database admin interface
* [PostgreSQL](https://www.postgresql.org/) is the production database, though sqlite3 is used in dev

### Running locally

To run the app yourself, you'll need the following installed:

* Ruby 3.4
* Bundler 2.6+
* Node.js 22.13+ (and run `corepack enable`)
* Yarn 3.8+
* Foreman or [another Procfile runner](https://github.com/ddollar/foreman#ports)
* [libarchive](https://github.com/chef/ffi-libarchive#installation) (for upload support)

To run the application once you've cloned this repo, you should be able to just run `bin/dev`; that should set up the database, perform migrations, install dependencies, and then make the application available at <http://127.0.0.1:5000>.

If you want to configure optional features, set the appropriate [environment variables](https://manyfold.app/sysadmin/configuration.html) in a file called `.env.development.local`. See `env.example` for a template file. Note that the required environment variables in the documentation are not needed in development mode, due to the use of SQLite instead of PostgreSQL.

To work with ActivityPub federation in development, your dev instance needs a public URL and an HTTPS certificate. The easiest way to do that is to use [ngrok](https://ngrok.com) to set up a tunnel from a public URL to your local development instance.

### Using the Devcontainer

To simplify the development environment setup, Manyfold includes a devcontainer configuration. This allows you to use Visual Studio Code's Remote - Containers extension to develop inside a container.

#### Prerequisites

- Docker installed on your machine
- Visual Studio Code with the Remote - Containers extension

#### Steps

1. Clone the repository:
    ```sh
    git clone https://github.com/manyfold3d/manyfold.git
    cd manyfold
    ```

2. Open the repository in Visual Studio Code:
    ```sh
    code .
    ```

3. When prompted by Visual Studio Code, click on "Reopen in Container". This will build the devcontainer and open the project inside it.

4. Once the container is running, you can use the integrated terminal in Visual Studio Code to run commands as usual.

### Coding standards

[![Codacy Quality](https://img.shields.io/codacy/grade/0d309b8b38b5431c9195e62cd7b707f3)](https://app.codacy.com/gh/manyfold3d/manyfold/dashboard)

We use [Rubocop](https://rubocop.org/) to monitor adherence to coding standards in Ruby code. We use [StandardRB](https://github.com/standardrb/standard) rules along with some other rulesets for specific libraries and frameworks.

You can run the linter with `bundle exec rubocop`.

We also have linters for ERB and Typescript files. You can run these with: `bundle exec erb_lint --lint-all` and `yarn run lint:ts` respectively.

Code linting is automatically performed by our GitHub Actions test runners, but if you set up [Husky](https://typicode.github.io/husky/get-started.html), it will also execute as a pre-commit hook.

### Testing

![GitHub Actions Workflow Status](https://img.shields.io/github/actions/workflow/status/manyfold3d/manyfold/push.yml)
[![Codacy Coverage](https://img.shields.io/codacy/coverage/0d309b8b38b5431c9195e62cd7b707f3)](https://app.codacy.com/gh/manyfold3d/manyfold/dashboard)

We want to produce well-tested code; it's not 100%, but we aim to increase test coverage with each new bit of code.

You can run the test suite as a one off with the command `bundle exec rake`, or you can start a continuous test runner with `bundle exec guard` that will automatically run tests as you code.

Tests are run automatically when pushed to our repository using GitHub Actions.

Generation of screenshots for the documentation is made with system specs and is not run by default.
To generate screenshots, set `DOC_SCREENSHOT=true`:

```sh
# All specs and documentation
DOC_SCREENSHOT=true bundle exec rspec
# Only documentation specs
DOC_SCREENSHOT=true bundle exec rspec -t @documentation
```


### Internationalisation & Translation

Manyfold uses [Rails' I18n framework](https://guides.rubyonrails.org/i18n.html) to handle all text content.

You can check the validity of locale files with `bundle exec i18n-tasks health`. This is also run as part of our test pipeline, so will be enforced on new code.

Translations are also available in client-side Javascript; they are built from the Rails locale files as part of the asset pipeline, using [i18n-js](https://github.com/fnando/i18n-js). If you need to run an export manually, do `bundle exec i18n export -c config/i18n-js.yml`.

We are using [Translation.io](https://translation.io/) to manage translations into other languages. If you want to help out on that, sign up on the site and send us username on a GitHub issue for the language you're interested in.

To synchronise with Translation.io, run `rake translation:clobber_and_sync:{locale}` where `{locale}` is a supported code, such as `de`.

### Building Docker images

[![Built with Depot](https://depot.dev/badges/built-with-depot.svg)](https://depot.dev?utm_source=manyfold)

The application is distributed as a multi-platform docker image (built by [Depot](https://depot.dev/)); see our [Docker Compose instructions](https://manyfold.app/get-started/docker) for full details.

If you want to build your own version of the Docker image, you can do so by running ` docker build -f docker/default.dockerfile .` in the root directory of this repository.

## Funding

This project is funded through [NGI0 Entrust](https://nlnet.nl/entrust), a fund established by [NLnet](https://nlnet.nl) with financial support from the European Commission's [Next Generation Internet](https://ngi.eu) program. Learn more at the [NLnet project page](https://nlnet.nl/project/Personal-3D-archive).

[<img src="https://nlnet.nl/logo/banner.png" alt="NLnet foundation logo" width="20%" />](https://nlnet.nl)
[<img src="https://nlnet.nl/image/logos/NGI0_tag.svg" alt="NGI Zero Logo" width="20%" />](https://nlnet.nl/entrust)

This project is also funded by you! Make a donation to support long-term development at OpenCollective:

[<img src="https://opencollective.com/manyfold/donate/button@2x.png?color=blue" alt="Donate with OpenCollective" width="20%" />](https://opencollective.com/manyfold/donate)

## Popularity

Down the bottom because they're cool, but not important, here are some stats!

[![Star History Chart](https://api.star-history.com/svg?repos=manyfold3d/manyfold&type=Date)](https://star-history.com/#manyfold3d/manyfold&Date)
</file>

<file path="SECURITY.md">
# Security Policy

## Supported Versions

At least until we reach v1.0, only the latest release version is supported with security updates.

We do apply security patches whenever they become available, so make sure to track `latest` and check for updates regularly.

## Reporting a Vulnerability

If you find a security vulnerability in Manyfold, please fill in the [vulnerability reporting form](https://github.com/manyfold3d/manyfold/security/advisories/new), or email [security@manyfold.app](mailto:security@manyfold.app)
to let us know confidentially.

We will publicise and credit all security advisories and issues when safe to do so.
</file>

<file path="sweep.yaml">
# Sweep AI turns bugs & feature requests into code changes (https://sweep.dev)
# For details on our config file, check out our docs at https://docs.sweep.dev/usage/config

# This setting contains a list of rules that Sweep will check for. If any of these rules are broken in a new commit, Sweep will create an pull request to fix the broken rule.
rules:
['All new business logic should have corresponding unit tests.', 'Refactor large functions to be more modular.', 'Add docstrings to all functions and file headers.']

# This is the branch that Sweep will develop from and make pull requests to. Most people use 'main' or 'master' but some users also use 'dev' or 'staging'.
branch: 'main'

# By default Sweep will read the logs and outputs from your existing Github Actions. To disable this, set this to false.
gha_enabled: True

# This is the description of your project. It will be used by sweep when creating PRs. You can tell Sweep what's unique about your project, what frameworks you use, or anything else you want.
#
# Example:
#
# description: sweepai/sweep is a python project. The main api endpoints are in sweepai/api.py. Write code that adheres to PEP8.
description: ''

# This sets whether to create pull requests as drafts. If this is set to True, then all pull requests will be created as drafts and GitHub Actions will not be triggered.
draft: False

# This is a list of directories that Sweep will not be able to edit.
blocked_dirs: []

# This is a list of documentation links that Sweep will use to help it understand your code. You can add links to documentation for any packages you use here.
#
# Example:
#
# docs:
#   - PyGitHub: ["https://pygithub.readthedocs.io/en/latest/", "We use pygithub to interact with the GitHub API"]
docs: []

# Sandbox executes commands in a sandboxed environment to validate code changes after every edit to guarantee pristine code. For more details, see the [Sandbox](./sandbox) page.
sandbox:
  install:
    - trunk init
  check:
    - trunk fmt {file_path} || return 0
    - trunk check --fix --print-failures {file_path}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "declaration": false,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "lib": [
      "es6",
      "dom",
      "dom.iterable"
    ],
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "baseUrl": ".",
    "paths": {
      "*": [
        "node_modules/*",
        "app/javascript/*"
      ]
    },
    "sourceMap": true,
    "strictNullChecks": true,
    "target": "es6",
    "noEmit": true,
    "types": [
      "./app/javascript/src/window_extensions",
      "node",
      "webpack-env",
      "three",
      "jquery",
      "tom-select",
      "i18n-js",
      "bootstrap"
    ],
    "resolveJsonModule": true,
    "allowSyntheticDefaultImports": true
  },
  "exclude": [
    "**/*.spec.ts",
    "node_modules",
    "vendor",
    "public"
  ],
  "compileOnSave": false
}
</file>

</files>

